
bitirme_projesi_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ce98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004378  0801d028  0801d028  0002d028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080213a0  080213a0  00040294  2**0
                  CONTENTS
  4 .ARM          00000008  080213a0  080213a0  000313a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080213a8  080213a8  00040294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080213a8  080213a8  000313a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080213ac  080213ac  000313ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  080213b0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b274  20000298  08021644  00040298  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b50c  08021644  0004b50c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044366  00000000  00000000  000402c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e26  00000000  00000000  0008462a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025c8  00000000  00000000  0008c450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002418  00000000  00000000  0008ea18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000321c1  00000000  00000000  00090e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002cd42  00000000  00000000  000c2ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f535d  00000000  00000000  000efd33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e5090  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae44  00000000  00000000  001e510c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d010 	.word	0x0801d010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	0801d010 	.word	0x0801d010

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	829a      	strh	r2, [r3, #20]
	uint16_t Callib_Start = 0xAA;
 8000f9e:	23aa      	movs	r3, #170	; 0xaa
 8000fa0:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fa2:	8afa      	ldrh	r2, [r7, #22]
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2316      	movs	r3, #22
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	463b      	mov	r3, r7
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	21ee      	movs	r1, #238	; 0xee
 8000fb6:	4836      	ldr	r0, [pc, #216]	; (8001090 <read_calliberation_data+0x108>)
 8000fb8:	f005 fd50 	bl	8006a5c <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fbc:	783b      	ldrb	r3, [r7, #0]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	787b      	ldrb	r3, [r7, #1]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <read_calliberation_data+0x10c>)
 8000fcc:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fce:	78bb      	ldrb	r3, [r7, #2]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <read_calliberation_data+0x110>)
 8000fde:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fe0:	793b      	ldrb	r3, [r7, #4]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	797b      	ldrb	r3, [r7, #5]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <read_calliberation_data+0x114>)
 8000ff0:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <read_calliberation_data+0x118>)
 8001004:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001006:	7a3b      	ldrb	r3, [r7, #8]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	7a7b      	ldrb	r3, [r7, #9]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <read_calliberation_data+0x11c>)
 8001018:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 800101a:	7abb      	ldrb	r3, [r7, #10]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <read_calliberation_data+0x120>)
 800102c:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 800102e:	7b3b      	ldrb	r3, [r7, #12]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21a      	sxth	r2, r3
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <read_calliberation_data+0x124>)
 800103e:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <read_calliberation_data+0x128>)
 8001050:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001052:	7c3b      	ldrb	r3, [r7, #16]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7c7b      	ldrb	r3, [r7, #17]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <read_calliberation_data+0x12c>)
 8001062:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001064:	7cbb      	ldrb	r3, [r7, #18]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	7cfb      	ldrb	r3, [r7, #19]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <read_calliberation_data+0x130>)
 8001074:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001076:	7d3b      	ldrb	r3, [r7, #20]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	7d7b      	ldrb	r3, [r7, #21]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <read_calliberation_data+0x134>)
 8001086:	801a      	strh	r2, [r3, #0]

}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20004930 	.word	0x20004930
 8001094:	200002b4 	.word	0x200002b4
 8001098:	200002b6 	.word	0x200002b6
 800109c:	200002b8 	.word	0x200002b8
 80010a0:	200002ba 	.word	0x200002ba
 80010a4:	200002bc 	.word	0x200002bc
 80010a8:	200002be 	.word	0x200002be
 80010ac:	200002c0 	.word	0x200002c0
 80010b0:	200002c2 	.word	0x200002c2
 80010b4:	200002c4 	.word	0x200002c4
 80010b8:	200002c6 	.word	0x200002c6
 80010bc:	200002c8 	.word	0x200002c8

080010c0 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80010c6:	232e      	movs	r3, #46	; 0x2e
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010ca:	2300      	movs	r3, #0
 80010cc:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	22f4      	movs	r2, #244	; 0xf4
 80010e0:	21ee      	movs	r1, #238	; 0xee
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <Get_UTemp+0x60>)
 80010e4:	f005 fbc0 	bl	8006868 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 80010e8:	2005      	movs	r0, #5
 80010ea:	f003 f9b1 	bl	8004450 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2302      	movs	r3, #2
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	22f6      	movs	r2, #246	; 0xf6
 8001100:	21ee      	movs	r1, #238	; 0xee
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <Get_UTemp+0x60>)
 8001104:	f005 fcaa 	bl	8006a5c <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	b29b      	uxth	r3, r3
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b29a      	uxth	r2, r3
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b29b      	uxth	r3, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20004930 	.word	0x20004930

08001124 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001128:	f7ff ffca 	bl	80010c0 <Get_UTemp>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b3e      	ldr	r3, [pc, #248]	; (800122c <BMP180_GetTemp+0x108>)
 8001132:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <BMP180_GetTemp+0x108>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <BMP180_GetTemp+0x10c>)
 800113a:	8812      	ldrh	r2, [r2, #0]
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9f0 	bl	8000524 <__aeabi_i2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <BMP180_GetTemp+0x110>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f9e9 	bl	8000524 <__aeabi_i2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <BMP180_GetTemp+0x114>)
 8001158:	f7ff fb78 	bl	800084c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff fa48 	bl	80005f8 <__aeabi_dmul>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	4618      	mov	r0, r3
 800116e:	4621      	mov	r1, r4
 8001170:	f7ff fcf2 	bl	8000b58 <__aeabi_d2iz>
 8001174:	4602      	mov	r2, r0
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <BMP180_GetTemp+0x118>)
 8001178:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <BMP180_GetTemp+0x11c>)
 800117c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9cf 	bl	8000524 <__aeabi_i2d>
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <BMP180_GetTemp+0x120>)
 800118c:	f7ff fa34 	bl	80005f8 <__aeabi_dmul>
 8001190:	4603      	mov	r3, r0
 8001192:	460c      	mov	r4, r1
 8001194:	4625      	mov	r5, r4
 8001196:	461c      	mov	r4, r3
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <BMP180_GetTemp+0x124>)
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	461a      	mov	r2, r3
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <BMP180_GetTemp+0x118>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9bc 	bl	8000524 <__aeabi_i2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4620      	mov	r0, r4
 80011b2:	4629      	mov	r1, r5
 80011b4:	f7ff fb4a 	bl	800084c <__aeabi_ddiv>
 80011b8:	4603      	mov	r3, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	4618      	mov	r0, r3
 80011be:	4621      	mov	r1, r4
 80011c0:	f7ff fcca 	bl	8000b58 <__aeabi_d2iz>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <BMP180_GetTemp+0x128>)
 80011c8:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <BMP180_GetTemp+0x118>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <BMP180_GetTemp+0x128>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <BMP180_GetTemp+0x12c>)
 80011d6:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <BMP180_GetTemp+0x12c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3308      	adds	r3, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9a0 	bl	8000524 <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <BMP180_GetTemp+0x130>)
 80011ea:	f7ff fb2f 	bl	800084c <__aeabi_ddiv>
 80011ee:	4603      	mov	r3, r0
 80011f0:	460c      	mov	r4, r1
 80011f2:	4618      	mov	r0, r3
 80011f4:	4621      	mov	r1, r4
 80011f6:	f7ff fcaf 	bl	8000b58 <__aeabi_d2iz>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <BMP180_GetTemp+0x134>)
 80011fe:	601a      	str	r2, [r3, #0]
	return Temp/10.0;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <BMP180_GetTemp+0x134>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f98d 	bl	8000524 <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <BMP180_GetTemp+0x138>)
 8001210:	f7ff fb1c 	bl	800084c <__aeabi_ddiv>
 8001214:	4603      	mov	r3, r0
 8001216:	460c      	mov	r4, r1
 8001218:	4618      	mov	r0, r3
 800121a:	4621      	mov	r1, r4
 800121c:	f7ff fce4 	bl	8000be8 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	ee07 3a90 	vmov	s15, r3
}
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	200002cc 	.word	0x200002cc
 8001230:	200002be 	.word	0x200002be
 8001234:	200002bc 	.word	0x200002bc
 8001238:	40e00000 	.word	0x40e00000
 800123c:	200002d4 	.word	0x200002d4
 8001240:	200002c6 	.word	0x200002c6
 8001244:	40a00000 	.word	0x40a00000
 8001248:	200002c8 	.word	0x200002c8
 800124c:	200002d8 	.word	0x200002d8
 8001250:	200002e4 	.word	0x200002e4
 8001254:	40300000 	.word	0x40300000
 8001258:	200002f8 	.word	0x200002f8
 800125c:	40240000 	.word	0x40240000

08001260 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3334      	adds	r3, #52	; 0x34
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2100      	movs	r1, #0
 800127c:	460a      	mov	r2, r1
 800127e:	801a      	strh	r2, [r3, #0]
 8001280:	460a      	mov	r2, r1
 8001282:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2301      	movs	r3, #1
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	f107 030f 	add.w	r3, r7, #15
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	22f4      	movs	r2, #244	; 0xf4
 8001298:	21ee      	movs	r1, #238	; 0xee
 800129a:	481f      	ldr	r0, [pc, #124]	; (8001318 <Get_UPress+0xb8>)
 800129c:	f005 fae4 	bl	8006868 <HAL_I2C_Mem_Write>
	switch (oss)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d81a      	bhi.n	80012dc <Get_UPress+0x7c>
 80012a6:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <Get_UPress+0x4c>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012c5 	.word	0x080012c5
 80012b4:	080012cd 	.word	0x080012cd
 80012b8:	080012d5 	.word	0x080012d5
	{
		case (0):
			HAL_Delay (5);
 80012bc:	2005      	movs	r0, #5
 80012be:	f003 f8c7 	bl	8004450 <HAL_Delay>
			break;
 80012c2:	e00b      	b.n	80012dc <Get_UPress+0x7c>
		case (1):
			HAL_Delay (8);
 80012c4:	2008      	movs	r0, #8
 80012c6:	f003 f8c3 	bl	8004450 <HAL_Delay>
			break;
 80012ca:	e007      	b.n	80012dc <Get_UPress+0x7c>
		case (2):
			HAL_Delay (14);
 80012cc:	200e      	movs	r0, #14
 80012ce:	f003 f8bf 	bl	8004450 <HAL_Delay>
			break;
 80012d2:	e003      	b.n	80012dc <Get_UPress+0x7c>
		case (3):
			HAL_Delay (26);
 80012d4:	201a      	movs	r0, #26
 80012d6:	f003 f8bb 	bl	8004450 <HAL_Delay>
			break;
 80012da:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 80012dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2303      	movs	r3, #3
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	22f6      	movs	r2, #246	; 0xf6
 80012f0:	21ee      	movs	r1, #238	; 0xee
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <Get_UPress+0xb8>)
 80012f4:	f005 fbb2 	bl	8006a5c <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80012f8:	7b3b      	ldrb	r3, [r7, #12]
 80012fa:	041a      	lsls	r2, r3, #16
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4413      	add	r3, r2
 8001302:	7bba      	ldrb	r2, [r7, #14]
 8001304:	441a      	add	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f1c3 0308 	rsb	r3, r3, #8
 800130c:	fa42 f303 	asr.w	r3, r2, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20004930 	.word	0x20004930

0800131c <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff9b 	bl	8001260 <Get_UPress>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4ba8      	ldr	r3, [pc, #672]	; (80015d0 <BMP180_GetPress+0x2b4>)
 8001330:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001332:	4ba8      	ldr	r3, [pc, #672]	; (80015d4 <BMP180_GetPress+0x2b8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4aa8      	ldr	r2, [pc, #672]	; (80015d8 <BMP180_GetPress+0x2bc>)
 8001338:	8812      	ldrh	r2, [r2, #0]
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8f1 	bl	8000524 <__aeabi_i2d>
 8001342:	4604      	mov	r4, r0
 8001344:	460d      	mov	r5, r1
 8001346:	4ba5      	ldr	r3, [pc, #660]	; (80015dc <BMP180_GetPress+0x2c0>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8ea 	bl	8000524 <__aeabi_i2d>
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4ba2      	ldr	r3, [pc, #648]	; (80015e0 <BMP180_GetPress+0x2c4>)
 8001356:	f7ff fa79 	bl	800084c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4620      	mov	r0, r4
 8001360:	4629      	mov	r1, r5
 8001362:	f7ff f949 	bl	80005f8 <__aeabi_dmul>
 8001366:	4603      	mov	r3, r0
 8001368:	460c      	mov	r4, r1
 800136a:	4618      	mov	r0, r3
 800136c:	4621      	mov	r1, r4
 800136e:	f7ff fbf3 	bl	8000b58 <__aeabi_d2iz>
 8001372:	4602      	mov	r2, r0
 8001374:	4b9b      	ldr	r3, [pc, #620]	; (80015e4 <BMP180_GetPress+0x2c8>)
 8001376:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001378:	4b9b      	ldr	r3, [pc, #620]	; (80015e8 <BMP180_GetPress+0x2cc>)
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8d0 	bl	8000524 <__aeabi_i2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b98      	ldr	r3, [pc, #608]	; (80015ec <BMP180_GetPress+0x2d0>)
 800138a:	f7ff f935 	bl	80005f8 <__aeabi_dmul>
 800138e:	4603      	mov	r3, r0
 8001390:	460c      	mov	r4, r1
 8001392:	4625      	mov	r5, r4
 8001394:	461c      	mov	r4, r3
 8001396:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <BMP180_GetPress+0x2d4>)
 8001398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139c:	461a      	mov	r2, r3
 800139e:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <BMP180_GetPress+0x2c8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8bd 	bl	8000524 <__aeabi_i2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4620      	mov	r0, r4
 80013b0:	4629      	mov	r1, r5
 80013b2:	f7ff fa4b 	bl	800084c <__aeabi_ddiv>
 80013b6:	4603      	mov	r3, r0
 80013b8:	460c      	mov	r4, r1
 80013ba:	4618      	mov	r0, r3
 80013bc:	4621      	mov	r1, r4
 80013be:	f7ff fbcb 	bl	8000b58 <__aeabi_d2iz>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b8b      	ldr	r3, [pc, #556]	; (80015f4 <BMP180_GetPress+0x2d8>)
 80013c6:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 80013c8:	4b86      	ldr	r3, [pc, #536]	; (80015e4 <BMP180_GetPress+0x2c8>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <BMP180_GetPress+0x2d8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a89      	ldr	r2, [pc, #548]	; (80015f8 <BMP180_GetPress+0x2dc>)
 80013d4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <BMP180_GetPress+0x2dc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013de:	4a87      	ldr	r2, [pc, #540]	; (80015fc <BMP180_GetPress+0x2e0>)
 80013e0:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80013e2:	4b87      	ldr	r3, [pc, #540]	; (8001600 <BMP180_GetPress+0x2e4>)
 80013e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f89b 	bl	8000524 <__aeabi_i2d>
 80013ee:	4604      	mov	r4, r0
 80013f0:	460d      	mov	r5, r1
 80013f2:	4b82      	ldr	r3, [pc, #520]	; (80015fc <BMP180_GetPress+0x2e0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a81      	ldr	r2, [pc, #516]	; (80015fc <BMP180_GetPress+0x2e0>)
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f890 	bl	8000524 <__aeabi_i2d>
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <BMP180_GetPress+0x2e8>)
 800140a:	f7ff fa1f 	bl	800084c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7ff f8ef 	bl	80005f8 <__aeabi_dmul>
 800141a:	4603      	mov	r3, r0
 800141c:	460c      	mov	r4, r1
 800141e:	4618      	mov	r0, r3
 8001420:	4621      	mov	r1, r4
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b71      	ldr	r3, [pc, #452]	; (80015ec <BMP180_GetPress+0x2d0>)
 8001428:	f7ff fa10 	bl	800084c <__aeabi_ddiv>
 800142c:	4603      	mov	r3, r0
 800142e:	460c      	mov	r4, r1
 8001430:	4618      	mov	r0, r3
 8001432:	4621      	mov	r1, r4
 8001434:	f7ff fb90 	bl	8000b58 <__aeabi_d2iz>
 8001438:	4602      	mov	r2, r0
 800143a:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <BMP180_GetPress+0x2c8>)
 800143c:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(pow(2,11));
 800143e:	4b72      	ldr	r3, [pc, #456]	; (8001608 <BMP180_GetPress+0x2ec>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	461a      	mov	r2, r3
 8001446:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <BMP180_GetPress+0x2e0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fb03 f302 	mul.w	r3, r3, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f868 	bl	8000524 <__aeabi_i2d>
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b64      	ldr	r3, [pc, #400]	; (80015ec <BMP180_GetPress+0x2d0>)
 800145a:	f7ff f9f7 	bl	800084c <__aeabi_ddiv>
 800145e:	4603      	mov	r3, r0
 8001460:	460c      	mov	r4, r1
 8001462:	4618      	mov	r0, r3
 8001464:	4621      	mov	r1, r4
 8001466:	f7ff fb77 	bl	8000b58 <__aeabi_d2iz>
 800146a:	4602      	mov	r2, r0
 800146c:	4b61      	ldr	r3, [pc, #388]	; (80015f4 <BMP180_GetPress+0x2d8>)
 800146e:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8001470:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <BMP180_GetPress+0x2c8>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <BMP180_GetPress+0x2d8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4413      	add	r3, r2
 800147a:	4a64      	ldr	r2, [pc, #400]	; (800160c <BMP180_GetPress+0x2f0>)
 800147c:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 800147e:	4b64      	ldr	r3, [pc, #400]	; (8001610 <BMP180_GetPress+0x2f4>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	009a      	lsls	r2, r3, #2
 8001486:	4b61      	ldr	r3, [pc, #388]	; (800160c <BMP180_GetPress+0x2f0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	441a      	add	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	3302      	adds	r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	da00      	bge.n	800149a <BMP180_GetPress+0x17e>
 8001498:	3303      	adds	r3, #3
 800149a:	109b      	asrs	r3, r3, #2
 800149c:	461a      	mov	r2, r3
 800149e:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <BMP180_GetPress+0x2f8>)
 80014a0:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <BMP180_GetPress+0x2fc>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b54      	ldr	r3, [pc, #336]	; (80015fc <BMP180_GetPress+0x2e0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fb03 f302 	mul.w	r3, r3, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f836 	bl	8000524 <__aeabi_i2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b57      	ldr	r3, [pc, #348]	; (800161c <BMP180_GetPress+0x300>)
 80014be:	f7ff f9c5 	bl	800084c <__aeabi_ddiv>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4618      	mov	r0, r3
 80014c8:	4621      	mov	r1, r4
 80014ca:	f7ff fb45 	bl	8000b58 <__aeabi_d2iz>
 80014ce:	4602      	mov	r2, r0
 80014d0:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <BMP180_GetPress+0x2c8>)
 80014d2:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <BMP180_GetPress+0x304>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f822 	bl	8000524 <__aeabi_i2d>
 80014e0:	4604      	mov	r4, r0
 80014e2:	460d      	mov	r5, r1
 80014e4:	4b45      	ldr	r3, [pc, #276]	; (80015fc <BMP180_GetPress+0x2e0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a44      	ldr	r2, [pc, #272]	; (80015fc <BMP180_GetPress+0x2e0>)
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f817 	bl	8000524 <__aeabi_i2d>
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b42      	ldr	r3, [pc, #264]	; (8001604 <BMP180_GetPress+0x2e8>)
 80014fc:	f7ff f9a6 	bl	800084c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4620      	mov	r0, r4
 8001506:	4629      	mov	r1, r5
 8001508:	f7ff f876 	bl	80005f8 <__aeabi_dmul>
 800150c:	4603      	mov	r3, r0
 800150e:	460c      	mov	r4, r1
 8001510:	4618      	mov	r0, r3
 8001512:	4621      	mov	r1, r4
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <BMP180_GetPress+0x308>)
 800151a:	f7ff f997 	bl	800084c <__aeabi_ddiv>
 800151e:	4603      	mov	r3, r0
 8001520:	460c      	mov	r4, r1
 8001522:	4618      	mov	r0, r3
 8001524:	4621      	mov	r1, r4
 8001526:	f7ff fb17 	bl	8000b58 <__aeabi_d2iz>
 800152a:	4602      	mov	r2, r0
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <BMP180_GetPress+0x2d8>)
 800152e:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <BMP180_GetPress+0x2c8>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <BMP180_GetPress+0x2d8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4413      	add	r3, r2
 800153a:	3302      	adds	r3, #2
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff1 	bl	8000524 <__aeabi_i2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <BMP180_GetPress+0x30c>)
 8001548:	f7ff f980 	bl	800084c <__aeabi_ddiv>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	f7ff fb00 	bl	8000b58 <__aeabi_d2iz>
 8001558:	4602      	mov	r2, r0
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <BMP180_GetPress+0x2f0>)
 800155c:	601a      	str	r2, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <BMP180_GetPress+0x310>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <BMP180_GetPress+0x2f0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800156c:	fb03 f302 	mul.w	r3, r3, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ffc7 	bl	8000504 <__aeabi_ui2d>
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <BMP180_GetPress+0x2c4>)
 800157c:	f7ff f966 	bl	800084c <__aeabi_ddiv>
 8001580:	4603      	mov	r3, r0
 8001582:	460c      	mov	r4, r1
 8001584:	4618      	mov	r0, r3
 8001586:	4621      	mov	r1, r4
 8001588:	f7ff fb0e 	bl	8000ba8 <__aeabi_d2uiz>
 800158c:	4602      	mov	r2, r0
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <BMP180_GetPress+0x314>)
 8001590:	601a      	str	r2, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <BMP180_GetPress+0x2b4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <BMP180_GetPress+0x2f8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f24c 3150 	movw	r1, #50000	; 0xc350
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	fa41 f202 	asr.w	r2, r1, r2
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <BMP180_GetPress+0x318>)
 80015ae:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <BMP180_GetPress+0x318>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db41      	blt.n	800163c <BMP180_GetPress+0x320>
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <BMP180_GetPress+0x318>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	005a      	lsls	r2, r3, #1
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <BMP180_GetPress+0x314>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <BMP180_GetPress+0x31c>)
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e040      	b.n	8001650 <BMP180_GetPress+0x334>
 80015ce:	bf00      	nop
 80015d0:	200002d0 	.word	0x200002d0
 80015d4:	200002cc 	.word	0x200002cc
 80015d8:	200002be 	.word	0x200002be
 80015dc:	200002bc 	.word	0x200002bc
 80015e0:	40e00000 	.word	0x40e00000
 80015e4:	200002d4 	.word	0x200002d4
 80015e8:	200002c6 	.word	0x200002c6
 80015ec:	40a00000 	.word	0x40a00000
 80015f0:	200002c8 	.word	0x200002c8
 80015f4:	200002d8 	.word	0x200002d8
 80015f8:	200002e4 	.word	0x200002e4
 80015fc:	200002ec 	.word	0x200002ec
 8001600:	200002c2 	.word	0x200002c2
 8001604:	40b00000 	.word	0x40b00000
 8001608:	200002b6 	.word	0x200002b6
 800160c:	200002dc 	.word	0x200002dc
 8001610:	200002b4 	.word	0x200002b4
 8001614:	200002e0 	.word	0x200002e0
 8001618:	200002b8 	.word	0x200002b8
 800161c:	40c00000 	.word	0x40c00000
 8001620:	200002c0 	.word	0x200002c0
 8001624:	40f00000 	.word	0x40f00000
 8001628:	40100000 	.word	0x40100000
 800162c:	200002ba 	.word	0x200002ba
 8001630:	200002e8 	.word	0x200002e8
 8001634:	200002f0 	.word	0x200002f0
 8001638:	200002f4 	.word	0x200002f4
	else Press = (B7/B4)*2;
 800163c:	4b46      	ldr	r3, [pc, #280]	; (8001758 <BMP180_GetPress+0x43c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <BMP180_GetPress+0x440>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	461a      	mov	r2, r3
 800164c:	4b44      	ldr	r3, [pc, #272]	; (8001760 <BMP180_GetPress+0x444>)
 800164e:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <BMP180_GetPress+0x444>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff65 	bl	8000524 <__aeabi_i2d>
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <BMP180_GetPress+0x448>)
 8001660:	f7ff f8f4 	bl	800084c <__aeabi_ddiv>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4625      	mov	r5, r4
 800166a:	461c      	mov	r4, r3
 800166c:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <BMP180_GetPress+0x444>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff57 	bl	8000524 <__aeabi_i2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <BMP180_GetPress+0x448>)
 800167c:	f7ff f8e6 	bl	800084c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe ffb6 	bl	80005f8 <__aeabi_dmul>
 800168c:	4603      	mov	r3, r0
 800168e:	460c      	mov	r4, r1
 8001690:	4618      	mov	r0, r3
 8001692:	4621      	mov	r1, r4
 8001694:	f7ff fa60 	bl	8000b58 <__aeabi_d2iz>
 8001698:	4602      	mov	r2, r0
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <BMP180_GetPress+0x44c>)
 800169c:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(pow(2,16));
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <BMP180_GetPress+0x44c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f640 32de 	movw	r2, #3038	; 0xbde
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff3a 	bl	8000524 <__aeabi_i2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <BMP180_GetPress+0x450>)
 80016b6:	f7ff f8c9 	bl	800084c <__aeabi_ddiv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	4618      	mov	r0, r3
 80016c0:	4621      	mov	r1, r4
 80016c2:	f7ff fa49 	bl	8000b58 <__aeabi_d2iz>
 80016c6:	4602      	mov	r2, r0
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <BMP180_GetPress+0x44c>)
 80016ca:	601a      	str	r2, [r3, #0]
	X2 = (-7357*Press)/(pow(2,16));
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <BMP180_GetPress+0x444>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <BMP180_GetPress+0x454>)
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff24 	bl	8000524 <__aeabi_i2d>
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <BMP180_GetPress+0x450>)
 80016e2:	f7ff f8b3 	bl	800084c <__aeabi_ddiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	f7ff fa33 	bl	8000b58 <__aeabi_d2iz>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <BMP180_GetPress+0x458>)
 80016f6:	601a      	str	r2, [r3, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <BMP180_GetPress+0x444>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff11 	bl	8000524 <__aeabi_i2d>
 8001702:	4604      	mov	r4, r0
 8001704:	460d      	mov	r5, r1
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <BMP180_GetPress+0x44c>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <BMP180_GetPress+0x458>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff05 	bl	8000524 <__aeabi_i2d>
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <BMP180_GetPress+0x45c>)
 8001720:	f7ff f894 	bl	800084c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7fe fdae 	bl	800028c <__adddf3>
 8001730:	4603      	mov	r3, r0
 8001732:	460c      	mov	r4, r1
 8001734:	4618      	mov	r0, r3
 8001736:	4621      	mov	r1, r4
 8001738:	f7ff fa0e 	bl	8000b58 <__aeabi_d2iz>
 800173c:	4602      	mov	r2, r0
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <BMP180_GetPress+0x444>)
 8001740:	601a      	str	r2, [r3, #0]

	return Press;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <BMP180_GetPress+0x444>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800174e:	eeb0 0a67 	vmov.f32	s0, s15
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	200002f0 	.word	0x200002f0
 800175c:	200002e8 	.word	0x200002e8
 8001760:	200002f4 	.word	0x200002f4
 8001764:	40700000 	.word	0x40700000
 8001768:	200002d4 	.word	0x200002d4
 800176c:	40f00000 	.word	0x40f00000
 8001770:	ffffe343 	.word	0xffffe343
 8001774:	200002d8 	.word	0x200002d8
 8001778:	40300000 	.word	0x40300000
 800177c:	00000000 	.word	0x00000000

08001780 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fdc7 	bl	800131c <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <BMP180_GetAlt+0x90>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001814 <BMP180_GetAlt+0x94>
 800179e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017a2:	ee16 0a90 	vmov	r0, s13
 80017a6:	f7fe fecf 	bl	8000548 <__aeabi_f2d>
 80017aa:	4603      	mov	r3, r0
 80017ac:	460c      	mov	r4, r1
 80017ae:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001800 <BMP180_GetAlt+0x80>
 80017b2:	ec44 3b10 	vmov	d0, r3, r4
 80017b6:	f01a fa9f 	bl	801bcf8 <pow>
 80017ba:	ec54 3b10 	vmov	r3, r4, d0
 80017be:	461a      	mov	r2, r3
 80017c0:	4623      	mov	r3, r4
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	4914      	ldr	r1, [pc, #80]	; (8001818 <BMP180_GetAlt+0x98>)
 80017c8:	f7fe fd5e 	bl	8000288 <__aeabi_dsub>
 80017cc:	4603      	mov	r3, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	4618      	mov	r0, r3
 80017d2:	4621      	mov	r1, r4
 80017d4:	a30c      	add	r3, pc, #48	; (adr r3, 8001808 <BMP180_GetAlt+0x88>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff0d 	bl	80005f8 <__aeabi_dmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	4618      	mov	r0, r3
 80017e4:	4621      	mov	r1, r4
 80017e6:	f7ff f9ff 	bl	8000be8 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	ee07 3a90 	vmov	s15, r3
}
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	ccd745e4 	.word	0xccd745e4
 8001804:	3fc85b95 	.word	0x3fc85b95
 8001808:	00000000 	.word	0x00000000
 800180c:	40e5a540 	.word	0x40e5a540
 8001810:	200002f4 	.word	0x200002f4
 8001814:	47c5e680 	.word	0x47c5e680
 8001818:	3ff00000 	.word	0x3ff00000

0800181c <BMP180_Start>:

void BMP180_Start (void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001820:	f7ff fbb2 	bl	8000f88 <read_calliberation_data>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <vApplicationGetIdleTaskMemory+0x2c>)
 8001838:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	4a06      	ldr	r2, [pc, #24]	; (8001858 <vApplicationGetIdleTaskMemory+0x30>)
 800183e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200002fc 	.word	0x200002fc
 8001858:	20000350 	.word	0x20000350

0800185c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <DWT_Delay_us+0x3c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800186a:	f006 fc57 	bl	800811c <HAL_RCC_GetHCLKFreq>
 800186e:	4602      	mov	r2, r0
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <DWT_Delay_us+0x40>)
 8001872:	fba3 2302 	umull	r2, r3, r3, r2
 8001876:	0c9b      	lsrs	r3, r3, #18
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001880:	bf00      	nop
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <DWT_Delay_us+0x3c>)
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad2      	subs	r2, r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3f8      	bcc.n	8001882 <DWT_Delay_us+0x26>
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	e0001000 	.word	0xe0001000
 800189c:	431bde83 	.word	0x431bde83

080018a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b0ce      	sub	sp, #312	; 0x138
 80018a4:	af00      	add	r7, sp, #0
int main(void)
 80018a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ae:	f002 fd8d 	bl	80043cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b2:	f000 f925 	bl	8001b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b6:	f000 fb0d 	bl	8001ed4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018ba:	f000 f9c1 	bl	8001c40 <MX_I2C1_Init>
  MX_I2C3_Init();
 80018be:	f000 f9ed 	bl	8001c9c <MX_I2C3_Init>
  MX_USART3_UART_Init();
 80018c2:	f000 fadd 	bl	8001e80 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80018c6:	f000 f985 	bl	8001bd4 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80018ca:	f000 faaf 	bl	8001e2c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80018ce:	f000 fa13 	bl	8001cf8 <MX_TIM3_Init>
  MX_TIM6_Init();
 80018d2:	f000 fa75 	bl	8001dc0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018d6:	2100      	movs	r1, #0
 80018d8:	4870      	ldr	r0, [pc, #448]	; (8001a9c <main+0x1fc>)
 80018da:	f006 fd23 	bl	8008324 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018de:	2104      	movs	r1, #4
 80018e0:	486e      	ldr	r0, [pc, #440]	; (8001a9c <main+0x1fc>)
 80018e2:	f006 fd1f 	bl	8008324 <HAL_TIM_PWM_Start>
  HAL_CAN_Start(&hcan1);
 80018e6:	486e      	ldr	r0, [pc, #440]	; (8001aa0 <main+0x200>)
 80018e8:	f002 ffb0 	bl	800484c <HAL_CAN_Start>
  HAL_TIM_Base_Start(&htim6);
 80018ec:	486d      	ldr	r0, [pc, #436]	; (8001aa4 <main+0x204>)
 80018ee:	f006 fca6 	bl	800823e <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of bmp180Task */
  osThreadDef(bmp180Task, bmp180_handlerTask, osPriorityNormal, 0, 128);
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <main+0x208>)
 80018f4:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80018f8:	461d      	mov	r5, r3
 80018fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bmp180TaskHandle = osThreadCreate(osThread(bmp180Task), NULL);
 8001906:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f008 fb45 	bl	8009f9c <osThreadCreate>
 8001912:	4602      	mov	r2, r0
 8001914:	4b65      	ldr	r3, [pc, #404]	; (8001aac <main+0x20c>)
 8001916:	601a      	str	r2, [r3, #0]

  /* definition and creation of hcsr04task */
  osThreadDef(hcsr04task, hcsr04_handlertask, osPriorityNormal, 0, 128);
 8001918:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <main+0x210>)
 800191a:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 800191e:	461d      	mov	r5, r3
 8001920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001928:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hcsr04taskHandle = osThreadCreate(osThread(hcsr04task), NULL);
 800192c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f008 fb32 	bl	8009f9c <osThreadCreate>
 8001938:	4602      	mov	r2, r0
 800193a:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <main+0x214>)
 800193c:	601a      	str	r2, [r3, #0]

  /* definition and creation of hcsr501task */
  osThreadDef(hcsr501task, hcsr501handler_task, osPriorityIdle, 0, 128);
 800193e:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <main+0x218>)
 8001940:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8001944:	461d      	mov	r5, r3
 8001946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800194e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hcsr501taskHandle = osThreadCreate(osThread(hcsr501task), NULL);
 8001952:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f008 fb1f 	bl	8009f9c <osThreadCreate>
 800195e:	4602      	mov	r2, r0
 8001960:	4b56      	ldr	r3, [pc, #344]	; (8001abc <main+0x21c>)
 8001962:	601a      	str	r2, [r3, #0]

  /* definition and creation of dht11task */
  osThreadDef(dht11task, dht11_handlertask, osPriorityIdle, 0, 128);
 8001964:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <main+0x220>)
 8001966:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800196a:	461d      	mov	r5, r3
 800196c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800196e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dht11taskHandle = osThreadCreate(osThread(dht11task), NULL);
 8001978:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f008 fb0c 	bl	8009f9c <osThreadCreate>
 8001984:	4602      	mov	r2, r0
 8001986:	4b4f      	ldr	r3, [pc, #316]	; (8001ac4 <main+0x224>)
 8001988:	601a      	str	r2, [r3, #0]

  /* definition and creation of dcmotor1task */
  osThreadDef(dcmotor1task, dcmotor1_handlertask, osPriorityIdle, 0, 128);
 800198a:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <main+0x228>)
 800198c:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001990:	461d      	mov	r5, r3
 8001992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001996:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800199a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dcmotor1taskHandle = osThreadCreate(osThread(dcmotor1task), NULL);
 800199e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f008 faf9 	bl	8009f9c <osThreadCreate>
 80019aa:	4602      	mov	r2, r0
 80019ac:	4b47      	ldr	r3, [pc, #284]	; (8001acc <main+0x22c>)
 80019ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of dcmotor2task */
  osThreadDef(dcmotor2task, dcmotor2_handlertask, osPriorityIdle, 0, 128);
 80019b0:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <main+0x230>)
 80019b2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80019b6:	461d      	mov	r5, r3
 80019b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dcmotor2taskHandle = osThreadCreate(osThread(dcmotor2task), NULL);
 80019c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f008 fae6 	bl	8009f9c <osThreadCreate>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b40      	ldr	r3, [pc, #256]	; (8001ad4 <main+0x234>)
 80019d4:	601a      	str	r2, [r3, #0]

  /* definition and creation of nextionsenddata */
  osThreadDef(nextionsenddata, nextionsenddata_handlertask, osPriorityIdle, 0, 128);
 80019d6:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <main+0x238>)
 80019d8:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80019dc:	461d      	mov	r5, r3
 80019de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  nextionsenddataHandle = osThreadCreate(osThread(nextionsenddata), NULL);
 80019ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 fad3 	bl	8009f9c <osThreadCreate>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b38      	ldr	r3, [pc, #224]	; (8001adc <main+0x23c>)
 80019fa:	601a      	str	r2, [r3, #0]

  /* definition and creation of mpu6050task */
  osThreadDef(mpu6050task, mpu6050_handlertask, osPriorityIdle, 0, 128);
 80019fc:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <main+0x240>)
 80019fe:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001a02:	461d      	mov	r5, r3
 8001a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mpu6050taskHandle = osThreadCreate(osThread(mpu6050task), NULL);
 8001a10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f008 fac0 	bl	8009f9c <osThreadCreate>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <main+0x244>)
 8001a20:	601a      	str	r2, [r3, #0]

  /* definition and creation of usbttl_tx_rx */
  osThreadDef(usbttl_tx_rx, usbt_tx_rx_handlertask, osPriorityIdle, 0, 128);
 8001a22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a26:	4a30      	ldr	r2, [pc, #192]	; (8001ae8 <main+0x248>)
 8001a28:	461c      	mov	r4, r3
 8001a2a:	4615      	mov	r5, r2
 8001a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usbttl_tx_rxHandle = osThreadCreate(osThread(usbttl_tx_rx), NULL);
 8001a38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f008 faac 	bl	8009f9c <osThreadCreate>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <main+0x24c>)
 8001a48:	601a      	str	r2, [r3, #0]

  /* definition and creation of canbussendatata */
  osThreadDef(canbussendatata, canbussendata_handlertask, osPriorityIdle, 0, 128);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4a28      	ldr	r2, [pc, #160]	; (8001af0 <main+0x250>)
 8001a50:	461c      	mov	r4, r3
 8001a52:	4615      	mov	r5, r2
 8001a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canbussendatataHandle = osThreadCreate(osThread(canbussendatata), NULL);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f008 fa98 	bl	8009f9c <osThreadCreate>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <main+0x254>)
 8001a70:	601a      	str	r2, [r3, #0]

  /* definition and creation of ethernet */
  osThreadDef(ethernet, ethernet_handler, osPriorityIdle, 0, 128);
 8001a72:	463b      	mov	r3, r7
 8001a74:	4a20      	ldr	r2, [pc, #128]	; (8001af8 <main+0x258>)
 8001a76:	461c      	mov	r4, r3
 8001a78:	4615      	mov	r5, r2
 8001a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetHandle = osThreadCreate(osThread(ethernet), NULL);
 8001a86:	463b      	mov	r3, r7
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f008 fa86 	bl	8009f9c <osThreadCreate>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <main+0x25c>)
 8001a94:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001a96:	f008 fa6a 	bl	8009f6e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <main+0x1fa>
 8001a9c:	20004a38 	.word	0x20004a38
 8001aa0:	20004be4 	.word	0x20004be4
 8001aa4:	20004b34 	.word	0x20004b34
 8001aa8:	0801d034 	.word	0x0801d034
 8001aac:	20004b20 	.word	0x20004b20
 8001ab0:	0801d05c 	.word	0x0801d05c
 8001ab4:	20004a18 	.word	0x20004a18
 8001ab8:	0801d084 	.word	0x0801d084
 8001abc:	20004b30 	.word	0x20004b30
 8001ac0:	0801d0ac 	.word	0x0801d0ac
 8001ac4:	20004be0 	.word	0x20004be0
 8001ac8:	0801d0d8 	.word	0x0801d0d8
 8001acc:	20004c14 	.word	0x20004c14
 8001ad0:	0801d104 	.word	0x0801d104
 8001ad4:	20004b78 	.word	0x20004b78
 8001ad8:	0801d130 	.word	0x0801d130
 8001adc:	20004c0c 	.word	0x20004c0c
 8001ae0:	0801d158 	.word	0x0801d158
 8001ae4:	20004c10 	.word	0x20004c10
 8001ae8:	0801d184 	.word	0x0801d184
 8001aec:	20004b74 	.word	0x20004b74
 8001af0:	0801d1b0 	.word	0x0801d1b0
 8001af4:	20004bdc 	.word	0x20004bdc
 8001af8:	0801d1d8 	.word	0x0801d1d8
 8001afc:	20004984 	.word	0x20004984

08001b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b094      	sub	sp, #80	; 0x50
 8001b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b06:	f107 0320 	add.w	r3, r7, #32
 8001b0a:	2230      	movs	r2, #48	; 0x30
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f017 fa67 	bl	8018fe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <SystemClock_Config+0xcc>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	4a27      	ldr	r2, [pc, #156]	; (8001bcc <SystemClock_Config+0xcc>)
 8001b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b32:	6413      	str	r3, [r2, #64]	; 0x40
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <SystemClock_Config+0xcc>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b40:	2300      	movs	r3, #0
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <SystemClock_Config+0xd0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <SystemClock_Config+0xd0>)
 8001b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <SystemClock_Config+0xd0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b60:	2301      	movs	r3, #1
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b64:	2310      	movs	r3, #16
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b70:	2308      	movs	r3, #8
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b74:	23a8      	movs	r3, #168	; 0xa8
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b80:	f107 0320 	add.w	r3, r7, #32
 8001b84:	4618      	mov	r0, r3
 8001b86:	f005 fe9b 	bl	80078c0 <HAL_RCC_OscConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b90:	f001 f95c 	bl	8002e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b94:	230f      	movs	r3, #15
 8001b96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ba0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001baa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f006 f8f4 	bl	8007da0 <HAL_RCC_ClockConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bbe:	f001 f945 	bl	8002e4c <Error_Handler>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3750      	adds	r7, #80	; 0x50
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40007000 	.word	0x40007000

08001bd4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <MX_CAN1_Init+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001be0:	2215      	movs	r2, #21
 8001be2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001bf2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001bf6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001bfa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001bfe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001c26:	f002 fc35 	bl	8004494 <HAL_CAN_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c30:	f001 f90c 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20004be4 	.word	0x20004be4
 8001c3c:	40006400 	.word	0x40006400

08001c40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <MX_I2C1_Init+0x54>)
 8001c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c4c:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <MX_I2C1_Init+0x58>)
 8001c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c7e:	f004 fbbd 	bl	80063fc <HAL_I2C_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c88:	f001 f8e0 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20004930 	.word	0x20004930
 8001c94:	40005400 	.word	0x40005400
 8001c98:	000186a0 	.word	0x000186a0

08001c9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_I2C3_Init+0x50>)
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <MX_I2C3_Init+0x54>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_I2C3_Init+0x50>)
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <MX_I2C3_Init+0x58>)
 8001caa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_I2C3_Init+0x50>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_I2C3_Init+0x50>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_I2C3_Init+0x50>)
 8001cba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cbe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <MX_I2C3_Init+0x50>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_I2C3_Init+0x50>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <MX_I2C3_Init+0x50>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_I2C3_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <MX_I2C3_Init+0x50>)
 8001cda:	f004 fb8f 	bl	80063fc <HAL_I2C_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ce4:	f001 f8b2 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20004890 	.word	0x20004890
 8001cf0:	40005c00 	.word	0x40005c00
 8001cf4:	000186a0 	.word	0x000186a0

08001cf8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	611a      	str	r2, [r3, #16]
 8001d16:	615a      	str	r2, [r3, #20]
 8001d18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001d1c:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <MX_TIM3_Init+0xc4>)
 8001d1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d20:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001d2e:	2263      	movs	r2, #99	; 0x63
 8001d30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d3e:	481e      	ldr	r0, [pc, #120]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001d40:	f006 fac5 	bl	80082ce <HAL_TIM_PWM_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001d4a:	f001 f87f 	bl	8002e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4816      	ldr	r0, [pc, #88]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001d5e:	f006 ff8b 	bl	8008c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001d68:	f001 f870 	bl	8002e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6c:	2360      	movs	r3, #96	; 0x60
 8001d6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001d84:	f006 fc14 	bl	80085b0 <HAL_TIM_PWM_ConfigChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001d8e:	f001 f85d 	bl	8002e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	2204      	movs	r2, #4
 8001d96:	4619      	mov	r1, r3
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001d9a:	f006 fc09 	bl	80085b0 <HAL_TIM_PWM_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001da4:	f001 f852 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <MX_TIM3_Init+0xc0>)
 8001daa:	f002 f8d1 	bl	8003f50 <HAL_TIM_MspPostInit>

}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20004a38 	.word	0x20004a38
 8001dbc:	40000400 	.word	0x40000400

08001dc0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001dd0:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <MX_TIM6_Init+0x68>)
 8001dd2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001dd6:	2253      	movs	r2, #83	; 0x53
 8001dd8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001de2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001de6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dee:	480d      	ldr	r0, [pc, #52]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001df0:	f006 f9fa 	bl	80081e8 <HAL_TIM_Base_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001dfa:	f001 f827 	bl	8002e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e06:	463b      	mov	r3, r7
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4806      	ldr	r0, [pc, #24]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001e0c:	f006 ff34 	bl	8008c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e16:	f001 f819 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20004b34 	.word	0x20004b34
 8001e28:	40001000 	.word	0x40001000

08001e2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <MX_USART1_UART_Init+0x50>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_USART1_UART_Init+0x4c>)
 8001e64:	f006 ff98 	bl	8008d98 <HAL_UART_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e6e:	f000 ffed 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20004ae0 	.word	0x20004ae0
 8001e7c:	40011000 	.word	0x40011000

08001e80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <MX_USART3_UART_Init+0x50>)
 8001e88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001eb8:	f006 ff6e 	bl	8008d98 <HAL_UART_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ec2:	f000 ffc3 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200048ec 	.word	0x200048ec
 8001ed0:	40004800 	.word	0x40004800

08001ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	4b56      	ldr	r3, [pc, #344]	; (8002048 <MX_GPIO_Init+0x174>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a55      	ldr	r2, [pc, #340]	; (8002048 <MX_GPIO_Init+0x174>)
 8001ef4:	f043 0310 	orr.w	r3, r3, #16
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b53      	ldr	r3, [pc, #332]	; (8002048 <MX_GPIO_Init+0x174>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a4e      	ldr	r2, [pc, #312]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b4c      	ldr	r3, [pc, #304]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b48      	ldr	r3, [pc, #288]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a47      	ldr	r2, [pc, #284]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b45      	ldr	r3, [pc, #276]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a40      	ldr	r2, [pc, #256]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a39      	ldr	r2, [pc, #228]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b37      	ldr	r3, [pc, #220]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b33      	ldr	r3, [pc, #204]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a32      	ldr	r2, [pc, #200]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <MX_GPIO_Init+0x174>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2110      	movs	r1, #16
 8001f96:	482d      	ldr	r0, [pc, #180]	; (800204c <MX_GPIO_Init+0x178>)
 8001f98:	f004 f9fc 	bl	8006394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_14, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f244 0130 	movw	r1, #16432	; 0x4030
 8001fa2:	482b      	ldr	r0, [pc, #172]	; (8002050 <MX_GPIO_Init+0x17c>)
 8001fa4:	f004 f9f6 	bl	8006394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f24f 0130 	movw	r1, #61488	; 0xf030
 8001fae:	4829      	ldr	r0, [pc, #164]	; (8002054 <MX_GPIO_Init+0x180>)
 8001fb0:	f004 f9f0 	bl	8006394 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4820      	ldr	r0, [pc, #128]	; (800204c <MX_GPIO_Init+0x178>)
 8001fcc:	f004 f830 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fd0:	2340      	movs	r3, #64	; 0x40
 8001fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	481a      	ldr	r0, [pc, #104]	; (800204c <MX_GPIO_Init+0x178>)
 8001fe4:	f004 f824 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_14;
 8001fe8:	f244 0330 	movw	r3, #16432	; 0x4030
 8001fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	4619      	mov	r1, r3
 8002000:	4813      	ldr	r0, [pc, #76]	; (8002050 <MX_GPIO_Init+0x17c>)
 8002002:	f004 f815 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002006:	f24f 0330 	movw	r3, #61488	; 0xf030
 800200a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200c:	2301      	movs	r3, #1
 800200e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4619      	mov	r1, r3
 800201e:	480d      	ldr	r0, [pc, #52]	; (8002054 <MX_GPIO_Init+0x180>)
 8002020:	f004 f806 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_GPIO_Init+0x17c>)
 800203a:	f003 fff9 	bl	8006030 <HAL_GPIO_Init>

}
 800203e:	bf00      	nop
 8002040:	3730      	adds	r7, #48	; 0x30
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40021000 	.word	0x40021000
 8002050:	40020000 	.word	0x40020000
 8002054:	40020c00 	.word	0x40020c00

08002058 <ileri_motor1>:

/* USER CODE BEGIN 4 */
void ileri_motor1(int s)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]




	  TIM3->CCR1=s;
 8002060:	4a08      	ldr	r2, [pc, #32]	; (8002084 <ileri_motor1+0x2c>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8002066:	2201      	movs	r2, #1
 8002068:	2110      	movs	r1, #16
 800206a:	4807      	ldr	r0, [pc, #28]	; (8002088 <ileri_motor1+0x30>)
 800206c:	f004 f992 	bl	8006394 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	2120      	movs	r1, #32
 8002074:	4804      	ldr	r0, [pc, #16]	; (8002088 <ileri_motor1+0x30>)
 8002076:	f004 f98d 	bl	8006394 <HAL_GPIO_WritePin>

}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40000400 	.word	0x40000400
 8002088:	40020c00 	.word	0x40020c00

0800208c <geri_motor1>:

void geri_motor1(int s)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

	  TIM3->CCR1=s;
 8002094:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <geri_motor1+0x2c>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	2110      	movs	r1, #16
 800209e:	4807      	ldr	r0, [pc, #28]	; (80020bc <geri_motor1+0x30>)
 80020a0:	f004 f978 	bl	8006394 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	2120      	movs	r1, #32
 80020a8:	4804      	ldr	r0, [pc, #16]	; (80020bc <geri_motor1+0x30>)
 80020aa:	f004 f973 	bl	8006394 <HAL_GPIO_WritePin>



}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40000400 	.word	0x40000400
 80020bc:	40020c00 	.word	0x40020c00

080020c0 <dur_motor1>:

void dur_motor1()
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0

	  TIM3->CCR1=0;
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <dur_motor1+0x24>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2110      	movs	r1, #16
 80020ce:	4806      	ldr	r0, [pc, #24]	; (80020e8 <dur_motor1+0x28>)
 80020d0:	f004 f960 	bl	8006394 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2120      	movs	r1, #32
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <dur_motor1+0x28>)
 80020da:	f004 f95b 	bl	8006394 <HAL_GPIO_WritePin>

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40020c00 	.word	0x40020c00

080020ec <ileri_motor2>:

void ileri_motor2(int a)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]




	  TIM3->CCR2=a;
 80020f4:	4a08      	ldr	r2, [pc, #32]	; (8002118 <ileri_motor2+0x2c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6393      	str	r3, [r2, #56]	; 0x38
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	2110      	movs	r1, #16
 80020fe:	4807      	ldr	r0, [pc, #28]	; (800211c <ileri_motor2+0x30>)
 8002100:	f004 f948 	bl	8006394 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	2120      	movs	r1, #32
 8002108:	4804      	ldr	r0, [pc, #16]	; (800211c <ileri_motor2+0x30>)
 800210a:	f004 f943 	bl	8006394 <HAL_GPIO_WritePin>

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40000400 	.word	0x40000400
 800211c:	40020000 	.word	0x40020000

08002120 <geri_motor2>:

void geri_motor2(int a)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

	  TIM3->CCR2=a;
 8002128:	4a08      	ldr	r2, [pc, #32]	; (800214c <geri_motor2+0x2c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6393      	str	r3, [r2, #56]	; 0x38
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	2110      	movs	r1, #16
 8002132:	4807      	ldr	r0, [pc, #28]	; (8002150 <geri_motor2+0x30>)
 8002134:	f004 f92e 	bl	8006394 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	2120      	movs	r1, #32
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <geri_motor2+0x30>)
 800213e:	f004 f929 	bl	8006394 <HAL_GPIO_WritePin>



}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40000400 	.word	0x40000400
 8002150:	40020000 	.word	0x40020000

08002154 <dur_motor2>:

void dur_motor2()
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0

	  TIM3->CCR2=0;
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <dur_motor2+0x24>)
 800215a:	2200      	movs	r2, #0
 800215c:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	2110      	movs	r1, #16
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <dur_motor2+0x28>)
 8002164:	f004 f916 	bl	8006394 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	2120      	movs	r1, #32
 800216c:	4803      	ldr	r0, [pc, #12]	; (800217c <dur_motor2+0x28>)
 800216e:	f004 f911 	bl	8006394 <HAL_GPIO_WritePin>

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40000400 	.word	0x40000400
 800217c:	40020000 	.word	0x40020000

08002180 <bmp180_handlerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_bmp180_handlerTask */
void bmp180_handlerTask(void const * argument)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002188:	f007 fb58 	bl	800983c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	BMP180_Start();
 800218c:	f7ff fb46 	bl	800181c <BMP180_Start>

	  SSD1306_Init();
 8002190:	f001 fa02 	bl	8003598 <SSD1306_Init>

	  SSD1306_GotoXY (35,0);
 8002194:	2100      	movs	r1, #0
 8002196:	2023      	movs	r0, #35	; 0x23
 8002198:	f001 fb68 	bl	800386c <SSD1306_GotoXY>
	  SSD1306_Puts ("BMP180", &Font_11x18, 1);
 800219c:	2201      	movs	r2, #1
 800219e:	496d      	ldr	r1, [pc, #436]	; (8002354 <bmp180_handlerTask+0x1d4>)
 80021a0:	486d      	ldr	r0, [pc, #436]	; (8002358 <bmp180_handlerTask+0x1d8>)
 80021a2:	f001 fbf9 	bl	8003998 <SSD1306_Puts>
	  SSD1306_GotoXY (10,20);
 80021a6:	2114      	movs	r1, #20
 80021a8:	200a      	movs	r0, #10
 80021aa:	f001 fb5f 	bl	800386c <SSD1306_GotoXY>
	  SSD1306_Puts ("Barometric", &Font_11x18, 1);
 80021ae:	2201      	movs	r2, #1
 80021b0:	4968      	ldr	r1, [pc, #416]	; (8002354 <bmp180_handlerTask+0x1d4>)
 80021b2:	486a      	ldr	r0, [pc, #424]	; (800235c <bmp180_handlerTask+0x1dc>)
 80021b4:	f001 fbf0 	bl	8003998 <SSD1306_Puts>
	  SSD1306_GotoXY (30,40);
 80021b8:	2128      	movs	r1, #40	; 0x28
 80021ba:	201e      	movs	r0, #30
 80021bc:	f001 fb56 	bl	800386c <SSD1306_GotoXY>
	  SSD1306_Puts ("Sensor", &Font_11x18, 1);
 80021c0:	2201      	movs	r2, #1
 80021c2:	4964      	ldr	r1, [pc, #400]	; (8002354 <bmp180_handlerTask+0x1d4>)
 80021c4:	4866      	ldr	r0, [pc, #408]	; (8002360 <bmp180_handlerTask+0x1e0>)
 80021c6:	f001 fbe7 	bl	8003998 <SSD1306_Puts>
	  SSD1306_GotoXY (20,40);
 80021ca:	2128      	movs	r1, #40	; 0x28
 80021cc:	2014      	movs	r0, #20
 80021ce:	f001 fb4d 	bl	800386c <SSD1306_GotoXY>
	  SSD1306_UpdateScreen(); //display
 80021d2:	f001 faa5 	bl	8003720 <SSD1306_UpdateScreen>
	  HAL_Delay(2000);
 80021d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021da:	f002 f939 	bl	8004450 <HAL_Delay>
	  SSD1306_Clear();
 80021de:	f001 fcd3 	bl	8003b88 <SSD1306_Clear>
  for(;;)
  {
	  float sicaklik = 0;
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
	  float basinc = 0;
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
	  float yukseklik= 0;
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]

	  	  sicaklik = BMP180_GetTemp();
 80021f4:	f7fe ff96 	bl	8001124 <BMP180_GetTemp>
 80021f8:	ed87 0a05 	vstr	s0, [r7, #20]

	  	  basinc = BMP180_GetPress (0);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff f88d 	bl	800131c <BMP180_GetPress>
 8002202:	ed87 0a04 	vstr	s0, [r7, #16]

	  	  yukseklik = BMP180_GetAlt(0);
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff faba 	bl	8001780 <BMP180_GetAlt>
 800220c:	ed87 0a03 	vstr	s0, [r7, #12]


	     SSD1306_GotoXY (35,0);
 8002210:	2100      	movs	r1, #0
 8002212:	2023      	movs	r0, #35	; 0x23
 8002214:	f001 fb2a 	bl	800386c <SSD1306_GotoXY>
	     SSD1306_Puts ("BMP180", &Font_11x18, 1);
 8002218:	2201      	movs	r2, #1
 800221a:	494e      	ldr	r1, [pc, #312]	; (8002354 <bmp180_handlerTask+0x1d4>)
 800221c:	484e      	ldr	r0, [pc, #312]	; (8002358 <bmp180_handlerTask+0x1d8>)
 800221e:	f001 fbbb 	bl	8003998 <SSD1306_Puts>
	     SSD1306_GotoXY (0,0);
 8002222:	2100      	movs	r1, #0
 8002224:	2000      	movs	r0, #0
 8002226:	f001 fb21 	bl	800386c <SSD1306_GotoXY>
	     SSD1306_Puts ("sicaklik", &Font_11x18, 1);
 800222a:	2201      	movs	r2, #1
 800222c:	4949      	ldr	r1, [pc, #292]	; (8002354 <bmp180_handlerTask+0x1d4>)
 800222e:	484d      	ldr	r0, [pc, #308]	; (8002364 <bmp180_handlerTask+0x1e4>)
 8002230:	f001 fbb2 	bl	8003998 <SSD1306_Puts>
	     SSD1306_GotoXY (20,40);
 8002234:	2128      	movs	r1, #40	; 0x28
 8002236:	2014      	movs	r0, #20
 8002238:	f001 fb18 	bl	800386c <SSD1306_GotoXY>
	     sprintf(sicaklik1, "%.2f", sicaklik);
 800223c:	6978      	ldr	r0, [r7, #20]
 800223e:	f7fe f983 	bl	8000548 <__aeabi_f2d>
 8002242:	4603      	mov	r3, r0
 8002244:	460c      	mov	r4, r1
 8002246:	461a      	mov	r2, r3
 8002248:	4623      	mov	r3, r4
 800224a:	4947      	ldr	r1, [pc, #284]	; (8002368 <bmp180_handlerTask+0x1e8>)
 800224c:	4847      	ldr	r0, [pc, #284]	; (800236c <bmp180_handlerTask+0x1ec>)
 800224e:	f017 fc31 	bl	8019ab4 <siprintf>
	     SSD1306_Puts(sicaklik1, &Font_11x18, 1);
 8002252:	2201      	movs	r2, #1
 8002254:	493f      	ldr	r1, [pc, #252]	; (8002354 <bmp180_handlerTask+0x1d4>)
 8002256:	4845      	ldr	r0, [pc, #276]	; (800236c <bmp180_handlerTask+0x1ec>)
 8002258:	f001 fb9e 	bl	8003998 <SSD1306_Puts>
	     SSD1306_DrawCircle(80, 40, 2, 1);  //To print degree only
 800225c:	2301      	movs	r3, #1
 800225e:	2202      	movs	r2, #2
 8002260:	2128      	movs	r1, #40	; 0x28
 8002262:	2050      	movs	r0, #80	; 0x50
 8002264:	f001 fbbd 	bl	80039e2 <SSD1306_DrawCircle>
	     SSD1306_GotoXY (85,40);  //To print celcius
 8002268:	2128      	movs	r1, #40	; 0x28
 800226a:	2055      	movs	r0, #85	; 0x55
 800226c:	f001 fafe 	bl	800386c <SSD1306_GotoXY>
	     SSD1306_Puts ("C", &Font_11x18, 1);
 8002270:	2201      	movs	r2, #1
 8002272:	4938      	ldr	r1, [pc, #224]	; (8002354 <bmp180_handlerTask+0x1d4>)
 8002274:	483e      	ldr	r0, [pc, #248]	; (8002370 <bmp180_handlerTask+0x1f0>)
 8002276:	f001 fb8f 	bl	8003998 <SSD1306_Puts>
	     SSD1306_UpdateScreen(); //display
 800227a:	f001 fa51 	bl	8003720 <SSD1306_UpdateScreen>
	     HAL_Delay(2000);
 800227e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002282:	f002 f8e5 	bl	8004450 <HAL_Delay>
	     SSD1306_Clear();
 8002286:	f001 fc7f 	bl	8003b88 <SSD1306_Clear>


	     SSD1306_GotoXY (20,0);
 800228a:	2100      	movs	r1, #0
 800228c:	2014      	movs	r0, #20
 800228e:	f001 faed 	bl	800386c <SSD1306_GotoXY>
	     SSD1306_Puts ("basinc", &Font_11x18, 1);
 8002292:	2201      	movs	r2, #1
 8002294:	492f      	ldr	r1, [pc, #188]	; (8002354 <bmp180_handlerTask+0x1d4>)
 8002296:	4837      	ldr	r0, [pc, #220]	; (8002374 <bmp180_handlerTask+0x1f4>)
 8002298:	f001 fb7e 	bl	8003998 <SSD1306_Puts>
	     SSD1306_GotoXY (10,40);
 800229c:	2128      	movs	r1, #40	; 0x28
 800229e:	200a      	movs	r0, #10
 80022a0:	f001 fae4 	bl	800386c <SSD1306_GotoXY>
	     sprintf(basinc1, "%.2f", basinc);
 80022a4:	6938      	ldr	r0, [r7, #16]
 80022a6:	f7fe f94f 	bl	8000548 <__aeabi_f2d>
 80022aa:	4603      	mov	r3, r0
 80022ac:	460c      	mov	r4, r1
 80022ae:	461a      	mov	r2, r3
 80022b0:	4623      	mov	r3, r4
 80022b2:	492d      	ldr	r1, [pc, #180]	; (8002368 <bmp180_handlerTask+0x1e8>)
 80022b4:	4830      	ldr	r0, [pc, #192]	; (8002378 <bmp180_handlerTask+0x1f8>)
 80022b6:	f017 fbfd 	bl	8019ab4 <siprintf>
	     SSD1306_Puts(basinc1, &Font_11x18, 1);
 80022ba:	2201      	movs	r2, #1
 80022bc:	4925      	ldr	r1, [pc, #148]	; (8002354 <bmp180_handlerTask+0x1d4>)
 80022be:	482e      	ldr	r0, [pc, #184]	; (8002378 <bmp180_handlerTask+0x1f8>)
 80022c0:	f001 fb6a 	bl	8003998 <SSD1306_Puts>
	     SSD1306_GotoXY (100,40);
 80022c4:	2128      	movs	r1, #40	; 0x28
 80022c6:	2064      	movs	r0, #100	; 0x64
 80022c8:	f001 fad0 	bl	800386c <SSD1306_GotoXY>
	     SSD1306_Puts ("pa", &Font_11x18, 1);
 80022cc:	2201      	movs	r2, #1
 80022ce:	4921      	ldr	r1, [pc, #132]	; (8002354 <bmp180_handlerTask+0x1d4>)
 80022d0:	482a      	ldr	r0, [pc, #168]	; (800237c <bmp180_handlerTask+0x1fc>)
 80022d2:	f001 fb61 	bl	8003998 <SSD1306_Puts>
	     SSD1306_UpdateScreen(); //display
 80022d6:	f001 fa23 	bl	8003720 <SSD1306_UpdateScreen>
	     HAL_Delay(2000);
 80022da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022de:	f002 f8b7 	bl	8004450 <HAL_Delay>
	     SSD1306_Clear();
 80022e2:	f001 fc51 	bl	8003b88 <SSD1306_Clear>

	     SSD1306_GotoXY (20,0);
 80022e6:	2100      	movs	r1, #0
 80022e8:	2014      	movs	r0, #20
 80022ea:	f001 fabf 	bl	800386c <SSD1306_GotoXY>
	     SSD1306_Puts ("yukseklik", &Font_11x18, 1);
 80022ee:	2201      	movs	r2, #1
 80022f0:	4918      	ldr	r1, [pc, #96]	; (8002354 <bmp180_handlerTask+0x1d4>)
 80022f2:	4823      	ldr	r0, [pc, #140]	; (8002380 <bmp180_handlerTask+0x200>)
 80022f4:	f001 fb50 	bl	8003998 <SSD1306_Puts>
	     SSD1306_GotoXY (15,40);
 80022f8:	2128      	movs	r1, #40	; 0x28
 80022fa:	200f      	movs	r0, #15
 80022fc:	f001 fab6 	bl	800386c <SSD1306_GotoXY>
	     sprintf(yukseklik1, "%.2f", yukseklik);
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7fe f921 	bl	8000548 <__aeabi_f2d>
 8002306:	4603      	mov	r3, r0
 8002308:	460c      	mov	r4, r1
 800230a:	461a      	mov	r2, r3
 800230c:	4623      	mov	r3, r4
 800230e:	4916      	ldr	r1, [pc, #88]	; (8002368 <bmp180_handlerTask+0x1e8>)
 8002310:	481c      	ldr	r0, [pc, #112]	; (8002384 <bmp180_handlerTask+0x204>)
 8002312:	f017 fbcf 	bl	8019ab4 <siprintf>
	     SSD1306_Puts(yukseklik1, &Font_11x18, 1);
 8002316:	2201      	movs	r2, #1
 8002318:	490e      	ldr	r1, [pc, #56]	; (8002354 <bmp180_handlerTask+0x1d4>)
 800231a:	481a      	ldr	r0, [pc, #104]	; (8002384 <bmp180_handlerTask+0x204>)
 800231c:	f001 fb3c 	bl	8003998 <SSD1306_Puts>
	     SSD1306_GotoXY (90,40);
 8002320:	2128      	movs	r1, #40	; 0x28
 8002322:	205a      	movs	r0, #90	; 0x5a
 8002324:	f001 faa2 	bl	800386c <SSD1306_GotoXY>
	     SSD1306_Puts ("m", &Font_11x18, 1);
 8002328:	2201      	movs	r2, #1
 800232a:	490a      	ldr	r1, [pc, #40]	; (8002354 <bmp180_handlerTask+0x1d4>)
 800232c:	4816      	ldr	r0, [pc, #88]	; (8002388 <bmp180_handlerTask+0x208>)
 800232e:	f001 fb33 	bl	8003998 <SSD1306_Puts>
	     SSD1306_UpdateScreen(); //display
 8002332:	f001 f9f5 	bl	8003720 <SSD1306_UpdateScreen>
	     HAL_Delay(2000);
 8002336:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800233a:	f002 f889 	bl	8004450 <HAL_Delay>
	     SSD1306_Clear();
 800233e:	f001 fc23 	bl	8003b88 <SSD1306_Clear>

	     HAL_Delay (2000);
 8002342:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002346:	f002 f883 	bl	8004450 <HAL_Delay>
    osDelay(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f007 fe72 	bl	800a034 <osDelay>
  {
 8002350:	e747      	b.n	80021e2 <bmp180_handlerTask+0x62>
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000
 8002358:	0801d1f4 	.word	0x0801d1f4
 800235c:	0801d1fc 	.word	0x0801d1fc
 8002360:	0801d208 	.word	0x0801d208
 8002364:	0801d210 	.word	0x0801d210
 8002368:	0801d21c 	.word	0x0801d21c
 800236c:	20004b24 	.word	0x20004b24
 8002370:	0801d224 	.word	0x0801d224
 8002374:	0801d228 	.word	0x0801d228
 8002378:	20004bb0 	.word	0x20004bb0
 800237c:	0801d230 	.word	0x0801d230
 8002380:	0801d234 	.word	0x0801d234
 8002384:	200049b0 	.word	0x200049b0
 8002388:	0801d240 	.word	0x0801d240

0800238c <hcsr04_handlertask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hcsr04_handlertask */
void hcsr04_handlertask(void const * argument)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hcsr04_handlertask */


  /* Infinite loop */
	{
		uint32_t local_time=0;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8002398:	2201      	movs	r2, #1
 800239a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800239e:	4814      	ldr	r0, [pc, #80]	; (80023f0 <hcsr04_handlertask+0x64>)
 80023a0:	f003 fff8 	bl	8006394 <HAL_GPIO_WritePin>
		DWT_Delay_us(10);
 80023a4:	200a      	movs	r0, #10
 80023a6:	f7ff fa59 	bl	800185c <DWT_Delay_us>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023b0:	480f      	ldr	r0, [pc, #60]	; (80023f0 <hcsr04_handlertask+0x64>)
 80023b2:	f003 ffef 	bl	8006394 <HAL_GPIO_WritePin>


		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15));
 80023b6:	bf00      	nop
 80023b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023bc:	480c      	ldr	r0, [pc, #48]	; (80023f0 <hcsr04_handlertask+0x64>)
 80023be:	f003 ffd1 	bl	8006364 <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f7      	beq.n	80023b8 <hcsr04_handlertask+0x2c>


		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 80023c8:	e005      	b.n	80023d6 <hcsr04_handlertask+0x4a>
		{
			local_time++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
			DWT_Delay_us(1);
 80023d0:	2001      	movs	r0, #1
 80023d2:	f7ff fa43 	bl	800185c <DWT_Delay_us>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 80023d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <hcsr04_handlertask+0x64>)
 80023dc:	f003 ffc2 	bl	8006364 <HAL_GPIO_ReadPin>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f1      	bne.n	80023ca <hcsr04_handlertask+0x3e>
		}
		return local_time;
 80023e6:	bf00      	nop


    osDelay(1);
  }
  /* USER CODE END hcsr04_handlertask */
}
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40020000 	.word	0x40020000

080023f4 <hcsr501handler_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hcsr501handler_task */
void hcsr501handler_task(void const * argument)
{
 80023f4:	b5b0      	push	{r4, r5, r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hcsr501handler_task */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6==GPIO_PIN_SET))
 80023fc:	2100      	movs	r1, #0
 80023fe:	4816      	ldr	r0, [pc, #88]	; (8002458 <hcsr501handler_task+0x64>)
 8002400:	f003 ffb0 	bl	8006364 <HAL_GPIO_ReadPin>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d021      	beq.n	800244e <hcsr501handler_task+0x5a>
	  {
   		  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, sprintf(tx_buffer,"1. ve 2. motorlar durduruldu. "), 100);
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <hcsr501handler_task+0x68>)
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <hcsr501handler_task+0x6c>)
 800240e:	4615      	mov	r5, r2
 8002410:	461c      	mov	r4, r3
 8002412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002414:	6028      	str	r0, [r5, #0]
 8002416:	6069      	str	r1, [r5, #4]
 8002418:	60aa      	str	r2, [r5, #8]
 800241a:	60eb      	str	r3, [r5, #12]
 800241c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800241e:	6128      	str	r0, [r5, #16]
 8002420:	6169      	str	r1, [r5, #20]
 8002422:	61aa      	str	r2, [r5, #24]
 8002424:	8823      	ldrh	r3, [r4, #0]
 8002426:	78a2      	ldrb	r2, [r4, #2]
 8002428:	83ab      	strh	r3, [r5, #28]
 800242a:	4613      	mov	r3, r2
 800242c:	77ab      	strb	r3, [r5, #30]
 800242e:	231e      	movs	r3, #30
 8002430:	b29a      	uxth	r2, r3
 8002432:	2364      	movs	r3, #100	; 0x64
 8002434:	4909      	ldr	r1, [pc, #36]	; (800245c <hcsr501handler_task+0x68>)
 8002436:	480b      	ldr	r0, [pc, #44]	; (8002464 <hcsr501handler_task+0x70>)
 8002438:	f006 fcfb 	bl	8008e32 <HAL_UART_Transmit>
   		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800243c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002440:	4809      	ldr	r0, [pc, #36]	; (8002468 <hcsr501handler_task+0x74>)
 8002442:	f003 ffc0 	bl	80063c6 <HAL_GPIO_TogglePin>

   		  dur_motor1();
 8002446:	f7ff fe3b 	bl	80020c0 <dur_motor1>
   		  dur_motor2();
 800244a:	f7ff fe83 	bl	8002154 <dur_motor2>
	  }
    osDelay(1);
 800244e:	2001      	movs	r0, #1
 8002450:	f007 fdf0 	bl	800a034 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6==GPIO_PIN_SET))
 8002454:	e7d2      	b.n	80023fc <hcsr501handler_task+0x8>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	20004aac 	.word	0x20004aac
 8002460:	0801d244 	.word	0x0801d244
 8002464:	200048ec 	.word	0x200048ec
 8002468:	40020c00 	.word	0x40020c00

0800246c <delay.12509>:
/* USER CODE END Header_dht11_handlertask */
void dht11_handlertask(void const * argument)
{
  /* USER CODE BEGIN dht11_handlertask */
  /* Infinite loop */
	void delay(uint16_t time){
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
 8002476:	f8c7 c000 	str.w	ip, [r7]

	   __HAL_TIM_SET_COUNTER(&htim6,0);
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <delay.12509+0x30>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

	   while(__HAL_TIM_GET_COUNTER(&htim6)< time);
 8002482:	bf00      	nop
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <delay.12509+0x30>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	429a      	cmp	r2, r3
 800248e:	d3f9      	bcc.n	8002484 <delay.12509+0x18>

	}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	20004b34 	.word	0x20004b34

080024a0 <dht11_handlertask>:
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
void dht11_handlertask(void const * argument)
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	60fb      	str	r3, [r7, #12]

	   return 1;
	}
  for(;;)
  {
	durum=DHT11_Read();
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	469c      	mov	ip, r3
 80024b4:	f000 f868 	bl	8002588 <DHT11_Read.12525>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <dht11_handlertask+0x4c>)
 80024be:	701a      	strb	r2, [r3, #0]
	if (durum ==1)   {Temperature=tempVal; Humidity=humVal;}
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <dht11_handlertask+0x4c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d109      	bne.n	80024dc <dht11_handlertask+0x3c>
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <dht11_handlertask+0x50>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <dht11_handlertask+0x54>)
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <dht11_handlertask+0x58>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <dht11_handlertask+0x5c>)
 80024da:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 80024dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024e0:	f001 ffb6 	bl	8004450 <HAL_Delay>
    osDelay(1);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f007 fda5 	bl	800a034 <osDelay>
	durum=DHT11_Read();
 80024ea:	e7e0      	b.n	80024ae <dht11_handlertask+0xe>
 80024ec:	20000554 	.word	0x20000554
 80024f0:	20000558 	.word	0x20000558
 80024f4:	20000556 	.word	0x20000556
 80024f8:	2000055a 	.word	0x2000055a
 80024fc:	20000555 	.word	0x20000555

08002500 <Set_Pin_Output.12516>:
	void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	460b      	mov	r3, r1
 800250a:	817b      	strh	r3, [r7, #10]
 800250c:	f8c7 c004 	str.w	ip, [r7, #4]
	   GPIO_InitTypeDef DHT11_DATA={0};
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
	   DHT11_DATA.Pin=GPIO_Pin;
 8002520:	897b      	ldrh	r3, [r7, #10]
 8002522:	617b      	str	r3, [r7, #20]
	   DHT11_DATA.Mode=GPIO_MODE_OUTPUT_PP;
 8002524:	2301      	movs	r3, #1
 8002526:	61bb      	str	r3, [r7, #24]
	   DHT11_DATA.Pull=GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
	   DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
	   HAL_GPIO_Init(GPIOx,&DHT11_DATA);
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4619      	mov	r1, r3
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f003 fd7a 	bl	8006030 <HAL_GPIO_Init>
	}
 800253c:	bf00      	nop
 800253e:	3728      	adds	r7, #40	; 0x28
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <Set_Pin_Input.12521>:
	void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	460b      	mov	r3, r1
 800254e:	817b      	strh	r3, [r7, #10]
 8002550:	f8c7 c004 	str.w	ip, [r7, #4]
	   GPIO_InitTypeDef DHT11_DATA={0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
	   DHT11_DATA.Pin=GPIO_Pin;
 8002564:	897b      	ldrh	r3, [r7, #10]
 8002566:	617b      	str	r3, [r7, #20]
	   DHT11_DATA.Mode=GPIO_MODE_INPUT;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
	   DHT11_DATA.Pull=GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
	   DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	623b      	str	r3, [r7, #32]
	   HAL_GPIO_Init(GPIOx,&DHT11_DATA);
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4619      	mov	r1, r3
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f003 fd58 	bl	8006030 <HAL_GPIO_Init>
	}
 8002580:	bf00      	nop
 8002582:	3728      	adds	r7, #40	; 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <DHT11_Read.12525>:
	uint8_t DHT11_Read (void){
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	4664      	mov	r4, ip
 8002590:	f8c7 c004 	str.w	ip, [r7, #4]
	  for(int a=0;a<40;a++) mData[a]=0;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	e007      	b.n	80025aa <DHT11_Read.12525+0x22>
 800259a:	4a91      	ldr	r2, [pc, #580]	; (80027e0 <DHT11_Read.12525+0x258>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	3301      	adds	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	2b27      	cmp	r3, #39	; 0x27
 80025ae:	ddf4      	ble.n	800259a <DHT11_Read.12525+0x12>
	   mTime1 = 0, mTime2 = 0, durum=0, tempVal=0, humVal=0, parityVal = 0, genParity = 0,  mbit = 0;
 80025b0:	4b8c      	ldr	r3, [pc, #560]	; (80027e4 <DHT11_Read.12525+0x25c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	801a      	strh	r2, [r3, #0]
 80025b6:	4b8c      	ldr	r3, [pc, #560]	; (80027e8 <DHT11_Read.12525+0x260>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	4b8b      	ldr	r3, [pc, #556]	; (80027ec <DHT11_Read.12525+0x264>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	4b8b      	ldr	r3, [pc, #556]	; (80027f0 <DHT11_Read.12525+0x268>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	801a      	strh	r2, [r3, #0]
 80025c8:	4b8a      	ldr	r3, [pc, #552]	; (80027f4 <DHT11_Read.12525+0x26c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	4b8a      	ldr	r3, [pc, #552]	; (80027f8 <DHT11_Read.12525+0x270>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	4b89      	ldr	r3, [pc, #548]	; (80027fc <DHT11_Read.12525+0x274>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <DHT11_Read.12525+0x278>)
 80025dc:	2200      	movs	r2, #0
 80025de:	801a      	strh	r2, [r3, #0]
	     Set_Pin_Output(DHT11_PORT,DHT11_PIN);
 80025e0:	46a4      	mov	ip, r4
 80025e2:	2140      	movs	r1, #64	; 0x40
 80025e4:	4887      	ldr	r0, [pc, #540]	; (8002804 <DHT11_Read.12525+0x27c>)
 80025e6:	f7ff ff8b 	bl	8002500 <Set_Pin_Output.12516>
	    HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2140      	movs	r1, #64	; 0x40
 80025ee:	4885      	ldr	r0, [pc, #532]	; (8002804 <DHT11_Read.12525+0x27c>)
 80025f0:	f003 fed0 	bl	8006394 <HAL_GPIO_WritePin>
	    delay(18000);
 80025f4:	46a4      	mov	ip, r4
 80025f6:	f244 6050 	movw	r0, #18000	; 0x4650
 80025fa:	f7ff ff37 	bl	800246c <delay.12509>
	      Set_Pin_Input(DHT11_PORT,DHT11_PIN);
 80025fe:	46a4      	mov	ip, r4
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	4880      	ldr	r0, [pc, #512]	; (8002804 <DHT11_Read.12525+0x27c>)
 8002604:	f7ff ff9e 	bl	8002544 <Set_Pin_Input.12521>
	    __HAL_TIM_SET_COUNTER(&htim6, 0);
 8002608:	4b7f      	ldr	r3, [pc, #508]	; (8002808 <DHT11_Read.12525+0x280>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2200      	movs	r2, #0
 800260e:	625a      	str	r2, [r3, #36]	; 0x24
	   while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8002610:	e008      	b.n	8002624 <DHT11_Read.12525+0x9c>
 8002612:	4b7d      	ldr	r3, [pc, #500]	; (8002808 <DHT11_Read.12525+0x280>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	b29b      	uxth	r3, r3
 800261a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800261e:	d901      	bls.n	8002624 <DHT11_Read.12525+0x9c>
 8002620:	2300      	movs	r3, #0
 8002622:	e130      	b.n	8002886 <DHT11_Read.12525+0x2fe>
 8002624:	2140      	movs	r1, #64	; 0x40
 8002626:	4877      	ldr	r0, [pc, #476]	; (8002804 <DHT11_Read.12525+0x27c>)
 8002628:	f003 fe9c 	bl	8006364 <HAL_GPIO_ReadPin>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	d0ef      	beq.n	8002612 <DHT11_Read.12525+0x8a>
	   __HAL_TIM_SET_COUNTER(&htim6, 0);
 8002632:	4b75      	ldr	r3, [pc, #468]	; (8002808 <DHT11_Read.12525+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
	   while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 800263a:	e008      	b.n	800264e <DHT11_Read.12525+0xc6>
 800263c:	4b72      	ldr	r3, [pc, #456]	; (8002808 <DHT11_Read.12525+0x280>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	b29b      	uxth	r3, r3
 8002644:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002648:	d901      	bls.n	800264e <DHT11_Read.12525+0xc6>
 800264a:	2300      	movs	r3, #0
 800264c:	e11b      	b.n	8002886 <DHT11_Read.12525+0x2fe>
 800264e:	2140      	movs	r1, #64	; 0x40
 8002650:	486c      	ldr	r0, [pc, #432]	; (8002804 <DHT11_Read.12525+0x27c>)
 8002652:	f003 fe87 	bl	8006364 <HAL_GPIO_ReadPin>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ef      	beq.n	800263c <DHT11_Read.12525+0xb4>
	   mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <DHT11_Read.12525+0x280>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <DHT11_Read.12525+0x25c>)
 8002666:	801a      	strh	r2, [r3, #0]
	   __HAL_TIM_SET_COUNTER(&htim6, 0);
 8002668:	4b67      	ldr	r3, [pc, #412]	; (8002808 <DHT11_Read.12525+0x280>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2200      	movs	r2, #0
 800266e:	625a      	str	r2, [r3, #36]	; 0x24
	   while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8002670:	e008      	b.n	8002684 <DHT11_Read.12525+0xfc>
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <DHT11_Read.12525+0x280>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	b29b      	uxth	r3, r3
 800267a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800267e:	d901      	bls.n	8002684 <DHT11_Read.12525+0xfc>
 8002680:	2300      	movs	r3, #0
 8002682:	e100      	b.n	8002886 <DHT11_Read.12525+0x2fe>
 8002684:	2140      	movs	r1, #64	; 0x40
 8002686:	485f      	ldr	r0, [pc, #380]	; (8002804 <DHT11_Read.12525+0x27c>)
 8002688:	f003 fe6c 	bl	8006364 <HAL_GPIO_ReadPin>
 800268c:	4603      	mov	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d0ef      	beq.n	8002672 <DHT11_Read.12525+0xea>
	    mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <DHT11_Read.12525+0x280>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	b29a      	uxth	r2, r3
 800269a:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <DHT11_Read.12525+0x260>)
 800269c:	801a      	strh	r2, [r3, #0]
	   if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 800269e:	4b51      	ldr	r3, [pc, #324]	; (80027e4 <DHT11_Read.12525+0x25c>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	2b4a      	cmp	r3, #74	; 0x4a
 80026a4:	d80d      	bhi.n	80026c2 <DHT11_Read.12525+0x13a>
 80026a6:	4b4f      	ldr	r3, [pc, #316]	; (80027e4 <DHT11_Read.12525+0x25c>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	2b55      	cmp	r3, #85	; 0x55
 80026ac:	d909      	bls.n	80026c2 <DHT11_Read.12525+0x13a>
 80026ae:	4b4e      	ldr	r3, [pc, #312]	; (80027e8 <DHT11_Read.12525+0x260>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	2b4a      	cmp	r3, #74	; 0x4a
 80026b4:	d805      	bhi.n	80026c2 <DHT11_Read.12525+0x13a>
 80026b6:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <DHT11_Read.12525+0x260>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	2b55      	cmp	r3, #85	; 0x55
 80026bc:	d901      	bls.n	80026c2 <DHT11_Read.12525+0x13a>
	      return 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	e0e1      	b.n	8002886 <DHT11_Read.12525+0x2fe>
	   for(int j = 0; j < 40; j++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	e051      	b.n	800276c <DHT11_Read.12525+0x1e4>
	      __HAL_TIM_SET_COUNTER(&htim6, 0);
 80026c8:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <DHT11_Read.12525+0x280>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24
	      while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 80026d0:	e008      	b.n	80026e4 <DHT11_Read.12525+0x15c>
 80026d2:	4b4d      	ldr	r3, [pc, #308]	; (8002808 <DHT11_Read.12525+0x280>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026de:	d901      	bls.n	80026e4 <DHT11_Read.12525+0x15c>
 80026e0:	2300      	movs	r3, #0
 80026e2:	e0d0      	b.n	8002886 <DHT11_Read.12525+0x2fe>
 80026e4:	2140      	movs	r1, #64	; 0x40
 80026e6:	4847      	ldr	r0, [pc, #284]	; (8002804 <DHT11_Read.12525+0x27c>)
 80026e8:	f003 fe3c 	bl	8006364 <HAL_GPIO_ReadPin>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ef      	beq.n	80026d2 <DHT11_Read.12525+0x14a>
	      __HAL_TIM_SET_COUNTER(&htim6, 0);
 80026f2:	4b45      	ldr	r3, [pc, #276]	; (8002808 <DHT11_Read.12525+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
	      while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 80026fa:	e008      	b.n	800270e <DHT11_Read.12525+0x186>
 80026fc:	4b42      	ldr	r3, [pc, #264]	; (8002808 <DHT11_Read.12525+0x280>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	b29b      	uxth	r3, r3
 8002704:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002708:	d901      	bls.n	800270e <DHT11_Read.12525+0x186>
 800270a:	2300      	movs	r3, #0
 800270c:	e0bb      	b.n	8002886 <DHT11_Read.12525+0x2fe>
 800270e:	2140      	movs	r1, #64	; 0x40
 8002710:	483c      	ldr	r0, [pc, #240]	; (8002804 <DHT11_Read.12525+0x27c>)
 8002712:	f003 fe27 	bl	8006364 <HAL_GPIO_ReadPin>
 8002716:	4603      	mov	r3, r0
 8002718:	2b01      	cmp	r3, #1
 800271a:	d0ef      	beq.n	80026fc <DHT11_Read.12525+0x174>
	      mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <DHT11_Read.12525+0x280>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <DHT11_Read.12525+0x25c>)
 8002726:	801a      	strh	r2, [r3, #0]
	      if(mTime1 > 20 && mTime1 < 30)
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <DHT11_Read.12525+0x25c>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	2b14      	cmp	r3, #20
 800272e:	d907      	bls.n	8002740 <DHT11_Read.12525+0x1b8>
 8002730:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <DHT11_Read.12525+0x25c>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	2b1d      	cmp	r3, #29
 8002736:	d803      	bhi.n	8002740 <DHT11_Read.12525+0x1b8>
	         mbit = 0;
 8002738:	4b31      	ldr	r3, [pc, #196]	; (8002800 <DHT11_Read.12525+0x278>)
 800273a:	2200      	movs	r2, #0
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	e00a      	b.n	8002756 <DHT11_Read.12525+0x1ce>
	      else if(mTime1 > 60 && mTime1 < 80)
 8002740:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <DHT11_Read.12525+0x25c>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	2b3c      	cmp	r3, #60	; 0x3c
 8002746:	d906      	bls.n	8002756 <DHT11_Read.12525+0x1ce>
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <DHT11_Read.12525+0x25c>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	2b4f      	cmp	r3, #79	; 0x4f
 800274e:	d802      	bhi.n	8002756 <DHT11_Read.12525+0x1ce>
	          mbit = 1;
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <DHT11_Read.12525+0x278>)
 8002752:	2201      	movs	r2, #1
 8002754:	801a      	strh	r2, [r3, #0]
	      mData[j] = mbit;
 8002756:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <DHT11_Read.12525+0x278>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b2d9      	uxtb	r1, r3
 800275c:	4a20      	ldr	r2, [pc, #128]	; (80027e0 <DHT11_Read.12525+0x258>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4413      	add	r3, r2
 8002762:	460a      	mov	r2, r1
 8002764:	701a      	strb	r2, [r3, #0]
	   for(int j = 0; j < 40; j++)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	3301      	adds	r3, #1
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b27      	cmp	r3, #39	; 0x27
 8002770:	ddaa      	ble.n	80026c8 <DHT11_Read.12525+0x140>
	   for(int i = 0; i < 8; i++)
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e013      	b.n	80027a0 <DHT11_Read.12525+0x218>
	      humVal += mData[i];
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <DHT11_Read.12525+0x258>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	4413      	add	r3, r2
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b29a      	uxth	r2, r3
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <DHT11_Read.12525+0x26c>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	4413      	add	r3, r2
 8002788:	b29a      	uxth	r2, r3
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <DHT11_Read.12525+0x26c>)
 800278c:	801a      	strh	r2, [r3, #0]
	      humVal = humVal << 1;
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <DHT11_Read.12525+0x26c>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <DHT11_Read.12525+0x26c>)
 8002798:	801a      	strh	r2, [r3, #0]
	   for(int i = 0; i < 8; i++)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3301      	adds	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b07      	cmp	r3, #7
 80027a4:	dde8      	ble.n	8002778 <DHT11_Read.12525+0x1f0>
	   for(int i = 16; i < 24; i++)
 80027a6:	2310      	movs	r3, #16
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	e013      	b.n	80027d4 <DHT11_Read.12525+0x24c>
	      tempVal += mData[i];
 80027ac:	4a0c      	ldr	r2, [pc, #48]	; (80027e0 <DHT11_Read.12525+0x258>)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <DHT11_Read.12525+0x268>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <DHT11_Read.12525+0x268>)
 80027c0:	801a      	strh	r2, [r3, #0]
	      tempVal = tempVal << 1;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <DHT11_Read.12525+0x268>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <DHT11_Read.12525+0x268>)
 80027cc:	801a      	strh	r2, [r3, #0]
	   for(int i = 16; i < 24; i++)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	3301      	adds	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b17      	cmp	r3, #23
 80027d8:	dde8      	ble.n	80027ac <DHT11_Read.12525+0x224>
	   for(int i = 32; i < 40; i++)
 80027da:	2320      	movs	r3, #32
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	e028      	b.n	8002832 <DHT11_Read.12525+0x2aa>
 80027e0:	20004988 	.word	0x20004988
 80027e4:	2000055c 	.word	0x2000055c
 80027e8:	2000055e 	.word	0x2000055e
 80027ec:	20000554 	.word	0x20000554
 80027f0:	20000558 	.word	0x20000558
 80027f4:	2000055a 	.word	0x2000055a
 80027f8:	20000562 	.word	0x20000562
 80027fc:	20000563 	.word	0x20000563
 8002800:	20000560 	.word	0x20000560
 8002804:	40021000 	.word	0x40021000
 8002808:	20004b34 	.word	0x20004b34
	      parityVal += mData[i];
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <DHT11_Read.12525+0x308>)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4413      	add	r3, r2
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <DHT11_Read.12525+0x30c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	4413      	add	r3, r2
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <DHT11_Read.12525+0x30c>)
 800281e:	701a      	strb	r2, [r3, #0]
	      parityVal = parityVal << 1;
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <DHT11_Read.12525+0x30c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <DHT11_Read.12525+0x30c>)
 800282a:	701a      	strb	r2, [r3, #0]
	   for(int i = 32; i < 40; i++)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3301      	adds	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b27      	cmp	r3, #39	; 0x27
 8002836:	dde9      	ble.n	800280c <DHT11_Read.12525+0x284>
	   parityVal = parityVal >> 1;
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <DHT11_Read.12525+0x30c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <DHT11_Read.12525+0x30c>)
 8002842:	701a      	strb	r2, [r3, #0]
	   humVal = humVal >> 1;
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <DHT11_Read.12525+0x310>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <DHT11_Read.12525+0x310>)
 800284e:	801a      	strh	r2, [r3, #0]
	   tempVal = tempVal >> 1;
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <DHT11_Read.12525+0x314>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <DHT11_Read.12525+0x314>)
 800285a:	801a      	strh	r2, [r3, #0]
	   genParity = humVal + tempVal;
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <DHT11_Read.12525+0x310>)
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <DHT11_Read.12525+0x314>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4413      	add	r3, r2
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <DHT11_Read.12525+0x318>)
 800286e:	701a      	strb	r2, [r3, #0]
	   dhtVal[0]= tempVal;
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <DHT11_Read.12525+0x314>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <DHT11_Read.12525+0x31c>)
 8002878:	701a      	strb	r2, [r3, #0]
	   dhtVal[1] = humVal;
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <DHT11_Read.12525+0x310>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <DHT11_Read.12525+0x31c>)
 8002882:	705a      	strb	r2, [r3, #1]
	   return 1;
 8002884:	2301      	movs	r3, #1
	}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	bf00      	nop
 8002890:	20004988 	.word	0x20004988
 8002894:	20000562 	.word	0x20000562
 8002898:	2000055a 	.word	0x2000055a
 800289c:	20000558 	.word	0x20000558
 80028a0:	20000563 	.word	0x20000563
 80028a4:	2000492c 	.word	0x2000492c

080028a8 <dcmotor1_handlertask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dcmotor1_handlertask */
void dcmotor1_handlertask(void const * argument)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]



  for(;;)
  {
	  ileri_motor1(85);
 80028b0:	2055      	movs	r0, #85	; 0x55
 80028b2:	f7ff fbd1 	bl	8002058 <ileri_motor1>
	  osDelay(1000);
 80028b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ba:	f007 fbbb 	bl	800a034 <osDelay>
	  geri_motor1(85);
 80028be:	2055      	movs	r0, #85	; 0x55
 80028c0:	f7ff fbe4 	bl	800208c <geri_motor1>
	  osDelay(1000);
 80028c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c8:	f007 fbb4 	bl	800a034 <osDelay>
	  ileri_motor1(85);
 80028cc:	e7f0      	b.n	80028b0 <dcmotor1_handlertask+0x8>

080028ce <dcmotor2_handlertask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dcmotor2_handlertask */
void dcmotor2_handlertask(void const * argument)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dcmotor2_handlertask */
  /* Infinite loop */
  for(;;)
  {
	  ileri_motor2(85);
 80028d6:	2055      	movs	r0, #85	; 0x55
 80028d8:	f7ff fc08 	bl	80020ec <ileri_motor2>
	  osDelay(1000);
 80028dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028e0:	f007 fba8 	bl	800a034 <osDelay>
	  geri_motor2(85);
 80028e4:	2055      	movs	r0, #85	; 0x55
 80028e6:	f7ff fc1b 	bl	8002120 <geri_motor2>
	  osDelay(1000);
 80028ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ee:	f007 fba1 	bl	800a034 <osDelay>
	  ileri_motor2(85);
 80028f2:	e7f0      	b.n	80028d6 <dcmotor2_handlertask+0x8>
 80028f4:	0000      	movs	r0, r0
	...

080028f8 <NEXTION_SendFloat.12577>:
void nextionsenddata_handlertask(void const * argument)
{
  /* USER CODE BEGIN nextionsenddata_handlertask */
  /* Infinite loop */
	void NEXTION_SendFloat (char *obj, float num, int dp)
	{
 80028f8:	b5b0      	push	{r4, r5, r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	ed87 0a02 	vstr	s0, [r7, #8]
 8002904:	6079      	str	r1, [r7, #4]
 8002906:	f8c7 c000 	str.w	ip, [r7]


	   uint8_t *buffer = malloc(30*sizeof (char));
 800290a:	201e      	movs	r0, #30
 800290c:	f016 fb14 	bl	8018f38 <malloc>
 8002910:	4603      	mov	r3, r0
 8002912:	61fb      	str	r3, [r7, #28]
	   int len = sprintf ((char *)mymessage, "%s.vvs1=%d", obj, dp);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4929      	ldr	r1, [pc, #164]	; (80029c0 <NEXTION_SendFloat.12577+0xc8>)
 800291a:	482a      	ldr	r0, [pc, #168]	; (80029c4 <NEXTION_SendFloat.12577+0xcc>)
 800291c:	f017 f8ca 	bl	8019ab4 <siprintf>
 8002920:	61b8      	str	r0, [r7, #24]
	   HAL_UART_Transmit(&huart1, buffer, len, 1000);
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	b29a      	uxth	r2, r3
 8002926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292a:	69f9      	ldr	r1, [r7, #28]
 800292c:	4826      	ldr	r0, [pc, #152]	; (80029c8 <NEXTION_SendFloat.12577+0xd0>)
 800292e:	f006 fa80 	bl	8008e32 <HAL_UART_Transmit>
	   HAL_UART_Transmit(&huart1, cmdend, 3, 100);
 8002932:	2364      	movs	r3, #100	; 0x64
 8002934:	2203      	movs	r2, #3
 8002936:	4925      	ldr	r1, [pc, #148]	; (80029cc <NEXTION_SendFloat.12577+0xd4>)
 8002938:	4823      	ldr	r0, [pc, #140]	; (80029c8 <NEXTION_SendFloat.12577+0xd0>)
 800293a:	f006 fa7a 	bl	8008e32 <HAL_UART_Transmit>

	   int32_t number = num*(pow(10,dp));
 800293e:	68b8      	ldr	r0, [r7, #8]
 8002940:	f7fd fe02 	bl	8000548 <__aeabi_f2d>
 8002944:	4604      	mov	r4, r0
 8002946:	460d      	mov	r5, r1
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7fd fdeb 	bl	8000524 <__aeabi_i2d>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	ec43 2b11 	vmov	d1, r2, r3
 8002956:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80029b8 <NEXTION_SendFloat.12577+0xc0>
 800295a:	f019 f9cd 	bl	801bcf8 <pow>
 800295e:	ec53 2b10 	vmov	r2, r3, d0
 8002962:	4620      	mov	r0, r4
 8002964:	4629      	mov	r1, r5
 8002966:	f7fd fe47 	bl	80005f8 <__aeabi_dmul>
 800296a:	4603      	mov	r3, r0
 800296c:	460c      	mov	r4, r1
 800296e:	4618      	mov	r0, r3
 8002970:	4621      	mov	r1, r4
 8002972:	f7fe f8f1 	bl	8000b58 <__aeabi_d2iz>
 8002976:	4603      	mov	r3, r0
 8002978:	617b      	str	r3, [r7, #20]
	   len = sprintf ((char *)mymessage, "%s.val=%ld", obj, number);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4914      	ldr	r1, [pc, #80]	; (80029d0 <NEXTION_SendFloat.12577+0xd8>)
 8002980:	4810      	ldr	r0, [pc, #64]	; (80029c4 <NEXTION_SendFloat.12577+0xcc>)
 8002982:	f017 f897 	bl	8019ab4 <siprintf>
 8002986:	61b8      	str	r0, [r7, #24]
	   HAL_UART_Transmit(&huart1, mymessage, len, 1000);
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	b29a      	uxth	r2, r3
 800298c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002990:	490c      	ldr	r1, [pc, #48]	; (80029c4 <NEXTION_SendFloat.12577+0xcc>)
 8002992:	480d      	ldr	r0, [pc, #52]	; (80029c8 <NEXTION_SendFloat.12577+0xd0>)
 8002994:	f006 fa4d 	bl	8008e32 <HAL_UART_Transmit>
	   HAL_UART_Transmit(&huart1, cmdend, 3, 100);
 8002998:	2364      	movs	r3, #100	; 0x64
 800299a:	2203      	movs	r2, #3
 800299c:	490b      	ldr	r1, [pc, #44]	; (80029cc <NEXTION_SendFloat.12577+0xd4>)
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <NEXTION_SendFloat.12577+0xd0>)
 80029a0:	f006 fa47 	bl	8008e32 <HAL_UART_Transmit>
	   free(buffer);
 80029a4:	69f8      	ldr	r0, [r7, #28]
 80029a6:	f016 facf 	bl	8018f48 <free>
	}
 80029aa:	bf00      	nop
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bdb0      	pop	{r4, r5, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	f3af 8000 	nop.w
 80029b8:	00000000 	.word	0x00000000
 80029bc:	40240000 	.word	0x40240000
 80029c0:	0801d264 	.word	0x0801d264
 80029c4:	20004b7c 	.word	0x20004b7c
 80029c8:	20004ae0 	.word	0x20004ae0
 80029cc:	20000008 	.word	0x20000008
 80029d0:	0801d270 	.word	0x0801d270

080029d4 <nextionsenddata_handlertask>:
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
void nextionsenddata_handlertask(void const * argument)
 80029dc:	f107 0320 	add.w	r3, r7, #32
 80029e0:	60fb      	str	r3, [r7, #12]
  for(;;)
  {

	  sprintf((char*)mymessage,"n0.val=%d",distance);
 80029e2:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <nextionsenddata_handlertask+0x68>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fdae 	bl	8000548 <__aeabi_f2d>
 80029ec:	4603      	mov	r3, r0
 80029ee:	460c      	mov	r4, r1
 80029f0:	461a      	mov	r2, r3
 80029f2:	4623      	mov	r3, r4
 80029f4:	4912      	ldr	r1, [pc, #72]	; (8002a40 <nextionsenddata_handlertask+0x6c>)
 80029f6:	4813      	ldr	r0, [pc, #76]	; (8002a44 <nextionsenddata_handlertask+0x70>)
 80029f8:	f017 f85c 	bl	8019ab4 <siprintf>
	  	  HAL_UART_Transmit(&huart1, mymessage, strlen(mymessage), 100);
 80029fc:	4811      	ldr	r0, [pc, #68]	; (8002a44 <nextionsenddata_handlertask+0x70>)
 80029fe:	f7fd fbe7 	bl	80001d0 <strlen>
 8002a02:	4603      	mov	r3, r0
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	2364      	movs	r3, #100	; 0x64
 8002a08:	490e      	ldr	r1, [pc, #56]	; (8002a44 <nextionsenddata_handlertask+0x70>)
 8002a0a:	480f      	ldr	r0, [pc, #60]	; (8002a48 <nextionsenddata_handlertask+0x74>)
 8002a0c:	f006 fa11 	bl	8008e32 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart1, cmdend, 3, 100);
 8002a10:	2364      	movs	r3, #100	; 0x64
 8002a12:	2203      	movs	r2, #3
 8002a14:	490d      	ldr	r1, [pc, #52]	; (8002a4c <nextionsenddata_handlertask+0x78>)
 8002a16:	480c      	ldr	r0, [pc, #48]	; (8002a48 <nextionsenddata_handlertask+0x74>)
 8002a18:	f006 fa0b 	bl	8008e32 <HAL_UART_Transmit>
	  	  NEXTION_SendFloat("x0", sicaklik, 3);
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <nextionsenddata_handlertask+0x7c>)
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	469c      	mov	ip, r3
 8002a28:	2103      	movs	r1, #3
 8002a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2e:	4809      	ldr	r0, [pc, #36]	; (8002a54 <nextionsenddata_handlertask+0x80>)
 8002a30:	f7ff ff62 	bl	80028f8 <NEXTION_SendFloat.12577>


    osDelay(1);
 8002a34:	2001      	movs	r0, #1
 8002a36:	f007 fafd 	bl	800a034 <osDelay>
	  sprintf((char*)mymessage,"n0.val=%d",distance);
 8002a3a:	e7d2      	b.n	80029e2 <nextionsenddata_handlertask+0xe>
 8002a3c:	20004a34 	.word	0x20004a34
 8002a40:	0801d27c 	.word	0x0801d27c
 8002a44:	20004b7c 	.word	0x20004b7c
 8002a48:	20004ae0 	.word	0x20004ae0
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	20000550 	.word	0x20000550
 8002a54:	0801d288 	.word	0x0801d288

08002a58 <mpu6050_handlertask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mpu6050_handlertask */
void mpu6050_handlertask(void const * argument)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mpu6050_handlertask */
  /* Infinite loop */
	  while (MPU6050_Init(&hi2c1) == 1);
 8002a60:	bf00      	nop
 8002a62:	4808      	ldr	r0, [pc, #32]	; (8002a84 <mpu6050_handlertask+0x2c>)
 8002a64:	f000 f9f9 	bl	8002e5a <MPU6050_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d0f9      	beq.n	8002a62 <mpu6050_handlertask+0xa>
  for(;;)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002a6e:	4906      	ldr	r1, [pc, #24]	; (8002a88 <mpu6050_handlertask+0x30>)
 8002a70:	4804      	ldr	r0, [pc, #16]	; (8002a84 <mpu6050_handlertask+0x2c>)
 8002a72:	f000 fa49 	bl	8002f08 <MPU6050_Read_All>
	  HAL_Delay (100);
 8002a76:	2064      	movs	r0, #100	; 0x64
 8002a78:	f001 fcea 	bl	8004450 <HAL_Delay>
    osDelay(1);
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f007 fad9 	bl	800a034 <osDelay>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002a82:	e7f4      	b.n	8002a6e <mpu6050_handlertask+0x16>
 8002a84:	20004930 	.word	0x20004930
 8002a88:	200049c0 	.word	0x200049c0

08002a8c <usbt_tx_rx_handlertask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbt_tx_rx_handlertask */
void usbt_tx_rx_handlertask(void const * argument)
{
 8002a8c:	b5b0      	push	{r4, r5, r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usbt_tx_rx_handlertask */
  /* Infinite loop */
  for(;;)
  {HAL_UART_Receive(&huart3, (uint8_t*)rx_buffer, 50, 100);
 8002a94:	2364      	movs	r3, #100	; 0x64
 8002a96:	2232      	movs	r2, #50	; 0x32
 8002a98:	49a4      	ldr	r1, [pc, #656]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002a9a:	48a5      	ldr	r0, [pc, #660]	; (8002d30 <usbt_tx_rx_handlertask+0x2a4>)
 8002a9c:	f006 fa62 	bl	8008f64 <HAL_UART_Receive>


  if(rx_buffer[0] =='m' &&  rx_buffer[1] =='o' &&   rx_buffer[2] =='t' &&   rx_buffer[3] =='o' &&
 8002aa0:	4ba2      	ldr	r3, [pc, #648]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b6d      	cmp	r3, #109	; 0x6d
 8002aa6:	d148      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
 8002aa8:	4ba0      	ldr	r3, [pc, #640]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	2b6f      	cmp	r3, #111	; 0x6f
 8002aae:	d144      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
 8002ab0:	4b9e      	ldr	r3, [pc, #632]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002ab2:	789b      	ldrb	r3, [r3, #2]
 8002ab4:	2b74      	cmp	r3, #116	; 0x74
 8002ab6:	d140      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
 8002ab8:	4b9c      	ldr	r3, [pc, #624]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002aba:	78db      	ldrb	r3, [r3, #3]
 8002abc:	2b6f      	cmp	r3, #111	; 0x6f
 8002abe:	d13c      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
		  rx_buffer[4] =='r' && rx_buffer[5] =='1' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='i' &&
 8002ac0:	4b9a      	ldr	r3, [pc, #616]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002ac2:	791b      	ldrb	r3, [r3, #4]
  if(rx_buffer[0] =='m' &&  rx_buffer[1] =='o' &&   rx_buffer[2] =='t' &&   rx_buffer[3] =='o' &&
 8002ac4:	2b72      	cmp	r3, #114	; 0x72
 8002ac6:	d138      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
		  rx_buffer[4] =='r' && rx_buffer[5] =='1' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='i' &&
 8002ac8:	4b98      	ldr	r3, [pc, #608]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002aca:	795b      	ldrb	r3, [r3, #5]
 8002acc:	2b31      	cmp	r3, #49	; 0x31
 8002ace:	d134      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
 8002ad0:	4b96      	ldr	r3, [pc, #600]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002ad2:	799b      	ldrb	r3, [r3, #6]
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d130      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
 8002ad8:	4b94      	ldr	r3, [pc, #592]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002ada:	79db      	ldrb	r3, [r3, #7]
 8002adc:	2b69      	cmp	r3, #105	; 0x69
 8002ade:	d12c      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
		  rx_buffer[8] =='l' &&   rx_buffer[9] =='e' &&   rx_buffer[10] =='r' &&   rx_buffer[11] =='i' )
 8002ae0:	4b92      	ldr	r3, [pc, #584]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002ae2:	7a1b      	ldrb	r3, [r3, #8]
		  rx_buffer[4] =='r' && rx_buffer[5] =='1' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='i' &&
 8002ae4:	2b6c      	cmp	r3, #108	; 0x6c
 8002ae6:	d128      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
		  rx_buffer[8] =='l' &&   rx_buffer[9] =='e' &&   rx_buffer[10] =='r' &&   rx_buffer[11] =='i' )
 8002ae8:	4b90      	ldr	r3, [pc, #576]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002aea:	7a5b      	ldrb	r3, [r3, #9]
 8002aec:	2b65      	cmp	r3, #101	; 0x65
 8002aee:	d124      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
 8002af0:	4b8e      	ldr	r3, [pc, #568]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002af2:	7a9b      	ldrb	r3, [r3, #10]
 8002af4:	2b72      	cmp	r3, #114	; 0x72
 8002af6:	d120      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
 8002af8:	4b8c      	ldr	r3, [pc, #560]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002afa:	7adb      	ldrb	r3, [r3, #11]
 8002afc:	2b69      	cmp	r3, #105	; 0x69
 8002afe:	d11c      	bne.n	8002b3a <usbt_tx_rx_handlertask+0xae>
  {

	  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, sprintf(tx_buffer,"1. motor ileri calisti. "), 100);
 8002b00:	4a8c      	ldr	r2, [pc, #560]	; (8002d34 <usbt_tx_rx_handlertask+0x2a8>)
 8002b02:	4b8d      	ldr	r3, [pc, #564]	; (8002d38 <usbt_tx_rx_handlertask+0x2ac>)
 8002b04:	4615      	mov	r5, r2
 8002b06:	461c      	mov	r4, r3
 8002b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0a:	6028      	str	r0, [r5, #0]
 8002b0c:	6069      	str	r1, [r5, #4]
 8002b0e:	60aa      	str	r2, [r5, #8]
 8002b10:	60eb      	str	r3, [r5, #12]
 8002b12:	cc03      	ldmia	r4!, {r0, r1}
 8002b14:	6128      	str	r0, [r5, #16]
 8002b16:	6169      	str	r1, [r5, #20]
 8002b18:	7823      	ldrb	r3, [r4, #0]
 8002b1a:	762b      	strb	r3, [r5, #24]
 8002b1c:	2318      	movs	r3, #24
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	2364      	movs	r3, #100	; 0x64
 8002b22:	4984      	ldr	r1, [pc, #528]	; (8002d34 <usbt_tx_rx_handlertask+0x2a8>)
 8002b24:	4882      	ldr	r0, [pc, #520]	; (8002d30 <usbt_tx_rx_handlertask+0x2a4>)
 8002b26:	f006 f984 	bl	8008e32 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b2e:	4883      	ldr	r0, [pc, #524]	; (8002d3c <usbt_tx_rx_handlertask+0x2b0>)
 8002b30:	f003 fc49 	bl	80063c6 <HAL_GPIO_TogglePin>
	  ileri_motor1(85);
 8002b34:	2055      	movs	r0, #85	; 0x55
 8002b36:	f7ff fa8f 	bl	8002058 <ileri_motor1>


  }

  if(rx_buffer[0] =='m' &&  rx_buffer[1] =='o' &&   rx_buffer[2] =='t' &&   rx_buffer[3] =='o' &&
 8002b3a:	4b7c      	ldr	r3, [pc, #496]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b6d      	cmp	r3, #109	; 0x6d
 8002b40:	d143      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
 8002b42:	4b7a      	ldr	r3, [pc, #488]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b44:	785b      	ldrb	r3, [r3, #1]
 8002b46:	2b6f      	cmp	r3, #111	; 0x6f
 8002b48:	d13f      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
 8002b4a:	4b78      	ldr	r3, [pc, #480]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b4c:	789b      	ldrb	r3, [r3, #2]
 8002b4e:	2b74      	cmp	r3, #116	; 0x74
 8002b50:	d13b      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b54:	78db      	ldrb	r3, [r3, #3]
 8002b56:	2b6f      	cmp	r3, #111	; 0x6f
 8002b58:	d137      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
		  rx_buffer[4] =='r' && rx_buffer[5] =='1' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='g' &&
 8002b5a:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b5c:	791b      	ldrb	r3, [r3, #4]
  if(rx_buffer[0] =='m' &&  rx_buffer[1] =='o' &&   rx_buffer[2] =='t' &&   rx_buffer[3] =='o' &&
 8002b5e:	2b72      	cmp	r3, #114	; 0x72
 8002b60:	d133      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
		  rx_buffer[4] =='r' && rx_buffer[5] =='1' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='g' &&
 8002b62:	4b72      	ldr	r3, [pc, #456]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b64:	795b      	ldrb	r3, [r3, #5]
 8002b66:	2b31      	cmp	r3, #49	; 0x31
 8002b68:	d12f      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
 8002b6a:	4b70      	ldr	r3, [pc, #448]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b6c:	799b      	ldrb	r3, [r3, #6]
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d12b      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
 8002b72:	4b6e      	ldr	r3, [pc, #440]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b74:	79db      	ldrb	r3, [r3, #7]
 8002b76:	2b67      	cmp	r3, #103	; 0x67
 8002b78:	d127      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
		  rx_buffer[8] =='e' &&   rx_buffer[9] =='r' &&   rx_buffer[10] =='i' )
 8002b7a:	4b6c      	ldr	r3, [pc, #432]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b7c:	7a1b      	ldrb	r3, [r3, #8]
		  rx_buffer[4] =='r' && rx_buffer[5] =='1' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='g' &&
 8002b7e:	2b65      	cmp	r3, #101	; 0x65
 8002b80:	d123      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
		  rx_buffer[8] =='e' &&   rx_buffer[9] =='r' &&   rx_buffer[10] =='i' )
 8002b82:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b84:	7a5b      	ldrb	r3, [r3, #9]
 8002b86:	2b72      	cmp	r3, #114	; 0x72
 8002b88:	d11f      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
 8002b8a:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002b8c:	7a9b      	ldrb	r3, [r3, #10]
 8002b8e:	2b69      	cmp	r3, #105	; 0x69
 8002b90:	d11b      	bne.n	8002bca <usbt_tx_rx_handlertask+0x13e>
  {

	  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, sprintf(tx_buffer,"1. motor geri calisti. "), 100);
 8002b92:	4a68      	ldr	r2, [pc, #416]	; (8002d34 <usbt_tx_rx_handlertask+0x2a8>)
 8002b94:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <usbt_tx_rx_handlertask+0x2b4>)
 8002b96:	4615      	mov	r5, r2
 8002b98:	461c      	mov	r4, r3
 8002b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9c:	6028      	str	r0, [r5, #0]
 8002b9e:	6069      	str	r1, [r5, #4]
 8002ba0:	60aa      	str	r2, [r5, #8]
 8002ba2:	60eb      	str	r3, [r5, #12]
 8002ba4:	cc03      	ldmia	r4!, {r0, r1}
 8002ba6:	6128      	str	r0, [r5, #16]
 8002ba8:	6169      	str	r1, [r5, #20]
 8002baa:	2317      	movs	r3, #23
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	2364      	movs	r3, #100	; 0x64
 8002bb0:	4960      	ldr	r1, [pc, #384]	; (8002d34 <usbt_tx_rx_handlertask+0x2a8>)
 8002bb2:	485f      	ldr	r0, [pc, #380]	; (8002d30 <usbt_tx_rx_handlertask+0x2a4>)
 8002bb4:	f006 f93d 	bl	8008e32 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bbe:	485f      	ldr	r0, [pc, #380]	; (8002d3c <usbt_tx_rx_handlertask+0x2b0>)
 8002bc0:	f003 fbe8 	bl	8006394 <HAL_GPIO_WritePin>


	  geri_motor1(85);
 8002bc4:	2055      	movs	r0, #85	; 0x55
 8002bc6:	f7ff fa61 	bl	800208c <geri_motor1>


  }


  if(rx_buffer[0] =='m' &&  rx_buffer[1] =='o' &&   rx_buffer[2] =='t' &&   rx_buffer[3] =='o' &&
 8002bca:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b6d      	cmp	r3, #109	; 0x6d
 8002bd0:	d148      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
 8002bd2:	4b56      	ldr	r3, [pc, #344]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002bd4:	785b      	ldrb	r3, [r3, #1]
 8002bd6:	2b6f      	cmp	r3, #111	; 0x6f
 8002bd8:	d144      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
 8002bda:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002bdc:	789b      	ldrb	r3, [r3, #2]
 8002bde:	2b74      	cmp	r3, #116	; 0x74
 8002be0:	d140      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
 8002be2:	4b52      	ldr	r3, [pc, #328]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002be4:	78db      	ldrb	r3, [r3, #3]
 8002be6:	2b6f      	cmp	r3, #111	; 0x6f
 8002be8:	d13c      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
		  rx_buffer[4] =='r' && rx_buffer[5] =='2' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='i' &&
 8002bea:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002bec:	791b      	ldrb	r3, [r3, #4]
  if(rx_buffer[0] =='m' &&  rx_buffer[1] =='o' &&   rx_buffer[2] =='t' &&   rx_buffer[3] =='o' &&
 8002bee:	2b72      	cmp	r3, #114	; 0x72
 8002bf0:	d138      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
		  rx_buffer[4] =='r' && rx_buffer[5] =='2' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='i' &&
 8002bf2:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002bf4:	795b      	ldrb	r3, [r3, #5]
 8002bf6:	2b32      	cmp	r3, #50	; 0x32
 8002bf8:	d134      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
 8002bfa:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002bfc:	799b      	ldrb	r3, [r3, #6]
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d130      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
 8002c02:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c04:	79db      	ldrb	r3, [r3, #7]
 8002c06:	2b69      	cmp	r3, #105	; 0x69
 8002c08:	d12c      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
		  rx_buffer[8] =='l' &&   rx_buffer[9] =='e' &&   rx_buffer[10] =='r' &&   rx_buffer[11] =='i' )
 8002c0a:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c0c:	7a1b      	ldrb	r3, [r3, #8]
		  rx_buffer[4] =='r' && rx_buffer[5] =='2' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='i' &&
 8002c0e:	2b6c      	cmp	r3, #108	; 0x6c
 8002c10:	d128      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
		  rx_buffer[8] =='l' &&   rx_buffer[9] =='e' &&   rx_buffer[10] =='r' &&   rx_buffer[11] =='i' )
 8002c12:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c14:	7a5b      	ldrb	r3, [r3, #9]
 8002c16:	2b65      	cmp	r3, #101	; 0x65
 8002c18:	d124      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
 8002c1a:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c1c:	7a9b      	ldrb	r3, [r3, #10]
 8002c1e:	2b72      	cmp	r3, #114	; 0x72
 8002c20:	d120      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
 8002c22:	4b42      	ldr	r3, [pc, #264]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c24:	7adb      	ldrb	r3, [r3, #11]
 8002c26:	2b69      	cmp	r3, #105	; 0x69
 8002c28:	d11c      	bne.n	8002c64 <usbt_tx_rx_handlertask+0x1d8>
  {

	  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, sprintf(tx_buffer,"2. motor ileri calisti. "), 100);
 8002c2a:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <usbt_tx_rx_handlertask+0x2a8>)
 8002c2c:	4b45      	ldr	r3, [pc, #276]	; (8002d44 <usbt_tx_rx_handlertask+0x2b8>)
 8002c2e:	4615      	mov	r5, r2
 8002c30:	461c      	mov	r4, r3
 8002c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c34:	6028      	str	r0, [r5, #0]
 8002c36:	6069      	str	r1, [r5, #4]
 8002c38:	60aa      	str	r2, [r5, #8]
 8002c3a:	60eb      	str	r3, [r5, #12]
 8002c3c:	cc03      	ldmia	r4!, {r0, r1}
 8002c3e:	6128      	str	r0, [r5, #16]
 8002c40:	6169      	str	r1, [r5, #20]
 8002c42:	7823      	ldrb	r3, [r4, #0]
 8002c44:	762b      	strb	r3, [r5, #24]
 8002c46:	2318      	movs	r3, #24
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	2364      	movs	r3, #100	; 0x64
 8002c4c:	4939      	ldr	r1, [pc, #228]	; (8002d34 <usbt_tx_rx_handlertask+0x2a8>)
 8002c4e:	4838      	ldr	r0, [pc, #224]	; (8002d30 <usbt_tx_rx_handlertask+0x2a4>)
 8002c50:	f006 f8ef 	bl	8008e32 <HAL_UART_Transmit>
	  ileri_motor2(85);
 8002c54:	2055      	movs	r0, #85	; 0x55
 8002c56:	f7ff fa49 	bl	80020ec <ileri_motor2>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c5e:	4837      	ldr	r0, [pc, #220]	; (8002d3c <usbt_tx_rx_handlertask+0x2b0>)
 8002c60:	f003 fbb1 	bl	80063c6 <HAL_GPIO_TogglePin>


  }

  if(rx_buffer[0] =='m' &&  rx_buffer[1] =='o' &&   rx_buffer[2] =='t' &&   rx_buffer[3] =='o' &&
 8002c64:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b6d      	cmp	r3, #109	; 0x6d
 8002c6a:	d143      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
 8002c6c:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c6e:	785b      	ldrb	r3, [r3, #1]
 8002c70:	2b6f      	cmp	r3, #111	; 0x6f
 8002c72:	d13f      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c76:	789b      	ldrb	r3, [r3, #2]
 8002c78:	2b74      	cmp	r3, #116	; 0x74
 8002c7a:	d13b      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c7e:	78db      	ldrb	r3, [r3, #3]
 8002c80:	2b6f      	cmp	r3, #111	; 0x6f
 8002c82:	d137      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
		  rx_buffer[4] =='r' && rx_buffer[5] =='2' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='g' &&
 8002c84:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c86:	791b      	ldrb	r3, [r3, #4]
  if(rx_buffer[0] =='m' &&  rx_buffer[1] =='o' &&   rx_buffer[2] =='t' &&   rx_buffer[3] =='o' &&
 8002c88:	2b72      	cmp	r3, #114	; 0x72
 8002c8a:	d133      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
		  rx_buffer[4] =='r' && rx_buffer[5] =='2' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='g' &&
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c8e:	795b      	ldrb	r3, [r3, #5]
 8002c90:	2b32      	cmp	r3, #50	; 0x32
 8002c92:	d12f      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c96:	799b      	ldrb	r3, [r3, #6]
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d12b      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002c9e:	79db      	ldrb	r3, [r3, #7]
 8002ca0:	2b67      	cmp	r3, #103	; 0x67
 8002ca2:	d127      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
		  rx_buffer[8] =='e' &&   rx_buffer[9] =='r' &&   rx_buffer[10] =='i' )
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002ca6:	7a1b      	ldrb	r3, [r3, #8]
		  rx_buffer[4] =='r' && rx_buffer[5] =='2' &&  rx_buffer[6] ==' ' &&   rx_buffer[7] =='g' &&
 8002ca8:	2b65      	cmp	r3, #101	; 0x65
 8002caa:	d123      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
		  rx_buffer[8] =='e' &&   rx_buffer[9] =='r' &&   rx_buffer[10] =='i' )
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002cae:	7a5b      	ldrb	r3, [r3, #9]
 8002cb0:	2b72      	cmp	r3, #114	; 0x72
 8002cb2:	d11f      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <usbt_tx_rx_handlertask+0x2a0>)
 8002cb6:	7a9b      	ldrb	r3, [r3, #10]
 8002cb8:	2b69      	cmp	r3, #105	; 0x69
 8002cba:	d11b      	bne.n	8002cf4 <usbt_tx_rx_handlertask+0x268>
  {

	  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, sprintf(tx_buffer,"2. motor geri calisti. "), 100);
 8002cbc:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <usbt_tx_rx_handlertask+0x2a8>)
 8002cbe:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <usbt_tx_rx_handlertask+0x2bc>)
 8002cc0:	4615      	mov	r5, r2
 8002cc2:	461c      	mov	r4, r3
 8002cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc6:	6028      	str	r0, [r5, #0]
 8002cc8:	6069      	str	r1, [r5, #4]
 8002cca:	60aa      	str	r2, [r5, #8]
 8002ccc:	60eb      	str	r3, [r5, #12]
 8002cce:	cc03      	ldmia	r4!, {r0, r1}
 8002cd0:	6128      	str	r0, [r5, #16]
 8002cd2:	6169      	str	r1, [r5, #20]
 8002cd4:	2317      	movs	r3, #23
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	2364      	movs	r3, #100	; 0x64
 8002cda:	4916      	ldr	r1, [pc, #88]	; (8002d34 <usbt_tx_rx_handlertask+0x2a8>)
 8002cdc:	4814      	ldr	r0, [pc, #80]	; (8002d30 <usbt_tx_rx_handlertask+0x2a4>)
 8002cde:	f006 f8a8 	bl	8008e32 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ce8:	4814      	ldr	r0, [pc, #80]	; (8002d3c <usbt_tx_rx_handlertask+0x2b0>)
 8002cea:	f003 fb53 	bl	8006394 <HAL_GPIO_WritePin>

	  geri_motor2(85);
 8002cee:	2055      	movs	r0, #85	; 0x55
 8002cf0:	f7ff fa16 	bl	8002120 <geri_motor2>


  }


  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==GPIO_PIN_SET)
 8002cf4:	2140      	movs	r1, #64	; 0x40
 8002cf6:	4815      	ldr	r0, [pc, #84]	; (8002d4c <usbt_tx_rx_handlertask+0x2c0>)
 8002cf8:	f003 fb34 	bl	8006364 <HAL_GPIO_ReadPin>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d131      	bne.n	8002d66 <usbt_tx_rx_handlertask+0x2da>
  {


	  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, sprintf(tx_buffer,"1. ve 2. motorlar durduruldu. "), 100);
 8002d02:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <usbt_tx_rx_handlertask+0x2a8>)
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <usbt_tx_rx_handlertask+0x2c4>)
 8002d06:	4615      	mov	r5, r2
 8002d08:	461c      	mov	r4, r3
 8002d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0c:	6028      	str	r0, [r5, #0]
 8002d0e:	6069      	str	r1, [r5, #4]
 8002d10:	60aa      	str	r2, [r5, #8]
 8002d12:	60eb      	str	r3, [r5, #12]
 8002d14:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002d16:	6128      	str	r0, [r5, #16]
 8002d18:	6169      	str	r1, [r5, #20]
 8002d1a:	61aa      	str	r2, [r5, #24]
 8002d1c:	8823      	ldrh	r3, [r4, #0]
 8002d1e:	78a2      	ldrb	r2, [r4, #2]
 8002d20:	83ab      	strh	r3, [r5, #28]
 8002d22:	4613      	mov	r3, r2
 8002d24:	77ab      	strb	r3, [r5, #30]
 8002d26:	231e      	movs	r3, #30
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	e013      	b.n	8002d54 <usbt_tx_rx_handlertask+0x2c8>
 8002d2c:	20004a78 	.word	0x20004a78
 8002d30:	200048ec 	.word	0x200048ec
 8002d34:	20004aac 	.word	0x20004aac
 8002d38:	0801d28c 	.word	0x0801d28c
 8002d3c:	40020c00 	.word	0x40020c00
 8002d40:	0801d2a8 	.word	0x0801d2a8
 8002d44:	0801d2c0 	.word	0x0801d2c0
 8002d48:	0801d2dc 	.word	0x0801d2dc
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	0801d244 	.word	0x0801d244
 8002d54:	2364      	movs	r3, #100	; 0x64
 8002d56:	4906      	ldr	r1, [pc, #24]	; (8002d70 <usbt_tx_rx_handlertask+0x2e4>)
 8002d58:	4806      	ldr	r0, [pc, #24]	; (8002d74 <usbt_tx_rx_handlertask+0x2e8>)
 8002d5a:	f006 f86a 	bl	8008e32 <HAL_UART_Transmit>


	  dur_motor1();
 8002d5e:	f7ff f9af 	bl	80020c0 <dur_motor1>
	  dur_motor2();
 8002d62:	f7ff f9f7 	bl	8002154 <dur_motor2>

  }

    osDelay(1);
 8002d66:	2001      	movs	r0, #1
 8002d68:	f007 f964 	bl	800a034 <osDelay>
  {HAL_UART_Receive(&huart3, (uint8_t*)rx_buffer, 50, 100);
 8002d6c:	e692      	b.n	8002a94 <usbt_tx_rx_handlertask+0x8>
 8002d6e:	bf00      	nop
 8002d70:	20004aac 	.word	0x20004aac
 8002d74:	200048ec 	.word	0x200048ec

08002d78 <canbussendata_handlertask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_canbussendata_handlertask */
void canbussendata_handlertask(void const * argument)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN canbussendata_handlertask */
  /* Infinite loop */
	  HAL_CAN_Start(&hcan1);
 8002d80:	481e      	ldr	r0, [pc, #120]	; (8002dfc <canbussendata_handlertask+0x84>)
 8002d82:	f001 fd63 	bl	800484c <HAL_CAN_Start>
	     // Enable interrupts
	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002d86:	2102      	movs	r1, #2
 8002d88:	481c      	ldr	r0, [pc, #112]	; (8002dfc <canbussendata_handlertask+0x84>)
 8002d8a:	f001 fe7e 	bl	8004a8a <HAL_CAN_ActivateNotification>

	    //Set Transmit Parameters
	   pTxHeader.DLC = 1; // GÖNDERECEĞİMİZ MESAJ KAÇ BYTE
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <canbussendata_handlertask+0x88>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	611a      	str	r2, [r3, #16]
	   pTxHeader.IDE = CAN_ID_EXT;
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <canbussendata_handlertask+0x88>)
 8002d96:	2204      	movs	r2, #4
 8002d98:	609a      	str	r2, [r3, #8]
	   pTxHeader.RTR = CAN_RTR_DATA;
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <canbussendata_handlertask+0x88>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
	   pTxHeader.ExtId = 0x1FBF9000;
 8002da0:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <canbussendata_handlertask+0x88>)
 8002da2:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <canbussendata_handlertask+0x8c>)
 8002da4:	605a      	str	r2, [r3, #4]

	   // Set Filter Parameters
	   sFilterConfig.FilterActivation = ENABLE;
 8002da6:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <canbussendata_handlertask+0x90>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	621a      	str	r2, [r3, #32]
	   sFilterConfig.FilterBank =0;
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <canbussendata_handlertask+0x90>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
	   sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <canbussendata_handlertask+0x90>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
	   sFilterConfig.FilterIdHigh=0x1FBF9000 >> 13; // 0x1FBF9000 0x1FBF9FFF
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <canbussendata_handlertask+0x90>)
 8002dba:	f64f 52fc 	movw	r2, #65020	; 0xfdfc
 8002dbe:	601a      	str	r2, [r3, #0]
	   sFilterConfig.FilterIdLow=0x0000;
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <canbussendata_handlertask+0x90>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]
	   sFilterConfig.FilterMaskIdHigh=0xFFFFF000 >> 13;
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <canbussendata_handlertask+0x90>)
 8002dc8:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <canbussendata_handlertask+0x94>)
 8002dca:	609a      	str	r2, [r3, #8]
	   sFilterConfig.FilterMaskIdLow=0x0000;
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <canbussendata_handlertask+0x90>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
	   sFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <canbussendata_handlertask+0x90>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
	   sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <canbussendata_handlertask+0x90>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	61da      	str	r2, [r3, #28]
	   HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8002dde:	490a      	ldr	r1, [pc, #40]	; (8002e08 <canbussendata_handlertask+0x90>)
 8002de0:	4806      	ldr	r0, [pc, #24]	; (8002dfc <canbussendata_handlertask+0x84>)
 8002de2:	f001 fc53 	bl	800468c <HAL_CAN_ConfigFilter>

  for(;;)
  {
	  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, &count,&pTxMailbox);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <canbussendata_handlertask+0x98>)
 8002de8:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <canbussendata_handlertask+0x9c>)
 8002dea:	4905      	ldr	r1, [pc, #20]	; (8002e00 <canbussendata_handlertask+0x88>)
 8002dec:	4803      	ldr	r0, [pc, #12]	; (8002dfc <canbussendata_handlertask+0x84>)
 8002dee:	f001 fd71 	bl	80048d4 <HAL_CAN_AddTxMessage>
    osDelay(1);
 8002df2:	2001      	movs	r0, #1
 8002df4:	f007 f91e 	bl	800a034 <osDelay>
	  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, &count,&pTxMailbox);
 8002df8:	e7f5      	b.n	8002de6 <canbussendata_handlertask+0x6e>
 8002dfa:	bf00      	nop
 8002dfc:	20004be4 	.word	0x20004be4
 8002e00:	20004a1c 	.word	0x20004a1c
 8002e04:	1fbf9000 	.word	0x1fbf9000
 8002e08:	20004868 	.word	0x20004868
 8002e0c:	0007ffff 	.word	0x0007ffff
 8002e10:	200048e8 	.word	0x200048e8
 8002e14:	20004bae 	.word	0x20004bae

08002e18 <ethernet_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ethernet_handler */
void ethernet_handler(void const * argument)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //MX_LWIP_Process();

    osDelay(1);
 8002e20:	2001      	movs	r0, #1
 8002e22:	f007 f907 	bl	800a034 <osDelay>
 8002e26:	e7fb      	b.n	8002e20 <ethernet_handler+0x8>

08002e28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e3a:	f001 fae9 	bl	8004410 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40000c00 	.word	0x40000c00

08002e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b088      	sub	sp, #32
 8002e5e:	af04      	add	r7, sp, #16
 8002e60:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002e62:	2364      	movs	r3, #100	; 0x64
 8002e64:	9302      	str	r3, [sp, #8]
 8002e66:	2301      	movs	r3, #1
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	f107 030f 	add.w	r3, r7, #15
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2301      	movs	r3, #1
 8002e72:	2275      	movs	r2, #117	; 0x75
 8002e74:	21d0      	movs	r1, #208	; 0xd0
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f003 fdf0 	bl	8006a5c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b68      	cmp	r3, #104	; 0x68
 8002e80:	d13d      	bne.n	8002efe <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002e86:	2364      	movs	r3, #100	; 0x64
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	f107 030e 	add.w	r3, r7, #14
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	2301      	movs	r3, #1
 8002e96:	226b      	movs	r2, #107	; 0x6b
 8002e98:	21d0      	movs	r1, #208	; 0xd0
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f003 fce4 	bl	8006868 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002ea0:	2307      	movs	r3, #7
 8002ea2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002ea4:	2364      	movs	r3, #100	; 0x64
 8002ea6:	9302      	str	r3, [sp, #8]
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	f107 030e 	add.w	r3, r7, #14
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	2219      	movs	r2, #25
 8002eb6:	21d0      	movs	r1, #208	; 0xd0
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f003 fcd5 	bl	8006868 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002ec2:	2364      	movs	r3, #100	; 0x64
 8002ec4:	9302      	str	r3, [sp, #8]
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	f107 030e 	add.w	r3, r7, #14
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	221c      	movs	r2, #28
 8002ed4:	21d0      	movs	r1, #208	; 0xd0
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f003 fcc6 	bl	8006868 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002edc:	2300      	movs	r3, #0
 8002ede:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002ee0:	2364      	movs	r3, #100	; 0x64
 8002ee2:	9302      	str	r3, [sp, #8]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	f107 030e 	add.w	r3, r7, #14
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	221b      	movs	r2, #27
 8002ef2:	21d0      	movs	r1, #208	; 0xd0
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f003 fcb7 	bl	8006868 <HAL_I2C_Mem_Write>
        return 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <MPU6050_Init+0xa6>
    }
    return 1;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f0c:	b094      	sub	sp, #80	; 0x50
 8002f0e:	af04      	add	r7, sp, #16
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002f14:	2364      	movs	r3, #100	; 0x64
 8002f16:	9302      	str	r3, [sp, #8]
 8002f18:	230e      	movs	r3, #14
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	f107 0308 	add.w	r3, r7, #8
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2301      	movs	r3, #1
 8002f24:	223b      	movs	r2, #59	; 0x3b
 8002f26:	21d0      	movs	r1, #208	; 0xd0
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f003 fd97 	bl	8006a5c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002f2e:	7a3b      	ldrb	r3, [r7, #8]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	b21a      	sxth	r2, r3
 8002f34:	7a7b      	ldrb	r3, [r7, #9]
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b21a      	sxth	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002f40:	7abb      	ldrb	r3, [r7, #10]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	b21a      	sxth	r2, r3
 8002f46:	7afb      	ldrb	r3, [r7, #11]
 8002f48:	b21b      	sxth	r3, r3
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	b21a      	sxth	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002f52:	7b3b      	ldrb	r3, [r7, #12]
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	b21a      	sxth	r2, r3
 8002f58:	7b7b      	ldrb	r3, [r7, #13]
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	b21a      	sxth	r2, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002f64:	7bbb      	ldrb	r3, [r7, #14]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	b21a      	sxth	r2, r3
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	b21b      	sxth	r3, r3
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002f72:	7c3b      	ldrb	r3, [r7, #16]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	7c7b      	ldrb	r3, [r7, #17]
 8002f7a:	b21b      	sxth	r3, r3
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	b21a      	sxth	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002f84:	7cbb      	ldrb	r3, [r7, #18]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	b21b      	sxth	r3, r3
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	b21a      	sxth	r2, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002f96:	7d3b      	ldrb	r3, [r7, #20]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	b21a      	sxth	r2, r3
 8002f9c:	7d7b      	ldrb	r3, [r7, #21]
 8002f9e:	b21b      	sxth	r3, r3
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b21a      	sxth	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fab8 	bl	8000524 <__aeabi_i2d>
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	4bbd      	ldr	r3, [pc, #756]	; (80032b0 <MPU6050_Read_All+0x3a8>)
 8002fba:	f7fd fc47 	bl	800084c <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	6839      	ldr	r1, [r7, #0]
 8002fc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd faa8 	bl	8000524 <__aeabi_i2d>
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	4bb5      	ldr	r3, [pc, #724]	; (80032b0 <MPU6050_Read_All+0x3a8>)
 8002fda:	f7fd fc37 	bl	800084c <__aeabi_ddiv>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	6839      	ldr	r1, [r7, #0]
 8002fe4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd fa98 	bl	8000524 <__aeabi_i2d>
 8002ff4:	a3a8      	add	r3, pc, #672	; (adr r3, 8003298 <MPU6050_Read_All+0x390>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f7fd fc27 	bl	800084c <__aeabi_ddiv>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8003008:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003014:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80032b4 <MPU6050_Read_All+0x3ac>
 8003018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800301c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80032b8 <MPU6050_Read_All+0x3b0>
 8003020:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fa77 	bl	8000524 <__aeabi_i2d>
 8003036:	a39a      	add	r3, pc, #616	; (adr r3, 80032a0 <MPU6050_Read_All+0x398>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd fc06 	bl	800084c <__aeabi_ddiv>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fa67 	bl	8000524 <__aeabi_i2d>
 8003056:	a392      	add	r3, pc, #584	; (adr r3, 80032a0 <MPU6050_Read_All+0x398>)
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f7fd fbf6 	bl	800084c <__aeabi_ddiv>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	6839      	ldr	r1, [r7, #0]
 8003066:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd fa57 	bl	8000524 <__aeabi_i2d>
 8003076:	a38a      	add	r3, pc, #552	; (adr r3, 80032a0 <MPU6050_Read_All+0x398>)
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f7fd fbe6 	bl	800084c <__aeabi_ddiv>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800308a:	f001 f9d5 	bl	8004438 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	4b8a      	ldr	r3, [pc, #552]	; (80032bc <MPU6050_Read_All+0x3b4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fa34 	bl	8000504 <__aeabi_ui2d>
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	4b87      	ldr	r3, [pc, #540]	; (80032c0 <MPU6050_Read_All+0x3b8>)
 80030a2:	f7fd fbd3 	bl	800084c <__aeabi_ddiv>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80030ae:	f001 f9c3 	bl	8004438 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b81      	ldr	r3, [pc, #516]	; (80032bc <MPU6050_Read_All+0x3b4>)
 80030b6:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030be:	461a      	mov	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c6:	fb03 f202 	mul.w	r2, r3, r2
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d0:	4619      	mov	r1, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d8:	fb03 f301 	mul.w	r3, r3, r1
 80030dc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fa20 	bl	8000524 <__aeabi_i2d>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	ec43 2b10 	vmov	d0, r2, r3
 80030ec:	f018 ff74 	bl	801bfd8 <sqrt>
 80030f0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003100:	f7fd fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d11f      	bne.n	800314a <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fa07 	bl	8000524 <__aeabi_i2d>
 8003116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800311a:	f7fd fb97 	bl	800084c <__aeabi_ddiv>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	ec43 2b17 	vmov	d7, r2, r3
 8003126:	eeb0 0a47 	vmov.f32	s0, s14
 800312a:	eef0 0a67 	vmov.f32	s1, s15
 800312e:	f018 fc37 	bl	801b9a0 <atan>
 8003132:	ec51 0b10 	vmov	r0, r1, d0
 8003136:	a35c      	add	r3, pc, #368	; (adr r3, 80032a8 <MPU6050_Read_All+0x3a0>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd fa5c 	bl	80005f8 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003148:	e005      	b.n	8003156 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315c:	425b      	negs	r3, r3
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f9e0 	bl	8000524 <__aeabi_i2d>
 8003164:	4682      	mov	sl, r0
 8003166:	468b      	mov	fp, r1
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f9d8 	bl	8000524 <__aeabi_i2d>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	ec43 2b11 	vmov	d1, r2, r3
 800317c:	ec4b ab10 	vmov	d0, sl, fp
 8003180:	f018 fdb7 	bl	801bcf2 <atan2>
 8003184:	ec51 0b10 	vmov	r0, r1, d0
 8003188:	a347      	add	r3, pc, #284	; (adr r3, 80032a8 <MPU6050_Read_All+0x3a0>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f7fd fa33 	bl	80005f8 <__aeabi_dmul>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <MPU6050_Read_All+0x3bc>)
 80031a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031a4:	f7fd fc9a 	bl	8000adc <__aeabi_dcmplt>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <MPU6050_Read_All+0x2bc>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	4b43      	ldr	r3, [pc, #268]	; (80032c8 <MPU6050_Read_All+0x3c0>)
 80031ba:	f7fd fcad 	bl	8000b18 <__aeabi_dcmpgt>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d114      	bne.n	80031ee <MPU6050_Read_All+0x2e6>
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <MPU6050_Read_All+0x3c0>)
 80031ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031ce:	f7fd fca3 	bl	8000b18 <__aeabi_dcmpgt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <MPU6050_Read_All+0x2fc>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <MPU6050_Read_All+0x3bc>)
 80031e4:	f7fd fc7a 	bl	8000adc <__aeabi_dcmplt>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 80031ee:	4937      	ldr	r1, [pc, #220]	; (80032cc <MPU6050_Read_All+0x3c4>)
 80031f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80031f8:	6839      	ldr	r1, [r7, #0]
 80031fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003202:	e014      	b.n	800322e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800320a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800320e:	eeb0 1a47 	vmov.f32	s2, s14
 8003212:	eef0 1a67 	vmov.f32	s3, s15
 8003216:	ed97 0b06 	vldr	d0, [r7, #24]
 800321a:	482c      	ldr	r0, [pc, #176]	; (80032cc <MPU6050_Read_All+0x3c4>)
 800321c:	f000 f85a 	bl	80032d4 <Kalman_getAngle>
 8003220:	eeb0 7a40 	vmov.f32	s14, s0
 8003224:	eef0 7a60 	vmov.f32	s15, s1
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003234:	4690      	mov	r8, r2
 8003236:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <MPU6050_Read_All+0x3c0>)
 8003240:	4640      	mov	r0, r8
 8003242:	4649      	mov	r1, r9
 8003244:	f7fd fc68 	bl	8000b18 <__aeabi_dcmpgt>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003254:	4614      	mov	r4, r2
 8003256:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003266:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800326a:	eeb0 1a47 	vmov.f32	s2, s14
 800326e:	eef0 1a67 	vmov.f32	s3, s15
 8003272:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003276:	4816      	ldr	r0, [pc, #88]	; (80032d0 <MPU6050_Read_All+0x3c8>)
 8003278:	f000 f82c 	bl	80032d4 <Kalman_getAngle>
 800327c:	eeb0 7a40 	vmov.f32	s14, s0
 8003280:	eef0 7a60 	vmov.f32	s15, s1
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 800328a:	bf00      	nop
 800328c:	3740      	adds	r7, #64	; 0x40
 800328e:	46bd      	mov	sp, r7
 8003290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003294:	f3af 8000 	nop.w
 8003298:	00000000 	.word	0x00000000
 800329c:	40cc2900 	.word	0x40cc2900
 80032a0:	00000000 	.word	0x00000000
 80032a4:	40606000 	.word	0x40606000
 80032a8:	1a63c1f8 	.word	0x1a63c1f8
 80032ac:	404ca5dc 	.word	0x404ca5dc
 80032b0:	40d00000 	.word	0x40d00000
 80032b4:	43aa0000 	.word	0x43aa0000
 80032b8:	42121eb8 	.word	0x42121eb8
 80032bc:	20004c18 	.word	0x20004c18
 80032c0:	408f4000 	.word	0x408f4000
 80032c4:	c0568000 	.word	0xc0568000
 80032c8:	40568000 	.word	0x40568000
 80032cc:	20000058 	.word	0x20000058
 80032d0:	20000010 	.word	0x20000010

080032d4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80032d4:	b5b0      	push	{r4, r5, r7, lr}
 80032d6:	b096      	sub	sp, #88	; 0x58
 80032d8:	af00      	add	r7, sp, #0
 80032da:	61f8      	str	r0, [r7, #28]
 80032dc:	ed87 0b04 	vstr	d0, [r7, #16]
 80032e0:	ed87 1b02 	vstr	d1, [r7, #8]
 80032e4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4623      	mov	r3, r4
 80032f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032f6:	f7fc ffc7 	bl	8000288 <__aeabi_dsub>
 80032fa:	4603      	mov	r3, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003308:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800330c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003310:	f7fd f972 	bl	80005f8 <__aeabi_dmul>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4620      	mov	r0, r4
 800331a:	4629      	mov	r1, r5
 800331c:	f7fc ffb6 	bl	800028c <__adddf3>
 8003320:	4603      	mov	r3, r0
 8003322:	460c      	mov	r4, r1
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800333a:	f7fd f95d 	bl	80005f8 <__aeabi_dmul>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800334c:	f7fc ff9c 	bl	8000288 <__aeabi_dsub>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800335e:	f7fc ff93 	bl	8000288 <__aeabi_dsub>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f7fc ff8c 	bl	800028c <__adddf3>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003380:	f7fd f93a 	bl	80005f8 <__aeabi_dmul>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4620      	mov	r0, r4
 800338a:	4629      	mov	r1, r5
 800338c:	f7fc ff7e 	bl	800028c <__adddf3>
 8003390:	4603      	mov	r3, r0
 8003392:	460c      	mov	r4, r1
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80033a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033aa:	f7fd f925 	bl	80005f8 <__aeabi_dmul>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fc ff67 	bl	8000288 <__aeabi_dsub>
 80033ba:	4603      	mov	r3, r0
 80033bc:	460c      	mov	r4, r1
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80033d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d4:	f7fd f910 	bl	80005f8 <__aeabi_dmul>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4620      	mov	r0, r4
 80033de:	4629      	mov	r1, r5
 80033e0:	f7fc ff52 	bl	8000288 <__aeabi_dsub>
 80033e4:	4603      	mov	r3, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80033fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fe:	f7fd f8fb 	bl	80005f8 <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4620      	mov	r0, r4
 8003408:	4629      	mov	r1, r5
 800340a:	f7fc ff3f 	bl	800028c <__adddf3>
 800340e:	4603      	mov	r3, r0
 8003410:	460c      	mov	r4, r1
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003424:	461a      	mov	r2, r3
 8003426:	4623      	mov	r3, r4
 8003428:	f7fc ff30 	bl	800028c <__adddf3>
 800342c:	4603      	mov	r3, r0
 800342e:	460c      	mov	r4, r1
 8003430:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800343a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800343e:	f7fd fa05 	bl	800084c <__aeabi_ddiv>
 8003442:	4603      	mov	r3, r0
 8003444:	460c      	mov	r4, r1
 8003446:	e9c7 3408 	strd	r3, r4, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003454:	f7fd f9fa 	bl	800084c <__aeabi_ddiv>
 8003458:	4603      	mov	r3, r0
 800345a:	460c      	mov	r4, r1
 800345c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003466:	461a      	mov	r2, r3
 8003468:	4623      	mov	r3, r4
 800346a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800346e:	f7fc ff0b 	bl	8000288 <__aeabi_dsub>
 8003472:	4603      	mov	r3, r0
 8003474:	460c      	mov	r4, r1
 8003476:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003480:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003484:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003488:	f7fd f8b6 	bl	80005f8 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4620      	mov	r0, r4
 8003492:	4629      	mov	r1, r5
 8003494:	f7fc fefa 	bl	800028c <__adddf3>
 8003498:	4603      	mov	r3, r0
 800349a:	460c      	mov	r4, r1
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80034a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034b0:	f7fd f8a2 	bl	80005f8 <__aeabi_dmul>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4620      	mov	r0, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	f7fc fee6 	bl	800028c <__adddf3>
 80034c0:	4603      	mov	r3, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80034d0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80034da:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80034e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034ec:	f7fd f884 	bl	80005f8 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4620      	mov	r0, r4
 80034f6:	4629      	mov	r1, r5
 80034f8:	f7fc fec6 	bl	8000288 <__aeabi_dsub>
 80034fc:	4603      	mov	r3, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800350c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003510:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003514:	f7fd f870 	bl	80005f8 <__aeabi_dmul>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4620      	mov	r0, r4
 800351e:	4629      	mov	r1, r5
 8003520:	f7fc feb2 	bl	8000288 <__aeabi_dsub>
 8003524:	4603      	mov	r3, r0
 8003526:	460c      	mov	r4, r1
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003534:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800353c:	f7fd f85c 	bl	80005f8 <__aeabi_dmul>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4620      	mov	r0, r4
 8003546:	4629      	mov	r1, r5
 8003548:	f7fc fe9e 	bl	8000288 <__aeabi_dsub>
 800354c:	4603      	mov	r3, r0
 800354e:	460c      	mov	r4, r1
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800355c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003560:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003564:	f7fd f848 	bl	80005f8 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	f7fc fe8a 	bl	8000288 <__aeabi_dsub>
 8003574:	4603      	mov	r3, r0
 8003576:	460c      	mov	r4, r1
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003584:	ec44 3b17 	vmov	d7, r3, r4
};
 8003588:	eeb0 0a47 	vmov.f32	s0, s14
 800358c:	eef0 0a67 	vmov.f32	s1, s15
 8003590:	3758      	adds	r7, #88	; 0x58
 8003592:	46bd      	mov	sp, r7
 8003594:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003598 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800359e:	f000 fafd 	bl	8003b9c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80035a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80035a6:	2201      	movs	r2, #1
 80035a8:	2178      	movs	r1, #120	; 0x78
 80035aa:	485b      	ldr	r0, [pc, #364]	; (8003718 <SSD1306_Init+0x180>)
 80035ac:	f003 fc7c 	bl	8006ea8 <HAL_I2C_IsDeviceReady>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e0a9      	b.n	800370e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80035ba:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80035be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80035c0:	e002      	b.n	80035c8 <SSD1306_Init+0x30>
		p--;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f9      	bne.n	80035c2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80035ce:	22ae      	movs	r2, #174	; 0xae
 80035d0:	2100      	movs	r1, #0
 80035d2:	2078      	movs	r0, #120	; 0x78
 80035d4:	f000 fb3e 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80035d8:	2220      	movs	r2, #32
 80035da:	2100      	movs	r1, #0
 80035dc:	2078      	movs	r0, #120	; 0x78
 80035de:	f000 fb39 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80035e2:	2210      	movs	r2, #16
 80035e4:	2100      	movs	r1, #0
 80035e6:	2078      	movs	r0, #120	; 0x78
 80035e8:	f000 fb34 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80035ec:	22b0      	movs	r2, #176	; 0xb0
 80035ee:	2100      	movs	r1, #0
 80035f0:	2078      	movs	r0, #120	; 0x78
 80035f2:	f000 fb2f 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80035f6:	22c8      	movs	r2, #200	; 0xc8
 80035f8:	2100      	movs	r1, #0
 80035fa:	2078      	movs	r0, #120	; 0x78
 80035fc:	f000 fb2a 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	2078      	movs	r0, #120	; 0x78
 8003606:	f000 fb25 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800360a:	2210      	movs	r2, #16
 800360c:	2100      	movs	r1, #0
 800360e:	2078      	movs	r0, #120	; 0x78
 8003610:	f000 fb20 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003614:	2240      	movs	r2, #64	; 0x40
 8003616:	2100      	movs	r1, #0
 8003618:	2078      	movs	r0, #120	; 0x78
 800361a:	f000 fb1b 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800361e:	2281      	movs	r2, #129	; 0x81
 8003620:	2100      	movs	r1, #0
 8003622:	2078      	movs	r0, #120	; 0x78
 8003624:	f000 fb16 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003628:	22ff      	movs	r2, #255	; 0xff
 800362a:	2100      	movs	r1, #0
 800362c:	2078      	movs	r0, #120	; 0x78
 800362e:	f000 fb11 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003632:	22a1      	movs	r2, #161	; 0xa1
 8003634:	2100      	movs	r1, #0
 8003636:	2078      	movs	r0, #120	; 0x78
 8003638:	f000 fb0c 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800363c:	22a6      	movs	r2, #166	; 0xa6
 800363e:	2100      	movs	r1, #0
 8003640:	2078      	movs	r0, #120	; 0x78
 8003642:	f000 fb07 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003646:	22a8      	movs	r2, #168	; 0xa8
 8003648:	2100      	movs	r1, #0
 800364a:	2078      	movs	r0, #120	; 0x78
 800364c:	f000 fb02 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003650:	223f      	movs	r2, #63	; 0x3f
 8003652:	2100      	movs	r1, #0
 8003654:	2078      	movs	r0, #120	; 0x78
 8003656:	f000 fafd 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800365a:	22a4      	movs	r2, #164	; 0xa4
 800365c:	2100      	movs	r1, #0
 800365e:	2078      	movs	r0, #120	; 0x78
 8003660:	f000 faf8 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003664:	22d3      	movs	r2, #211	; 0xd3
 8003666:	2100      	movs	r1, #0
 8003668:	2078      	movs	r0, #120	; 0x78
 800366a:	f000 faf3 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800366e:	2200      	movs	r2, #0
 8003670:	2100      	movs	r1, #0
 8003672:	2078      	movs	r0, #120	; 0x78
 8003674:	f000 faee 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003678:	22d5      	movs	r2, #213	; 0xd5
 800367a:	2100      	movs	r1, #0
 800367c:	2078      	movs	r0, #120	; 0x78
 800367e:	f000 fae9 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003682:	22f0      	movs	r2, #240	; 0xf0
 8003684:	2100      	movs	r1, #0
 8003686:	2078      	movs	r0, #120	; 0x78
 8003688:	f000 fae4 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800368c:	22d9      	movs	r2, #217	; 0xd9
 800368e:	2100      	movs	r1, #0
 8003690:	2078      	movs	r0, #120	; 0x78
 8003692:	f000 fadf 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003696:	2222      	movs	r2, #34	; 0x22
 8003698:	2100      	movs	r1, #0
 800369a:	2078      	movs	r0, #120	; 0x78
 800369c:	f000 fada 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80036a0:	22da      	movs	r2, #218	; 0xda
 80036a2:	2100      	movs	r1, #0
 80036a4:	2078      	movs	r0, #120	; 0x78
 80036a6:	f000 fad5 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80036aa:	2212      	movs	r2, #18
 80036ac:	2100      	movs	r1, #0
 80036ae:	2078      	movs	r0, #120	; 0x78
 80036b0:	f000 fad0 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80036b4:	22db      	movs	r2, #219	; 0xdb
 80036b6:	2100      	movs	r1, #0
 80036b8:	2078      	movs	r0, #120	; 0x78
 80036ba:	f000 facb 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80036be:	2220      	movs	r2, #32
 80036c0:	2100      	movs	r1, #0
 80036c2:	2078      	movs	r0, #120	; 0x78
 80036c4:	f000 fac6 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80036c8:	228d      	movs	r2, #141	; 0x8d
 80036ca:	2100      	movs	r1, #0
 80036cc:	2078      	movs	r0, #120	; 0x78
 80036ce:	f000 fac1 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80036d2:	2214      	movs	r2, #20
 80036d4:	2100      	movs	r1, #0
 80036d6:	2078      	movs	r0, #120	; 0x78
 80036d8:	f000 fabc 	bl	8003c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80036dc:	22af      	movs	r2, #175	; 0xaf
 80036de:	2100      	movs	r1, #0
 80036e0:	2078      	movs	r0, #120	; 0x78
 80036e2:	f000 fab7 	bl	8003c54 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80036e6:	222e      	movs	r2, #46	; 0x2e
 80036e8:	2100      	movs	r1, #0
 80036ea:	2078      	movs	r0, #120	; 0x78
 80036ec:	f000 fab2 	bl	8003c54 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80036f0:	2000      	movs	r0, #0
 80036f2:	f000 f843 	bl	800377c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80036f6:	f000 f813 	bl	8003720 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <SSD1306_Init+0x184>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <SSD1306_Init+0x184>)
 8003702:	2200      	movs	r2, #0
 8003704:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <SSD1306_Init+0x184>)
 8003708:	2201      	movs	r2, #1
 800370a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800370c:	2301      	movs	r3, #1
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20004930 	.word	0x20004930
 800371c:	20000964 	.word	0x20000964

08003720 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003726:	2300      	movs	r3, #0
 8003728:	71fb      	strb	r3, [r7, #7]
 800372a:	e01d      	b.n	8003768 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	3b50      	subs	r3, #80	; 0x50
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	2100      	movs	r1, #0
 8003736:	2078      	movs	r0, #120	; 0x78
 8003738:	f000 fa8c 	bl	8003c54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800373c:	2200      	movs	r2, #0
 800373e:	2100      	movs	r1, #0
 8003740:	2078      	movs	r0, #120	; 0x78
 8003742:	f000 fa87 	bl	8003c54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003746:	2210      	movs	r2, #16
 8003748:	2100      	movs	r1, #0
 800374a:	2078      	movs	r0, #120	; 0x78
 800374c:	f000 fa82 	bl	8003c54 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	01db      	lsls	r3, r3, #7
 8003754:	4a08      	ldr	r2, [pc, #32]	; (8003778 <SSD1306_UpdateScreen+0x58>)
 8003756:	441a      	add	r2, r3
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	2140      	movs	r1, #64	; 0x40
 800375c:	2078      	movs	r0, #120	; 0x78
 800375e:	f000 fa31 	bl	8003bc4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	3301      	adds	r3, #1
 8003766:	71fb      	strb	r3, [r7, #7]
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	2b07      	cmp	r3, #7
 800376c:	d9de      	bls.n	800372c <SSD1306_UpdateScreen+0xc>
	}
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000564 	.word	0x20000564

0800377c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <SSD1306_Fill+0x14>
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <SSD1306_Fill+0x16>
 8003790:	23ff      	movs	r3, #255	; 0xff
 8003792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003796:	4619      	mov	r1, r3
 8003798:	4803      	ldr	r0, [pc, #12]	; (80037a8 <SSD1306_Fill+0x2c>)
 800379a:	f015 fc22 	bl	8018fe2 <memset>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000564 	.word	0x20000564

080037ac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
 80037b6:	460b      	mov	r3, r1
 80037b8:	80bb      	strh	r3, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	70fb      	strb	r3, [r7, #3]
	if (
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b7f      	cmp	r3, #127	; 0x7f
 80037c2:	d848      	bhi.n	8003856 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80037c4:	88bb      	ldrh	r3, [r7, #4]
 80037c6:	2b3f      	cmp	r3, #63	; 0x3f
 80037c8:	d845      	bhi.n	8003856 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80037ca:	4b26      	ldr	r3, [pc, #152]	; (8003864 <SSD1306_DrawPixel+0xb8>)
 80037cc:	791b      	ldrb	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d006      	beq.n	80037e0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d11a      	bne.n	800381c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80037e6:	88fa      	ldrh	r2, [r7, #6]
 80037e8:	88bb      	ldrh	r3, [r7, #4]
 80037ea:	08db      	lsrs	r3, r3, #3
 80037ec:	b298      	uxth	r0, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	01db      	lsls	r3, r3, #7
 80037f2:	4413      	add	r3, r2
 80037f4:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <SSD1306_DrawPixel+0xbc>)
 80037f6:	5cd3      	ldrb	r3, [r2, r3]
 80037f8:	b25a      	sxtb	r2, r3
 80037fa:	88bb      	ldrh	r3, [r7, #4]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	2101      	movs	r1, #1
 8003802:	fa01 f303 	lsl.w	r3, r1, r3
 8003806:	b25b      	sxtb	r3, r3
 8003808:	4313      	orrs	r3, r2
 800380a:	b259      	sxtb	r1, r3
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	4603      	mov	r3, r0
 8003810:	01db      	lsls	r3, r3, #7
 8003812:	4413      	add	r3, r2
 8003814:	b2c9      	uxtb	r1, r1
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <SSD1306_DrawPixel+0xbc>)
 8003818:	54d1      	strb	r1, [r2, r3]
 800381a:	e01d      	b.n	8003858 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	88bb      	ldrh	r3, [r7, #4]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	b298      	uxth	r0, r3
 8003824:	4603      	mov	r3, r0
 8003826:	01db      	lsls	r3, r3, #7
 8003828:	4413      	add	r3, r2
 800382a:	4a0f      	ldr	r2, [pc, #60]	; (8003868 <SSD1306_DrawPixel+0xbc>)
 800382c:	5cd3      	ldrb	r3, [r2, r3]
 800382e:	b25a      	sxtb	r2, r3
 8003830:	88bb      	ldrh	r3, [r7, #4]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	b25b      	sxtb	r3, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	b25b      	sxtb	r3, r3
 8003842:	4013      	ands	r3, r2
 8003844:	b259      	sxtb	r1, r3
 8003846:	88fa      	ldrh	r2, [r7, #6]
 8003848:	4603      	mov	r3, r0
 800384a:	01db      	lsls	r3, r3, #7
 800384c:	4413      	add	r3, r2
 800384e:	b2c9      	uxtb	r1, r1
 8003850:	4a05      	ldr	r2, [pc, #20]	; (8003868 <SSD1306_DrawPixel+0xbc>)
 8003852:	54d1      	strb	r1, [r2, r3]
 8003854:	e000      	b.n	8003858 <SSD1306_DrawPixel+0xac>
		return;
 8003856:	bf00      	nop
	}
}
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000964 	.word	0x20000964
 8003868:	20000564 	.word	0x20000564

0800386c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	460a      	mov	r2, r1
 8003876:	80fb      	strh	r3, [r7, #6]
 8003878:	4613      	mov	r3, r2
 800387a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800387c:	4a05      	ldr	r2, [pc, #20]	; (8003894 <SSD1306_GotoXY+0x28>)
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <SSD1306_GotoXY+0x28>)
 8003884:	88bb      	ldrh	r3, [r7, #4]
 8003886:	8053      	strh	r3, [r2, #2]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	20000964 	.word	0x20000964

08003898 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80038a8:	4b3a      	ldr	r3, [pc, #232]	; (8003994 <SSD1306_Putc+0xfc>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	4413      	add	r3, r2
	if (
 80038b4:	2b7f      	cmp	r3, #127	; 0x7f
 80038b6:	dc07      	bgt.n	80038c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80038b8:	4b36      	ldr	r3, [pc, #216]	; (8003994 <SSD1306_Putc+0xfc>)
 80038ba:	885b      	ldrh	r3, [r3, #2]
 80038bc:	461a      	mov	r2, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80038c4:	2b3f      	cmp	r3, #63	; 0x3f
 80038c6:	dd01      	ble.n	80038cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e05e      	b.n	800398a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	e04b      	b.n	800396a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	3b20      	subs	r3, #32
 80038da:	6839      	ldr	r1, [r7, #0]
 80038dc:	7849      	ldrb	r1, [r1, #1]
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	4619      	mov	r1, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	440b      	add	r3, r1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	e030      	b.n	8003958 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d010      	beq.n	8003928 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003906:	4b23      	ldr	r3, [pc, #140]	; (8003994 <SSD1306_Putc+0xfc>)
 8003908:	881a      	ldrh	r2, [r3, #0]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	b29b      	uxth	r3, r3
 800390e:	4413      	add	r3, r2
 8003910:	b298      	uxth	r0, r3
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <SSD1306_Putc+0xfc>)
 8003914:	885a      	ldrh	r2, [r3, #2]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	b29b      	uxth	r3, r3
 800391a:	4413      	add	r3, r2
 800391c:	b29b      	uxth	r3, r3
 800391e:	79ba      	ldrb	r2, [r7, #6]
 8003920:	4619      	mov	r1, r3
 8003922:	f7ff ff43 	bl	80037ac <SSD1306_DrawPixel>
 8003926:	e014      	b.n	8003952 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <SSD1306_Putc+0xfc>)
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4413      	add	r3, r2
 8003932:	b298      	uxth	r0, r3
 8003934:	4b17      	ldr	r3, [pc, #92]	; (8003994 <SSD1306_Putc+0xfc>)
 8003936:	885a      	ldrh	r2, [r3, #2]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	b29b      	uxth	r3, r3
 800393c:	4413      	add	r3, r2
 800393e:	b299      	uxth	r1, r3
 8003940:	79bb      	ldrb	r3, [r7, #6]
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	f7ff ff2d 	bl	80037ac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	3301      	adds	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4293      	cmp	r3, r2
 8003962:	d3c8      	bcc.n	80038f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	3301      	adds	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	785b      	ldrb	r3, [r3, #1]
 800396e:	461a      	mov	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	4293      	cmp	r3, r2
 8003974:	d3ad      	bcc.n	80038d2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <SSD1306_Putc+0xfc>)
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	4413      	add	r3, r2
 8003982:	b29a      	uxth	r2, r3
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <SSD1306_Putc+0xfc>)
 8003986:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003988:	79fb      	ldrb	r3, [r7, #7]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000964 	.word	0x20000964

08003998 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80039a6:	e012      	b.n	80039ce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	79fa      	ldrb	r2, [r7, #7]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff71 	bl	8003898 <SSD1306_Putc>
 80039b6:	4603      	mov	r3, r0
 80039b8:	461a      	mov	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d002      	beq.n	80039c8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	e008      	b.n	80039da <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3301      	adds	r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e8      	bne.n	80039a8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	781b      	ldrb	r3, [r3, #0]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80039e2:	b590      	push	{r4, r7, lr}
 80039e4:	b087      	sub	sp, #28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4604      	mov	r4, r0
 80039ea:	4608      	mov	r0, r1
 80039ec:	4611      	mov	r1, r2
 80039ee:	461a      	mov	r2, r3
 80039f0:	4623      	mov	r3, r4
 80039f2:	80fb      	strh	r3, [r7, #6]
 80039f4:	4603      	mov	r3, r0
 80039f6:	80bb      	strh	r3, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
 80039fc:	4613      	mov	r3, r2
 80039fe:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8003a00:	887b      	ldrh	r3, [r7, #2]
 8003a02:	f1c3 0301 	rsb	r3, r3, #1
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8003a0e:	887b      	ldrh	r3, [r7, #2]
 8003a10:	461a      	mov	r2, r3
 8003a12:	03d2      	lsls	r2, r2, #15
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8003a20:	887b      	ldrh	r3, [r7, #2]
 8003a22:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8003a24:	88f8      	ldrh	r0, [r7, #6]
 8003a26:	88ba      	ldrh	r2, [r7, #4]
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	787a      	ldrb	r2, [r7, #1]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7ff febb 	bl	80037ac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8003a36:	88f8      	ldrh	r0, [r7, #6]
 8003a38:	88ba      	ldrh	r2, [r7, #4]
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	787a      	ldrb	r2, [r7, #1]
 8003a42:	4619      	mov	r1, r3
 8003a44:	f7ff feb2 	bl	80037ac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8003a48:	88fa      	ldrh	r2, [r7, #6]
 8003a4a:	887b      	ldrh	r3, [r7, #2]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	88b9      	ldrh	r1, [r7, #4]
 8003a52:	787a      	ldrb	r2, [r7, #1]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fea9 	bl	80037ac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	887b      	ldrh	r3, [r7, #2]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	88b9      	ldrh	r1, [r7, #4]
 8003a64:	787a      	ldrb	r2, [r7, #1]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fea0 	bl	80037ac <SSD1306_DrawPixel>

    while (x < y) {
 8003a6c:	e081      	b.n	8003b72 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8003a6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	db0e      	blt.n	8003a94 <SSD1306_DrawCircle+0xb2>
            y--;
 8003a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003a82:	8a7b      	ldrh	r3, [r7, #18]
 8003a84:	3302      	adds	r3, #2
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8003a8a:	8afa      	ldrh	r2, [r7, #22]
 8003a8c:	8a7b      	ldrh	r3, [r7, #18]
 8003a8e:	4413      	add	r3, r2
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8003a94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003aa0:	8abb      	ldrh	r3, [r7, #20]
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8003aa8:	8afa      	ldrh	r2, [r7, #22]
 8003aaa:	8abb      	ldrh	r3, [r7, #20]
 8003aac:	4413      	add	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	8a3b      	ldrh	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	b298      	uxth	r0, r3
 8003aba:	88ba      	ldrh	r2, [r7, #4]
 8003abc:	89fb      	ldrh	r3, [r7, #14]
 8003abe:	4413      	add	r3, r2
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	787a      	ldrb	r2, [r7, #1]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f7ff fe71 	bl	80037ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8003aca:	88fa      	ldrh	r2, [r7, #6]
 8003acc:	8a3b      	ldrh	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	b298      	uxth	r0, r3
 8003ad2:	88ba      	ldrh	r2, [r7, #4]
 8003ad4:	89fb      	ldrh	r3, [r7, #14]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	787a      	ldrb	r2, [r7, #1]
 8003adc:	4619      	mov	r1, r3
 8003ade:	f7ff fe65 	bl	80037ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	8a3b      	ldrh	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	b298      	uxth	r0, r3
 8003aea:	88ba      	ldrh	r2, [r7, #4]
 8003aec:	89fb      	ldrh	r3, [r7, #14]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	787a      	ldrb	r2, [r7, #1]
 8003af4:	4619      	mov	r1, r3
 8003af6:	f7ff fe59 	bl	80037ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	8a3b      	ldrh	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	b298      	uxth	r0, r3
 8003b02:	88ba      	ldrh	r2, [r7, #4]
 8003b04:	89fb      	ldrh	r3, [r7, #14]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	787a      	ldrb	r2, [r7, #1]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f7ff fe4d 	bl	80037ac <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	89fb      	ldrh	r3, [r7, #14]
 8003b16:	4413      	add	r3, r2
 8003b18:	b298      	uxth	r0, r3
 8003b1a:	88ba      	ldrh	r2, [r7, #4]
 8003b1c:	8a3b      	ldrh	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	787a      	ldrb	r2, [r7, #1]
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7ff fe41 	bl	80037ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	89fb      	ldrh	r3, [r7, #14]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	b298      	uxth	r0, r3
 8003b32:	88ba      	ldrh	r2, [r7, #4]
 8003b34:	8a3b      	ldrh	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	787a      	ldrb	r2, [r7, #1]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f7ff fe35 	bl	80037ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	89fb      	ldrh	r3, [r7, #14]
 8003b46:	4413      	add	r3, r2
 8003b48:	b298      	uxth	r0, r3
 8003b4a:	88ba      	ldrh	r2, [r7, #4]
 8003b4c:	8a3b      	ldrh	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	787a      	ldrb	r2, [r7, #1]
 8003b54:	4619      	mov	r1, r3
 8003b56:	f7ff fe29 	bl	80037ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	89fb      	ldrh	r3, [r7, #14]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	b298      	uxth	r0, r3
 8003b62:	88ba      	ldrh	r2, [r7, #4]
 8003b64:	8a3b      	ldrh	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	787a      	ldrb	r2, [r7, #1]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f7ff fe1d 	bl	80037ac <SSD1306_DrawPixel>
    while (x < y) {
 8003b72:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003b76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	f6ff af77 	blt.w	8003a6e <SSD1306_DrawCircle+0x8c>
    }
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd90      	pop	{r4, r7, pc}

08003b88 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f7ff fdf5 	bl	800377c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003b92:	f7ff fdc5 	bl	8003720 <SSD1306_UpdateScreen>
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <ssd1306_I2C_Init+0x24>)
 8003ba4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003ba6:	e002      	b.n	8003bae <ssd1306_I2C_Init+0x12>
		p--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f9      	bne.n	8003ba8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	0003d090 	.word	0x0003d090

08003bc4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b0c7      	sub	sp, #284	; 0x11c
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4639      	mov	r1, r7
 8003bd0:	600a      	str	r2, [r1, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	1dfb      	adds	r3, r7, #7
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	1dbb      	adds	r3, r7, #6
 8003bdc:	4602      	mov	r2, r0
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	460a      	mov	r2, r1
 8003be4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003be6:	f107 030c 	add.w	r3, r7, #12
 8003bea:	1dba      	adds	r2, r7, #6
 8003bec:	7812      	ldrb	r2, [r2, #0]
 8003bee:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003bf6:	e010      	b.n	8003c1a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8003bf8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003bfc:	463a      	mov	r2, r7
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	441a      	add	r2, r3
 8003c02:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003c06:	3301      	adds	r3, #1
 8003c08:	7811      	ldrb	r1, [r2, #0]
 8003c0a:	f107 020c 	add.w	r2, r7, #12
 8003c0e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003c10:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003c14:	3301      	adds	r3, #1
 8003c16:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003c1a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	1d3a      	adds	r2, r7, #4
 8003c22:	8812      	ldrh	r2, [r2, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d8e7      	bhi.n	8003bf8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003c28:	1dfb      	adds	r3, r7, #7
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b299      	uxth	r1, r3
 8003c2e:	1d3b      	adds	r3, r7, #4
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	b298      	uxth	r0, r3
 8003c36:	f107 020c 	add.w	r2, r7, #12
 8003c3a:	230a      	movs	r3, #10
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4803      	ldr	r0, [pc, #12]	; (8003c50 <ssd1306_I2C_WriteMulti+0x8c>)
 8003c42:	f002 fd13 	bl	800666c <HAL_I2C_Master_Transmit>
}
 8003c46:	bf00      	nop
 8003c48:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd90      	pop	{r4, r7, pc}
 8003c50:	20004930 	.word	0x20004930

08003c54 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	71bb      	strb	r3, [r7, #6]
 8003c62:	4613      	mov	r3, r2
 8003c64:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003c66:	79bb      	ldrb	r3, [r7, #6]
 8003c68:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003c6a:	797b      	ldrb	r3, [r7, #5]
 8003c6c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	b299      	uxth	r1, r3
 8003c72:	f107 020c 	add.w	r2, r7, #12
 8003c76:	230a      	movs	r3, #10
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	4803      	ldr	r0, [pc, #12]	; (8003c8c <ssd1306_I2C_Write+0x38>)
 8003c7e:	f002 fcf5 	bl	800666c <HAL_I2C_Master_Transmit>
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20004930 	.word	0x20004930

08003c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_MspInit+0x54>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	4a11      	ldr	r2, [pc, #68]	; (8003ce4 <HAL_MspInit+0x54>)
 8003ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <HAL_MspInit+0x54>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_MspInit+0x54>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <HAL_MspInit+0x54>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_MspInit+0x54>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	210f      	movs	r1, #15
 8003cd2:	f06f 0001 	mvn.w	r0, #1
 8003cd6:	f001 f9e9 	bl	80050ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1d      	ldr	r2, [pc, #116]	; (8003d7c <HAL_CAN_MspInit+0x94>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d134      	bne.n	8003d74 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <HAL_CAN_MspInit+0x98>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_CAN_MspInit+0x98>)
 8003d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d18:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1a:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_CAN_MspInit+0x98>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <HAL_CAN_MspInit+0x98>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_CAN_MspInit+0x98>)
 8003d30:	f043 0302 	orr.w	r3, r3, #2
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_CAN_MspInit+0x98>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d50:	2303      	movs	r3, #3
 8003d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003d54:	2309      	movs	r3, #9
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d58:	f107 0314 	add.w	r3, r7, #20
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4809      	ldr	r0, [pc, #36]	; (8003d84 <HAL_CAN_MspInit+0x9c>)
 8003d60:	f002 f966 	bl	8006030 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003d64:	2200      	movs	r2, #0
 8003d66:	2105      	movs	r1, #5
 8003d68:	2014      	movs	r0, #20
 8003d6a:	f001 f99f 	bl	80050ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003d6e:	2014      	movs	r0, #20
 8003d70:	f001 f9b8 	bl	80050e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003d74:	bf00      	nop
 8003d76:	3728      	adds	r7, #40	; 0x28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40006400 	.word	0x40006400
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40020400 	.word	0x40020400

08003d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08c      	sub	sp, #48	; 0x30
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d90:	f107 031c 	add.w	r3, r7, #28
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a42      	ldr	r2, [pc, #264]	; (8003eb0 <HAL_I2C_MspInit+0x128>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d12c      	bne.n	8003e04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	4a40      	ldr	r2, [pc, #256]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003db4:	f043 0302 	orr.w	r3, r3, #2
 8003db8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dba:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dc6:	23c0      	movs	r3, #192	; 0xc0
 8003dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dca:	2312      	movs	r3, #18
 8003dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dda:	f107 031c 	add.w	r3, r7, #28
 8003dde:	4619      	mov	r1, r3
 8003de0:	4835      	ldr	r0, [pc, #212]	; (8003eb8 <HAL_I2C_MspInit+0x130>)
 8003de2:	f002 f925 	bl	8006030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a31      	ldr	r2, [pc, #196]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
 8003df6:	4b2f      	ldr	r3, [pc, #188]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003e02:	e050      	b.n	8003ea6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <HAL_I2C_MspInit+0x134>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d14b      	bne.n	8003ea6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a20      	ldr	r2, [pc, #128]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e4c:	2312      	movs	r3, #18
 8003e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e50:	2301      	movs	r3, #1
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e54:	2303      	movs	r3, #3
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e58:	2304      	movs	r3, #4
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e5c:	f107 031c 	add.w	r3, r7, #28
 8003e60:	4619      	mov	r1, r3
 8003e62:	4817      	ldr	r0, [pc, #92]	; (8003ec0 <HAL_I2C_MspInit+0x138>)
 8003e64:	f002 f8e4 	bl	8006030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e6e:	2312      	movs	r3, #18
 8003e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e72:	2301      	movs	r3, #1
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e76:	2303      	movs	r3, #3
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7e:	f107 031c 	add.w	r3, r7, #28
 8003e82:	4619      	mov	r1, r3
 8003e84:	480f      	ldr	r0, [pc, #60]	; (8003ec4 <HAL_I2C_MspInit+0x13c>)
 8003e86:	f002 f8d3 	bl	8006030 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e98:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_I2C_MspInit+0x12c>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
}
 8003ea6:	bf00      	nop
 8003ea8:	3730      	adds	r7, #48	; 0x30
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40005400 	.word	0x40005400
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40020400 	.word	0x40020400
 8003ebc:	40005c00 	.word	0x40005c00
 8003ec0:	40020800 	.word	0x40020800
 8003ec4:	40020000 	.word	0x40020000

08003ec8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0b      	ldr	r2, [pc, #44]	; (8003f04 <HAL_TIM_PWM_MspInit+0x3c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10d      	bne.n	8003ef6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_TIM_PWM_MspInit+0x40>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <HAL_TIM_PWM_MspInit+0x40>)
 8003ee4:	f043 0302 	orr.w	r3, r3, #2
 8003ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_TIM_PWM_MspInit+0x40>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40023800 	.word	0x40023800

08003f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <HAL_TIM_Base_MspInit+0x3c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10d      	bne.n	8003f3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <HAL_TIM_Base_MspInit+0x40>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <HAL_TIM_Base_MspInit+0x40>)
 8003f28:	f043 0310 	orr.w	r3, r3, #16
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <HAL_TIM_Base_MspInit+0x40>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40001000 	.word	0x40001000
 8003f4c:	40023800 	.word	0x40023800

08003f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <HAL_TIM_MspPostInit+0xa4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d13b      	bne.n	8003fea <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_TIM_MspPostInit+0xa8>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <HAL_TIM_MspPostInit+0xa8>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	6313      	str	r3, [r2, #48]	; 0x30
 8003f82:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <HAL_TIM_MspPostInit+0xa8>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_TIM_MspPostInit+0xa8>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <HAL_TIM_MspPostInit+0xa8>)
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_TIM_MspPostInit+0xa8>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003faa:	2340      	movs	r3, #64	; 0x40
 8003fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	480d      	ldr	r0, [pc, #52]	; (8003ffc <HAL_TIM_MspPostInit+0xac>)
 8003fc6:	f002 f833 	bl	8006030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4806      	ldr	r0, [pc, #24]	; (8004000 <HAL_TIM_MspPostInit+0xb0>)
 8003fe6:	f002 f823 	bl	8006030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003fea:	bf00      	nop
 8003fec:	3728      	adds	r7, #40	; 0x28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40020000 	.word	0x40020000
 8004000:	40020800 	.word	0x40020800

08004004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08c      	sub	sp, #48	; 0x30
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400c:	f107 031c 	add.w	r3, r7, #28
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a33      	ldr	r2, [pc, #204]	; (80040f0 <HAL_UART_MspInit+0xec>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d12d      	bne.n	8004082 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	4a31      	ldr	r2, [pc, #196]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 8004030:	f043 0310 	orr.w	r3, r3, #16
 8004034:	6453      	str	r3, [r2, #68]	; 0x44
 8004036:	4b2f      	ldr	r3, [pc, #188]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b28      	ldr	r3, [pc, #160]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800405e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004064:	2302      	movs	r3, #2
 8004066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2300      	movs	r3, #0
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406c:	2303      	movs	r3, #3
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004070:	2307      	movs	r3, #7
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004074:	f107 031c 	add.w	r3, r7, #28
 8004078:	4619      	mov	r1, r3
 800407a:	481f      	ldr	r0, [pc, #124]	; (80040f8 <HAL_UART_MspInit+0xf4>)
 800407c:	f001 ffd8 	bl	8006030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004080:	e031      	b.n	80040e6 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <HAL_UART_MspInit+0xf8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d12c      	bne.n	80040e6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800408c:	2300      	movs	r3, #0
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 8004096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800409a:	6413      	str	r3, [r2, #64]	; 0x40
 800409c:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	4a10      	ldr	r2, [pc, #64]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 80040b2:	f043 0308 	orr.w	r3, r3, #8
 80040b6:	6313      	str	r3, [r2, #48]	; 0x30
 80040b8:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	2302      	movs	r3, #2
 80040cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d2:	2303      	movs	r3, #3
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040d6:	2307      	movs	r3, #7
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040da:	f107 031c 	add.w	r3, r7, #28
 80040de:	4619      	mov	r1, r3
 80040e0:	4807      	ldr	r0, [pc, #28]	; (8004100 <HAL_UART_MspInit+0xfc>)
 80040e2:	f001 ffa5 	bl	8006030 <HAL_GPIO_Init>
}
 80040e6:	bf00      	nop
 80040e8:	3730      	adds	r7, #48	; 0x30
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40011000 	.word	0x40011000
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40020000 	.word	0x40020000
 80040fc:	40004800 	.word	0x40004800
 8004100:	40020c00 	.word	0x40020c00

08004104 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08c      	sub	sp, #48	; 0x30
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8004114:	2200      	movs	r2, #0
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	2032      	movs	r0, #50	; 0x32
 800411a:	f000 ffc7 	bl	80050ac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 800411e:	2032      	movs	r0, #50	; 0x32
 8004120:	f000 ffe0 	bl	80050e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_InitTick+0xa4>)
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <HAL_InitTick+0xa4>)
 800412e:	f043 0308 	orr.w	r3, r3, #8
 8004132:	6413      	str	r3, [r2, #64]	; 0x40
 8004134:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <HAL_InitTick+0xa4>)
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004140:	f107 0210 	add.w	r2, r7, #16
 8004144:	f107 0314 	add.w	r3, r7, #20
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f004 f81a 	bl	8008184 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004150:	f003 fff0 	bl	8008134 <HAL_RCC_GetPCLK1Freq>
 8004154:	4603      	mov	r3, r0
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	4a13      	ldr	r2, [pc, #76]	; (80041ac <HAL_InitTick+0xa8>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0c9b      	lsrs	r3, r3, #18
 8004164:	3b01      	subs	r3, #1
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <HAL_InitTick+0xac>)
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <HAL_InitTick+0xb0>)
 800416c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <HAL_InitTick+0xac>)
 8004170:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004174:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8004176:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <HAL_InitTick+0xac>)
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <HAL_InitTick+0xac>)
 800417e:	2200      	movs	r2, #0
 8004180:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_InitTick+0xac>)
 8004184:	2200      	movs	r2, #0
 8004186:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8004188:	4809      	ldr	r0, [pc, #36]	; (80041b0 <HAL_InitTick+0xac>)
 800418a:	f004 f82d 	bl	80081e8 <HAL_TIM_Base_Init>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8004194:	4806      	ldr	r0, [pc, #24]	; (80041b0 <HAL_InitTick+0xac>)
 8004196:	f004 f876 	bl	8008286 <HAL_TIM_Base_Start_IT>
 800419a:	4603      	mov	r3, r0
 800419c:	e000      	b.n	80041a0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3730      	adds	r7, #48	; 0x30
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40023800 	.word	0x40023800
 80041ac:	431bde83 	.word	0x431bde83
 80041b0:	20004c1c 	.word	0x20004c1c
 80041b4:	40000c00 	.word	0x40000c00

080041b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c6:	b480      	push	{r7}
 80041c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ca:	e7fe      	b.n	80041ca <HardFault_Handler+0x4>

080041cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041d0:	e7fe      	b.n	80041d0 <MemManage_Handler+0x4>

080041d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d6:	e7fe      	b.n	80041d6 <BusFault_Handler+0x4>

080041d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041dc:	e7fe      	b.n	80041dc <UsageFault_Handler+0x4>

080041de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80041f0:	4802      	ldr	r0, [pc, #8]	; (80041fc <CAN1_RX0_IRQHandler+0x10>)
 80041f2:	f000 fc70 	bl	8004ad6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20004be4 	.word	0x20004be4

08004200 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004204:	4802      	ldr	r0, [pc, #8]	; (8004210 <TIM5_IRQHandler+0x10>)
 8004206:	f004 f8cb 	bl	80083a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20004c1c 	.word	0x20004c1c

08004214 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	e00a      	b.n	800423c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004226:	f3af 8000 	nop.w
 800422a:	4601      	mov	r1, r0
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	60ba      	str	r2, [r7, #8]
 8004232:	b2ca      	uxtb	r2, r1
 8004234:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	3301      	adds	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	dbf0      	blt.n	8004226 <_read+0x12>
	}

return len;
 8004244:	687b      	ldr	r3, [r7, #4]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b086      	sub	sp, #24
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e009      	b.n	8004274 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	60ba      	str	r2, [r7, #8]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3301      	adds	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	dbf1      	blt.n	8004260 <_write+0x12>
	}
	return len;
 800427c:	687b      	ldr	r3, [r7, #4]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <_close>:

int _close(int file)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
	return -1;
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042ae:	605a      	str	r2, [r3, #4]
	return 0;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <_isatty>:

int _isatty(int file)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
	return 1;
 80042c6:	2301      	movs	r3, #1
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
	return 0;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <_sbrk+0x50>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <_sbrk+0x16>
		heap_end = &end;
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <_sbrk+0x50>)
 8004302:	4a10      	ldr	r2, [pc, #64]	; (8004344 <_sbrk+0x54>)
 8004304:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004306:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <_sbrk+0x50>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <_sbrk+0x50>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	466a      	mov	r2, sp
 8004316:	4293      	cmp	r3, r2
 8004318:	d905      	bls.n	8004326 <_sbrk+0x36>
	{
		errno = ENOMEM;
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <_sbrk+0x58>)
 800431c:	220c      	movs	r2, #12
 800431e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004320:	f04f 33ff 	mov.w	r3, #4294967295
 8004324:	e006      	b.n	8004334 <_sbrk+0x44>
	}

	heap_end += incr;
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <_sbrk+0x50>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4413      	add	r3, r2
 800432e:	4a04      	ldr	r2, [pc, #16]	; (8004340 <_sbrk+0x50>)
 8004330:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	2000096c 	.word	0x2000096c
 8004344:	2000b510 	.word	0x2000b510
 8004348:	2000b504 	.word	0x2000b504

0800434c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <SystemInit+0x28>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	4a07      	ldr	r2, [pc, #28]	; (8004374 <SystemInit+0x28>)
 8004358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800435c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <SystemInit+0x28>)
 8004362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004366:	609a      	str	r2, [r3, #8]
#endif
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800437c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800437e:	e003      	b.n	8004388 <LoopCopyDataInit>

08004380 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004382:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004384:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004386:	3104      	adds	r1, #4

08004388 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004388:	480b      	ldr	r0, [pc, #44]	; (80043b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800438c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800438e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004390:	d3f6      	bcc.n	8004380 <CopyDataInit>
  ldr  r2, =_sbss
 8004392:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004394:	e002      	b.n	800439c <LoopFillZerobss>

08004396 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004396:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004398:	f842 3b04 	str.w	r3, [r2], #4

0800439c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800439e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043a0:	d3f9      	bcc.n	8004396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043a2:	f7ff ffd3 	bl	800434c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043a6:	f014 fda3 	bl	8018ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043aa:	f7fd fa79 	bl	80018a0 <main>
  bx  lr    
 80043ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80043b4:	080213b0 	.word	0x080213b0
  ldr  r0, =_sdata
 80043b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043bc:	20000294 	.word	0x20000294
  ldr  r2, =_sbss
 80043c0:	20000298 	.word	0x20000298
  ldr  r3, = _ebss
 80043c4:	2000b50c 	.word	0x2000b50c

080043c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043c8:	e7fe      	b.n	80043c8 <ADC_IRQHandler>
	...

080043cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HAL_Init+0x40>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a0d      	ldr	r2, [pc, #52]	; (800440c <HAL_Init+0x40>)
 80043d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_Init+0x40>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <HAL_Init+0x40>)
 80043e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043e8:	4b08      	ldr	r3, [pc, #32]	; (800440c <HAL_Init+0x40>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a07      	ldr	r2, [pc, #28]	; (800440c <HAL_Init+0x40>)
 80043ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f4:	2003      	movs	r0, #3
 80043f6:	f000 fe4e 	bl	8005096 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043fa:	2000      	movs	r0, #0
 80043fc:	f7ff fe82 	bl	8004104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004400:	f7ff fc46 	bl	8003c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40023c00 	.word	0x40023c00

08004410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_IncTick+0x20>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_IncTick+0x24>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4413      	add	r3, r2
 8004420:	4a04      	ldr	r2, [pc, #16]	; (8004434 <HAL_IncTick+0x24>)
 8004422:	6013      	str	r3, [r2, #0]
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	200000a8 	.word	0x200000a8
 8004434:	20004c5c 	.word	0x20004c5c

08004438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return uwTick;
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_GetTick+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20004c5c 	.word	0x20004c5c

08004450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004458:	f7ff ffee 	bl	8004438 <HAL_GetTick>
 800445c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d005      	beq.n	8004476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_Delay+0x40>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004476:	bf00      	nop
 8004478:	f7ff ffde 	bl	8004438 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d8f7      	bhi.n	8004478 <HAL_Delay+0x28>
  {
  }
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	200000a8 	.word	0x200000a8

08004494 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0ed      	b.n	8004682 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d102      	bne.n	80044b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff fc18 	bl	8003ce8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0202 	bic.w	r2, r2, #2
 80044c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044c8:	f7ff ffb6 	bl	8004438 <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044ce:	e012      	b.n	80044f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044d0:	f7ff ffb2 	bl	8004438 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b0a      	cmp	r3, #10
 80044dc:	d90b      	bls.n	80044f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2205      	movs	r2, #5
 80044ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0c5      	b.n	8004682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004514:	f7ff ff90 	bl	8004438 <HAL_GetTick>
 8004518:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800451a:	e012      	b.n	8004542 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800451c:	f7ff ff8c 	bl	8004438 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b0a      	cmp	r3, #10
 8004528:	d90b      	bls.n	8004542 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2205      	movs	r2, #5
 800453a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e09f      	b.n	8004682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0e5      	beq.n	800451c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	7e1b      	ldrb	r3, [r3, #24]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d108      	bne.n	800456a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	e007      	b.n	800457a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004578:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	7e5b      	ldrb	r3, [r3, #25]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d108      	bne.n	8004594 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e007      	b.n	80045a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	7e9b      	ldrb	r3, [r3, #26]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d108      	bne.n	80045be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0220 	orr.w	r2, r2, #32
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e007      	b.n	80045ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0220 	bic.w	r2, r2, #32
 80045cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	7edb      	ldrb	r3, [r3, #27]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d108      	bne.n	80045e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0210 	bic.w	r2, r2, #16
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e007      	b.n	80045f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0210 	orr.w	r2, r2, #16
 80045f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	7f1b      	ldrb	r3, [r3, #28]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d108      	bne.n	8004612 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0208 	orr.w	r2, r2, #8
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	e007      	b.n	8004622 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0208 	bic.w	r2, r2, #8
 8004620:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	7f5b      	ldrb	r3, [r3, #29]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d108      	bne.n	800463c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0204 	orr.w	r2, r2, #4
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e007      	b.n	800464c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0204 	bic.w	r2, r2, #4
 800464a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	ea42 0103 	orr.w	r1, r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	1e5a      	subs	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d003      	beq.n	80046b2 <HAL_CAN_ConfigFilter+0x26>
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	f040 80be 	bne.w	800482e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80046b2:	4b65      	ldr	r3, [pc, #404]	; (8004848 <HAL_CAN_ConfigFilter+0x1bc>)
 80046b4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	431a      	orrs	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	2201      	movs	r2, #1
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	43db      	mvns	r3, r3
 8004704:	401a      	ands	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d123      	bne.n	800475c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	43db      	mvns	r3, r3
 800471e:	401a      	ands	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004736:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	3248      	adds	r2, #72	; 0x48
 800473c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004750:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004752:	6979      	ldr	r1, [r7, #20]
 8004754:	3348      	adds	r3, #72	; 0x48
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	440b      	add	r3, r1
 800475a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d122      	bne.n	80047aa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	431a      	orrs	r2, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004784:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	3248      	adds	r2, #72	; 0x48
 800478a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800479e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047a0:	6979      	ldr	r1, [r7, #20]
 80047a2:	3348      	adds	r3, #72	; 0x48
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	440b      	add	r3, r1
 80047a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	401a      	ands	r2, r3
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80047c4:	e007      	b.n	80047d6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	43db      	mvns	r3, r3
 80047e8:	401a      	ands	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80047f0:	e007      	b.n	8004802 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d107      	bne.n	800481a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	431a      	orrs	r2, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004820:	f023 0201 	bic.w	r2, r3, #1
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	e006      	b.n	800483c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
  }
}
 800483c:	4618      	mov	r0, r3
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40006400 	.word	0x40006400

0800484c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d12e      	bne.n	80048be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004878:	f7ff fdde 	bl	8004438 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800487e:	e012      	b.n	80048a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004880:	f7ff fdda 	bl	8004438 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b0a      	cmp	r3, #10
 800488c:	d90b      	bls.n	80048a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2205      	movs	r2, #5
 800489e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e012      	b.n	80048cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e5      	bne.n	8004880 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e006      	b.n	80048cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	; 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80048f2:	7ffb      	ldrb	r3, [r7, #31]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d003      	beq.n	8004900 <HAL_CAN_AddTxMessage+0x2c>
 80048f8:	7ffb      	ldrb	r3, [r7, #31]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	f040 80b8 	bne.w	8004a70 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80a0 	beq.w	8004a60 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	0e1b      	lsrs	r3, r3, #24
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d907      	bls.n	8004940 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e09e      	b.n	8004a7e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004940:	2201      	movs	r2, #1
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	409a      	lsls	r2, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10d      	bne.n	800496e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800495c:	68f9      	ldr	r1, [r7, #12]
 800495e:	6809      	ldr	r1, [r1, #0]
 8004960:	431a      	orrs	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	3318      	adds	r3, #24
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	440b      	add	r3, r1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e00f      	b.n	800498e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004978:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004982:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	3318      	adds	r3, #24
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	440b      	add	r3, r1
 800498c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	3318      	adds	r3, #24
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	440b      	add	r3, r1
 800499e:	3304      	adds	r3, #4
 80049a0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	7d1b      	ldrb	r3, [r3, #20]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d111      	bne.n	80049ce <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	3318      	adds	r3, #24
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	4413      	add	r3, r2
 80049b6:	3304      	adds	r3, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	6811      	ldr	r1, [r2, #0]
 80049be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	3318      	adds	r3, #24
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	440b      	add	r3, r1
 80049ca:	3304      	adds	r3, #4
 80049cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3307      	adds	r3, #7
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	061a      	lsls	r2, r3, #24
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3306      	adds	r3, #6
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3305      	adds	r3, #5
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	4313      	orrs	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	3204      	adds	r2, #4
 80049ee:	7812      	ldrb	r2, [r2, #0]
 80049f0:	4610      	mov	r0, r2
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	6811      	ldr	r1, [r2, #0]
 80049f6:	ea43 0200 	orr.w	r2, r3, r0
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	440b      	add	r3, r1
 8004a00:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004a04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3303      	adds	r3, #3
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	061a      	lsls	r2, r3, #24
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3302      	adds	r3, #2
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	4313      	orrs	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	7812      	ldrb	r2, [r2, #0]
 8004a26:	4610      	mov	r0, r2
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	6811      	ldr	r1, [r2, #0]
 8004a2c:	ea43 0200 	orr.w	r2, r3, r0
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	440b      	add	r3, r1
 8004a36:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004a3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3318      	adds	r3, #24
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	4413      	add	r3, r2
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	6811      	ldr	r1, [r2, #0]
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	3318      	adds	r3, #24
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	440b      	add	r3, r1
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e00e      	b.n	8004a7e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e006      	b.n	8004a7e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
  }
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3724      	adds	r7, #36	; 0x24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a9a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d002      	beq.n	8004aa8 <HAL_CAN_ActivateNotification+0x1e>
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d109      	bne.n	8004abc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6959      	ldr	r1, [r3, #20]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e006      	b.n	8004aca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
  }
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b08a      	sub	sp, #40	; 0x28
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d07c      	beq.n	8004c16 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d023      	beq.n	8004b6e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f97d 	bl	8004e38 <HAL_CAN_TxMailbox0CompleteCallback>
 8004b3e:	e016      	b.n	8004b6e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d004      	beq.n	8004b54 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
 8004b52:	e00c      	b.n	8004b6e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
 8004b66:	e002      	b.n	8004b6e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f983 	bl	8004e74 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d024      	beq.n	8004bc2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f95d 	bl	8004e4c <HAL_CAN_TxMailbox1CompleteCallback>
 8004b92:	e016      	b.n	8004bc2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba6:	e00c      	b.n	8004bc2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bba:	e002      	b.n	8004bc2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f963 	bl	8004e88 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d024      	beq.n	8004c16 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f93d 	bl	8004e60 <HAL_CAN_TxMailbox2CompleteCallback>
 8004be6:	e016      	b.n	8004c16 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d004      	beq.n	8004bfc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfa:	e00c      	b.n	8004c16 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0e:	e002      	b.n	8004c16 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f943 	bl	8004e9c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00c      	beq.n	8004c3a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2210      	movs	r2, #16
 8004c38:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d006      	beq.n	8004c5c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2208      	movs	r2, #8
 8004c54:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f934 	bl	8004ec4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f91b 	bl	8004eb0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00c      	beq.n	8004c9e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2210      	movs	r2, #16
 8004c9c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d006      	beq.n	8004cc0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f916 	bl	8004eec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f8fd 	bl	8004ed8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d006      	beq.n	8004d00 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2210      	movs	r2, #16
 8004cf8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f900 	bl	8004f00 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f8f9 	bl	8004f14 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d075      	beq.n	8004e18 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d06c      	beq.n	8004e10 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	f043 0302 	orr.w	r3, r3, #2
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d008      	beq.n	8004d8a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	f043 0304 	orr.w	r3, r3, #4
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d03d      	beq.n	8004e10 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d038      	beq.n	8004e10 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004da4:	2b30      	cmp	r3, #48	; 0x30
 8004da6:	d017      	beq.n	8004dd8 <HAL_CAN_IRQHandler+0x302>
 8004da8:	2b30      	cmp	r3, #48	; 0x30
 8004daa:	d804      	bhi.n	8004db6 <HAL_CAN_IRQHandler+0x2e0>
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d009      	beq.n	8004dc4 <HAL_CAN_IRQHandler+0x2ee>
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d00c      	beq.n	8004dce <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004db4:	e024      	b.n	8004e00 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004db6:	2b50      	cmp	r3, #80	; 0x50
 8004db8:	d018      	beq.n	8004dec <HAL_CAN_IRQHandler+0x316>
 8004dba:	2b60      	cmp	r3, #96	; 0x60
 8004dbc:	d01b      	beq.n	8004df6 <HAL_CAN_IRQHandler+0x320>
 8004dbe:	2b40      	cmp	r3, #64	; 0x40
 8004dc0:	d00f      	beq.n	8004de2 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004dc2:	e01d      	b.n	8004e00 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	f043 0308 	orr.w	r3, r3, #8
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dcc:	e018      	b.n	8004e00 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	f043 0310 	orr.w	r3, r3, #16
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dd6:	e013      	b.n	8004e00 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	f043 0320 	orr.w	r3, r3, #32
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004de0:	e00e      	b.n	8004e00 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dea:	e009      	b.n	8004e00 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004df4:	e004      	b.n	8004e00 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dfe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e0e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2204      	movs	r2, #4
 8004e16:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f87c 	bl	8004f28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e30:	bf00      	nop
 8004e32:	3728      	adds	r7, #40	; 0x28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <__NVIC_SetPriorityGrouping+0x44>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f58:	4013      	ands	r3, r2
 8004f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f6e:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <__NVIC_SetPriorityGrouping+0x44>)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	60d3      	str	r3, [r2, #12]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	e000ed00 	.word	0xe000ed00

08004f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f88:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <__NVIC_GetPriorityGrouping+0x18>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	0a1b      	lsrs	r3, r3, #8
 8004f8e:	f003 0307 	and.w	r3, r3, #7
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	db0b      	blt.n	8004fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	f003 021f 	and.w	r2, r3, #31
 8004fb8:	4907      	ldr	r1, [pc, #28]	; (8004fd8 <__NVIC_EnableIRQ+0x38>)
 8004fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	e000e100 	.word	0xe000e100

08004fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	6039      	str	r1, [r7, #0]
 8004fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	db0a      	blt.n	8005006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	490c      	ldr	r1, [pc, #48]	; (8005028 <__NVIC_SetPriority+0x4c>)
 8004ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffa:	0112      	lsls	r2, r2, #4
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	440b      	add	r3, r1
 8005000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005004:	e00a      	b.n	800501c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	4908      	ldr	r1, [pc, #32]	; (800502c <__NVIC_SetPriority+0x50>)
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	3b04      	subs	r3, #4
 8005014:	0112      	lsls	r2, r2, #4
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	440b      	add	r3, r1
 800501a:	761a      	strb	r2, [r3, #24]
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	e000e100 	.word	0xe000e100
 800502c:	e000ed00 	.word	0xe000ed00

08005030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005030:	b480      	push	{r7}
 8005032:	b089      	sub	sp, #36	; 0x24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f1c3 0307 	rsb	r3, r3, #7
 800504a:	2b04      	cmp	r3, #4
 800504c:	bf28      	it	cs
 800504e:	2304      	movcs	r3, #4
 8005050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	3304      	adds	r3, #4
 8005056:	2b06      	cmp	r3, #6
 8005058:	d902      	bls.n	8005060 <NVIC_EncodePriority+0x30>
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	3b03      	subs	r3, #3
 800505e:	e000      	b.n	8005062 <NVIC_EncodePriority+0x32>
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005064:	f04f 32ff 	mov.w	r2, #4294967295
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43da      	mvns	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	401a      	ands	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005078:	f04f 31ff 	mov.w	r1, #4294967295
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	43d9      	mvns	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005088:	4313      	orrs	r3, r2
         );
}
 800508a:	4618      	mov	r0, r3
 800508c:	3724      	adds	r7, #36	; 0x24
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff ff4c 	bl	8004f3c <__NVIC_SetPriorityGrouping>
}
 80050a4:	bf00      	nop
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050be:	f7ff ff61 	bl	8004f84 <__NVIC_GetPriorityGrouping>
 80050c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	6978      	ldr	r0, [r7, #20]
 80050ca:	f7ff ffb1 	bl	8005030 <NVIC_EncodePriority>
 80050ce:	4602      	mov	r2, r0
 80050d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ff80 	bl	8004fdc <__NVIC_SetPriority>
}
 80050dc:	bf00      	nop
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ff54 	bl	8004fa0 <__NVIC_EnableIRQ>
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8005110:	4baa      	ldr	r3, [pc, #680]	; (80053bc <HAL_ETH_Init+0x2bc>)
 8005112:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e185      	b.n	8005432 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f004 fbc0 	bl	80098c0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005140:	2300      	movs	r3, #0
 8005142:	60bb      	str	r3, [r7, #8]
 8005144:	4b9e      	ldr	r3, [pc, #632]	; (80053c0 <HAL_ETH_Init+0x2c0>)
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	4a9d      	ldr	r2, [pc, #628]	; (80053c0 <HAL_ETH_Init+0x2c0>)
 800514a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800514e:	6453      	str	r3, [r2, #68]	; 0x44
 8005150:	4b9b      	ldr	r3, [pc, #620]	; (80053c0 <HAL_ETH_Init+0x2c0>)
 8005152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800515c:	4b99      	ldr	r3, [pc, #612]	; (80053c4 <HAL_ETH_Init+0x2c4>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a98      	ldr	r2, [pc, #608]	; (80053c4 <HAL_ETH_Init+0x2c4>)
 8005162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005166:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005168:	4b96      	ldr	r3, [pc, #600]	; (80053c4 <HAL_ETH_Init+0x2c4>)
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	4994      	ldr	r1, [pc, #592]	; (80053c4 <HAL_ETH_Init+0x2c4>)
 8005172:	4313      	orrs	r3, r2
 8005174:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800518e:	f7ff f953 	bl	8004438 <HAL_GetTick>
 8005192:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8005194:	e011      	b.n	80051ba <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8005196:	f7ff f94f 	bl	8004438 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051a4:	d909      	bls.n	80051ba <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2203      	movs	r2, #3
 80051aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e13b      	b.n	8005432 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e4      	bne.n	8005196 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f023 031c 	bic.w	r3, r3, #28
 80051da:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80051dc:	f002 ff9e 	bl	800811c <HAL_RCC_GetHCLKFreq>
 80051e0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4a78      	ldr	r2, [pc, #480]	; (80053c8 <HAL_ETH_Init+0x2c8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d908      	bls.n	80051fc <HAL_ETH_Init+0xfc>
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	4a77      	ldr	r2, [pc, #476]	; (80053cc <HAL_ETH_Init+0x2cc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d804      	bhi.n	80051fc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f043 0308 	orr.w	r3, r3, #8
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	e027      	b.n	800524c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	4a73      	ldr	r2, [pc, #460]	; (80053cc <HAL_ETH_Init+0x2cc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d908      	bls.n	8005216 <HAL_ETH_Init+0x116>
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	4a72      	ldr	r2, [pc, #456]	; (80053d0 <HAL_ETH_Init+0x2d0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d804      	bhi.n	8005216 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f043 030c 	orr.w	r3, r3, #12
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	e01a      	b.n	800524c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	4a6d      	ldr	r2, [pc, #436]	; (80053d0 <HAL_ETH_Init+0x2d0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d903      	bls.n	8005226 <HAL_ETH_Init+0x126>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	4a6c      	ldr	r2, [pc, #432]	; (80053d4 <HAL_ETH_Init+0x2d4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d911      	bls.n	800524a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	4a6a      	ldr	r2, [pc, #424]	; (80053d4 <HAL_ETH_Init+0x2d4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d908      	bls.n	8005240 <HAL_ETH_Init+0x140>
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	4a69      	ldr	r2, [pc, #420]	; (80053d8 <HAL_ETH_Init+0x2d8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d804      	bhi.n	8005240 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	e005      	b.n	800524c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f043 0310 	orr.w	r3, r3, #16
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	e000      	b.n	800524c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800524a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8005254:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005258:	2100      	movs	r1, #0
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fb9e 	bl	800599c <HAL_ETH_WritePHYRegister>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800526a:	6939      	ldr	r1, [r7, #16]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fc2b 	bl	8005ac8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e0d9      	b.n	8005432 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800527e:	20ff      	movs	r0, #255	; 0xff
 8005280:	f7ff f8e6 	bl	8004450 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80a7 	beq.w	80053dc <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800528e:	f7ff f8d3 	bl	8004438 <HAL_GetTick>
 8005292:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	461a      	mov	r2, r3
 800529a:	2101      	movs	r1, #1
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fb15 	bl	80058cc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80052a2:	f7ff f8c9 	bl	8004438 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d90f      	bls.n	80052d4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80052b8:	6939      	ldr	r1, [r7, #16]
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fc04 	bl	8005ac8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e0ae      	b.n	8005432 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0da      	beq.n	8005294 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80052de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052e2:	2100      	movs	r1, #0
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb59 	bl	800599c <HAL_ETH_WritePHYRegister>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00b      	beq.n	8005308 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80052f4:	6939      	ldr	r1, [r7, #16]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fbe6 	bl	8005ac8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005304:	2301      	movs	r3, #1
 8005306:	e094      	b.n	8005432 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8005308:	f7ff f896 	bl	8004438 <HAL_GetTick>
 800530c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800530e:	f107 030c 	add.w	r3, r7, #12
 8005312:	461a      	mov	r2, r3
 8005314:	2101      	movs	r1, #1
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fad8 	bl	80058cc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800531c:	f7ff f88c 	bl	8004438 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f241 3288 	movw	r2, #5000	; 0x1388
 800532a:	4293      	cmp	r3, r2
 800532c:	d90f      	bls.n	800534e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8005332:	6939      	ldr	r1, [r7, #16]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fbc7 	bl	8005ac8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e071      	b.n	8005432 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0da      	beq.n	800530e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	461a      	mov	r2, r3
 800535e:	211f      	movs	r1, #31
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fab3 	bl	80058cc <HAL_ETH_ReadPHYRegister>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005370:	6939      	ldr	r1, [r7, #16]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fba8 	bl	8005ac8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005380:	2301      	movs	r3, #1
 8005382:	e056      	b.n	8005432 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005394:	60da      	str	r2, [r3, #12]
 8005396:	e002      	b.n	800539e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	609a      	str	r2, [r3, #8]
 80053ae:	e037      	b.n	8005420 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053b6:	609a      	str	r2, [r3, #8]
 80053b8:	e032      	b.n	8005420 <HAL_ETH_Init+0x320>
 80053ba:	bf00      	nop
 80053bc:	03938700 	.word	0x03938700
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40013800 	.word	0x40013800
 80053c8:	01312cff 	.word	0x01312cff
 80053cc:	02160ebf 	.word	0x02160ebf
 80053d0:	039386ff 	.word	0x039386ff
 80053d4:	05f5e0ff 	.word	0x05f5e0ff
 80053d8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	08db      	lsrs	r3, r3, #3
 80053e2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80053ec:	4313      	orrs	r3, r2
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	2100      	movs	r1, #0
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fad1 	bl	800599c <HAL_ETH_WritePHYRegister>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005404:	6939      	ldr	r1, [r7, #16]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fb5e 	bl	8005ac8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e00c      	b.n	8005432 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8005418:	f640 70ff 	movw	r0, #4095	; 0xfff
 800541c:	f7ff f818 	bl	8004450 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8005420:	6939      	ldr	r1, [r7, #16]
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fb50 	bl	8005ac8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop

0800543c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_ETH_DMATxDescListInit+0x20>
 8005458:	2302      	movs	r3, #2
 800545a:	e052      	b.n	8005502 <HAL_ETH_DMATxDescListInit+0xc6>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e030      	b.n	80054da <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	015b      	lsls	r3, r3, #5
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	4413      	add	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005488:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4413      	add	r3, r2
 8005498:	461a      	mov	r2, r3
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d105      	bne.n	80054b2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d208      	bcs.n	80054ce <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	3301      	adds	r3, #1
 80054c0:	015b      	lsls	r3, r3, #5
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	4413      	add	r3, r2
 80054c6:	461a      	mov	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	60da      	str	r2, [r3, #12]
 80054cc:	e002      	b.n	80054d4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	3301      	adds	r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d3ca      	bcc.n	8005478 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ec:	3310      	adds	r3, #16
 80054ee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800550e:	b480      	push	{r7}
 8005510:	b087      	sub	sp, #28
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_ETH_DMARxDescListInit+0x20>
 800552a:	2302      	movs	r3, #2
 800552c:	e056      	b.n	80055dc <HAL_ETH_DMARxDescListInit+0xce>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2202      	movs	r2, #2
 800553a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	e034      	b.n	80055b4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	015b      	lsls	r3, r3, #5
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	4413      	add	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800555a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005562:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4413      	add	r3, r2
 8005572:	461a      	mov	r2, r3
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d105      	bne.n	800558c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	3b01      	subs	r3, #1
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	429a      	cmp	r2, r3
 8005594:	d208      	bcs.n	80055a8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	3301      	adds	r3, #1
 800559a:	015b      	lsls	r3, r3, #5
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	4413      	add	r3, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	e002      	b.n	80055ae <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	3301      	adds	r3, #1
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d3c6      	bcc.n	800554a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c6:	330c      	adds	r3, #12
 80055c8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	2300      	movs	r3, #0
 80055fc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_ETH_TransmitFrame+0x24>
 8005608:	2302      	movs	r3, #2
 800560a:	e0cd      	b.n	80057a8 <HAL_ETH_TransmitFrame+0x1c0>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8005632:	2301      	movs	r3, #1
 8005634:	e0b8      	b.n	80057a8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	da09      	bge.n	8005654 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2212      	movs	r2, #18
 8005644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0a9      	b.n	80057a8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800565a:	4293      	cmp	r3, r2
 800565c:	d915      	bls.n	800568a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	4a54      	ldr	r2, [pc, #336]	; (80057b4 <HAL_ETH_TransmitFrame+0x1cc>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	0a9b      	lsrs	r3, r3, #10
 8005668:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	4b51      	ldr	r3, [pc, #324]	; (80057b4 <HAL_ETH_TransmitFrame+0x1cc>)
 800566e:	fba3 1302 	umull	r1, r3, r3, r2
 8005672:	0a9b      	lsrs	r3, r3, #10
 8005674:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	3301      	adds	r3, #1
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	e001      	b.n	800568e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800568a:	2301      	movs	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d11c      	bne.n	80056ce <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80056a2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80056ae:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80056be:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80056cc:	e04b      	b.n	8005766 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80056ce:	2300      	movs	r3, #0
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	e044      	b.n	800575e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056e2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80056f8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005702:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	3b01      	subs	r3, #1
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	429a      	cmp	r2, r3
 800570c:	d116      	bne.n	800573c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800571c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <HAL_ETH_TransmitFrame+0x1d0>)
 8005722:	fb02 f203 	mul.w	r2, r2, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	4413      	add	r3, r2
 800572a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800572e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800573a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800574a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	461a      	mov	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3301      	adds	r3, #1
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	429a      	cmp	r2, r3
 8005764:	d3b6      	bcc.n	80056d4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576e:	3314      	adds	r3, #20
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005782:	3314      	adds	r3, #20
 8005784:	2204      	movs	r2, #4
 8005786:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005790:	3304      	adds	r3, #4
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	ac02b00b 	.word	0xac02b00b
 80057b8:	fffffa0c 	.word	0xfffffa0c

080057bc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e074      	b.n	80058c0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80057e6:	e05a      	b.n	800589e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057fc:	d10d      	bne.n	800581a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	461a      	mov	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28
 8005818:	e041      	b.n	800589e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10b      	bne.n	8005840 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	461a      	mov	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	629a      	str	r2, [r3, #40]	; 0x28
 800583e:	e02e      	b.n	800589e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	2b01      	cmp	r3, #1
 8005858:	d103      	bne.n	8005862 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	0c1b      	lsrs	r3, r3, #16
 800586a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800586e:	1f1a      	subs	r2, r3, #4
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	461a      	mov	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e010      	b.n	80058c0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	db02      	blt.n	80058ae <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d99c      	bls.n	80057e8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	460b      	mov	r3, r1
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b82      	cmp	r3, #130	; 0x82
 80058ec:	d101      	bne.n	80058f2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80058ee:	2302      	movs	r3, #2
 80058f0:	e050      	b.n	8005994 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2282      	movs	r2, #130	; 0x82
 80058f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f003 031c 	and.w	r3, r3, #28
 8005908:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8a1b      	ldrh	r3, [r3, #16]
 800590e:	02db      	lsls	r3, r3, #11
 8005910:	b29b      	uxth	r3, r3
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005918:	897b      	ldrh	r3, [r7, #10]
 800591a:	019b      	lsls	r3, r3, #6
 800591c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f023 0302 	bic.w	r3, r3, #2
 800592c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800593e:	f7fe fd7b 	bl	8004438 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005944:	e015      	b.n	8005972 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8005946:	f7fe fd77 	bl	8004438 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005954:	d309      	bcc.n	800596a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e014      	b.n	8005994 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e4      	bne.n	8005946 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	b29b      	uxth	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	460b      	mov	r3, r1
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b42      	cmp	r3, #66	; 0x42
 80059bc:	d101      	bne.n	80059c2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80059be:	2302      	movs	r3, #2
 80059c0:	e04e      	b.n	8005a60 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2242      	movs	r2, #66	; 0x42
 80059c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f003 031c 	and.w	r3, r3, #28
 80059d8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8a1b      	ldrh	r3, [r3, #16]
 80059de:	02db      	lsls	r3, r3, #11
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80059e8:	897b      	ldrh	r3, [r7, #10]
 80059ea:	019b      	lsls	r3, r3, #6
 80059ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f043 0302 	orr.w	r3, r3, #2
 80059fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005a18:	f7fe fd0e 	bl	8004438 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005a1e:	e015      	b.n	8005a4c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005a20:	f7fe fd0a 	bl	8004438 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2e:	d309      	bcc.n	8005a44 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e00d      	b.n	8005a60 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e4      	bne.n	8005a20 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_ETH_Start+0x16>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e01f      	b.n	8005abe <HAL_ETH_Start+0x56>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa1c 	bl	8005ecc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fa36 	bl	8005f06 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fa80 	bl	8005fa0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fa4d 	bl	8005f40 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa62 	bl	8005f70 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b0b0      	sub	sp, #192	; 0xc0
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005aec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005af6:	2300      	movs	r3, #0
 8005af8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b12:	663b      	str	r3, [r7, #96]	; 0x60
 8005b14:	e001      	b.n	8005b1a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b1e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005b24:	2300      	movs	r3, #0
 8005b26:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005b34:	2340      	movs	r3, #64	; 0x40
 8005b36:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005b9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ba0:	4bac      	ldr	r3, [pc, #688]	; (8005e54 <ETH_MACDMAConfig+0x38c>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8005baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005bac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8005bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005bb0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005bb4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005bba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005bbe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005bc2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005bc8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005bcc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005bd0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005bd4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005bd8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005bdc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005bde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bf0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bfc:	2001      	movs	r0, #1
 8005bfe:	f7fe fc27 	bl	8004450 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005c0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005c10:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005c12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005c14:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005c1a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005c20:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005c26:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005c2c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005c30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005c38:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005c3a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c46:	2001      	movs	r0, #1
 8005c48:	f7fe fc02 	bl	8004450 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c54:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c5e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005c68:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005c74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c78:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005c82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c86:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005c88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005c8c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005c8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005c92:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005c98:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005c9e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005ca0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005ca4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005ca6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005cb8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	f7fe fbc3 	bl	8004450 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005cd2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005cd4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005cd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005cee:	2001      	movs	r0, #1
 8005cf0:	f7fe fbae 	bl	8004450 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005cfc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d06:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005d0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d10:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005d22:	2304      	movs	r3, #4
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d30:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d36:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d3c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005d3e:	2380      	movs	r3, #128	; 0x80
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005d46:	2300      	movs	r3, #0
 8005d48:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d52:	3318      	adds	r3, #24
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005d5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d5e:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <ETH_MACDMAConfig+0x390>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005d66:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005d68:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005d6a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005d6c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005d6e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005d70:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005d72:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005d74:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005d76:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005d78:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005d7a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005d7e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005d82:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005d86:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005d88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9a:	3318      	adds	r3, #24
 8005d9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005da0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005daa:	3318      	adds	r3, #24
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005db2:	2001      	movs	r0, #1
 8005db4:	f7fe fb4c 	bl	8004450 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc0:	3318      	adds	r3, #24
 8005dc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005dc6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005dcc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005dd0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005dd4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005dd8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ddc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005dde:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005de2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005e00:	2001      	movs	r0, #1
 8005e02:	f7fe fb25 	bl	8004450 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005e12:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d10f      	bne.n	8005e3c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e24:	331c      	adds	r3, #28
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e38:	331c      	adds	r3, #28
 8005e3a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	461a      	mov	r2, r3
 8005e42:	2100      	movs	r1, #0
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f809 	bl	8005e5c <ETH_MACAddressConfig>
}
 8005e4a:	bf00      	nop
 8005e4c:	37c0      	adds	r7, #192	; 0xc0
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	ff20810f 	.word	0xff20810f
 8005e58:	f8de3f23 	.word	0xf8de3f23

08005e5c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3305      	adds	r3, #5
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	3204      	adds	r2, #4
 8005e74:	7812      	ldrb	r2, [r2, #0]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <ETH_MACAddressConfig+0x68>)
 8005e7e:	4413      	add	r3, r2
 8005e80:	461a      	mov	r2, r3
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3303      	adds	r3, #3
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	061a      	lsls	r2, r3, #24
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3302      	adds	r3, #2
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	041b      	lsls	r3, r3, #16
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <ETH_MACAddressConfig+0x6c>)
 8005eae:	4413      	add	r3, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	6013      	str	r3, [r2, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40028040 	.word	0x40028040
 8005ec8:	40028044 	.word	0x40028044

08005ecc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0208 	orr.w	r2, r2, #8
 8005ee6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	f000 f87f 	bl	8005ff4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	601a      	str	r2, [r3, #0]
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0204 	orr.w	r2, r2, #4
 8005f20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	f000 f862 	bl	8005ff4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	601a      	str	r2, [r3, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f50:	3318      	adds	r3, #24
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f60:	3318      	adds	r3, #24
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f80:	3318      	adds	r3, #24
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0202 	orr.w	r2, r2, #2
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	3318      	adds	r3, #24
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb4:	3318      	adds	r3, #24
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc4:	3318      	adds	r3, #24
 8005fc6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd0:	3318      	adds	r3, #24
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005fd6:	2001      	movs	r0, #1
 8005fd8:	f000 f80c 	bl	8005ff4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	3318      	adds	r3, #24
 8005fe8:	601a      	str	r2, [r3, #0]
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <ETH_Delay+0x34>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0a      	ldr	r2, [pc, #40]	; (800602c <ETH_Delay+0x38>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	0a5b      	lsrs	r3, r3, #9
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	fb02 f303 	mul.w	r3, r2, r3
 800600e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8006010:	bf00      	nop
  } 
  while (Delay --);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1e5a      	subs	r2, r3, #1
 8006016:	60fa      	str	r2, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f9      	bne.n	8006010 <ETH_Delay+0x1c>
}
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	200000a0 	.word	0x200000a0
 800602c:	10624dd3 	.word	0x10624dd3

08006030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006030:	b480      	push	{r7}
 8006032:	b089      	sub	sp, #36	; 0x24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	e16b      	b.n	8006324 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800604c:	2201      	movs	r2, #1
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4013      	ands	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	429a      	cmp	r2, r3
 8006066:	f040 815a 	bne.w	800631e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d00b      	beq.n	800608a <HAL_GPIO_Init+0x5a>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d007      	beq.n	800608a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800607e:	2b11      	cmp	r3, #17
 8006080:	d003      	beq.n	800608a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2b12      	cmp	r3, #18
 8006088:	d130      	bne.n	80060ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	2203      	movs	r2, #3
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	43db      	mvns	r3, r3
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	4013      	ands	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	fa02 f303 	lsl.w	r3, r2, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060c0:	2201      	movs	r2, #1
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	43db      	mvns	r3, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4013      	ands	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	091b      	lsrs	r3, r3, #4
 80060d6:	f003 0201 	and.w	r2, r3, #1
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	2203      	movs	r2, #3
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4313      	orrs	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d003      	beq.n	800612c <HAL_GPIO_Init+0xfc>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b12      	cmp	r3, #18
 800612a:	d123      	bne.n	8006174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	08da      	lsrs	r2, r3, #3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3208      	adds	r2, #8
 8006134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	220f      	movs	r2, #15
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	43db      	mvns	r3, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4013      	ands	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	08da      	lsrs	r2, r3, #3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3208      	adds	r2, #8
 800616e:	69b9      	ldr	r1, [r7, #24]
 8006170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	2203      	movs	r2, #3
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	4013      	ands	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 0203 	and.w	r2, r3, #3
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80b4 	beq.w	800631e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	4b5f      	ldr	r3, [pc, #380]	; (8006338 <HAL_GPIO_Init+0x308>)
 80061bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061be:	4a5e      	ldr	r2, [pc, #376]	; (8006338 <HAL_GPIO_Init+0x308>)
 80061c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061c4:	6453      	str	r3, [r2, #68]	; 0x44
 80061c6:	4b5c      	ldr	r3, [pc, #368]	; (8006338 <HAL_GPIO_Init+0x308>)
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061d2:	4a5a      	ldr	r2, [pc, #360]	; (800633c <HAL_GPIO_Init+0x30c>)
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	089b      	lsrs	r3, r3, #2
 80061d8:	3302      	adds	r3, #2
 80061da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	220f      	movs	r2, #15
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	43db      	mvns	r3, r3
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	4013      	ands	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a51      	ldr	r2, [pc, #324]	; (8006340 <HAL_GPIO_Init+0x310>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d02b      	beq.n	8006256 <HAL_GPIO_Init+0x226>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a50      	ldr	r2, [pc, #320]	; (8006344 <HAL_GPIO_Init+0x314>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d025      	beq.n	8006252 <HAL_GPIO_Init+0x222>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a4f      	ldr	r2, [pc, #316]	; (8006348 <HAL_GPIO_Init+0x318>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d01f      	beq.n	800624e <HAL_GPIO_Init+0x21e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a4e      	ldr	r2, [pc, #312]	; (800634c <HAL_GPIO_Init+0x31c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d019      	beq.n	800624a <HAL_GPIO_Init+0x21a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a4d      	ldr	r2, [pc, #308]	; (8006350 <HAL_GPIO_Init+0x320>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_GPIO_Init+0x216>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a4c      	ldr	r2, [pc, #304]	; (8006354 <HAL_GPIO_Init+0x324>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00d      	beq.n	8006242 <HAL_GPIO_Init+0x212>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a4b      	ldr	r2, [pc, #300]	; (8006358 <HAL_GPIO_Init+0x328>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <HAL_GPIO_Init+0x20e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a4a      	ldr	r2, [pc, #296]	; (800635c <HAL_GPIO_Init+0x32c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d101      	bne.n	800623a <HAL_GPIO_Init+0x20a>
 8006236:	2307      	movs	r3, #7
 8006238:	e00e      	b.n	8006258 <HAL_GPIO_Init+0x228>
 800623a:	2308      	movs	r3, #8
 800623c:	e00c      	b.n	8006258 <HAL_GPIO_Init+0x228>
 800623e:	2306      	movs	r3, #6
 8006240:	e00a      	b.n	8006258 <HAL_GPIO_Init+0x228>
 8006242:	2305      	movs	r3, #5
 8006244:	e008      	b.n	8006258 <HAL_GPIO_Init+0x228>
 8006246:	2304      	movs	r3, #4
 8006248:	e006      	b.n	8006258 <HAL_GPIO_Init+0x228>
 800624a:	2303      	movs	r3, #3
 800624c:	e004      	b.n	8006258 <HAL_GPIO_Init+0x228>
 800624e:	2302      	movs	r3, #2
 8006250:	e002      	b.n	8006258 <HAL_GPIO_Init+0x228>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <HAL_GPIO_Init+0x228>
 8006256:	2300      	movs	r3, #0
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	f002 0203 	and.w	r2, r2, #3
 800625e:	0092      	lsls	r2, r2, #2
 8006260:	4093      	lsls	r3, r2
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	4313      	orrs	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006268:	4934      	ldr	r1, [pc, #208]	; (800633c <HAL_GPIO_Init+0x30c>)
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	089b      	lsrs	r3, r3, #2
 800626e:	3302      	adds	r3, #2
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006276:	4b3a      	ldr	r3, [pc, #232]	; (8006360 <HAL_GPIO_Init+0x330>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	43db      	mvns	r3, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4013      	ands	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800629a:	4a31      	ldr	r2, [pc, #196]	; (8006360 <HAL_GPIO_Init+0x330>)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80062a0:	4b2f      	ldr	r3, [pc, #188]	; (8006360 <HAL_GPIO_Init+0x330>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	43db      	mvns	r3, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4013      	ands	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062c4:	4a26      	ldr	r2, [pc, #152]	; (8006360 <HAL_GPIO_Init+0x330>)
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062ca:	4b25      	ldr	r3, [pc, #148]	; (8006360 <HAL_GPIO_Init+0x330>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	43db      	mvns	r3, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4013      	ands	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062ee:	4a1c      	ldr	r2, [pc, #112]	; (8006360 <HAL_GPIO_Init+0x330>)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062f4:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <HAL_GPIO_Init+0x330>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	43db      	mvns	r3, r3
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	4013      	ands	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006318:	4a11      	ldr	r2, [pc, #68]	; (8006360 <HAL_GPIO_Init+0x330>)
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	3301      	adds	r3, #1
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2b0f      	cmp	r3, #15
 8006328:	f67f ae90 	bls.w	800604c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800632c:	bf00      	nop
 800632e:	3724      	adds	r7, #36	; 0x24
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40023800 	.word	0x40023800
 800633c:	40013800 	.word	0x40013800
 8006340:	40020000 	.word	0x40020000
 8006344:	40020400 	.word	0x40020400
 8006348:	40020800 	.word	0x40020800
 800634c:	40020c00 	.word	0x40020c00
 8006350:	40021000 	.word	0x40021000
 8006354:	40021400 	.word	0x40021400
 8006358:	40021800 	.word	0x40021800
 800635c:	40021c00 	.word	0x40021c00
 8006360:	40013c00 	.word	0x40013c00

08006364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800637c:	2301      	movs	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]
 8006380:	e001      	b.n	8006386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006382:	2300      	movs	r3, #0
 8006384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	807b      	strh	r3, [r7, #2]
 80063a0:	4613      	mov	r3, r2
 80063a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063a4:	787b      	ldrb	r3, [r7, #1]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063aa:	887a      	ldrh	r2, [r7, #2]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063b0:	e003      	b.n	80063ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063b2:	887b      	ldrh	r3, [r7, #2]
 80063b4:	041a      	lsls	r2, r3, #16
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	619a      	str	r2, [r3, #24]
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	887b      	ldrh	r3, [r7, #2]
 80063d8:	401a      	ands	r2, r3
 80063da:	887b      	ldrh	r3, [r7, #2]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d104      	bne.n	80063ea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063e0:	887b      	ldrh	r3, [r7, #2]
 80063e2:	041a      	lsls	r2, r3, #16
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80063e8:	e002      	b.n	80063f0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80063ea:	887a      	ldrh	r2, [r7, #2]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	619a      	str	r2, [r3, #24]
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e11f      	b.n	800664e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fd fcb0 	bl	8003d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2224      	movs	r2, #36	; 0x24
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0201 	bic.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800644e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800645e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006460:	f001 fe68 	bl	8008134 <HAL_RCC_GetPCLK1Freq>
 8006464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	4a7b      	ldr	r2, [pc, #492]	; (8006658 <HAL_I2C_Init+0x25c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d807      	bhi.n	8006480 <HAL_I2C_Init+0x84>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a7a      	ldr	r2, [pc, #488]	; (800665c <HAL_I2C_Init+0x260>)
 8006474:	4293      	cmp	r3, r2
 8006476:	bf94      	ite	ls
 8006478:	2301      	movls	r3, #1
 800647a:	2300      	movhi	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	e006      	b.n	800648e <HAL_I2C_Init+0x92>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4a77      	ldr	r2, [pc, #476]	; (8006660 <HAL_I2C_Init+0x264>)
 8006484:	4293      	cmp	r3, r2
 8006486:	bf94      	ite	ls
 8006488:	2301      	movls	r3, #1
 800648a:	2300      	movhi	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e0db      	b.n	800664e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4a72      	ldr	r2, [pc, #456]	; (8006664 <HAL_I2C_Init+0x268>)
 800649a:	fba2 2303 	umull	r2, r3, r2, r3
 800649e:	0c9b      	lsrs	r3, r3, #18
 80064a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	4a64      	ldr	r2, [pc, #400]	; (8006658 <HAL_I2C_Init+0x25c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d802      	bhi.n	80064d0 <HAL_I2C_Init+0xd4>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	3301      	adds	r3, #1
 80064ce:	e009      	b.n	80064e4 <HAL_I2C_Init+0xe8>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80064d6:	fb02 f303 	mul.w	r3, r2, r3
 80064da:	4a63      	ldr	r2, [pc, #396]	; (8006668 <HAL_I2C_Init+0x26c>)
 80064dc:	fba2 2303 	umull	r2, r3, r2, r3
 80064e0:	099b      	lsrs	r3, r3, #6
 80064e2:	3301      	adds	r3, #1
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6812      	ldr	r2, [r2, #0]
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80064f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	4956      	ldr	r1, [pc, #344]	; (8006658 <HAL_I2C_Init+0x25c>)
 8006500:	428b      	cmp	r3, r1
 8006502:	d80d      	bhi.n	8006520 <HAL_I2C_Init+0x124>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	1e59      	subs	r1, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006512:	3301      	adds	r3, #1
 8006514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006518:	2b04      	cmp	r3, #4
 800651a:	bf38      	it	cc
 800651c:	2304      	movcc	r3, #4
 800651e:	e04f      	b.n	80065c0 <HAL_I2C_Init+0x1c4>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d111      	bne.n	800654c <HAL_I2C_Init+0x150>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	1e58      	subs	r0, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6859      	ldr	r1, [r3, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	440b      	add	r3, r1
 8006536:	fbb0 f3f3 	udiv	r3, r0, r3
 800653a:	3301      	adds	r3, #1
 800653c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006540:	2b00      	cmp	r3, #0
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	e012      	b.n	8006572 <HAL_I2C_Init+0x176>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	1e58      	subs	r0, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6859      	ldr	r1, [r3, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	0099      	lsls	r1, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006562:	3301      	adds	r3, #1
 8006564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006568:	2b00      	cmp	r3, #0
 800656a:	bf0c      	ite	eq
 800656c:	2301      	moveq	r3, #1
 800656e:	2300      	movne	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <HAL_I2C_Init+0x17e>
 8006576:	2301      	movs	r3, #1
 8006578:	e022      	b.n	80065c0 <HAL_I2C_Init+0x1c4>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10e      	bne.n	80065a0 <HAL_I2C_Init+0x1a4>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1e58      	subs	r0, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6859      	ldr	r1, [r3, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	440b      	add	r3, r1
 8006590:	fbb0 f3f3 	udiv	r3, r0, r3
 8006594:	3301      	adds	r3, #1
 8006596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800659a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659e:	e00f      	b.n	80065c0 <HAL_I2C_Init+0x1c4>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	1e58      	subs	r0, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6859      	ldr	r1, [r3, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	0099      	lsls	r1, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065b6:	3301      	adds	r3, #1
 80065b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	6809      	ldr	r1, [r1, #0]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69da      	ldr	r2, [r3, #28]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80065ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6911      	ldr	r1, [r2, #16]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	68d2      	ldr	r2, [r2, #12]
 80065fa:	4311      	orrs	r1, r2
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	430b      	orrs	r3, r1
 8006602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695a      	ldr	r2, [r3, #20]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	000186a0 	.word	0x000186a0
 800665c:	001e847f 	.word	0x001e847f
 8006660:	003d08ff 	.word	0x003d08ff
 8006664:	431bde83 	.word	0x431bde83
 8006668:	10624dd3 	.word	0x10624dd3

0800666c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	607a      	str	r2, [r7, #4]
 8006676:	461a      	mov	r2, r3
 8006678:	460b      	mov	r3, r1
 800667a:	817b      	strh	r3, [r7, #10]
 800667c:	4613      	mov	r3, r2
 800667e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006680:	f7fd feda 	bl	8004438 <HAL_GetTick>
 8006684:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b20      	cmp	r3, #32
 8006690:	f040 80e0 	bne.w	8006854 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	2319      	movs	r3, #25
 800669a:	2201      	movs	r2, #1
 800669c:	4970      	ldr	r1, [pc, #448]	; (8006860 <HAL_I2C_Master_Transmit+0x1f4>)
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 ff30 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80066aa:	2302      	movs	r3, #2
 80066ac:	e0d3      	b.n	8006856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_I2C_Master_Transmit+0x50>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e0cc      	b.n	8006856 <HAL_I2C_Master_Transmit+0x1ea>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d007      	beq.n	80066e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2221      	movs	r2, #33	; 0x21
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2210      	movs	r2, #16
 80066fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	893a      	ldrh	r2, [r7, #8]
 8006712:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4a50      	ldr	r2, [pc, #320]	; (8006864 <HAL_I2C_Master_Transmit+0x1f8>)
 8006722:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006724:	8979      	ldrh	r1, [r7, #10]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	6a3a      	ldr	r2, [r7, #32]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fcea 	bl	8007104 <I2C_MasterRequestWrite>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e08d      	b.n	8006856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673a:	2300      	movs	r3, #0
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006750:	e066      	b.n	8006820 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	6a39      	ldr	r1, [r7, #32]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 ffaa 	bl	80076b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00d      	beq.n	800677e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	2b04      	cmp	r3, #4
 8006768:	d107      	bne.n	800677a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e06b      	b.n	8006856 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	781a      	ldrb	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d11b      	bne.n	80067f4 <HAL_I2C_Master_Transmit+0x188>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d017      	beq.n	80067f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	6a39      	ldr	r1, [r7, #32]
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 ff9a 	bl	8007732 <I2C_WaitOnBTFFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00d      	beq.n	8006820 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	2b04      	cmp	r3, #4
 800680a:	d107      	bne.n	800681c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800681a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e01a      	b.n	8006856 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006824:	2b00      	cmp	r3, #0
 8006826:	d194      	bne.n	8006752 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e000      	b.n	8006856 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	00100002 	.word	0x00100002
 8006864:	ffff0000 	.word	0xffff0000

08006868 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	4608      	mov	r0, r1
 8006872:	4611      	mov	r1, r2
 8006874:	461a      	mov	r2, r3
 8006876:	4603      	mov	r3, r0
 8006878:	817b      	strh	r3, [r7, #10]
 800687a:	460b      	mov	r3, r1
 800687c:	813b      	strh	r3, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006882:	f7fd fdd9 	bl	8004438 <HAL_GetTick>
 8006886:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b20      	cmp	r3, #32
 8006892:	f040 80d9 	bne.w	8006a48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	2319      	movs	r3, #25
 800689c:	2201      	movs	r2, #1
 800689e:	496d      	ldr	r1, [pc, #436]	; (8006a54 <HAL_I2C_Mem_Write+0x1ec>)
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 fe2f 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80068ac:	2302      	movs	r3, #2
 80068ae:	e0cc      	b.n	8006a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_I2C_Mem_Write+0x56>
 80068ba:	2302      	movs	r3, #2
 80068bc:	e0c5      	b.n	8006a4a <HAL_I2C_Mem_Write+0x1e2>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d007      	beq.n	80068e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0201 	orr.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2221      	movs	r2, #33	; 0x21
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2240      	movs	r2, #64	; 0x40
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a4d      	ldr	r2, [pc, #308]	; (8006a58 <HAL_I2C_Mem_Write+0x1f0>)
 8006924:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006926:	88f8      	ldrh	r0, [r7, #6]
 8006928:	893a      	ldrh	r2, [r7, #8]
 800692a:	8979      	ldrh	r1, [r7, #10]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	4603      	mov	r3, r0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fc66 	bl	8007208 <I2C_RequestMemoryWrite>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d052      	beq.n	80069e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e081      	b.n	8006a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 feb0 	bl	80076b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00d      	beq.n	8006972 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	2b04      	cmp	r3, #4
 800695c:	d107      	bne.n	800696e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800696c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e06b      	b.n	8006a4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	781a      	ldrb	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d11b      	bne.n	80069e8 <HAL_I2C_Mem_Write+0x180>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d017      	beq.n	80069e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1aa      	bne.n	8006946 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fe9c 	bl	8007732 <I2C_WaitOnBTFFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00d      	beq.n	8006a1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d107      	bne.n	8006a18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e016      	b.n	8006a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e000      	b.n	8006a4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	00100002 	.word	0x00100002
 8006a58:	ffff0000 	.word	0xffff0000

08006a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08c      	sub	sp, #48	; 0x30
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	4608      	mov	r0, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	817b      	strh	r3, [r7, #10]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	813b      	strh	r3, [r7, #8]
 8006a72:	4613      	mov	r3, r2
 8006a74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a76:	f7fd fcdf 	bl	8004438 <HAL_GetTick>
 8006a7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	f040 8208 	bne.w	8006e9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	2319      	movs	r3, #25
 8006a90:	2201      	movs	r2, #1
 8006a92:	497b      	ldr	r1, [pc, #492]	; (8006c80 <HAL_I2C_Mem_Read+0x224>)
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fd35 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e1fb      	b.n	8006e9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <HAL_I2C_Mem_Read+0x56>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e1f4      	b.n	8006e9c <HAL_I2C_Mem_Read+0x440>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d007      	beq.n	8006ad8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ae6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2222      	movs	r2, #34	; 0x22
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2240      	movs	r2, #64	; 0x40
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4a5b      	ldr	r2, [pc, #364]	; (8006c84 <HAL_I2C_Mem_Read+0x228>)
 8006b18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b1a:	88f8      	ldrh	r0, [r7, #6]
 8006b1c:	893a      	ldrh	r2, [r7, #8]
 8006b1e:	8979      	ldrh	r1, [r7, #10]
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	4603      	mov	r3, r0
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 fc02 	bl	8007334 <I2C_RequestMemoryRead>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e1b0      	b.n	8006e9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d113      	bne.n	8006b6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b42:	2300      	movs	r3, #0
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	623b      	str	r3, [r7, #32]
 8006b56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e184      	b.n	8006e74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d11b      	bne.n	8006baa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	61fb      	str	r3, [r7, #28]
 8006b96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	e164      	b.n	8006e74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d11b      	bne.n	8006bea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	e144      	b.n	8006e74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c00:	e138      	b.n	8006e74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	f200 80f1 	bhi.w	8006dee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d123      	bne.n	8006c5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fdcb 	bl	80077b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e139      	b.n	8006e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691a      	ldr	r2, [r3, #16]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c5a:	e10b      	b.n	8006e74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d14e      	bne.n	8006d02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	4906      	ldr	r1, [pc, #24]	; (8006c88 <HAL_I2C_Mem_Read+0x22c>)
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 fc48 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d008      	beq.n	8006c8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e10e      	b.n	8006e9c <HAL_I2C_Mem_Read+0x440>
 8006c7e:	bf00      	nop
 8006c80:	00100002 	.word	0x00100002
 8006c84:	ffff0000 	.word	0xffff0000
 8006c88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d00:	e0b8      	b.n	8006e74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4966      	ldr	r1, [pc, #408]	; (8006ea4 <HAL_I2C_Mem_Read+0x448>)
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 fbf9 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0bf      	b.n	8006e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	2200      	movs	r2, #0
 8006d66:	494f      	ldr	r1, [pc, #316]	; (8006ea4 <HAL_I2C_Mem_Read+0x448>)
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 fbcb 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e091      	b.n	8006e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dec:	e042      	b.n	8006e74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 fcde 	bl	80077b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e04c      	b.n	8006e9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d118      	bne.n	8006e74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f47f aec2 	bne.w	8006c02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e000      	b.n	8006e9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
  }
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3728      	adds	r7, #40	; 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	00010004 	.word	0x00010004

08006ea8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006eb8:	f7fd fabe 	bl	8004438 <HAL_GetTick>
 8006ebc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	f040 8111 	bne.w	80070f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	2319      	movs	r3, #25
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4988      	ldr	r1, [pc, #544]	; (80070fc <HAL_I2C_IsDeviceReady+0x254>)
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fb12 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e104      	b.n	80070f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_I2C_IsDeviceReady+0x50>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e0fd      	b.n	80070f4 <HAL_I2C_IsDeviceReady+0x24c>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d007      	beq.n	8006f1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0201 	orr.w	r2, r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2224      	movs	r2, #36	; 0x24
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4a70      	ldr	r2, [pc, #448]	; (8007100 <HAL_I2C_IsDeviceReady+0x258>)
 8006f40:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 fad0 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00d      	beq.n	8006f86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f78:	d103      	bne.n	8006f82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f80:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e0b6      	b.n	80070f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f86:	897b      	ldrh	r3, [r7, #10]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006f96:	f7fd fa4f 	bl	8004438 <HAL_GetTick>
 8006f9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	bf0c      	ite	eq
 8006faa:	2301      	moveq	r3, #1
 8006fac:	2300      	movne	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc0:	bf0c      	ite	eq
 8006fc2:	2301      	moveq	r3, #1
 8006fc4:	2300      	movne	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006fca:	e025      	b.n	8007018 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fcc:	f7fd fa34 	bl	8004438 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d302      	bcc.n	8006fe2 <HAL_I2C_IsDeviceReady+0x13a>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	22a0      	movs	r2, #160	; 0xa0
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2301      	moveq	r3, #1
 8006ffa:	2300      	movne	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800700e:	bf0c      	ite	eq
 8007010:	2301      	moveq	r3, #1
 8007012:	2300      	movne	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2ba0      	cmp	r3, #160	; 0xa0
 8007022:	d005      	beq.n	8007030 <HAL_I2C_IsDeviceReady+0x188>
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <HAL_I2C_IsDeviceReady+0x188>
 800702a:	7dbb      	ldrb	r3, [r7, #22]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0cd      	beq.n	8006fcc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b02      	cmp	r3, #2
 8007044:	d129      	bne.n	800709a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007054:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007056:	2300      	movs	r3, #0
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	2319      	movs	r3, #25
 8007072:	2201      	movs	r2, #1
 8007074:	4921      	ldr	r1, [pc, #132]	; (80070fc <HAL_I2C_IsDeviceReady+0x254>)
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fa44 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e036      	b.n	80070f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	e02c      	b.n	80070f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	2319      	movs	r3, #25
 80070ba:	2201      	movs	r2, #1
 80070bc:	490f      	ldr	r1, [pc, #60]	; (80070fc <HAL_I2C_IsDeviceReady+0x254>)
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 fa20 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e012      	b.n	80070f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	3301      	adds	r3, #1
 80070d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	429a      	cmp	r2, r3
 80070da:	f4ff af32 	bcc.w	8006f42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80070f2:	2302      	movs	r3, #2
  }
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	00100002 	.word	0x00100002
 8007100:	ffff0000 	.word	0xffff0000

08007104 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	460b      	mov	r3, r1
 8007112:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b08      	cmp	r3, #8
 800711e:	d006      	beq.n	800712e <I2C_MasterRequestWrite+0x2a>
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d003      	beq.n	800712e <I2C_MasterRequestWrite+0x2a>
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800712c:	d108      	bne.n	8007140 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e00b      	b.n	8007158 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	2b12      	cmp	r3, #18
 8007146:	d107      	bne.n	8007158 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007156:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f9cd 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00d      	beq.n	800718c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800717e:	d103      	bne.n	8007188 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007186:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e035      	b.n	80071f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007194:	d108      	bne.n	80071a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007196:	897b      	ldrh	r3, [r7, #10]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	461a      	mov	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071a4:	611a      	str	r2, [r3, #16]
 80071a6:	e01b      	b.n	80071e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80071a8:	897b      	ldrh	r3, [r7, #10]
 80071aa:	11db      	asrs	r3, r3, #7
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	f003 0306 	and.w	r3, r3, #6
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f063 030f 	orn	r3, r3, #15
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	490e      	ldr	r1, [pc, #56]	; (8007200 <I2C_MasterRequestWrite+0xfc>)
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 f9f3 	bl	80075b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e010      	b.n	80071f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80071d6:	897b      	ldrh	r3, [r7, #10]
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4907      	ldr	r1, [pc, #28]	; (8007204 <I2C_MasterRequestWrite+0x100>)
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f9e3 	bl	80075b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	00010008 	.word	0x00010008
 8007204:	00010002 	.word	0x00010002

08007208 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af02      	add	r7, sp, #8
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	4608      	mov	r0, r1
 8007212:	4611      	mov	r1, r2
 8007214:	461a      	mov	r2, r3
 8007216:	4603      	mov	r3, r0
 8007218:	817b      	strh	r3, [r7, #10]
 800721a:	460b      	mov	r3, r1
 800721c:	813b      	strh	r3, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	2200      	movs	r2, #0
 800723a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f960 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00d      	beq.n	8007266 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007258:	d103      	bne.n	8007262 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e05f      	b.n	8007326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007266:	897b      	ldrh	r3, [r7, #10]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	461a      	mov	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	6a3a      	ldr	r2, [r7, #32]
 800727a:	492d      	ldr	r1, [pc, #180]	; (8007330 <I2C_RequestMemoryWrite+0x128>)
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f998 	bl	80075b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e04c      	b.n	8007326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	617b      	str	r3, [r7, #20]
 80072a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a4:	6a39      	ldr	r1, [r7, #32]
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 fa02 	bl	80076b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00d      	beq.n	80072ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d107      	bne.n	80072ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e02b      	b.n	8007326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072ce:	88fb      	ldrh	r3, [r7, #6]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d105      	bne.n	80072e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072d4:	893b      	ldrh	r3, [r7, #8]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	611a      	str	r2, [r3, #16]
 80072de:	e021      	b.n	8007324 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	0a1b      	lsrs	r3, r3, #8
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f0:	6a39      	ldr	r1, [r7, #32]
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 f9dc 	bl	80076b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00d      	beq.n	800731a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	2b04      	cmp	r3, #4
 8007304:	d107      	bne.n	8007316 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e005      	b.n	8007326 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800731a:	893b      	ldrh	r3, [r7, #8]
 800731c:	b2da      	uxtb	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	00010002 	.word	0x00010002

08007334 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	4608      	mov	r0, r1
 800733e:	4611      	mov	r1, r2
 8007340:	461a      	mov	r2, r3
 8007342:	4603      	mov	r3, r0
 8007344:	817b      	strh	r3, [r7, #10]
 8007346:	460b      	mov	r3, r1
 8007348:	813b      	strh	r3, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800735c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800736c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	2200      	movs	r2, #0
 8007376:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 f8c2 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007394:	d103      	bne.n	800739e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800739c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e0aa      	b.n	80074f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80073a2:	897b      	ldrh	r3, [r7, #10]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	6a3a      	ldr	r2, [r7, #32]
 80073b6:	4952      	ldr	r1, [pc, #328]	; (8007500 <I2C_RequestMemoryRead+0x1cc>)
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f8fa 	bl	80075b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e097      	b.n	80074f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e0:	6a39      	ldr	r1, [r7, #32]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f964 	bl	80076b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00d      	beq.n	800740a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d107      	bne.n	8007406 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007404:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e076      	b.n	80074f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d105      	bne.n	800741c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007410:	893b      	ldrh	r3, [r7, #8]
 8007412:	b2da      	uxtb	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	611a      	str	r2, [r3, #16]
 800741a:	e021      	b.n	8007460 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800741c:	893b      	ldrh	r3, [r7, #8]
 800741e:	0a1b      	lsrs	r3, r3, #8
 8007420:	b29b      	uxth	r3, r3
 8007422:	b2da      	uxtb	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800742a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742c:	6a39      	ldr	r1, [r7, #32]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f93e 	bl	80076b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00d      	beq.n	8007456 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	2b04      	cmp	r3, #4
 8007440:	d107      	bne.n	8007452 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007450:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e050      	b.n	80074f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007456:	893b      	ldrh	r3, [r7, #8]
 8007458:	b2da      	uxtb	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007462:	6a39      	ldr	r1, [r7, #32]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f923 	bl	80076b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00d      	beq.n	800748c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	2b04      	cmp	r3, #4
 8007476:	d107      	bne.n	8007488 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007486:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e035      	b.n	80074f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800749a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f82b 	bl	8007504 <I2C_WaitOnFlagUntilTimeout>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00d      	beq.n	80074d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c2:	d103      	bne.n	80074cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e013      	b.n	80074f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80074d0:	897b      	ldrh	r3, [r7, #10]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f043 0301 	orr.w	r3, r3, #1
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	6a3a      	ldr	r2, [r7, #32]
 80074e4:	4906      	ldr	r1, [pc, #24]	; (8007500 <I2C_RequestMemoryRead+0x1cc>)
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f863 	bl	80075b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	00010002 	.word	0x00010002

08007504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	4613      	mov	r3, r2
 8007512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007514:	e025      	b.n	8007562 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d021      	beq.n	8007562 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751e:	f7fc ff8b 	bl	8004438 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d302      	bcc.n	8007534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d116      	bne.n	8007562 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	f043 0220 	orr.w	r2, r3, #32
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e023      	b.n	80075aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	0c1b      	lsrs	r3, r3, #16
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	d10d      	bne.n	8007588 <I2C_WaitOnFlagUntilTimeout+0x84>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	43da      	mvns	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4013      	ands	r3, r2
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	bf0c      	ite	eq
 800757e:	2301      	moveq	r3, #1
 8007580:	2300      	movne	r3, #0
 8007582:	b2db      	uxtb	r3, r3
 8007584:	461a      	mov	r2, r3
 8007586:	e00c      	b.n	80075a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	43da      	mvns	r2, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4013      	ands	r3, r2
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	bf0c      	ite	eq
 800759a:	2301      	moveq	r3, #1
 800759c:	2300      	movne	r3, #0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	461a      	mov	r2, r3
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d0b6      	beq.n	8007516 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
 80075be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075c0:	e051      	b.n	8007666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d0:	d123      	bne.n	800761a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f043 0204 	orr.w	r2, r3, #4
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e046      	b.n	80076a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d021      	beq.n	8007666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007622:	f7fc ff09 	bl	8004438 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	429a      	cmp	r2, r3
 8007630:	d302      	bcc.n	8007638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d116      	bne.n	8007666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2220      	movs	r2, #32
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f043 0220 	orr.w	r2, r3, #32
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e020      	b.n	80076a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	0c1b      	lsrs	r3, r3, #16
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b01      	cmp	r3, #1
 800766e:	d10c      	bne.n	800768a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	43da      	mvns	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4013      	ands	r3, r2
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	bf14      	ite	ne
 8007682:	2301      	movne	r3, #1
 8007684:	2300      	moveq	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	e00b      	b.n	80076a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	43da      	mvns	r2, r3
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4013      	ands	r3, r2
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	bf14      	ite	ne
 800769c:	2301      	movne	r3, #1
 800769e:	2300      	moveq	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d18d      	bne.n	80075c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076bc:	e02d      	b.n	800771a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 f8ce 	bl	8007860 <I2C_IsAcknowledgeFailed>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e02d      	b.n	800772a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d021      	beq.n	800771a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d6:	f7fc feaf 	bl	8004438 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d302      	bcc.n	80076ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d116      	bne.n	800771a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f043 0220 	orr.w	r2, r3, #32
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e007      	b.n	800772a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007724:	2b80      	cmp	r3, #128	; 0x80
 8007726:	d1ca      	bne.n	80076be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800773e:	e02d      	b.n	800779c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f88d 	bl	8007860 <I2C_IsAcknowledgeFailed>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e02d      	b.n	80077ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007756:	d021      	beq.n	800779c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007758:	f7fc fe6e 	bl	8004438 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	429a      	cmp	r2, r3
 8007766:	d302      	bcc.n	800776e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d116      	bne.n	800779c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	f043 0220 	orr.w	r2, r3, #32
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e007      	b.n	80077ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	f003 0304 	and.w	r3, r3, #4
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d1ca      	bne.n	8007740 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077c0:	e042      	b.n	8007848 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	f003 0310 	and.w	r3, r3, #16
 80077cc:	2b10      	cmp	r3, #16
 80077ce:	d119      	bne.n	8007804 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0210 	mvn.w	r2, #16
 80077d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e029      	b.n	8007858 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007804:	f7fc fe18 	bl	8004438 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	429a      	cmp	r2, r3
 8007812:	d302      	bcc.n	800781a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d116      	bne.n	8007848 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	f043 0220 	orr.w	r2, r3, #32
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e007      	b.n	8007858 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007852:	2b40      	cmp	r3, #64	; 0x40
 8007854:	d1b5      	bne.n	80077c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007876:	d11b      	bne.n	80078b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007880:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	f043 0204 	orr.w	r2, r3, #4
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e000      	b.n	80078b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e25b      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d075      	beq.n	80079ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078de:	4ba3      	ldr	r3, [pc, #652]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 030c 	and.w	r3, r3, #12
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d00c      	beq.n	8007904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078ea:	4ba0      	ldr	r3, [pc, #640]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d112      	bne.n	800791c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078f6:	4b9d      	ldr	r3, [pc, #628]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007902:	d10b      	bne.n	800791c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007904:	4b99      	ldr	r3, [pc, #612]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d05b      	beq.n	80079c8 <HAL_RCC_OscConfig+0x108>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d157      	bne.n	80079c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e236      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007924:	d106      	bne.n	8007934 <HAL_RCC_OscConfig+0x74>
 8007926:	4b91      	ldr	r3, [pc, #580]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a90      	ldr	r2, [pc, #576]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 800792c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	e01d      	b.n	8007970 <HAL_RCC_OscConfig+0xb0>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800793c:	d10c      	bne.n	8007958 <HAL_RCC_OscConfig+0x98>
 800793e:	4b8b      	ldr	r3, [pc, #556]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a8a      	ldr	r2, [pc, #552]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	4b88      	ldr	r3, [pc, #544]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a87      	ldr	r2, [pc, #540]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	e00b      	b.n	8007970 <HAL_RCC_OscConfig+0xb0>
 8007958:	4b84      	ldr	r3, [pc, #528]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a83      	ldr	r2, [pc, #524]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 800795e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	4b81      	ldr	r3, [pc, #516]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a80      	ldr	r2, [pc, #512]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 800796a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800796e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d013      	beq.n	80079a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007978:	f7fc fd5e 	bl	8004438 <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007980:	f7fc fd5a 	bl	8004438 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b64      	cmp	r3, #100	; 0x64
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e1fb      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007992:	4b76      	ldr	r3, [pc, #472]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f0      	beq.n	8007980 <HAL_RCC_OscConfig+0xc0>
 800799e:	e014      	b.n	80079ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a0:	f7fc fd4a 	bl	8004438 <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079a8:	f7fc fd46 	bl	8004438 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b64      	cmp	r3, #100	; 0x64
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e1e7      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ba:	4b6c      	ldr	r3, [pc, #432]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1f0      	bne.n	80079a8 <HAL_RCC_OscConfig+0xe8>
 80079c6:	e000      	b.n	80079ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d063      	beq.n	8007a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079d6:	4b65      	ldr	r3, [pc, #404]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 030c 	and.w	r3, r3, #12
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079e2:	4b62      	ldr	r3, [pc, #392]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079ea:	2b08      	cmp	r3, #8
 80079ec:	d11c      	bne.n	8007a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079ee:	4b5f      	ldr	r3, [pc, #380]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d116      	bne.n	8007a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079fa:	4b5c      	ldr	r3, [pc, #368]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <HAL_RCC_OscConfig+0x152>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d001      	beq.n	8007a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e1bb      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a12:	4b56      	ldr	r3, [pc, #344]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	4952      	ldr	r1, [pc, #328]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a26:	e03a      	b.n	8007a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d020      	beq.n	8007a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a30:	4b4f      	ldr	r3, [pc, #316]	; (8007b70 <HAL_RCC_OscConfig+0x2b0>)
 8007a32:	2201      	movs	r2, #1
 8007a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a36:	f7fc fcff 	bl	8004438 <HAL_GetTick>
 8007a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a3c:	e008      	b.n	8007a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a3e:	f7fc fcfb 	bl	8004438 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d901      	bls.n	8007a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e19c      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a50:	4b46      	ldr	r3, [pc, #280]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d0f0      	beq.n	8007a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a5c:	4b43      	ldr	r3, [pc, #268]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	4940      	ldr	r1, [pc, #256]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	600b      	str	r3, [r1, #0]
 8007a70:	e015      	b.n	8007a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a72:	4b3f      	ldr	r3, [pc, #252]	; (8007b70 <HAL_RCC_OscConfig+0x2b0>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a78:	f7fc fcde 	bl	8004438 <HAL_GetTick>
 8007a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a80:	f7fc fcda 	bl	8004438 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e17b      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a92:	4b36      	ldr	r3, [pc, #216]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f0      	bne.n	8007a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d030      	beq.n	8007b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d016      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ab2:	4b30      	ldr	r3, [pc, #192]	; (8007b74 <HAL_RCC_OscConfig+0x2b4>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab8:	f7fc fcbe 	bl	8004438 <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ac0:	f7fc fcba 	bl	8004438 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e15b      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ad2:	4b26      	ldr	r3, [pc, #152]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d0f0      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x200>
 8007ade:	e015      	b.n	8007b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ae0:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <HAL_RCC_OscConfig+0x2b4>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae6:	f7fc fca7 	bl	8004438 <HAL_GetTick>
 8007aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aec:	e008      	b.n	8007b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007aee:	f7fc fca3 	bl	8004438 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e144      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b00:	4b1a      	ldr	r3, [pc, #104]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1f0      	bne.n	8007aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 80a0 	beq.w	8007c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b1e:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10f      	bne.n	8007b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60bb      	str	r3, [r7, #8]
 8007b2e:	4b0f      	ldr	r3, [pc, #60]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	4a0e      	ldr	r2, [pc, #56]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b38:	6413      	str	r3, [r2, #64]	; 0x40
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b42:	60bb      	str	r3, [r7, #8]
 8007b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b46:	2301      	movs	r3, #1
 8007b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <HAL_RCC_OscConfig+0x2b8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d121      	bne.n	8007b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b56:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <HAL_RCC_OscConfig+0x2b8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a07      	ldr	r2, [pc, #28]	; (8007b78 <HAL_RCC_OscConfig+0x2b8>)
 8007b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b62:	f7fc fc69 	bl	8004438 <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b68:	e011      	b.n	8007b8e <HAL_RCC_OscConfig+0x2ce>
 8007b6a:	bf00      	nop
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	42470000 	.word	0x42470000
 8007b74:	42470e80 	.word	0x42470e80
 8007b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b7c:	f7fc fc5c 	bl	8004438 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e0fd      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b8e:	4b81      	ldr	r3, [pc, #516]	; (8007d94 <HAL_RCC_OscConfig+0x4d4>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0f0      	beq.n	8007b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d106      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x2f0>
 8007ba2:	4b7d      	ldr	r3, [pc, #500]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	4a7c      	ldr	r2, [pc, #496]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007ba8:	f043 0301 	orr.w	r3, r3, #1
 8007bac:	6713      	str	r3, [r2, #112]	; 0x70
 8007bae:	e01c      	b.n	8007bea <HAL_RCC_OscConfig+0x32a>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	2b05      	cmp	r3, #5
 8007bb6:	d10c      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x312>
 8007bb8:	4b77      	ldr	r3, [pc, #476]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbc:	4a76      	ldr	r2, [pc, #472]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bbe:	f043 0304 	orr.w	r3, r3, #4
 8007bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bc4:	4b74      	ldr	r3, [pc, #464]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc8:	4a73      	ldr	r2, [pc, #460]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	6713      	str	r3, [r2, #112]	; 0x70
 8007bd0:	e00b      	b.n	8007bea <HAL_RCC_OscConfig+0x32a>
 8007bd2:	4b71      	ldr	r3, [pc, #452]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd6:	4a70      	ldr	r2, [pc, #448]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bd8:	f023 0301 	bic.w	r3, r3, #1
 8007bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8007bde:	4b6e      	ldr	r3, [pc, #440]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be2:	4a6d      	ldr	r2, [pc, #436]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007be4:	f023 0304 	bic.w	r3, r3, #4
 8007be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d015      	beq.n	8007c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf2:	f7fc fc21 	bl	8004438 <HAL_GetTick>
 8007bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bf8:	e00a      	b.n	8007c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bfa:	f7fc fc1d 	bl	8004438 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d901      	bls.n	8007c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e0bc      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c10:	4b61      	ldr	r3, [pc, #388]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0ee      	beq.n	8007bfa <HAL_RCC_OscConfig+0x33a>
 8007c1c:	e014      	b.n	8007c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c1e:	f7fc fc0b 	bl	8004438 <HAL_GetTick>
 8007c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c24:	e00a      	b.n	8007c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c26:	f7fc fc07 	bl	8004438 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d901      	bls.n	8007c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e0a6      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c3c:	4b56      	ldr	r3, [pc, #344]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1ee      	bne.n	8007c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d105      	bne.n	8007c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c4e:	4b52      	ldr	r3, [pc, #328]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	4a51      	ldr	r2, [pc, #324]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8092 	beq.w	8007d88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c64:	4b4c      	ldr	r3, [pc, #304]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 030c 	and.w	r3, r3, #12
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d05c      	beq.n	8007d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d141      	bne.n	8007cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c78:	4b48      	ldr	r3, [pc, #288]	; (8007d9c <HAL_RCC_OscConfig+0x4dc>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c7e:	f7fc fbdb 	bl	8004438 <HAL_GetTick>
 8007c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c84:	e008      	b.n	8007c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c86:	f7fc fbd7 	bl	8004438 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d901      	bls.n	8007c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e078      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c98:	4b3f      	ldr	r3, [pc, #252]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1f0      	bne.n	8007c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	69da      	ldr	r2, [r3, #28]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	019b      	lsls	r3, r3, #6
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	041b      	lsls	r3, r3, #16
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	061b      	lsls	r3, r3, #24
 8007cc8:	4933      	ldr	r1, [pc, #204]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cce:	4b33      	ldr	r3, [pc, #204]	; (8007d9c <HAL_RCC_OscConfig+0x4dc>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cd4:	f7fc fbb0 	bl	8004438 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cdc:	f7fc fbac 	bl	8004438 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e04d      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cee:	4b2a      	ldr	r3, [pc, #168]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0f0      	beq.n	8007cdc <HAL_RCC_OscConfig+0x41c>
 8007cfa:	e045      	b.n	8007d88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cfc:	4b27      	ldr	r3, [pc, #156]	; (8007d9c <HAL_RCC_OscConfig+0x4dc>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d02:	f7fc fb99 	bl	8004438 <HAL_GetTick>
 8007d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d08:	e008      	b.n	8007d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d0a:	f7fc fb95 	bl	8004438 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d901      	bls.n	8007d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e036      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d1c:	4b1e      	ldr	r3, [pc, #120]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1f0      	bne.n	8007d0a <HAL_RCC_OscConfig+0x44a>
 8007d28:	e02e      	b.n	8007d88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e029      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d36:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d11c      	bne.n	8007d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d115      	bne.n	8007d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d5e:	4013      	ands	r3, r2
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10d      	bne.n	8007d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d106      	bne.n	8007d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d001      	beq.n	8007d88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e000      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	40007000 	.word	0x40007000
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	42470060 	.word	0x42470060

08007da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0cc      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007db4:	4b68      	ldr	r3, [pc, #416]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 030f 	and.w	r3, r3, #15
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d90c      	bls.n	8007ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dc2:	4b65      	ldr	r3, [pc, #404]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dca:	4b63      	ldr	r3, [pc, #396]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 030f 	and.w	r3, r3, #15
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d001      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e0b8      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d020      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007df4:	4b59      	ldr	r3, [pc, #356]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	4a58      	ldr	r2, [pc, #352]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e0c:	4b53      	ldr	r3, [pc, #332]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	4a52      	ldr	r2, [pc, #328]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e18:	4b50      	ldr	r3, [pc, #320]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	494d      	ldr	r1, [pc, #308]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d044      	beq.n	8007ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d107      	bne.n	8007e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e3e:	4b47      	ldr	r3, [pc, #284]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d119      	bne.n	8007e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e07f      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d003      	beq.n	8007e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d107      	bne.n	8007e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e5e:	4b3f      	ldr	r3, [pc, #252]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d109      	bne.n	8007e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e06f      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e6e:	4b3b      	ldr	r3, [pc, #236]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e067      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e7e:	4b37      	ldr	r3, [pc, #220]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f023 0203 	bic.w	r2, r3, #3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4934      	ldr	r1, [pc, #208]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e90:	f7fc fad2 	bl	8004438 <HAL_GetTick>
 8007e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e96:	e00a      	b.n	8007eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e98:	f7fc face 	bl	8004438 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e04f      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eae:	4b2b      	ldr	r3, [pc, #172]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f003 020c 	and.w	r2, r3, #12
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d1eb      	bne.n	8007e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ec0:	4b25      	ldr	r3, [pc, #148]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d20c      	bcs.n	8007ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ece:	4b22      	ldr	r3, [pc, #136]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	b2d2      	uxtb	r2, r2
 8007ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ed6:	4b20      	ldr	r3, [pc, #128]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d001      	beq.n	8007ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e032      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d008      	beq.n	8007f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ef4:	4b19      	ldr	r3, [pc, #100]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	4916      	ldr	r1, [pc, #88]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f12:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	490e      	ldr	r1, [pc, #56]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f26:	f000 f821 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	091b      	lsrs	r3, r3, #4
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	4a0a      	ldr	r2, [pc, #40]	; (8007f60 <HAL_RCC_ClockConfig+0x1c0>)
 8007f38:	5cd3      	ldrb	r3, [r2, r3]
 8007f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8007f3e:	4a09      	ldr	r2, [pc, #36]	; (8007f64 <HAL_RCC_ClockConfig+0x1c4>)
 8007f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f42:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fc f8dc 	bl	8004104 <HAL_InitTick>

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	40023c00 	.word	0x40023c00
 8007f5c:	40023800 	.word	0x40023800
 8007f60:	08020ef8 	.word	0x08020ef8
 8007f64:	200000a0 	.word	0x200000a0
 8007f68:	200000a4 	.word	0x200000a4

08007f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	607b      	str	r3, [r7, #4]
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f82:	4b63      	ldr	r3, [pc, #396]	; (8008110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f003 030c 	and.w	r3, r3, #12
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d007      	beq.n	8007f9e <HAL_RCC_GetSysClockFreq+0x32>
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d008      	beq.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x38>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f040 80b4 	bne.w	8008100 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f98:	4b5e      	ldr	r3, [pc, #376]	; (8008114 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007f9a:	60bb      	str	r3, [r7, #8]
       break;
 8007f9c:	e0b3      	b.n	8008106 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f9e:	4b5e      	ldr	r3, [pc, #376]	; (8008118 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007fa0:	60bb      	str	r3, [r7, #8]
      break;
 8007fa2:	e0b0      	b.n	8008106 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fa4:	4b5a      	ldr	r3, [pc, #360]	; (8008110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fae:	4b58      	ldr	r3, [pc, #352]	; (8008110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d04a      	beq.n	8008050 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fba:	4b55      	ldr	r3, [pc, #340]	; (8008110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	099b      	lsrs	r3, r3, #6
 8007fc0:	f04f 0400 	mov.w	r4, #0
 8007fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	ea03 0501 	and.w	r5, r3, r1
 8007fd0:	ea04 0602 	and.w	r6, r4, r2
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	4632      	mov	r2, r6
 8007fd8:	f04f 0300 	mov.w	r3, #0
 8007fdc:	f04f 0400 	mov.w	r4, #0
 8007fe0:	0154      	lsls	r4, r2, #5
 8007fe2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007fe6:	014b      	lsls	r3, r1, #5
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4622      	mov	r2, r4
 8007fec:	1b49      	subs	r1, r1, r5
 8007fee:	eb62 0206 	sbc.w	r2, r2, r6
 8007ff2:	f04f 0300 	mov.w	r3, #0
 8007ff6:	f04f 0400 	mov.w	r4, #0
 8007ffa:	0194      	lsls	r4, r2, #6
 8007ffc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008000:	018b      	lsls	r3, r1, #6
 8008002:	1a5b      	subs	r3, r3, r1
 8008004:	eb64 0402 	sbc.w	r4, r4, r2
 8008008:	f04f 0100 	mov.w	r1, #0
 800800c:	f04f 0200 	mov.w	r2, #0
 8008010:	00e2      	lsls	r2, r4, #3
 8008012:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008016:	00d9      	lsls	r1, r3, #3
 8008018:	460b      	mov	r3, r1
 800801a:	4614      	mov	r4, r2
 800801c:	195b      	adds	r3, r3, r5
 800801e:	eb44 0406 	adc.w	r4, r4, r6
 8008022:	f04f 0100 	mov.w	r1, #0
 8008026:	f04f 0200 	mov.w	r2, #0
 800802a:	0262      	lsls	r2, r4, #9
 800802c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008030:	0259      	lsls	r1, r3, #9
 8008032:	460b      	mov	r3, r1
 8008034:	4614      	mov	r4, r2
 8008036:	4618      	mov	r0, r3
 8008038:	4621      	mov	r1, r4
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f04f 0400 	mov.w	r4, #0
 8008040:	461a      	mov	r2, r3
 8008042:	4623      	mov	r3, r4
 8008044:	f7f8 fe20 	bl	8000c88 <__aeabi_uldivmod>
 8008048:	4603      	mov	r3, r0
 800804a:	460c      	mov	r4, r1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e049      	b.n	80080e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008050:	4b2f      	ldr	r3, [pc, #188]	; (8008110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	099b      	lsrs	r3, r3, #6
 8008056:	f04f 0400 	mov.w	r4, #0
 800805a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800805e:	f04f 0200 	mov.w	r2, #0
 8008062:	ea03 0501 	and.w	r5, r3, r1
 8008066:	ea04 0602 	and.w	r6, r4, r2
 800806a:	4629      	mov	r1, r5
 800806c:	4632      	mov	r2, r6
 800806e:	f04f 0300 	mov.w	r3, #0
 8008072:	f04f 0400 	mov.w	r4, #0
 8008076:	0154      	lsls	r4, r2, #5
 8008078:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800807c:	014b      	lsls	r3, r1, #5
 800807e:	4619      	mov	r1, r3
 8008080:	4622      	mov	r2, r4
 8008082:	1b49      	subs	r1, r1, r5
 8008084:	eb62 0206 	sbc.w	r2, r2, r6
 8008088:	f04f 0300 	mov.w	r3, #0
 800808c:	f04f 0400 	mov.w	r4, #0
 8008090:	0194      	lsls	r4, r2, #6
 8008092:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008096:	018b      	lsls	r3, r1, #6
 8008098:	1a5b      	subs	r3, r3, r1
 800809a:	eb64 0402 	sbc.w	r4, r4, r2
 800809e:	f04f 0100 	mov.w	r1, #0
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	00e2      	lsls	r2, r4, #3
 80080a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80080ac:	00d9      	lsls	r1, r3, #3
 80080ae:	460b      	mov	r3, r1
 80080b0:	4614      	mov	r4, r2
 80080b2:	195b      	adds	r3, r3, r5
 80080b4:	eb44 0406 	adc.w	r4, r4, r6
 80080b8:	f04f 0100 	mov.w	r1, #0
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	02a2      	lsls	r2, r4, #10
 80080c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80080c6:	0299      	lsls	r1, r3, #10
 80080c8:	460b      	mov	r3, r1
 80080ca:	4614      	mov	r4, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	4621      	mov	r1, r4
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f04f 0400 	mov.w	r4, #0
 80080d6:	461a      	mov	r2, r3
 80080d8:	4623      	mov	r3, r4
 80080da:	f7f8 fdd5 	bl	8000c88 <__aeabi_uldivmod>
 80080de:	4603      	mov	r3, r0
 80080e0:	460c      	mov	r4, r1
 80080e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080e4:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	0c1b      	lsrs	r3, r3, #16
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	3301      	adds	r3, #1
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fc:	60bb      	str	r3, [r7, #8]
      break;
 80080fe:	e002      	b.n	8008106 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008100:	4b04      	ldr	r3, [pc, #16]	; (8008114 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008102:	60bb      	str	r3, [r7, #8]
      break;
 8008104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008106:	68bb      	ldr	r3, [r7, #8]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008110:	40023800 	.word	0x40023800
 8008114:	00f42400 	.word	0x00f42400
 8008118:	007a1200 	.word	0x007a1200

0800811c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008120:	4b03      	ldr	r3, [pc, #12]	; (8008130 <HAL_RCC_GetHCLKFreq+0x14>)
 8008122:	681b      	ldr	r3, [r3, #0]
}
 8008124:	4618      	mov	r0, r3
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	200000a0 	.word	0x200000a0

08008134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008138:	f7ff fff0 	bl	800811c <HAL_RCC_GetHCLKFreq>
 800813c:	4601      	mov	r1, r0
 800813e:	4b05      	ldr	r3, [pc, #20]	; (8008154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	0a9b      	lsrs	r3, r3, #10
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	4a03      	ldr	r2, [pc, #12]	; (8008158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800814a:	5cd3      	ldrb	r3, [r2, r3]
 800814c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008150:	4618      	mov	r0, r3
 8008152:	bd80      	pop	{r7, pc}
 8008154:	40023800 	.word	0x40023800
 8008158:	08020f08 	.word	0x08020f08

0800815c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008160:	f7ff ffdc 	bl	800811c <HAL_RCC_GetHCLKFreq>
 8008164:	4601      	mov	r1, r0
 8008166:	4b05      	ldr	r3, [pc, #20]	; (800817c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	0b5b      	lsrs	r3, r3, #13
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	4a03      	ldr	r2, [pc, #12]	; (8008180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008172:	5cd3      	ldrb	r3, [r2, r3]
 8008174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008178:	4618      	mov	r0, r3
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40023800 	.word	0x40023800
 8008180:	08020f08 	.word	0x08020f08

08008184 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	220f      	movs	r2, #15
 8008192:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008194:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <HAL_RCC_GetClockConfig+0x5c>)
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f003 0203 	and.w	r2, r3, #3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80081a0:	4b0f      	ldr	r3, [pc, #60]	; (80081e0 <HAL_RCC_GetClockConfig+0x5c>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <HAL_RCC_GetClockConfig+0x5c>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80081b8:	4b09      	ldr	r3, [pc, #36]	; (80081e0 <HAL_RCC_GetClockConfig+0x5c>)
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	08db      	lsrs	r3, r3, #3
 80081be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80081c6:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <HAL_RCC_GetClockConfig+0x60>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 020f 	and.w	r2, r3, #15
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	601a      	str	r2, [r3, #0]
}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	40023800 	.word	0x40023800
 80081e4:	40023c00 	.word	0x40023c00

080081e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e01d      	b.n	8008236 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7fb fe7c 	bl	8003f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f000 fab0 	bl	800878c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800823e:	b480      	push	{r7}
 8008240:	b085      	sub	sp, #20
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2202      	movs	r2, #2
 800824a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f003 0307 	and.w	r3, r3, #7
 8008258:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2b06      	cmp	r3, #6
 800825e:	d007      	beq.n	8008270 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f042 0201 	orr.w	r2, r2, #1
 800826e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f042 0201 	orr.w	r2, r2, #1
 800829c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2b06      	cmp	r3, #6
 80082ae:	d007      	beq.n	80082c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0201 	orr.w	r2, r2, #1
 80082be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e01d      	b.n	800831c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d106      	bne.n	80082fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7fb fde7 	bl	8003ec8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2202      	movs	r2, #2
 80082fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3304      	adds	r3, #4
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f000 fa3d 	bl	800878c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2201      	movs	r2, #1
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fc78 	bl	8008c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a15      	ldr	r2, [pc, #84]	; (8008398 <HAL_TIM_PWM_Start+0x74>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d004      	beq.n	8008350 <HAL_TIM_PWM_Start+0x2c>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a14      	ldr	r2, [pc, #80]	; (800839c <HAL_TIM_PWM_Start+0x78>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d101      	bne.n	8008354 <HAL_TIM_PWM_Start+0x30>
 8008350:	2301      	movs	r3, #1
 8008352:	e000      	b.n	8008356 <HAL_TIM_PWM_Start+0x32>
 8008354:	2300      	movs	r3, #0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d007      	beq.n	800836a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b06      	cmp	r3, #6
 800837a:	d007      	beq.n	800838c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	40010000 	.word	0x40010000
 800839c:	40010400 	.word	0x40010400

080083a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0302 	and.w	r3, r3, #2
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d122      	bne.n	80083fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d11b      	bne.n	80083fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0202 	mvn.w	r2, #2
 80083cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f9b4 	bl	8008750 <HAL_TIM_IC_CaptureCallback>
 80083e8:	e005      	b.n	80083f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f9a6 	bl	800873c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f9b7 	bl	8008764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b04      	cmp	r3, #4
 8008408:	d122      	bne.n	8008450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b04      	cmp	r3, #4
 8008416:	d11b      	bne.n	8008450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f06f 0204 	mvn.w	r2, #4
 8008420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2202      	movs	r2, #2
 8008426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f98a 	bl	8008750 <HAL_TIM_IC_CaptureCallback>
 800843c:	e005      	b.n	800844a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f97c 	bl	800873c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f98d 	bl	8008764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	f003 0308 	and.w	r3, r3, #8
 800845a:	2b08      	cmp	r3, #8
 800845c:	d122      	bne.n	80084a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f003 0308 	and.w	r3, r3, #8
 8008468:	2b08      	cmp	r3, #8
 800846a:	d11b      	bne.n	80084a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f06f 0208 	mvn.w	r2, #8
 8008474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2204      	movs	r2, #4
 800847a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f960 	bl	8008750 <HAL_TIM_IC_CaptureCallback>
 8008490:	e005      	b.n	800849e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f952 	bl	800873c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f963 	bl	8008764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f003 0310 	and.w	r3, r3, #16
 80084ae:	2b10      	cmp	r3, #16
 80084b0:	d122      	bne.n	80084f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	2b10      	cmp	r3, #16
 80084be:	d11b      	bne.n	80084f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f06f 0210 	mvn.w	r2, #16
 80084c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2208      	movs	r2, #8
 80084ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f936 	bl	8008750 <HAL_TIM_IC_CaptureCallback>
 80084e4:	e005      	b.n	80084f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f928 	bl	800873c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f939 	bl	8008764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b01      	cmp	r3, #1
 8008504:	d10e      	bne.n	8008524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b01      	cmp	r3, #1
 8008512:	d107      	bne.n	8008524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f06f 0201 	mvn.w	r2, #1
 800851c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7fa fc82 	bl	8002e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	2b80      	cmp	r3, #128	; 0x80
 8008530:	d10e      	bne.n	8008550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853c:	2b80      	cmp	r3, #128	; 0x80
 800853e:	d107      	bne.n	8008550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fc1a 	bl	8008d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d10e      	bne.n	800857c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d107      	bne.n	800857c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f8fe 	bl	8008778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f003 0320 	and.w	r3, r3, #32
 8008586:	2b20      	cmp	r3, #32
 8008588:	d10e      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f003 0320 	and.w	r3, r3, #32
 8008594:	2b20      	cmp	r3, #32
 8008596:	d107      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f06f 0220 	mvn.w	r2, #32
 80085a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fbe4 	bl	8008d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d101      	bne.n	80085ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80085c6:	2302      	movs	r3, #2
 80085c8:	e0b4      	b.n	8008734 <HAL_TIM_PWM_ConfigChannel+0x184>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2202      	movs	r2, #2
 80085d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b0c      	cmp	r3, #12
 80085de:	f200 809f 	bhi.w	8008720 <HAL_TIM_PWM_ConfigChannel+0x170>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	0800861d 	.word	0x0800861d
 80085ec:	08008721 	.word	0x08008721
 80085f0:	08008721 	.word	0x08008721
 80085f4:	08008721 	.word	0x08008721
 80085f8:	0800865d 	.word	0x0800865d
 80085fc:	08008721 	.word	0x08008721
 8008600:	08008721 	.word	0x08008721
 8008604:	08008721 	.word	0x08008721
 8008608:	0800869f 	.word	0x0800869f
 800860c:	08008721 	.word	0x08008721
 8008610:	08008721 	.word	0x08008721
 8008614:	08008721 	.word	0x08008721
 8008618:	080086df 	.word	0x080086df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68b9      	ldr	r1, [r7, #8]
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f952 	bl	80088cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699a      	ldr	r2, [r3, #24]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f042 0208 	orr.w	r2, r2, #8
 8008636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699a      	ldr	r2, [r3, #24]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0204 	bic.w	r2, r2, #4
 8008646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6999      	ldr	r1, [r3, #24]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	691a      	ldr	r2, [r3, #16]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	619a      	str	r2, [r3, #24]
      break;
 800865a:	e062      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f9a2 	bl	80089ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699a      	ldr	r2, [r3, #24]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6999      	ldr	r1, [r3, #24]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	021a      	lsls	r2, r3, #8
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	619a      	str	r2, [r3, #24]
      break;
 800869c:	e041      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f9f7 	bl	8008a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0208 	orr.w	r2, r2, #8
 80086b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69da      	ldr	r2, [r3, #28]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0204 	bic.w	r2, r2, #4
 80086c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69d9      	ldr	r1, [r3, #28]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	430a      	orrs	r2, r1
 80086da:	61da      	str	r2, [r3, #28]
      break;
 80086dc:	e021      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68b9      	ldr	r1, [r7, #8]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fa4b 	bl	8008b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69da      	ldr	r2, [r3, #28]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69da      	ldr	r2, [r3, #28]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69d9      	ldr	r1, [r3, #28]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	021a      	lsls	r2, r3, #8
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	61da      	str	r2, [r3, #28]
      break;
 800871e:	e000      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008720:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a40      	ldr	r2, [pc, #256]	; (80088a0 <TIM_Base_SetConfig+0x114>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d013      	beq.n	80087cc <TIM_Base_SetConfig+0x40>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087aa:	d00f      	beq.n	80087cc <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a3d      	ldr	r2, [pc, #244]	; (80088a4 <TIM_Base_SetConfig+0x118>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00b      	beq.n	80087cc <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a3c      	ldr	r2, [pc, #240]	; (80088a8 <TIM_Base_SetConfig+0x11c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d007      	beq.n	80087cc <TIM_Base_SetConfig+0x40>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a3b      	ldr	r2, [pc, #236]	; (80088ac <TIM_Base_SetConfig+0x120>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d003      	beq.n	80087cc <TIM_Base_SetConfig+0x40>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a3a      	ldr	r2, [pc, #232]	; (80088b0 <TIM_Base_SetConfig+0x124>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d108      	bne.n	80087de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a2f      	ldr	r2, [pc, #188]	; (80088a0 <TIM_Base_SetConfig+0x114>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d02b      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ec:	d027      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2c      	ldr	r2, [pc, #176]	; (80088a4 <TIM_Base_SetConfig+0x118>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d023      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a2b      	ldr	r2, [pc, #172]	; (80088a8 <TIM_Base_SetConfig+0x11c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d01f      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a2a      	ldr	r2, [pc, #168]	; (80088ac <TIM_Base_SetConfig+0x120>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d01b      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a29      	ldr	r2, [pc, #164]	; (80088b0 <TIM_Base_SetConfig+0x124>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d017      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a28      	ldr	r2, [pc, #160]	; (80088b4 <TIM_Base_SetConfig+0x128>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d013      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a27      	ldr	r2, [pc, #156]	; (80088b8 <TIM_Base_SetConfig+0x12c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00f      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a26      	ldr	r2, [pc, #152]	; (80088bc <TIM_Base_SetConfig+0x130>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00b      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a25      	ldr	r2, [pc, #148]	; (80088c0 <TIM_Base_SetConfig+0x134>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d007      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a24      	ldr	r2, [pc, #144]	; (80088c4 <TIM_Base_SetConfig+0x138>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d003      	beq.n	800883e <TIM_Base_SetConfig+0xb2>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a23      	ldr	r2, [pc, #140]	; (80088c8 <TIM_Base_SetConfig+0x13c>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d108      	bne.n	8008850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4313      	orrs	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	4313      	orrs	r3, r2
 800885c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a0a      	ldr	r2, [pc, #40]	; (80088a0 <TIM_Base_SetConfig+0x114>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d003      	beq.n	8008884 <TIM_Base_SetConfig+0xf8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a0c      	ldr	r2, [pc, #48]	; (80088b0 <TIM_Base_SetConfig+0x124>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d103      	bne.n	800888c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	615a      	str	r2, [r3, #20]
}
 8008892:	bf00      	nop
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40010000 	.word	0x40010000
 80088a4:	40000400 	.word	0x40000400
 80088a8:	40000800 	.word	0x40000800
 80088ac:	40000c00 	.word	0x40000c00
 80088b0:	40010400 	.word	0x40010400
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40014400 	.word	0x40014400
 80088bc:	40014800 	.word	0x40014800
 80088c0:	40001800 	.word	0x40001800
 80088c4:	40001c00 	.word	0x40001c00
 80088c8:	40002000 	.word	0x40002000

080088cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	f023 0201 	bic.w	r2, r3, #1
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f023 0302 	bic.w	r3, r3, #2
 8008914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	4313      	orrs	r3, r2
 800891e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a20      	ldr	r2, [pc, #128]	; (80089a4 <TIM_OC1_SetConfig+0xd8>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d003      	beq.n	8008930 <TIM_OC1_SetConfig+0x64>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a1f      	ldr	r2, [pc, #124]	; (80089a8 <TIM_OC1_SetConfig+0xdc>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d10c      	bne.n	800894a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f023 0308 	bic.w	r3, r3, #8
 8008936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f023 0304 	bic.w	r3, r3, #4
 8008948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a15      	ldr	r2, [pc, #84]	; (80089a4 <TIM_OC1_SetConfig+0xd8>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d003      	beq.n	800895a <TIM_OC1_SetConfig+0x8e>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a14      	ldr	r2, [pc, #80]	; (80089a8 <TIM_OC1_SetConfig+0xdc>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d111      	bne.n	800897e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	4313      	orrs	r3, r2
 8008972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	621a      	str	r2, [r3, #32]
}
 8008998:	bf00      	nop
 800899a:	371c      	adds	r7, #28
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	40010000 	.word	0x40010000
 80089a8:	40010400 	.word	0x40010400

080089ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	f023 0210 	bic.w	r2, r3, #16
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f023 0320 	bic.w	r3, r3, #32
 80089f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a22      	ldr	r2, [pc, #136]	; (8008a90 <TIM_OC2_SetConfig+0xe4>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d003      	beq.n	8008a14 <TIM_OC2_SetConfig+0x68>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a21      	ldr	r2, [pc, #132]	; (8008a94 <TIM_OC2_SetConfig+0xe8>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d10d      	bne.n	8008a30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a17      	ldr	r2, [pc, #92]	; (8008a90 <TIM_OC2_SetConfig+0xe4>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d003      	beq.n	8008a40 <TIM_OC2_SetConfig+0x94>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a16      	ldr	r2, [pc, #88]	; (8008a94 <TIM_OC2_SetConfig+0xe8>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d113      	bne.n	8008a68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	621a      	str	r2, [r3, #32]
}
 8008a82:	bf00      	nop
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	40010000 	.word	0x40010000
 8008a94:	40010400 	.word	0x40010400

08008a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0303 	bic.w	r3, r3, #3
 8008ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	021b      	lsls	r3, r3, #8
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a21      	ldr	r2, [pc, #132]	; (8008b78 <TIM_OC3_SetConfig+0xe0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d003      	beq.n	8008afe <TIM_OC3_SetConfig+0x66>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a20      	ldr	r2, [pc, #128]	; (8008b7c <TIM_OC3_SetConfig+0xe4>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d10d      	bne.n	8008b1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	021b      	lsls	r3, r3, #8
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a16      	ldr	r2, [pc, #88]	; (8008b78 <TIM_OC3_SetConfig+0xe0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d003      	beq.n	8008b2a <TIM_OC3_SetConfig+0x92>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a15      	ldr	r2, [pc, #84]	; (8008b7c <TIM_OC3_SetConfig+0xe4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d113      	bne.n	8008b52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	621a      	str	r2, [r3, #32]
}
 8008b6c:	bf00      	nop
 8008b6e:	371c      	adds	r7, #28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	40010000 	.word	0x40010000
 8008b7c:	40010400 	.word	0x40010400

08008b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	031b      	lsls	r3, r3, #12
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a12      	ldr	r2, [pc, #72]	; (8008c24 <TIM_OC4_SetConfig+0xa4>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d003      	beq.n	8008be8 <TIM_OC4_SetConfig+0x68>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a11      	ldr	r2, [pc, #68]	; (8008c28 <TIM_OC4_SetConfig+0xa8>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d109      	bne.n	8008bfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	019b      	lsls	r3, r3, #6
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	621a      	str	r2, [r3, #32]
}
 8008c16:	bf00      	nop
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	40010000 	.word	0x40010000
 8008c28:	40010400 	.word	0x40010400

08008c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f003 031f 	and.w	r3, r3, #31
 8008c3e:	2201      	movs	r2, #1
 8008c40:	fa02 f303 	lsl.w	r3, r2, r3
 8008c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a1a      	ldr	r2, [r3, #32]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	43db      	mvns	r3, r3
 8008c4e:	401a      	ands	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a1a      	ldr	r2, [r3, #32]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f003 031f 	and.w	r3, r3, #31
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	431a      	orrs	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	621a      	str	r2, [r3, #32]
}
 8008c6a:	bf00      	nop
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
	...

08008c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d101      	bne.n	8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	e05a      	b.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a21      	ldr	r2, [pc, #132]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d022      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cdc:	d01d      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a1d      	ldr	r2, [pc, #116]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d018      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a1b      	ldr	r2, [pc, #108]	; (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d013      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a1a      	ldr	r2, [pc, #104]	; (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00e      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d009      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a17      	ldr	r2, [pc, #92]	; (8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d004      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a15      	ldr	r2, [pc, #84]	; (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d10c      	bne.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	40010000 	.word	0x40010000
 8008d58:	40000400 	.word	0x40000400
 8008d5c:	40000800 	.word	0x40000800
 8008d60:	40000c00 	.word	0x40000c00
 8008d64:	40010400 	.word	0x40010400
 8008d68:	40014000 	.word	0x40014000
 8008d6c:	40001800 	.word	0x40001800

08008d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e03f      	b.n	8008e2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7fb f920 	bl	8004004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2224      	movs	r2, #36	; 0x24
 8008dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f9b1 	bl	8009144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	691a      	ldr	r2, [r3, #16]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	695a      	ldr	r2, [r3, #20]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b088      	sub	sp, #32
 8008e36:	af02      	add	r7, sp, #8
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	603b      	str	r3, [r7, #0]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	f040 8083 	bne.w	8008f5a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <HAL_UART_Transmit+0x2e>
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e07b      	b.n	8008f5c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_UART_Transmit+0x40>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e074      	b.n	8008f5c <HAL_UART_Transmit+0x12a>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2221      	movs	r2, #33	; 0x21
 8008e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008e88:	f7fb fad6 	bl	8004438 <HAL_GetTick>
 8008e8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	88fa      	ldrh	r2, [r7, #6]
 8008e98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008ea2:	e042      	b.n	8008f2a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eba:	d122      	bne.n	8008f02 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	2180      	movs	r1, #128	; 0x80
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f000 f8f2 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e042      	b.n	8008f5c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ee8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d103      	bne.n	8008efa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	3302      	adds	r3, #2
 8008ef6:	60bb      	str	r3, [r7, #8]
 8008ef8:	e017      	b.n	8008f2a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60bb      	str	r3, [r7, #8]
 8008f00:	e013      	b.n	8008f2a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2180      	movs	r1, #128	; 0x80
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 f8cf 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e01f      	b.n	8008f5c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	60ba      	str	r2, [r7, #8]
 8008f22:	781a      	ldrb	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1b7      	bne.n	8008ea4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2140      	movs	r1, #64	; 0x40
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f8b6 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e006      	b.n	8008f5c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	e000      	b.n	8008f5c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008f5a:	2302      	movs	r3, #2
  }
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af02      	add	r7, sp, #8
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	4613      	mov	r3, r2
 8008f72:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b20      	cmp	r3, #32
 8008f82:	f040 8090 	bne.w	80090a6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <HAL_UART_Receive+0x2e>
 8008f8c:	88fb      	ldrh	r3, [r7, #6]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e088      	b.n	80090a8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_UART_Receive+0x40>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e081      	b.n	80090a8 <HAL_UART_Receive+0x144>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2222      	movs	r2, #34	; 0x22
 8008fb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008fba:	f7fb fa3d 	bl	8004438 <HAL_GetTick>
 8008fbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	88fa      	ldrh	r2, [r7, #6]
 8008fc4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	88fa      	ldrh	r2, [r7, #6]
 8008fca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008fd4:	e05c      	b.n	8009090 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fec:	d12b      	bne.n	8009046 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2120      	movs	r1, #32
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 f859 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e04f      	b.n	80090a8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10c      	bne.n	800902e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	b29b      	uxth	r3, r3
 800901c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009020:	b29a      	uxth	r2, r3
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	3302      	adds	r3, #2
 800902a:	60bb      	str	r3, [r7, #8]
 800902c:	e030      	b.n	8009090 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	b29b      	uxth	r3, r3
 8009036:	b2db      	uxtb	r3, r3
 8009038:	b29a      	uxth	r2, r3
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	3301      	adds	r3, #1
 8009042:	60bb      	str	r3, [r7, #8]
 8009044:	e024      	b.n	8009090 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2200      	movs	r2, #0
 800904e:	2120      	movs	r1, #32
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 f82d 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e023      	b.n	80090a8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d108      	bne.n	800907a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6859      	ldr	r1, [r3, #4]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	60ba      	str	r2, [r7, #8]
 8009074:	b2ca      	uxtb	r2, r1
 8009076:	701a      	strb	r2, [r3, #0]
 8009078:	e00a      	b.n	8009090 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	b2da      	uxtb	r2, r3
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	1c59      	adds	r1, r3, #1
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800908c:	b2d2      	uxtb	r2, r2
 800908e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d19d      	bne.n	8008fd6 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2220      	movs	r2, #32
 800909e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e000      	b.n	80090a8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80090a6:	2302      	movs	r3, #2
  }
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	4613      	mov	r3, r2
 80090be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c0:	e02c      	b.n	800911c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c8:	d028      	beq.n	800911c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d007      	beq.n	80090e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80090d0:	f7fb f9b2 	bl	8004438 <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d21d      	bcs.n	800911c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	695a      	ldr	r2, [r3, #20]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0201 	bic.w	r2, r2, #1
 80090fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2220      	movs	r2, #32
 800910c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e00f      	b.n	800913c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	4013      	ands	r3, r2
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	429a      	cmp	r2, r3
 800912a:	bf0c      	ite	eq
 800912c:	2301      	moveq	r3, #1
 800912e:	2300      	movne	r3, #0
 8009130:	b2db      	uxtb	r3, r3
 8009132:	461a      	mov	r2, r3
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	429a      	cmp	r2, r3
 8009138:	d0c3      	beq.n	80090c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68da      	ldr	r2, [r3, #12]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	430a      	orrs	r2, r1
 8009162:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	431a      	orrs	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	4313      	orrs	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009186:	f023 030c 	bic.w	r3, r3, #12
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6812      	ldr	r2, [r2, #0]
 800918e:	68f9      	ldr	r1, [r7, #12]
 8009190:	430b      	orrs	r3, r1
 8009192:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	699a      	ldr	r2, [r3, #24]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091b2:	f040 818b 	bne.w	80094cc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4ac1      	ldr	r2, [pc, #772]	; (80094c0 <UART_SetConfig+0x37c>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d005      	beq.n	80091cc <UART_SetConfig+0x88>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4abf      	ldr	r2, [pc, #764]	; (80094c4 <UART_SetConfig+0x380>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	f040 80bd 	bne.w	8009346 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091cc:	f7fe ffc6 	bl	800815c <HAL_RCC_GetPCLK2Freq>
 80091d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	461d      	mov	r5, r3
 80091d6:	f04f 0600 	mov.w	r6, #0
 80091da:	46a8      	mov	r8, r5
 80091dc:	46b1      	mov	r9, r6
 80091de:	eb18 0308 	adds.w	r3, r8, r8
 80091e2:	eb49 0409 	adc.w	r4, r9, r9
 80091e6:	4698      	mov	r8, r3
 80091e8:	46a1      	mov	r9, r4
 80091ea:	eb18 0805 	adds.w	r8, r8, r5
 80091ee:	eb49 0906 	adc.w	r9, r9, r6
 80091f2:	f04f 0100 	mov.w	r1, #0
 80091f6:	f04f 0200 	mov.w	r2, #0
 80091fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80091fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009202:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009206:	4688      	mov	r8, r1
 8009208:	4691      	mov	r9, r2
 800920a:	eb18 0005 	adds.w	r0, r8, r5
 800920e:	eb49 0106 	adc.w	r1, r9, r6
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	461d      	mov	r5, r3
 8009218:	f04f 0600 	mov.w	r6, #0
 800921c:	196b      	adds	r3, r5, r5
 800921e:	eb46 0406 	adc.w	r4, r6, r6
 8009222:	461a      	mov	r2, r3
 8009224:	4623      	mov	r3, r4
 8009226:	f7f7 fd2f 	bl	8000c88 <__aeabi_uldivmod>
 800922a:	4603      	mov	r3, r0
 800922c:	460c      	mov	r4, r1
 800922e:	461a      	mov	r2, r3
 8009230:	4ba5      	ldr	r3, [pc, #660]	; (80094c8 <UART_SetConfig+0x384>)
 8009232:	fba3 2302 	umull	r2, r3, r3, r2
 8009236:	095b      	lsrs	r3, r3, #5
 8009238:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	461d      	mov	r5, r3
 8009240:	f04f 0600 	mov.w	r6, #0
 8009244:	46a9      	mov	r9, r5
 8009246:	46b2      	mov	sl, r6
 8009248:	eb19 0309 	adds.w	r3, r9, r9
 800924c:	eb4a 040a 	adc.w	r4, sl, sl
 8009250:	4699      	mov	r9, r3
 8009252:	46a2      	mov	sl, r4
 8009254:	eb19 0905 	adds.w	r9, r9, r5
 8009258:	eb4a 0a06 	adc.w	sl, sl, r6
 800925c:	f04f 0100 	mov.w	r1, #0
 8009260:	f04f 0200 	mov.w	r2, #0
 8009264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009268:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800926c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009270:	4689      	mov	r9, r1
 8009272:	4692      	mov	sl, r2
 8009274:	eb19 0005 	adds.w	r0, r9, r5
 8009278:	eb4a 0106 	adc.w	r1, sl, r6
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	461d      	mov	r5, r3
 8009282:	f04f 0600 	mov.w	r6, #0
 8009286:	196b      	adds	r3, r5, r5
 8009288:	eb46 0406 	adc.w	r4, r6, r6
 800928c:	461a      	mov	r2, r3
 800928e:	4623      	mov	r3, r4
 8009290:	f7f7 fcfa 	bl	8000c88 <__aeabi_uldivmod>
 8009294:	4603      	mov	r3, r0
 8009296:	460c      	mov	r4, r1
 8009298:	461a      	mov	r2, r3
 800929a:	4b8b      	ldr	r3, [pc, #556]	; (80094c8 <UART_SetConfig+0x384>)
 800929c:	fba3 1302 	umull	r1, r3, r3, r2
 80092a0:	095b      	lsrs	r3, r3, #5
 80092a2:	2164      	movs	r1, #100	; 0x64
 80092a4:	fb01 f303 	mul.w	r3, r1, r3
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	3332      	adds	r3, #50	; 0x32
 80092ae:	4a86      	ldr	r2, [pc, #536]	; (80094c8 <UART_SetConfig+0x384>)
 80092b0:	fba2 2303 	umull	r2, r3, r2, r3
 80092b4:	095b      	lsrs	r3, r3, #5
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092bc:	4498      	add	r8, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	461d      	mov	r5, r3
 80092c2:	f04f 0600 	mov.w	r6, #0
 80092c6:	46a9      	mov	r9, r5
 80092c8:	46b2      	mov	sl, r6
 80092ca:	eb19 0309 	adds.w	r3, r9, r9
 80092ce:	eb4a 040a 	adc.w	r4, sl, sl
 80092d2:	4699      	mov	r9, r3
 80092d4:	46a2      	mov	sl, r4
 80092d6:	eb19 0905 	adds.w	r9, r9, r5
 80092da:	eb4a 0a06 	adc.w	sl, sl, r6
 80092de:	f04f 0100 	mov.w	r1, #0
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092f2:	4689      	mov	r9, r1
 80092f4:	4692      	mov	sl, r2
 80092f6:	eb19 0005 	adds.w	r0, r9, r5
 80092fa:	eb4a 0106 	adc.w	r1, sl, r6
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	461d      	mov	r5, r3
 8009304:	f04f 0600 	mov.w	r6, #0
 8009308:	196b      	adds	r3, r5, r5
 800930a:	eb46 0406 	adc.w	r4, r6, r6
 800930e:	461a      	mov	r2, r3
 8009310:	4623      	mov	r3, r4
 8009312:	f7f7 fcb9 	bl	8000c88 <__aeabi_uldivmod>
 8009316:	4603      	mov	r3, r0
 8009318:	460c      	mov	r4, r1
 800931a:	461a      	mov	r2, r3
 800931c:	4b6a      	ldr	r3, [pc, #424]	; (80094c8 <UART_SetConfig+0x384>)
 800931e:	fba3 1302 	umull	r1, r3, r3, r2
 8009322:	095b      	lsrs	r3, r3, #5
 8009324:	2164      	movs	r1, #100	; 0x64
 8009326:	fb01 f303 	mul.w	r3, r1, r3
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	3332      	adds	r3, #50	; 0x32
 8009330:	4a65      	ldr	r2, [pc, #404]	; (80094c8 <UART_SetConfig+0x384>)
 8009332:	fba2 2303 	umull	r2, r3, r2, r3
 8009336:	095b      	lsrs	r3, r3, #5
 8009338:	f003 0207 	and.w	r2, r3, #7
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4442      	add	r2, r8
 8009342:	609a      	str	r2, [r3, #8]
 8009344:	e26f      	b.n	8009826 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009346:	f7fe fef5 	bl	8008134 <HAL_RCC_GetPCLK1Freq>
 800934a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	461d      	mov	r5, r3
 8009350:	f04f 0600 	mov.w	r6, #0
 8009354:	46a8      	mov	r8, r5
 8009356:	46b1      	mov	r9, r6
 8009358:	eb18 0308 	adds.w	r3, r8, r8
 800935c:	eb49 0409 	adc.w	r4, r9, r9
 8009360:	4698      	mov	r8, r3
 8009362:	46a1      	mov	r9, r4
 8009364:	eb18 0805 	adds.w	r8, r8, r5
 8009368:	eb49 0906 	adc.w	r9, r9, r6
 800936c:	f04f 0100 	mov.w	r1, #0
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009378:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800937c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009380:	4688      	mov	r8, r1
 8009382:	4691      	mov	r9, r2
 8009384:	eb18 0005 	adds.w	r0, r8, r5
 8009388:	eb49 0106 	adc.w	r1, r9, r6
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	461d      	mov	r5, r3
 8009392:	f04f 0600 	mov.w	r6, #0
 8009396:	196b      	adds	r3, r5, r5
 8009398:	eb46 0406 	adc.w	r4, r6, r6
 800939c:	461a      	mov	r2, r3
 800939e:	4623      	mov	r3, r4
 80093a0:	f7f7 fc72 	bl	8000c88 <__aeabi_uldivmod>
 80093a4:	4603      	mov	r3, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	461a      	mov	r2, r3
 80093aa:	4b47      	ldr	r3, [pc, #284]	; (80094c8 <UART_SetConfig+0x384>)
 80093ac:	fba3 2302 	umull	r2, r3, r3, r2
 80093b0:	095b      	lsrs	r3, r3, #5
 80093b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	461d      	mov	r5, r3
 80093ba:	f04f 0600 	mov.w	r6, #0
 80093be:	46a9      	mov	r9, r5
 80093c0:	46b2      	mov	sl, r6
 80093c2:	eb19 0309 	adds.w	r3, r9, r9
 80093c6:	eb4a 040a 	adc.w	r4, sl, sl
 80093ca:	4699      	mov	r9, r3
 80093cc:	46a2      	mov	sl, r4
 80093ce:	eb19 0905 	adds.w	r9, r9, r5
 80093d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80093d6:	f04f 0100 	mov.w	r1, #0
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093ea:	4689      	mov	r9, r1
 80093ec:	4692      	mov	sl, r2
 80093ee:	eb19 0005 	adds.w	r0, r9, r5
 80093f2:	eb4a 0106 	adc.w	r1, sl, r6
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	461d      	mov	r5, r3
 80093fc:	f04f 0600 	mov.w	r6, #0
 8009400:	196b      	adds	r3, r5, r5
 8009402:	eb46 0406 	adc.w	r4, r6, r6
 8009406:	461a      	mov	r2, r3
 8009408:	4623      	mov	r3, r4
 800940a:	f7f7 fc3d 	bl	8000c88 <__aeabi_uldivmod>
 800940e:	4603      	mov	r3, r0
 8009410:	460c      	mov	r4, r1
 8009412:	461a      	mov	r2, r3
 8009414:	4b2c      	ldr	r3, [pc, #176]	; (80094c8 <UART_SetConfig+0x384>)
 8009416:	fba3 1302 	umull	r1, r3, r3, r2
 800941a:	095b      	lsrs	r3, r3, #5
 800941c:	2164      	movs	r1, #100	; 0x64
 800941e:	fb01 f303 	mul.w	r3, r1, r3
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	3332      	adds	r3, #50	; 0x32
 8009428:	4a27      	ldr	r2, [pc, #156]	; (80094c8 <UART_SetConfig+0x384>)
 800942a:	fba2 2303 	umull	r2, r3, r2, r3
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009436:	4498      	add	r8, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	461d      	mov	r5, r3
 800943c:	f04f 0600 	mov.w	r6, #0
 8009440:	46a9      	mov	r9, r5
 8009442:	46b2      	mov	sl, r6
 8009444:	eb19 0309 	adds.w	r3, r9, r9
 8009448:	eb4a 040a 	adc.w	r4, sl, sl
 800944c:	4699      	mov	r9, r3
 800944e:	46a2      	mov	sl, r4
 8009450:	eb19 0905 	adds.w	r9, r9, r5
 8009454:	eb4a 0a06 	adc.w	sl, sl, r6
 8009458:	f04f 0100 	mov.w	r1, #0
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009464:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009468:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800946c:	4689      	mov	r9, r1
 800946e:	4692      	mov	sl, r2
 8009470:	eb19 0005 	adds.w	r0, r9, r5
 8009474:	eb4a 0106 	adc.w	r1, sl, r6
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	461d      	mov	r5, r3
 800947e:	f04f 0600 	mov.w	r6, #0
 8009482:	196b      	adds	r3, r5, r5
 8009484:	eb46 0406 	adc.w	r4, r6, r6
 8009488:	461a      	mov	r2, r3
 800948a:	4623      	mov	r3, r4
 800948c:	f7f7 fbfc 	bl	8000c88 <__aeabi_uldivmod>
 8009490:	4603      	mov	r3, r0
 8009492:	460c      	mov	r4, r1
 8009494:	461a      	mov	r2, r3
 8009496:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <UART_SetConfig+0x384>)
 8009498:	fba3 1302 	umull	r1, r3, r3, r2
 800949c:	095b      	lsrs	r3, r3, #5
 800949e:	2164      	movs	r1, #100	; 0x64
 80094a0:	fb01 f303 	mul.w	r3, r1, r3
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	3332      	adds	r3, #50	; 0x32
 80094aa:	4a07      	ldr	r2, [pc, #28]	; (80094c8 <UART_SetConfig+0x384>)
 80094ac:	fba2 2303 	umull	r2, r3, r2, r3
 80094b0:	095b      	lsrs	r3, r3, #5
 80094b2:	f003 0207 	and.w	r2, r3, #7
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4442      	add	r2, r8
 80094bc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80094be:	e1b2      	b.n	8009826 <UART_SetConfig+0x6e2>
 80094c0:	40011000 	.word	0x40011000
 80094c4:	40011400 	.word	0x40011400
 80094c8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4ad7      	ldr	r2, [pc, #860]	; (8009830 <UART_SetConfig+0x6ec>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d005      	beq.n	80094e2 <UART_SetConfig+0x39e>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4ad6      	ldr	r2, [pc, #856]	; (8009834 <UART_SetConfig+0x6f0>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	f040 80d1 	bne.w	8009684 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80094e2:	f7fe fe3b 	bl	800815c <HAL_RCC_GetPCLK2Freq>
 80094e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	469a      	mov	sl, r3
 80094ec:	f04f 0b00 	mov.w	fp, #0
 80094f0:	46d0      	mov	r8, sl
 80094f2:	46d9      	mov	r9, fp
 80094f4:	eb18 0308 	adds.w	r3, r8, r8
 80094f8:	eb49 0409 	adc.w	r4, r9, r9
 80094fc:	4698      	mov	r8, r3
 80094fe:	46a1      	mov	r9, r4
 8009500:	eb18 080a 	adds.w	r8, r8, sl
 8009504:	eb49 090b 	adc.w	r9, r9, fp
 8009508:	f04f 0100 	mov.w	r1, #0
 800950c:	f04f 0200 	mov.w	r2, #0
 8009510:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009514:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009518:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800951c:	4688      	mov	r8, r1
 800951e:	4691      	mov	r9, r2
 8009520:	eb1a 0508 	adds.w	r5, sl, r8
 8009524:	eb4b 0609 	adc.w	r6, fp, r9
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	4619      	mov	r1, r3
 800952e:	f04f 0200 	mov.w	r2, #0
 8009532:	f04f 0300 	mov.w	r3, #0
 8009536:	f04f 0400 	mov.w	r4, #0
 800953a:	0094      	lsls	r4, r2, #2
 800953c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009540:	008b      	lsls	r3, r1, #2
 8009542:	461a      	mov	r2, r3
 8009544:	4623      	mov	r3, r4
 8009546:	4628      	mov	r0, r5
 8009548:	4631      	mov	r1, r6
 800954a:	f7f7 fb9d 	bl	8000c88 <__aeabi_uldivmod>
 800954e:	4603      	mov	r3, r0
 8009550:	460c      	mov	r4, r1
 8009552:	461a      	mov	r2, r3
 8009554:	4bb8      	ldr	r3, [pc, #736]	; (8009838 <UART_SetConfig+0x6f4>)
 8009556:	fba3 2302 	umull	r2, r3, r3, r2
 800955a:	095b      	lsrs	r3, r3, #5
 800955c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	469b      	mov	fp, r3
 8009564:	f04f 0c00 	mov.w	ip, #0
 8009568:	46d9      	mov	r9, fp
 800956a:	46e2      	mov	sl, ip
 800956c:	eb19 0309 	adds.w	r3, r9, r9
 8009570:	eb4a 040a 	adc.w	r4, sl, sl
 8009574:	4699      	mov	r9, r3
 8009576:	46a2      	mov	sl, r4
 8009578:	eb19 090b 	adds.w	r9, r9, fp
 800957c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009580:	f04f 0100 	mov.w	r1, #0
 8009584:	f04f 0200 	mov.w	r2, #0
 8009588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800958c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009590:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009594:	4689      	mov	r9, r1
 8009596:	4692      	mov	sl, r2
 8009598:	eb1b 0509 	adds.w	r5, fp, r9
 800959c:	eb4c 060a 	adc.w	r6, ip, sl
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	4619      	mov	r1, r3
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	f04f 0300 	mov.w	r3, #0
 80095ae:	f04f 0400 	mov.w	r4, #0
 80095b2:	0094      	lsls	r4, r2, #2
 80095b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095b8:	008b      	lsls	r3, r1, #2
 80095ba:	461a      	mov	r2, r3
 80095bc:	4623      	mov	r3, r4
 80095be:	4628      	mov	r0, r5
 80095c0:	4631      	mov	r1, r6
 80095c2:	f7f7 fb61 	bl	8000c88 <__aeabi_uldivmod>
 80095c6:	4603      	mov	r3, r0
 80095c8:	460c      	mov	r4, r1
 80095ca:	461a      	mov	r2, r3
 80095cc:	4b9a      	ldr	r3, [pc, #616]	; (8009838 <UART_SetConfig+0x6f4>)
 80095ce:	fba3 1302 	umull	r1, r3, r3, r2
 80095d2:	095b      	lsrs	r3, r3, #5
 80095d4:	2164      	movs	r1, #100	; 0x64
 80095d6:	fb01 f303 	mul.w	r3, r1, r3
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	011b      	lsls	r3, r3, #4
 80095de:	3332      	adds	r3, #50	; 0x32
 80095e0:	4a95      	ldr	r2, [pc, #596]	; (8009838 <UART_SetConfig+0x6f4>)
 80095e2:	fba2 2303 	umull	r2, r3, r2, r3
 80095e6:	095b      	lsrs	r3, r3, #5
 80095e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095ec:	4498      	add	r8, r3
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	469b      	mov	fp, r3
 80095f2:	f04f 0c00 	mov.w	ip, #0
 80095f6:	46d9      	mov	r9, fp
 80095f8:	46e2      	mov	sl, ip
 80095fa:	eb19 0309 	adds.w	r3, r9, r9
 80095fe:	eb4a 040a 	adc.w	r4, sl, sl
 8009602:	4699      	mov	r9, r3
 8009604:	46a2      	mov	sl, r4
 8009606:	eb19 090b 	adds.w	r9, r9, fp
 800960a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800960e:	f04f 0100 	mov.w	r1, #0
 8009612:	f04f 0200 	mov.w	r2, #0
 8009616:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800961a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800961e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009622:	4689      	mov	r9, r1
 8009624:	4692      	mov	sl, r2
 8009626:	eb1b 0509 	adds.w	r5, fp, r9
 800962a:	eb4c 060a 	adc.w	r6, ip, sl
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	4619      	mov	r1, r3
 8009634:	f04f 0200 	mov.w	r2, #0
 8009638:	f04f 0300 	mov.w	r3, #0
 800963c:	f04f 0400 	mov.w	r4, #0
 8009640:	0094      	lsls	r4, r2, #2
 8009642:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009646:	008b      	lsls	r3, r1, #2
 8009648:	461a      	mov	r2, r3
 800964a:	4623      	mov	r3, r4
 800964c:	4628      	mov	r0, r5
 800964e:	4631      	mov	r1, r6
 8009650:	f7f7 fb1a 	bl	8000c88 <__aeabi_uldivmod>
 8009654:	4603      	mov	r3, r0
 8009656:	460c      	mov	r4, r1
 8009658:	461a      	mov	r2, r3
 800965a:	4b77      	ldr	r3, [pc, #476]	; (8009838 <UART_SetConfig+0x6f4>)
 800965c:	fba3 1302 	umull	r1, r3, r3, r2
 8009660:	095b      	lsrs	r3, r3, #5
 8009662:	2164      	movs	r1, #100	; 0x64
 8009664:	fb01 f303 	mul.w	r3, r1, r3
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	011b      	lsls	r3, r3, #4
 800966c:	3332      	adds	r3, #50	; 0x32
 800966e:	4a72      	ldr	r2, [pc, #456]	; (8009838 <UART_SetConfig+0x6f4>)
 8009670:	fba2 2303 	umull	r2, r3, r2, r3
 8009674:	095b      	lsrs	r3, r3, #5
 8009676:	f003 020f 	and.w	r2, r3, #15
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4442      	add	r2, r8
 8009680:	609a      	str	r2, [r3, #8]
 8009682:	e0d0      	b.n	8009826 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009684:	f7fe fd56 	bl	8008134 <HAL_RCC_GetPCLK1Freq>
 8009688:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	469a      	mov	sl, r3
 800968e:	f04f 0b00 	mov.w	fp, #0
 8009692:	46d0      	mov	r8, sl
 8009694:	46d9      	mov	r9, fp
 8009696:	eb18 0308 	adds.w	r3, r8, r8
 800969a:	eb49 0409 	adc.w	r4, r9, r9
 800969e:	4698      	mov	r8, r3
 80096a0:	46a1      	mov	r9, r4
 80096a2:	eb18 080a 	adds.w	r8, r8, sl
 80096a6:	eb49 090b 	adc.w	r9, r9, fp
 80096aa:	f04f 0100 	mov.w	r1, #0
 80096ae:	f04f 0200 	mov.w	r2, #0
 80096b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80096b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80096ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80096be:	4688      	mov	r8, r1
 80096c0:	4691      	mov	r9, r2
 80096c2:	eb1a 0508 	adds.w	r5, sl, r8
 80096c6:	eb4b 0609 	adc.w	r6, fp, r9
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	4619      	mov	r1, r3
 80096d0:	f04f 0200 	mov.w	r2, #0
 80096d4:	f04f 0300 	mov.w	r3, #0
 80096d8:	f04f 0400 	mov.w	r4, #0
 80096dc:	0094      	lsls	r4, r2, #2
 80096de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80096e2:	008b      	lsls	r3, r1, #2
 80096e4:	461a      	mov	r2, r3
 80096e6:	4623      	mov	r3, r4
 80096e8:	4628      	mov	r0, r5
 80096ea:	4631      	mov	r1, r6
 80096ec:	f7f7 facc 	bl	8000c88 <__aeabi_uldivmod>
 80096f0:	4603      	mov	r3, r0
 80096f2:	460c      	mov	r4, r1
 80096f4:	461a      	mov	r2, r3
 80096f6:	4b50      	ldr	r3, [pc, #320]	; (8009838 <UART_SetConfig+0x6f4>)
 80096f8:	fba3 2302 	umull	r2, r3, r3, r2
 80096fc:	095b      	lsrs	r3, r3, #5
 80096fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	469b      	mov	fp, r3
 8009706:	f04f 0c00 	mov.w	ip, #0
 800970a:	46d9      	mov	r9, fp
 800970c:	46e2      	mov	sl, ip
 800970e:	eb19 0309 	adds.w	r3, r9, r9
 8009712:	eb4a 040a 	adc.w	r4, sl, sl
 8009716:	4699      	mov	r9, r3
 8009718:	46a2      	mov	sl, r4
 800971a:	eb19 090b 	adds.w	r9, r9, fp
 800971e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009722:	f04f 0100 	mov.w	r1, #0
 8009726:	f04f 0200 	mov.w	r2, #0
 800972a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800972e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009732:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009736:	4689      	mov	r9, r1
 8009738:	4692      	mov	sl, r2
 800973a:	eb1b 0509 	adds.w	r5, fp, r9
 800973e:	eb4c 060a 	adc.w	r6, ip, sl
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	4619      	mov	r1, r3
 8009748:	f04f 0200 	mov.w	r2, #0
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	f04f 0400 	mov.w	r4, #0
 8009754:	0094      	lsls	r4, r2, #2
 8009756:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800975a:	008b      	lsls	r3, r1, #2
 800975c:	461a      	mov	r2, r3
 800975e:	4623      	mov	r3, r4
 8009760:	4628      	mov	r0, r5
 8009762:	4631      	mov	r1, r6
 8009764:	f7f7 fa90 	bl	8000c88 <__aeabi_uldivmod>
 8009768:	4603      	mov	r3, r0
 800976a:	460c      	mov	r4, r1
 800976c:	461a      	mov	r2, r3
 800976e:	4b32      	ldr	r3, [pc, #200]	; (8009838 <UART_SetConfig+0x6f4>)
 8009770:	fba3 1302 	umull	r1, r3, r3, r2
 8009774:	095b      	lsrs	r3, r3, #5
 8009776:	2164      	movs	r1, #100	; 0x64
 8009778:	fb01 f303 	mul.w	r3, r1, r3
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	011b      	lsls	r3, r3, #4
 8009780:	3332      	adds	r3, #50	; 0x32
 8009782:	4a2d      	ldr	r2, [pc, #180]	; (8009838 <UART_SetConfig+0x6f4>)
 8009784:	fba2 2303 	umull	r2, r3, r2, r3
 8009788:	095b      	lsrs	r3, r3, #5
 800978a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800978e:	4498      	add	r8, r3
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	469b      	mov	fp, r3
 8009794:	f04f 0c00 	mov.w	ip, #0
 8009798:	46d9      	mov	r9, fp
 800979a:	46e2      	mov	sl, ip
 800979c:	eb19 0309 	adds.w	r3, r9, r9
 80097a0:	eb4a 040a 	adc.w	r4, sl, sl
 80097a4:	4699      	mov	r9, r3
 80097a6:	46a2      	mov	sl, r4
 80097a8:	eb19 090b 	adds.w	r9, r9, fp
 80097ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80097b0:	f04f 0100 	mov.w	r1, #0
 80097b4:	f04f 0200 	mov.w	r2, #0
 80097b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097c4:	4689      	mov	r9, r1
 80097c6:	4692      	mov	sl, r2
 80097c8:	eb1b 0509 	adds.w	r5, fp, r9
 80097cc:	eb4c 060a 	adc.w	r6, ip, sl
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	4619      	mov	r1, r3
 80097d6:	f04f 0200 	mov.w	r2, #0
 80097da:	f04f 0300 	mov.w	r3, #0
 80097de:	f04f 0400 	mov.w	r4, #0
 80097e2:	0094      	lsls	r4, r2, #2
 80097e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80097e8:	008b      	lsls	r3, r1, #2
 80097ea:	461a      	mov	r2, r3
 80097ec:	4623      	mov	r3, r4
 80097ee:	4628      	mov	r0, r5
 80097f0:	4631      	mov	r1, r6
 80097f2:	f7f7 fa49 	bl	8000c88 <__aeabi_uldivmod>
 80097f6:	4603      	mov	r3, r0
 80097f8:	460c      	mov	r4, r1
 80097fa:	461a      	mov	r2, r3
 80097fc:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <UART_SetConfig+0x6f4>)
 80097fe:	fba3 1302 	umull	r1, r3, r3, r2
 8009802:	095b      	lsrs	r3, r3, #5
 8009804:	2164      	movs	r1, #100	; 0x64
 8009806:	fb01 f303 	mul.w	r3, r1, r3
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	011b      	lsls	r3, r3, #4
 800980e:	3332      	adds	r3, #50	; 0x32
 8009810:	4a09      	ldr	r2, [pc, #36]	; (8009838 <UART_SetConfig+0x6f4>)
 8009812:	fba2 2303 	umull	r2, r3, r2, r3
 8009816:	095b      	lsrs	r3, r3, #5
 8009818:	f003 020f 	and.w	r2, r3, #15
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4442      	add	r2, r8
 8009822:	609a      	str	r2, [r3, #8]
}
 8009824:	e7ff      	b.n	8009826 <UART_SetConfig+0x6e2>
 8009826:	bf00      	nop
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009830:	40011000 	.word	0x40011000
 8009834:	40011400 	.word	0x40011400
 8009838:	51eb851f 	.word	0x51eb851f

0800983c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af04      	add	r7, sp, #16


  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009842:	2100      	movs	r1, #0
 8009844:	2000      	movs	r0, #0
 8009846:	f003 fb55 	bl	800cef4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800984a:	4b17      	ldr	r3, [pc, #92]	; (80098a8 <MX_LWIP_Init+0x6c>)
 800984c:	2200      	movs	r2, #0
 800984e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009850:	4b16      	ldr	r3, [pc, #88]	; (80098ac <MX_LWIP_Init+0x70>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8009856:	4b16      	ldr	r3, [pc, #88]	; (80098b0 <MX_LWIP_Init+0x74>)
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800985c:	4b15      	ldr	r3, [pc, #84]	; (80098b4 <MX_LWIP_Init+0x78>)
 800985e:	9302      	str	r3, [sp, #8]
 8009860:	4b15      	ldr	r3, [pc, #84]	; (80098b8 <MX_LWIP_Init+0x7c>)
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	2300      	movs	r3, #0
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <MX_LWIP_Init+0x74>)
 800986a:	4a10      	ldr	r2, [pc, #64]	; (80098ac <MX_LWIP_Init+0x70>)
 800986c:	490e      	ldr	r1, [pc, #56]	; (80098a8 <MX_LWIP_Init+0x6c>)
 800986e:	4813      	ldr	r0, [pc, #76]	; (80098bc <MX_LWIP_Init+0x80>)
 8009870:	f004 f8c4 	bl	800d9fc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009874:	4811      	ldr	r0, [pc, #68]	; (80098bc <MX_LWIP_Init+0x80>)
 8009876:	f004 fa77 	bl	800dd68 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800987a:	4b10      	ldr	r3, [pc, #64]	; (80098bc <MX_LWIP_Init+0x80>)
 800987c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009880:	089b      	lsrs	r3, r3, #2
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800988c:	480b      	ldr	r0, [pc, #44]	; (80098bc <MX_LWIP_Init+0x80>)
 800988e:	f004 fa7b 	bl	800dd88 <netif_set_up>
 8009892:	e002      	b.n	800989a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009894:	4809      	ldr	r0, [pc, #36]	; (80098bc <MX_LWIP_Init+0x80>)
 8009896:	f004 fae3 	bl	800de60 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800989a:	4808      	ldr	r0, [pc, #32]	; (80098bc <MX_LWIP_Init+0x80>)
 800989c:	f00b fc5e 	bl	801515c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80098a0:	bf00      	nop
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20004c94 	.word	0x20004c94
 80098ac:	20004c98 	.word	0x20004c98
 80098b0:	20004c9c 	.word	0x20004c9c
 80098b4:	0800ce31 	.word	0x0800ce31
 80098b8:	08009eb1 	.word	0x08009eb1
 80098bc:	20004c60 	.word	0x20004c60

080098c0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08e      	sub	sp, #56	; 0x38
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	605a      	str	r2, [r3, #4]
 80098d2:	609a      	str	r2, [r3, #8]
 80098d4:	60da      	str	r2, [r3, #12]
 80098d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a46      	ldr	r2, [pc, #280]	; (80099f8 <HAL_ETH_MspInit+0x138>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	f040 8085 	bne.w	80099ee <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80098e4:	2300      	movs	r3, #0
 80098e6:	623b      	str	r3, [r7, #32]
 80098e8:	4b44      	ldr	r3, [pc, #272]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 80098ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ec:	4a43      	ldr	r2, [pc, #268]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 80098ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80098f2:	6313      	str	r3, [r2, #48]	; 0x30
 80098f4:	4b41      	ldr	r3, [pc, #260]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 80098f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098fc:	623b      	str	r3, [r7, #32]
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	2300      	movs	r3, #0
 8009902:	61fb      	str	r3, [r7, #28]
 8009904:	4b3d      	ldr	r3, [pc, #244]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 8009906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009908:	4a3c      	ldr	r2, [pc, #240]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 800990a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800990e:	6313      	str	r3, [r2, #48]	; 0x30
 8009910:	4b3a      	ldr	r3, [pc, #232]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 8009912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009914:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	2300      	movs	r3, #0
 800991e:	61bb      	str	r3, [r7, #24]
 8009920:	4b36      	ldr	r3, [pc, #216]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 8009922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009924:	4a35      	ldr	r2, [pc, #212]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 8009926:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800992a:	6313      	str	r3, [r2, #48]	; 0x30
 800992c:	4b33      	ldr	r3, [pc, #204]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 800992e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009934:	61bb      	str	r3, [r7, #24]
 8009936:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	4b2f      	ldr	r3, [pc, #188]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	4a2e      	ldr	r2, [pc, #184]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 8009942:	f043 0304 	orr.w	r3, r3, #4
 8009946:	6313      	str	r3, [r2, #48]	; 0x30
 8009948:	4b2c      	ldr	r3, [pc, #176]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009954:	2300      	movs	r3, #0
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	4b28      	ldr	r3, [pc, #160]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 800995a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995c:	4a27      	ldr	r2, [pc, #156]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 800995e:	f043 0301 	orr.w	r3, r3, #1
 8009962:	6313      	str	r3, [r2, #48]	; 0x30
 8009964:	4b25      	ldr	r3, [pc, #148]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 8009966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	613b      	str	r3, [r7, #16]
 800996e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	4b21      	ldr	r3, [pc, #132]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 8009976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009978:	4a20      	ldr	r2, [pc, #128]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 800997a:	f043 0302 	orr.w	r3, r3, #2
 800997e:	6313      	str	r3, [r2, #48]	; 0x30
 8009980:	4b1e      	ldr	r3, [pc, #120]	; (80099fc <HAL_ETH_MspInit+0x13c>)
 8009982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	60fb      	str	r3, [r7, #12]
 800998a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800998c:	2332      	movs	r3, #50	; 0x32
 800998e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009990:	2302      	movs	r3, #2
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009994:	2300      	movs	r3, #0
 8009996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009998:	2303      	movs	r3, #3
 800999a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800999c:	230b      	movs	r3, #11
 800999e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80099a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099a4:	4619      	mov	r1, r3
 80099a6:	4816      	ldr	r0, [pc, #88]	; (8009a00 <HAL_ETH_MspInit+0x140>)
 80099a8:	f7fc fb42 	bl	8006030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80099ac:	2386      	movs	r3, #134	; 0x86
 80099ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099b0:	2302      	movs	r3, #2
 80099b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b4:	2300      	movs	r3, #0
 80099b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099b8:	2303      	movs	r3, #3
 80099ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099bc:	230b      	movs	r3, #11
 80099be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099c4:	4619      	mov	r1, r3
 80099c6:	480f      	ldr	r0, [pc, #60]	; (8009a04 <HAL_ETH_MspInit+0x144>)
 80099c8:	f7fc fb32 	bl	8006030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80099cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099d2:	2302      	movs	r3, #2
 80099d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099da:	2303      	movs	r3, #3
 80099dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099de:	230b      	movs	r3, #11
 80099e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099e6:	4619      	mov	r1, r3
 80099e8:	4807      	ldr	r0, [pc, #28]	; (8009a08 <HAL_ETH_MspInit+0x148>)
 80099ea:	f7fc fb21 	bl	8006030 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80099ee:	bf00      	nop
 80099f0:	3738      	adds	r7, #56	; 0x38
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	40028000 	.word	0x40028000
 80099fc:	40023800 	.word	0x40023800
 8009a00:	40020800 	.word	0x40020800
 8009a04:	40020000 	.word	0x40020000
 8009a08:	40020400 	.word	0x40020400

08009a0c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8009a0c:	b5b0      	push	{r4, r5, r7, lr}
 8009a0e:	b090      	sub	sp, #64	; 0x40
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009a18:	4b5c      	ldr	r3, [pc, #368]	; (8009b8c <low_level_init+0x180>)
 8009a1a:	4a5d      	ldr	r2, [pc, #372]	; (8009b90 <low_level_init+0x184>)
 8009a1c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009a1e:	4b5b      	ldr	r3, [pc, #364]	; (8009b8c <low_level_init+0x180>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009a24:	4b59      	ldr	r3, [pc, #356]	; (8009b8c <low_level_init+0x180>)
 8009a26:	2201      	movs	r2, #1
 8009a28:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8009a30:	2380      	movs	r3, #128	; 0x80
 8009a32:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8009a36:	23e1      	movs	r3, #225	; 0xe1
 8009a38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8009a42:	2300      	movs	r3, #0
 8009a44:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009a4e:	4a4f      	ldr	r2, [pc, #316]	; (8009b8c <low_level_init+0x180>)
 8009a50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a54:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8009a56:	4b4d      	ldr	r3, [pc, #308]	; (8009b8c <low_level_init+0x180>)
 8009a58:	2201      	movs	r2, #1
 8009a5a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009a5c:	4b4b      	ldr	r3, [pc, #300]	; (8009b8c <low_level_init+0x180>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009a62:	4b4a      	ldr	r3, [pc, #296]	; (8009b8c <low_level_init+0x180>)
 8009a64:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009a68:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009a6a:	4848      	ldr	r0, [pc, #288]	; (8009b8c <low_level_init+0x180>)
 8009a6c:	f7fb fb48 	bl	8005100 <HAL_ETH_Init>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8009a76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d108      	bne.n	8009a90 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a84:	f043 0304 	orr.w	r3, r3, #4
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009a90:	2304      	movs	r3, #4
 8009a92:	4a40      	ldr	r2, [pc, #256]	; (8009b94 <low_level_init+0x188>)
 8009a94:	4940      	ldr	r1, [pc, #256]	; (8009b98 <low_level_init+0x18c>)
 8009a96:	483d      	ldr	r0, [pc, #244]	; (8009b8c <low_level_init+0x180>)
 8009a98:	f7fb fcd0 	bl	800543c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009a9c:	2304      	movs	r3, #4
 8009a9e:	4a3f      	ldr	r2, [pc, #252]	; (8009b9c <low_level_init+0x190>)
 8009aa0:	493f      	ldr	r1, [pc, #252]	; (8009ba0 <low_level_init+0x194>)
 8009aa2:	483a      	ldr	r0, [pc, #232]	; (8009b8c <low_level_init+0x180>)
 8009aa4:	f7fb fd33 	bl	800550e <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2206      	movs	r2, #6
 8009aac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009ab0:	4b36      	ldr	r3, [pc, #216]	; (8009b8c <low_level_init+0x180>)
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009abc:	4b33      	ldr	r3, [pc, #204]	; (8009b8c <low_level_init+0x180>)
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	785a      	ldrb	r2, [r3, #1]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009ac8:	4b30      	ldr	r3, [pc, #192]	; (8009b8c <low_level_init+0x180>)
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	789a      	ldrb	r2, [r3, #2]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009ad4:	4b2d      	ldr	r3, [pc, #180]	; (8009b8c <low_level_init+0x180>)
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	78da      	ldrb	r2, [r3, #3]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009ae0:	4b2a      	ldr	r3, [pc, #168]	; (8009b8c <low_level_init+0x180>)
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	791a      	ldrb	r2, [r3, #4]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009aec:	4b27      	ldr	r3, [pc, #156]	; (8009b8c <low_level_init+0x180>)
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	795a      	ldrb	r2, [r3, #5]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009afe:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b06:	f043 030a 	orr.w	r3, r3, #10
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009b12:	2300      	movs	r3, #0
 8009b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b16:	2300      	movs	r3, #0
 8009b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b1e:	2101      	movs	r1, #1
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 fb37 	bl	800a194 <osSemaphoreCreate>
 8009b26:	4602      	mov	r2, r0
 8009b28:	4b1e      	ldr	r3, [pc, #120]	; (8009ba4 <low_level_init+0x198>)
 8009b2a:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009b2c:	4b1e      	ldr	r3, [pc, #120]	; (8009ba8 <low_level_init+0x19c>)
 8009b2e:	f107 040c 	add.w	r4, r7, #12
 8009b32:	461d      	mov	r5, r3
 8009b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009b40:	f107 030c 	add.w	r3, r7, #12
 8009b44:	6879      	ldr	r1, [r7, #4]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fa28 	bl	8009f9c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009b4c:	480f      	ldr	r0, [pc, #60]	; (8009b8c <low_level_init+0x180>)
 8009b4e:	f7fb ff8b 	bl	8005a68 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009b52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b56:	461a      	mov	r2, r3
 8009b58:	211d      	movs	r1, #29
 8009b5a:	480c      	ldr	r0, [pc, #48]	; (8009b8c <low_level_init+0x180>)
 8009b5c:	f7fb feb6 	bl	80058cc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	f043 030b 	orr.w	r3, r3, #11
 8009b66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	211d      	movs	r1, #29
 8009b6e:	4807      	ldr	r0, [pc, #28]	; (8009b8c <low_level_init+0x180>)
 8009b70:	f7fb ff14 	bl	800599c <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009b74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b78:	461a      	mov	r2, r3
 8009b7a:	211d      	movs	r1, #29
 8009b7c:	4803      	ldr	r0, [pc, #12]	; (8009b8c <low_level_init+0x180>)
 8009b7e:	f7fb fea5 	bl	80058cc <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8009b82:	bf00      	nop
 8009b84:	3740      	adds	r7, #64	; 0x40
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bdb0      	pop	{r4, r5, r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20006570 	.word	0x20006570
 8009b90:	40028000 	.word	0x40028000
 8009b94:	200065b8 	.word	0x200065b8
 8009b98:	20004ca0 	.word	0x20004ca0
 8009b9c:	20004d20 	.word	0x20004d20
 8009ba0:	200064f0 	.word	0x200064f0
 8009ba4:	20000970 	.word	0x20000970
 8009ba8:	0801d2fc 	.word	0x0801d2fc

08009bac <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08a      	sub	sp, #40	; 0x28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009bb6:	4b4b      	ldr	r3, [pc, #300]	; (8009ce4 <low_level_output+0x138>)
 8009bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8009bce:	4b45      	ldr	r3, [pc, #276]	; (8009ce4 <low_level_output+0x138>)
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	623b      	str	r3, [r7, #32]
 8009bdc:	e05a      	b.n	8009c94 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	da03      	bge.n	8009bee <low_level_output+0x42>
      {
        errval = ERR_USE;
 8009be6:	23f8      	movs	r3, #248	; 0xf8
 8009be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8009bec:	e05c      	b.n	8009ca8 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	895b      	ldrh	r3, [r3, #10]
 8009bf2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009bf8:	e02f      	b.n	8009c5a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	18d0      	adds	r0, r2, r3
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	18d1      	adds	r1, r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009c0e:	3304      	adds	r3, #4
 8009c10:	461a      	mov	r2, r3
 8009c12:	f00f f9c2 	bl	8018f9a <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da03      	bge.n	8009c2c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009c24:	23f8      	movs	r3, #248	; 0xf8
 8009c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009c2a:	e03d      	b.n	8009ca8 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4413      	add	r3, r2
 8009c38:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009c3c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009c48:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009c54:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d8c8      	bhi.n	8009bfa <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009c68:	69fa      	ldr	r2, [r7, #28]
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	18d0      	adds	r0, r2, r3
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	4413      	add	r3, r2
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	f00f f98e 	bl	8018f9a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4413      	add	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	623b      	str	r3, [r7, #32]
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1a1      	bne.n	8009bde <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009c9a:	6979      	ldr	r1, [r7, #20]
 8009c9c:	4811      	ldr	r0, [pc, #68]	; (8009ce4 <low_level_output+0x138>)
 8009c9e:	f7fb fca3 	bl	80055e8 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009ca8:	4b0e      	ldr	r3, [pc, #56]	; (8009ce4 <low_level_output+0x138>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb0:	3314      	adds	r3, #20
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0320 	and.w	r3, r3, #32
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00d      	beq.n	8009cd8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8009cbc:	4b09      	ldr	r3, [pc, #36]	; (8009ce4 <low_level_output+0x138>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc4:	3314      	adds	r3, #20
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009cca:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <low_level_output+0x138>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8009cd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3728      	adds	r7, #40	; 0x28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	20006570 	.word	0x20006570

08009ce8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08c      	sub	sp, #48	; 0x30
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009d0c:	484f      	ldr	r0, [pc, #316]	; (8009e4c <low_level_input+0x164>)
 8009d0e:	f7fb fd55 	bl	80057bc <HAL_ETH_GetReceivedFrame_IT>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <low_level_input+0x34>
  
    return NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e092      	b.n	8009e42 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009d1c:	4b4b      	ldr	r3, [pc, #300]	; (8009e4c <low_level_input+0x164>)
 8009d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d20:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009d22:	4b4a      	ldr	r3, [pc, #296]	; (8009e4c <low_level_input+0x164>)
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8009d28:	89fb      	ldrh	r3, [r7, #14]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d007      	beq.n	8009d3e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009d2e:	89fb      	ldrh	r3, [r7, #14]
 8009d30:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009d34:	4619      	mov	r1, r3
 8009d36:	2000      	movs	r0, #0
 8009d38:	f004 f97c 	bl	800e034 <pbuf_alloc>
 8009d3c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d04b      	beq.n	8009ddc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009d44:	4b41      	ldr	r3, [pc, #260]	; (8009e4c <low_level_input+0x164>)
 8009d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d48:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d52:	e040      	b.n	8009dd6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	895b      	ldrh	r3, [r3, #10]
 8009d58:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009d5e:	e021      	b.n	8009da4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	18d0      	adds	r0, r2, r3
 8009d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	18d1      	adds	r1, r2, r3
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009d74:	3304      	adds	r3, #4
 8009d76:	461a      	mov	r2, r3
 8009d78:	f00f f90f 	bl	8018f9a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009d88:	69fa      	ldr	r2, [r7, #28]
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009d92:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009d9e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	4413      	add	r3, r2
 8009daa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d8d6      	bhi.n	8009d60 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	18d0      	adds	r0, r2, r3
 8009dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	f00f f8e9 	bl	8018f9a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009dc8:	69fa      	ldr	r2, [r7, #28]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	4413      	add	r3, r2
 8009dce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1bb      	bne.n	8009d54 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009ddc:	4b1b      	ldr	r3, [pc, #108]	; (8009e4c <low_level_input+0x164>)
 8009dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009de2:	2300      	movs	r3, #0
 8009de4:	613b      	str	r3, [r7, #16]
 8009de6:	e00b      	b.n	8009e00 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009de8:	6a3b      	ldr	r3, [r7, #32]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	613b      	str	r3, [r7, #16]
 8009e00:	4b12      	ldr	r3, [pc, #72]	; (8009e4c <low_level_input+0x164>)
 8009e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d3ee      	bcc.n	8009de8 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8009e0a:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <low_level_input+0x164>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8009e10:	4b0e      	ldr	r3, [pc, #56]	; (8009e4c <low_level_input+0x164>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e18:	3314      	adds	r3, #20
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00d      	beq.n	8009e40 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009e24:	4b09      	ldr	r3, [pc, #36]	; (8009e4c <low_level_input+0x164>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e2c:	3314      	adds	r3, #20
 8009e2e:	2280      	movs	r2, #128	; 0x80
 8009e30:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009e32:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <low_level_input+0x164>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3730      	adds	r7, #48	; 0x30
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20006570 	.word	0x20006570

08009e50 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009e5c:	4b12      	ldr	r3, [pc, #72]	; (8009ea8 <ethernetif_input+0x58>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f04f 31ff 	mov.w	r1, #4294967295
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 f9c9 	bl	800a1fc <osSemaphoreWait>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1f5      	bne.n	8009e5c <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8009e70:	480e      	ldr	r0, [pc, #56]	; (8009eac <ethernetif_input+0x5c>)
 8009e72:	f00e ffdd 	bl	8018e30 <sys_mutex_lock>
        p = low_level_input( netif );
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7ff ff36 	bl	8009ce8 <low_level_input>
 8009e7c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00a      	beq.n	8009e9a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	68f9      	ldr	r1, [r7, #12]
 8009e8a:	68b8      	ldr	r0, [r7, #8]
 8009e8c:	4798      	blx	r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8009e94:	68b8      	ldr	r0, [r7, #8]
 8009e96:	f004 fbad 	bl	800e5f4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009e9a:	4804      	ldr	r0, [pc, #16]	; (8009eac <ethernetif_input+0x5c>)
 8009e9c:	f00e ffd7 	bl	8018e4e <sys_mutex_unlock>
      } while(p!=NULL);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e4      	bne.n	8009e70 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009ea6:	e7d9      	b.n	8009e5c <ethernetif_input+0xc>
 8009ea8:	20000970 	.word	0x20000970
 8009eac:	20007d88 	.word	0x20007d88

08009eb0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d106      	bne.n	8009ecc <ethernetif_init+0x1c>
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <ethernetif_init+0x48>)
 8009ec0:	f240 2225 	movw	r2, #549	; 0x225
 8009ec4:	490d      	ldr	r1, [pc, #52]	; (8009efc <ethernetif_init+0x4c>)
 8009ec6:	480e      	ldr	r0, [pc, #56]	; (8009f00 <ethernetif_init+0x50>)
 8009ec8:	f00f fd98 	bl	80199fc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2273      	movs	r2, #115	; 0x73
 8009ed0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2274      	movs	r2, #116	; 0x74
 8009ed8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a09      	ldr	r2, [pc, #36]	; (8009f04 <ethernetif_init+0x54>)
 8009ee0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a08      	ldr	r2, [pc, #32]	; (8009f08 <ethernetif_init+0x58>)
 8009ee6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fd8f 	bl	8009a0c <low_level_init>

  return ERR_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	0801d318 	.word	0x0801d318
 8009efc:	0801d334 	.word	0x0801d334
 8009f00:	0801d344 	.word	0x0801d344
 8009f04:	08016fad 	.word	0x08016fad
 8009f08:	08009bad 	.word	0x08009bad

08009f0c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009f10:	f7fa fa92 	bl	8004438 <HAL_GetTick>
 8009f14:	4603      	mov	r3, r0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b085      	sub	sp, #20
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	4603      	mov	r3, r0
 8009f22:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f2c:	2b84      	cmp	r3, #132	; 0x84
 8009f2e:	d005      	beq.n	8009f3c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009f30:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	3303      	adds	r3, #3
 8009f3a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f50:	f3ef 8305 	mrs	r3, IPSR
 8009f54:	607b      	str	r3, [r7, #4]
  return(result);
 8009f56:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bf14      	ite	ne
 8009f5c:	2301      	movne	r3, #1
 8009f5e:	2300      	moveq	r3, #0
 8009f60:	b2db      	uxtb	r3, r3
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009f72:	f001 fc0d 	bl	800b790 <vTaskStartScheduler>
  
  return osOK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009f80:	f7ff ffe3 	bl	8009f4a <inHandlerMode>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009f8a:	f001 fd19 	bl	800b9c0 <xTaskGetTickCountFromISR>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	e002      	b.n	8009f98 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009f92:	f001 fd05 	bl	800b9a0 <xTaskGetTickCount>
 8009f96:	4603      	mov	r3, r0
  }
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9e:	b089      	sub	sp, #36	; 0x24
 8009fa0:	af04      	add	r7, sp, #16
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d020      	beq.n	8009ff0 <osThreadCreate+0x54>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d01c      	beq.n	8009ff0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685c      	ldr	r4, [r3, #4]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681d      	ldr	r5, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691e      	ldr	r6, [r3, #16]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff ffa6 	bl	8009f1a <makeFreeRtosPriority>
 8009fce:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fd8:	9202      	str	r2, [sp, #8]
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	9100      	str	r1, [sp, #0]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f001 fa10 	bl	800b40a <xTaskCreateStatic>
 8009fea:	4603      	mov	r3, r0
 8009fec:	60fb      	str	r3, [r7, #12]
 8009fee:	e01c      	b.n	800a02a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685c      	ldr	r4, [r3, #4]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ffc:	b29e      	uxth	r6, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a004:	4618      	mov	r0, r3
 800a006:	f7ff ff88 	bl	8009f1a <makeFreeRtosPriority>
 800a00a:	4602      	mov	r2, r0
 800a00c:	f107 030c 	add.w	r3, r7, #12
 800a010:	9301      	str	r3, [sp, #4]
 800a012:	9200      	str	r2, [sp, #0]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	4632      	mov	r2, r6
 800a018:	4629      	mov	r1, r5
 800a01a:	4620      	mov	r0, r4
 800a01c:	f001 fa4f 	bl	800b4be <xTaskCreate>
 800a020:	4603      	mov	r3, r0
 800a022:	2b01      	cmp	r3, #1
 800a024:	d001      	beq.n	800a02a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	e000      	b.n	800a02c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a02a:	68fb      	ldr	r3, [r7, #12]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a034 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <osDelay+0x16>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	e000      	b.n	800a04c <osDelay+0x18>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4618      	mov	r0, r3
 800a04e:	f001 fb6b 	bl	800b728 <vTaskDelay>
  
  return osOK;
 800a052:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d007      	beq.n	800a07c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	4619      	mov	r1, r3
 800a072:	2001      	movs	r0, #1
 800a074:	f000 fc0d 	bl	800a892 <xQueueCreateMutexStatic>
 800a078:	4603      	mov	r3, r0
 800a07a:	e003      	b.n	800a084 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a07c:	2001      	movs	r0, #1
 800a07e:	f000 fbf0 	bl	800a862 <xQueueCreateMutex>
 800a082:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a096:	2300      	movs	r3, #0
 800a098:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <osMutexWait+0x18>
    return osErrorParameter;
 800a0a0:	2380      	movs	r3, #128	; 0x80
 800a0a2:	e03a      	b.n	800a11a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ae:	d103      	bne.n	800a0b8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	e009      	b.n	800a0cc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d006      	beq.n	800a0cc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <osMutexWait+0x40>
      ticks = 1;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a0cc:	f7ff ff3d 	bl	8009f4a <inHandlerMode>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d017      	beq.n	800a106 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	461a      	mov	r2, r3
 800a0dc:	2100      	movs	r1, #0
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 ffee 	bl	800b0c0 <xQueueReceiveFromISR>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d001      	beq.n	800a0ee <osMutexWait+0x62>
      return osErrorOS;
 800a0ea:	23ff      	movs	r3, #255	; 0xff
 800a0ec:	e015      	b.n	800a11a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d011      	beq.n	800a118 <osMutexWait+0x8c>
 800a0f4:	4b0b      	ldr	r3, [pc, #44]	; (800a124 <osMutexWait+0x98>)
 800a0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	e008      	b.n	800a118 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a106:	68f9      	ldr	r1, [r7, #12]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 fed1 	bl	800aeb0 <xQueueSemaphoreTake>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b01      	cmp	r3, #1
 800a112:	d001      	beq.n	800a118 <osMutexWait+0x8c>
    return osErrorOS;
 800a114:	23ff      	movs	r3, #255	; 0xff
 800a116:	e000      	b.n	800a11a <osMutexWait+0x8e>
  }
  
  return osOK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	e000ed04 	.word	0xe000ed04

0800a128 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a130:	2300      	movs	r3, #0
 800a132:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a134:	2300      	movs	r3, #0
 800a136:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a138:	f7ff ff07 	bl	8009f4a <inHandlerMode>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d016      	beq.n	800a170 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a142:	f107 0308 	add.w	r3, r7, #8
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fd4b 	bl	800abe4 <xQueueGiveFromISR>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b01      	cmp	r3, #1
 800a152:	d001      	beq.n	800a158 <osMutexRelease+0x30>
      return osErrorOS;
 800a154:	23ff      	movs	r3, #255	; 0xff
 800a156:	e017      	b.n	800a188 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d013      	beq.n	800a186 <osMutexRelease+0x5e>
 800a15e:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <osMutexRelease+0x68>)
 800a160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	e00a      	b.n	800a186 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a170:	2300      	movs	r3, #0
 800a172:	2200      	movs	r2, #0
 800a174:	2100      	movs	r1, #0
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fba6 	bl	800a8c8 <xQueueGenericSend>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d001      	beq.n	800a186 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a182:	23ff      	movs	r3, #255	; 0xff
 800a184:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a186:	68fb      	ldr	r3, [r7, #12]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	e000ed04 	.word	0xe000ed04

0800a194 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af02      	add	r7, sp, #8
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d010      	beq.n	800a1c8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d10b      	bne.n	800a1c4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	f000 fa66 	bl	800a68c <xQueueGenericCreateStatic>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	e016      	b.n	800a1f2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e014      	b.n	800a1f2 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d110      	bne.n	800a1f0 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800a1ce:	2203      	movs	r2, #3
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	2001      	movs	r0, #1
 800a1d4:	f000 facd 	bl	800a772 <xQueueGenericCreate>
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d005      	beq.n	800a1ec <osSemaphoreCreate+0x58>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 fb6e 	bl	800a8c8 <xQueueGenericSend>
      return sema;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	e000      	b.n	800a1f2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a1f0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a206:	2300      	movs	r3, #0
 800a208:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a210:	2380      	movs	r3, #128	; 0x80
 800a212:	e03a      	b.n	800a28a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21e:	d103      	bne.n	800a228 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a220:	f04f 33ff 	mov.w	r3, #4294967295
 800a224:	60fb      	str	r3, [r7, #12]
 800a226:	e009      	b.n	800a23c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d006      	beq.n	800a23c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d101      	bne.n	800a23c <osSemaphoreWait+0x40>
      ticks = 1;
 800a238:	2301      	movs	r3, #1
 800a23a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a23c:	f7ff fe85 	bl	8009f4a <inHandlerMode>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d017      	beq.n	800a276 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a246:	f107 0308 	add.w	r3, r7, #8
 800a24a:	461a      	mov	r2, r3
 800a24c:	2100      	movs	r1, #0
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 ff36 	bl	800b0c0 <xQueueReceiveFromISR>
 800a254:	4603      	mov	r3, r0
 800a256:	2b01      	cmp	r3, #1
 800a258:	d001      	beq.n	800a25e <osSemaphoreWait+0x62>
      return osErrorOS;
 800a25a:	23ff      	movs	r3, #255	; 0xff
 800a25c:	e015      	b.n	800a28a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d011      	beq.n	800a288 <osSemaphoreWait+0x8c>
 800a264:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <osSemaphoreWait+0x98>)
 800a266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	e008      	b.n	800a288 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a276:	68f9      	ldr	r1, [r7, #12]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fe19 	bl	800aeb0 <xQueueSemaphoreTake>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b01      	cmp	r3, #1
 800a282:	d001      	beq.n	800a288 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a284:	23ff      	movs	r3, #255	; 0xff
 800a286:	e000      	b.n	800a28a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	e000ed04 	.word	0xe000ed04

0800a298 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d012      	beq.n	800a2d0 <osMessageCreate+0x38>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00e      	beq.n	800a2d0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6818      	ldr	r0, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6859      	ldr	r1, [r3, #4]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68dc      	ldr	r4, [r3, #12]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	4623      	mov	r3, r4
 800a2c8:	f000 f9e0 	bl	800a68c <xQueueGenericCreateStatic>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	e008      	b.n	800a2e2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6818      	ldr	r0, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	4619      	mov	r1, r3
 800a2dc:	f000 fa49 	bl	800a772 <xQueueGenericCreate>
 800a2e0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd90      	pop	{r4, r7, pc}
	...

0800a2ec <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <osMessagePut+0x1e>
    ticks = 1;
 800a306:	2301      	movs	r3, #1
 800a308:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a30a:	f7ff fe1e 	bl	8009f4a <inHandlerMode>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d018      	beq.n	800a346 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a314:	f107 0210 	add.w	r2, r7, #16
 800a318:	f107 0108 	add.w	r1, r7, #8
 800a31c:	2300      	movs	r3, #0
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 fbcc 	bl	800aabc <xQueueGenericSendFromISR>
 800a324:	4603      	mov	r3, r0
 800a326:	2b01      	cmp	r3, #1
 800a328:	d001      	beq.n	800a32e <osMessagePut+0x42>
      return osErrorOS;
 800a32a:	23ff      	movs	r3, #255	; 0xff
 800a32c:	e018      	b.n	800a360 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d014      	beq.n	800a35e <osMessagePut+0x72>
 800a334:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <osMessagePut+0x7c>)
 800a336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	e00b      	b.n	800a35e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a346:	f107 0108 	add.w	r1, r7, #8
 800a34a:	2300      	movs	r3, #0
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 faba 	bl	800a8c8 <xQueueGenericSend>
 800a354:	4603      	mov	r3, r0
 800a356:	2b01      	cmp	r3, #1
 800a358:	d001      	beq.n	800a35e <osMessagePut+0x72>
      return osErrorOS;
 800a35a:	23ff      	movs	r3, #255	; 0xff
 800a35c:	e000      	b.n	800a360 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b08b      	sub	sp, #44	; 0x2c
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10a      	bne.n	800a39c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a386:	2380      	movs	r3, #128	; 0x80
 800a388:	617b      	str	r3, [r7, #20]
    return event;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	461c      	mov	r4, r3
 800a38e:	f107 0314 	add.w	r3, r7, #20
 800a392:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a39a:	e054      	b.n	800a446 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a39c:	2300      	movs	r3, #0
 800a39e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3aa:	d103      	bne.n	800a3b4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a3b2:	e009      	b.n	800a3c8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d006      	beq.n	800a3c8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <osMessageGet+0x5c>
      ticks = 1;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a3c8:	f7ff fdbf 	bl	8009f4a <inHandlerMode>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d01c      	beq.n	800a40c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a3d2:	f107 0220 	add.w	r2, r7, #32
 800a3d6:	f107 0314 	add.w	r3, r7, #20
 800a3da:	3304      	adds	r3, #4
 800a3dc:	4619      	mov	r1, r3
 800a3de:	68b8      	ldr	r0, [r7, #8]
 800a3e0:	f000 fe6e 	bl	800b0c0 <xQueueReceiveFromISR>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d102      	bne.n	800a3f0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a3ea:	2310      	movs	r3, #16
 800a3ec:	617b      	str	r3, [r7, #20]
 800a3ee:	e001      	b.n	800a3f4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d01d      	beq.n	800a436 <osMessageGet+0xca>
 800a3fa:	4b15      	ldr	r3, [pc, #84]	; (800a450 <osMessageGet+0xe4>)
 800a3fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	e014      	b.n	800a436 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a40c:	f107 0314 	add.w	r3, r7, #20
 800a410:	3304      	adds	r3, #4
 800a412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a414:	4619      	mov	r1, r3
 800a416:	68b8      	ldr	r0, [r7, #8]
 800a418:	f000 fc6e 	bl	800acf8 <xQueueReceive>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d102      	bne.n	800a428 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a422:	2310      	movs	r3, #16
 800a424:	617b      	str	r3, [r7, #20]
 800a426:	e006      	b.n	800a436 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <osMessageGet+0xc6>
 800a42e:	2300      	movs	r3, #0
 800a430:	e000      	b.n	800a434 <osMessageGet+0xc8>
 800a432:	2340      	movs	r3, #64	; 0x40
 800a434:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	461c      	mov	r4, r3
 800a43a:	f107 0314 	add.w	r3, r7, #20
 800a43e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a442:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	372c      	adds	r7, #44	; 0x2c
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd90      	pop	{r4, r7, pc}
 800a44e:	bf00      	nop
 800a450:	e000ed04 	.word	0xe000ed04

0800a454 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f103 0208 	add.w	r2, r3, #8
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f04f 32ff 	mov.w	r2, #4294967295
 800a46c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f103 0208 	add.w	r2, r3, #8
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f103 0208 	add.w	r2, r3, #8
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4a2:	bf00      	nop
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	689a      	ldr	r2, [r3, #8]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	1c5a      	adds	r2, r3, #1
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	601a      	str	r2, [r3, #0]
}
 800a4ea:	bf00      	nop
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b085      	sub	sp, #20
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50c:	d103      	bne.n	800a516 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	e00c      	b.n	800a530 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	3308      	adds	r3, #8
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	e002      	b.n	800a524 <vListInsert+0x2e>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d2f6      	bcs.n	800a51e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	601a      	str	r2, [r3, #0]
}
 800a55c:	bf00      	nop
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	6892      	ldr	r2, [r2, #8]
 800a57e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	6852      	ldr	r2, [r2, #4]
 800a588:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	429a      	cmp	r2, r3
 800a592:	d103      	bne.n	800a59c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689a      	ldr	r2, [r3, #8]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	1e5a      	subs	r2, r3, #1
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d109      	bne.n	800a5e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	60bb      	str	r3, [r7, #8]
 800a5e2:	e7fe      	b.n	800a5e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a5e4:	f002 f842 	bl	800c66c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f0:	68f9      	ldr	r1, [r7, #12]
 800a5f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5f4:	fb01 f303 	mul.w	r3, r1, r3
 800a5f8:	441a      	add	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a614:	3b01      	subs	r3, #1
 800a616:	68f9      	ldr	r1, [r7, #12]
 800a618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a61a:	fb01 f303 	mul.w	r3, r1, r3
 800a61e:	441a      	add	r2, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	22ff      	movs	r2, #255	; 0xff
 800a628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	22ff      	movs	r2, #255	; 0xff
 800a630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d114      	bne.n	800a664 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d01a      	beq.n	800a678 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	3310      	adds	r3, #16
 800a646:	4618      	mov	r0, r3
 800a648:	f001 fb02 	bl	800bc50 <xTaskRemoveFromEventList>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d012      	beq.n	800a678 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a652:	4b0d      	ldr	r3, [pc, #52]	; (800a688 <xQueueGenericReset+0xcc>)
 800a654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	e009      	b.n	800a678 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	3310      	adds	r3, #16
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff fef3 	bl	800a454 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3324      	adds	r3, #36	; 0x24
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff feee 	bl	800a454 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a678:	f002 f826 	bl	800c6c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a67c:	2301      	movs	r3, #1
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	e000ed04 	.word	0xe000ed04

0800a68c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08e      	sub	sp, #56	; 0x38
 800a690:	af02      	add	r7, sp, #8
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d109      	bne.n	800a6b4 <xQueueGenericCreateStatic+0x28>
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6b2:	e7fe      	b.n	800a6b2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <xQueueGenericCreateStatic+0x42>
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a6cc:	e7fe      	b.n	800a6cc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <xQueueGenericCreateStatic+0x4e>
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <xQueueGenericCreateStatic+0x52>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e000      	b.n	800a6e0 <xQueueGenericCreateStatic+0x54>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d109      	bne.n	800a6f8 <xQueueGenericCreateStatic+0x6c>
 800a6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	623b      	str	r3, [r7, #32]
 800a6f6:	e7fe      	b.n	800a6f6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d102      	bne.n	800a704 <xQueueGenericCreateStatic+0x78>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <xQueueGenericCreateStatic+0x7c>
 800a704:	2301      	movs	r3, #1
 800a706:	e000      	b.n	800a70a <xQueueGenericCreateStatic+0x7e>
 800a708:	2300      	movs	r3, #0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d109      	bne.n	800a722 <xQueueGenericCreateStatic+0x96>
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	61fb      	str	r3, [r7, #28]
 800a720:	e7fe      	b.n	800a720 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a722:	2348      	movs	r3, #72	; 0x48
 800a724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b48      	cmp	r3, #72	; 0x48
 800a72a:	d009      	beq.n	800a740 <xQueueGenericCreateStatic+0xb4>
 800a72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a730:	f383 8811 	msr	BASEPRI, r3
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	61bb      	str	r3, [r7, #24]
 800a73e:	e7fe      	b.n	800a73e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a740:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00d      	beq.n	800a768 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a754:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	4613      	mov	r3, r2
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 f844 	bl	800a7f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3730      	adds	r7, #48	; 0x30
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a772:	b580      	push	{r7, lr}
 800a774:	b08a      	sub	sp, #40	; 0x28
 800a776:	af02      	add	r7, sp, #8
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	4613      	mov	r3, r2
 800a77e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d109      	bne.n	800a79a <xQueueGenericCreate+0x28>
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	613b      	str	r3, [r7, #16]
 800a798:	e7fe      	b.n	800a798 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d102      	bne.n	800a7a6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	61fb      	str	r3, [r7, #28]
 800a7a4:	e004      	b.n	800a7b0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	fb02 f303 	mul.w	r3, r2, r3
 800a7ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	3348      	adds	r3, #72	; 0x48
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f002 f873 	bl	800c8a0 <pvPortMalloc>
 800a7ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d011      	beq.n	800a7e6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	3348      	adds	r3, #72	; 0x48
 800a7ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7d4:	79fa      	ldrb	r2, [r7, #7]
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 f805 	bl	800a7f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7e6:	69bb      	ldr	r3, [r7, #24]
	}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3720      	adds	r7, #32
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d103      	bne.n	800a80c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	69ba      	ldr	r2, [r7, #24]
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	e002      	b.n	800a812 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a81e:	2101      	movs	r1, #1
 800a820:	69b8      	ldr	r0, [r7, #24]
 800a822:	f7ff fecb 	bl	800a5bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a826:	bf00      	nop
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b082      	sub	sp, #8
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00e      	beq.n	800a85a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a84e:	2300      	movs	r3, #0
 800a850:	2200      	movs	r2, #0
 800a852:	2100      	movs	r1, #0
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f837 	bl	800a8c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a85a:	bf00      	nop
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a862:	b580      	push	{r7, lr}
 800a864:	b086      	sub	sp, #24
 800a866:	af00      	add	r7, sp, #0
 800a868:	4603      	mov	r3, r0
 800a86a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a86c:	2301      	movs	r3, #1
 800a86e:	617b      	str	r3, [r7, #20]
 800a870:	2300      	movs	r3, #0
 800a872:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a874:	79fb      	ldrb	r3, [r7, #7]
 800a876:	461a      	mov	r2, r3
 800a878:	6939      	ldr	r1, [r7, #16]
 800a87a:	6978      	ldr	r0, [r7, #20]
 800a87c:	f7ff ff79 	bl	800a772 <xQueueGenericCreate>
 800a880:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f7ff ffd3 	bl	800a82e <prvInitialiseMutex>

		return xNewQueue;
 800a888:	68fb      	ldr	r3, [r7, #12]
	}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a892:	b580      	push	{r7, lr}
 800a894:	b088      	sub	sp, #32
 800a896:	af02      	add	r7, sp, #8
 800a898:	4603      	mov	r3, r0
 800a89a:	6039      	str	r1, [r7, #0]
 800a89c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	617b      	str	r3, [r7, #20]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	6939      	ldr	r1, [r7, #16]
 800a8b0:	6978      	ldr	r0, [r7, #20]
 800a8b2:	f7ff feeb 	bl	800a68c <xQueueGenericCreateStatic>
 800a8b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f7ff ffb8 	bl	800a82e <prvInitialiseMutex>

		return xNewQueue;
 800a8be:	68fb      	ldr	r3, [r7, #12]
	}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3718      	adds	r7, #24
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08e      	sub	sp, #56	; 0x38
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
 800a8d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d109      	bne.n	800a8f8 <xQueueGenericSend+0x30>
 800a8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8f6:	e7fe      	b.n	800a8f6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d103      	bne.n	800a906 <xQueueGenericSend+0x3e>
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <xQueueGenericSend+0x42>
 800a906:	2301      	movs	r3, #1
 800a908:	e000      	b.n	800a90c <xQueueGenericSend+0x44>
 800a90a:	2300      	movs	r3, #0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d109      	bne.n	800a924 <xQueueGenericSend+0x5c>
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
 800a922:	e7fe      	b.n	800a922 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b02      	cmp	r3, #2
 800a928:	d103      	bne.n	800a932 <xQueueGenericSend+0x6a>
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d101      	bne.n	800a936 <xQueueGenericSend+0x6e>
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <xQueueGenericSend+0x70>
 800a936:	2300      	movs	r3, #0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d109      	bne.n	800a950 <xQueueGenericSend+0x88>
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	623b      	str	r3, [r7, #32]
 800a94e:	e7fe      	b.n	800a94e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a950:	f001 fb34 	bl	800bfbc <xTaskGetSchedulerState>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <xQueueGenericSend+0x98>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d101      	bne.n	800a964 <xQueueGenericSend+0x9c>
 800a960:	2301      	movs	r3, #1
 800a962:	e000      	b.n	800a966 <xQueueGenericSend+0x9e>
 800a964:	2300      	movs	r3, #0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d109      	bne.n	800a97e <xQueueGenericSend+0xb6>
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	61fb      	str	r3, [r7, #28]
 800a97c:	e7fe      	b.n	800a97c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a97e:	f001 fe75 	bl	800c66c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d302      	bcc.n	800a994 <xQueueGenericSend+0xcc>
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b02      	cmp	r3, #2
 800a992:	d129      	bne.n	800a9e8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	68b9      	ldr	r1, [r7, #8]
 800a998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a99a:	f000 fc26 	bl	800b1ea <prvCopyDataToQueue>
 800a99e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d010      	beq.n	800a9ca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	3324      	adds	r3, #36	; 0x24
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f001 f94f 	bl	800bc50 <xTaskRemoveFromEventList>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d013      	beq.n	800a9e0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a9b8:	4b3f      	ldr	r3, [pc, #252]	; (800aab8 <xQueueGenericSend+0x1f0>)
 800a9ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	e00a      	b.n	800a9e0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d007      	beq.n	800a9e0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a9d0:	4b39      	ldr	r3, [pc, #228]	; (800aab8 <xQueueGenericSend+0x1f0>)
 800a9d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d6:	601a      	str	r2, [r3, #0]
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9e0:	f001 fe72 	bl	800c6c8 <vPortExitCritical>
				return pdPASS;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e063      	b.n	800aab0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d103      	bne.n	800a9f6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9ee:	f001 fe6b 	bl	800c6c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e05c      	b.n	800aab0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d106      	bne.n	800aa0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9fc:	f107 0314 	add.w	r3, r7, #20
 800aa00:	4618      	mov	r0, r3
 800aa02:	f001 f987 	bl	800bd14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa06:	2301      	movs	r3, #1
 800aa08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa0a:	f001 fe5d 	bl	800c6c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa0e:	f000 ff1d 	bl	800b84c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa12:	f001 fe2b 	bl	800c66c <vPortEnterCritical>
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa1c:	b25b      	sxtb	r3, r3
 800aa1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa22:	d103      	bne.n	800aa2c <xQueueGenericSend+0x164>
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa32:	b25b      	sxtb	r3, r3
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa38:	d103      	bne.n	800aa42 <xQueueGenericSend+0x17a>
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa42:	f001 fe41 	bl	800c6c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa46:	1d3a      	adds	r2, r7, #4
 800aa48:	f107 0314 	add.w	r3, r7, #20
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f001 f976 	bl	800bd40 <xTaskCheckForTimeOut>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d124      	bne.n	800aaa4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa5c:	f000 fcbd 	bl	800b3da <prvIsQueueFull>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d018      	beq.n	800aa98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	3310      	adds	r3, #16
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f001 f8ca 	bl	800bc08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa76:	f000 fc48 	bl	800b30a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa7a:	f000 fef5 	bl	800b868 <xTaskResumeAll>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f47f af7c 	bne.w	800a97e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800aa86:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <xQueueGenericSend+0x1f0>)
 800aa88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	e772      	b.n	800a97e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa9a:	f000 fc36 	bl	800b30a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa9e:	f000 fee3 	bl	800b868 <xTaskResumeAll>
 800aaa2:	e76c      	b.n	800a97e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aaa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaa6:	f000 fc30 	bl	800b30a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaaa:	f000 fedd 	bl	800b868 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aaae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3738      	adds	r7, #56	; 0x38
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	e000ed04 	.word	0xe000ed04

0800aabc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08e      	sub	sp, #56	; 0x38
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d109      	bne.n	800aae8 <xQueueGenericSendFromISR+0x2c>
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	627b      	str	r3, [r7, #36]	; 0x24
 800aae6:	e7fe      	b.n	800aae6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d103      	bne.n	800aaf6 <xQueueGenericSendFromISR+0x3a>
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <xQueueGenericSendFromISR+0x3e>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <xQueueGenericSendFromISR+0x40>
 800aafa:	2300      	movs	r3, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d109      	bne.n	800ab14 <xQueueGenericSendFromISR+0x58>
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	623b      	str	r3, [r7, #32]
 800ab12:	e7fe      	b.n	800ab12 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d103      	bne.n	800ab22 <xQueueGenericSendFromISR+0x66>
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d101      	bne.n	800ab26 <xQueueGenericSendFromISR+0x6a>
 800ab22:	2301      	movs	r3, #1
 800ab24:	e000      	b.n	800ab28 <xQueueGenericSendFromISR+0x6c>
 800ab26:	2300      	movs	r3, #0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d109      	bne.n	800ab40 <xQueueGenericSendFromISR+0x84>
 800ab2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	61fb      	str	r3, [r7, #28]
 800ab3e:	e7fe      	b.n	800ab3e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab40:	f001 fe70 	bl	800c824 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab44:	f3ef 8211 	mrs	r2, BASEPRI
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	61ba      	str	r2, [r7, #24]
 800ab5a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d302      	bcc.n	800ab72 <xQueueGenericSendFromISR+0xb6>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d12c      	bne.n	800abcc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab82:	f000 fb32 	bl	800b1ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab86:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ab8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8e:	d112      	bne.n	800abb6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d016      	beq.n	800abc6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	3324      	adds	r3, #36	; 0x24
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f001 f857 	bl	800bc50 <xTaskRemoveFromEventList>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00e      	beq.n	800abc6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00b      	beq.n	800abc6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	601a      	str	r2, [r3, #0]
 800abb4:	e007      	b.n	800abc6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abba:	3301      	adds	r3, #1
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	b25a      	sxtb	r2, r3
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800abc6:	2301      	movs	r3, #1
 800abc8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800abca:	e001      	b.n	800abd0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abcc:	2300      	movs	r3, #0
 800abce:	637b      	str	r3, [r7, #52]	; 0x34
 800abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3738      	adds	r7, #56	; 0x38
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08e      	sub	sp, #56	; 0x38
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d109      	bne.n	800ac0c <xQueueGiveFromISR+0x28>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	623b      	str	r3, [r7, #32]
 800ac0a:	e7fe      	b.n	800ac0a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d009      	beq.n	800ac28 <xQueueGiveFromISR+0x44>
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	61fb      	str	r3, [r7, #28]
 800ac26:	e7fe      	b.n	800ac26 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d103      	bne.n	800ac38 <xQueueGiveFromISR+0x54>
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <xQueueGiveFromISR+0x58>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e000      	b.n	800ac3e <xQueueGiveFromISR+0x5a>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d109      	bne.n	800ac56 <xQueueGiveFromISR+0x72>
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	61bb      	str	r3, [r7, #24]
 800ac54:	e7fe      	b.n	800ac54 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac56:	f001 fde5 	bl	800c824 <vPortValidateInterruptPriority>
	__asm volatile
 800ac5a:	f3ef 8211 	mrs	r2, BASEPRI
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	617a      	str	r2, [r7, #20]
 800ac70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ac72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d22b      	bcs.n	800acde <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca0:	d112      	bne.n	800acc8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d016      	beq.n	800acd8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	3324      	adds	r3, #36	; 0x24
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 ffce 	bl	800bc50 <xTaskRemoveFromEventList>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00e      	beq.n	800acd8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2201      	movs	r2, #1
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	e007      	b.n	800acd8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800acc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800accc:	3301      	adds	r3, #1
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	b25a      	sxtb	r2, r3
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800acd8:	2301      	movs	r3, #1
 800acda:	637b      	str	r3, [r7, #52]	; 0x34
 800acdc:	e001      	b.n	800ace2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	637b      	str	r3, [r7, #52]	; 0x34
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3738      	adds	r7, #56	; 0x38
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08c      	sub	sp, #48	; 0x30
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad04:	2300      	movs	r3, #0
 800ad06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d109      	bne.n	800ad26 <xQueueReceive+0x2e>
	__asm volatile
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	623b      	str	r3, [r7, #32]
 800ad24:	e7fe      	b.n	800ad24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d103      	bne.n	800ad34 <xQueueReceive+0x3c>
 800ad2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <xQueueReceive+0x40>
 800ad34:	2301      	movs	r3, #1
 800ad36:	e000      	b.n	800ad3a <xQueueReceive+0x42>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d109      	bne.n	800ad52 <xQueueReceive+0x5a>
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	61fb      	str	r3, [r7, #28]
 800ad50:	e7fe      	b.n	800ad50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad52:	f001 f933 	bl	800bfbc <xTaskGetSchedulerState>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d102      	bne.n	800ad62 <xQueueReceive+0x6a>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <xQueueReceive+0x6e>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <xQueueReceive+0x70>
 800ad66:	2300      	movs	r3, #0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d109      	bne.n	800ad80 <xQueueReceive+0x88>
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	61bb      	str	r3, [r7, #24]
 800ad7e:	e7fe      	b.n	800ad7e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad80:	f001 fc74 	bl	800c66c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d01f      	beq.n	800add0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad90:	68b9      	ldr	r1, [r7, #8]
 800ad92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad94:	f000 fa93 	bl	800b2be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	1e5a      	subs	r2, r3, #1
 800ad9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00f      	beq.n	800adc8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	3310      	adds	r3, #16
 800adac:	4618      	mov	r0, r3
 800adae:	f000 ff4f 	bl	800bc50 <xTaskRemoveFromEventList>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d007      	beq.n	800adc8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adb8:	4b3c      	ldr	r3, [pc, #240]	; (800aeac <xQueueReceive+0x1b4>)
 800adba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adc8:	f001 fc7e 	bl	800c6c8 <vPortExitCritical>
				return pdPASS;
 800adcc:	2301      	movs	r3, #1
 800adce:	e069      	b.n	800aea4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d103      	bne.n	800adde <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800add6:	f001 fc77 	bl	800c6c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adda:	2300      	movs	r3, #0
 800addc:	e062      	b.n	800aea4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d106      	bne.n	800adf2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ade4:	f107 0310 	add.w	r3, r7, #16
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 ff93 	bl	800bd14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adee:	2301      	movs	r3, #1
 800adf0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adf2:	f001 fc69 	bl	800c6c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adf6:	f000 fd29 	bl	800b84c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adfa:	f001 fc37 	bl	800c66c <vPortEnterCritical>
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae04:	b25b      	sxtb	r3, r3
 800ae06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0a:	d103      	bne.n	800ae14 <xQueueReceive+0x11c>
 800ae0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae1a:	b25b      	sxtb	r3, r3
 800ae1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae20:	d103      	bne.n	800ae2a <xQueueReceive+0x132>
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae2a:	f001 fc4d 	bl	800c6c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae2e:	1d3a      	adds	r2, r7, #4
 800ae30:	f107 0310 	add.w	r3, r7, #16
 800ae34:	4611      	mov	r1, r2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 ff82 	bl	800bd40 <xTaskCheckForTimeOut>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d123      	bne.n	800ae8a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae44:	f000 fab3 	bl	800b3ae <prvIsQueueEmpty>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d017      	beq.n	800ae7e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae50:	3324      	adds	r3, #36	; 0x24
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	4611      	mov	r1, r2
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fed6 	bl	800bc08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae5e:	f000 fa54 	bl	800b30a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae62:	f000 fd01 	bl	800b868 <xTaskResumeAll>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d189      	bne.n	800ad80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ae6c:	4b0f      	ldr	r3, [pc, #60]	; (800aeac <xQueueReceive+0x1b4>)
 800ae6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	e780      	b.n	800ad80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae80:	f000 fa43 	bl	800b30a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae84:	f000 fcf0 	bl	800b868 <xTaskResumeAll>
 800ae88:	e77a      	b.n	800ad80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae8c:	f000 fa3d 	bl	800b30a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae90:	f000 fcea 	bl	800b868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae96:	f000 fa8a 	bl	800b3ae <prvIsQueueEmpty>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f43f af6f 	beq.w	800ad80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aea2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3730      	adds	r7, #48	; 0x30
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	e000ed04 	.word	0xe000ed04

0800aeb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08e      	sub	sp, #56	; 0x38
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aeba:	2300      	movs	r3, #0
 800aebc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aec2:	2300      	movs	r3, #0
 800aec4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d109      	bne.n	800aee0 <xQueueSemaphoreTake+0x30>
 800aecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	623b      	str	r3, [r7, #32]
 800aede:	e7fe      	b.n	800aede <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d009      	beq.n	800aefc <xQueueSemaphoreTake+0x4c>
 800aee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	61fb      	str	r3, [r7, #28]
 800aefa:	e7fe      	b.n	800aefa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aefc:	f001 f85e 	bl	800bfbc <xTaskGetSchedulerState>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <xQueueSemaphoreTake+0x5c>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <xQueueSemaphoreTake+0x60>
 800af0c:	2301      	movs	r3, #1
 800af0e:	e000      	b.n	800af12 <xQueueSemaphoreTake+0x62>
 800af10:	2300      	movs	r3, #0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d109      	bne.n	800af2a <xQueueSemaphoreTake+0x7a>
 800af16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1a:	f383 8811 	msr	BASEPRI, r3
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	61bb      	str	r3, [r7, #24]
 800af28:	e7fe      	b.n	800af28 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af2a:	f001 fb9f 	bl	800c66c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800af2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af32:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	2b00      	cmp	r3, #0
 800af38:	d024      	beq.n	800af84 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af40:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d104      	bne.n	800af54 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800af4a:	f001 f9f1 	bl	800c330 <pvTaskIncrementMutexHeldCount>
 800af4e:	4602      	mov	r2, r0
 800af50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af52:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00f      	beq.n	800af7c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af5e:	3310      	adds	r3, #16
 800af60:	4618      	mov	r0, r3
 800af62:	f000 fe75 	bl	800bc50 <xTaskRemoveFromEventList>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d007      	beq.n	800af7c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af6c:	4b53      	ldr	r3, [pc, #332]	; (800b0bc <xQueueSemaphoreTake+0x20c>)
 800af6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af7c:	f001 fba4 	bl	800c6c8 <vPortExitCritical>
				return pdPASS;
 800af80:	2301      	movs	r3, #1
 800af82:	e096      	b.n	800b0b2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d110      	bne.n	800afac <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d009      	beq.n	800afa4 <xQueueSemaphoreTake+0xf4>
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	617b      	str	r3, [r7, #20]
 800afa2:	e7fe      	b.n	800afa2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800afa4:	f001 fb90 	bl	800c6c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800afa8:	2300      	movs	r3, #0
 800afaa:	e082      	b.n	800b0b2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d106      	bne.n	800afc0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afb2:	f107 030c 	add.w	r3, r7, #12
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 feac 	bl	800bd14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afbc:	2301      	movs	r3, #1
 800afbe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afc0:	f001 fb82 	bl	800c6c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afc4:	f000 fc42 	bl	800b84c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afc8:	f001 fb50 	bl	800c66c <vPortEnterCritical>
 800afcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afd2:	b25b      	sxtb	r3, r3
 800afd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd8:	d103      	bne.n	800afe2 <xQueueSemaphoreTake+0x132>
 800afda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afe8:	b25b      	sxtb	r3, r3
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afee:	d103      	bne.n	800aff8 <xQueueSemaphoreTake+0x148>
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aff8:	f001 fb66 	bl	800c6c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800affc:	463a      	mov	r2, r7
 800affe:	f107 030c 	add.w	r3, r7, #12
 800b002:	4611      	mov	r1, r2
 800b004:	4618      	mov	r0, r3
 800b006:	f000 fe9b 	bl	800bd40 <xTaskCheckForTimeOut>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d132      	bne.n	800b076 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b012:	f000 f9cc 	bl	800b3ae <prvIsQueueEmpty>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d026      	beq.n	800b06a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d109      	bne.n	800b038 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800b024:	f001 fb22 	bl	800c66c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 ffe3 	bl	800bff8 <xTaskPriorityInherit>
 800b032:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b034:	f001 fb48 	bl	800c6c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03a:	3324      	adds	r3, #36	; 0x24
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	4611      	mov	r1, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f000 fde1 	bl	800bc08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b048:	f000 f95f 	bl	800b30a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b04c:	f000 fc0c 	bl	800b868 <xTaskResumeAll>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	f47f af69 	bne.w	800af2a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800b058:	4b18      	ldr	r3, [pc, #96]	; (800b0bc <xQueueSemaphoreTake+0x20c>)
 800b05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	e75f      	b.n	800af2a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b06a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b06c:	f000 f94d 	bl	800b30a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b070:	f000 fbfa 	bl	800b868 <xTaskResumeAll>
 800b074:	e759      	b.n	800af2a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b078:	f000 f947 	bl	800b30a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b07c:	f000 fbf4 	bl	800b868 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b082:	f000 f994 	bl	800b3ae <prvIsQueueEmpty>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f43f af4e 	beq.w	800af2a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00d      	beq.n	800b0b0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800b094:	f001 faea 	bl	800c66c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b09a:	f000 f88e 	bl	800b1ba <prvGetDisinheritPriorityAfterTimeout>
 800b09e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f001 f8aa 	bl	800c200 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b0ac:	f001 fb0c 	bl	800c6c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3738      	adds	r7, #56	; 0x38
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08e      	sub	sp, #56	; 0x38
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d109      	bne.n	800b0ea <xQueueReceiveFromISR+0x2a>
 800b0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0da:	f383 8811 	msr	BASEPRI, r3
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	623b      	str	r3, [r7, #32]
 800b0e8:	e7fe      	b.n	800b0e8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d103      	bne.n	800b0f8 <xQueueReceiveFromISR+0x38>
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <xQueueReceiveFromISR+0x3c>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e000      	b.n	800b0fe <xQueueReceiveFromISR+0x3e>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d109      	bne.n	800b116 <xQueueReceiveFromISR+0x56>
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	61fb      	str	r3, [r7, #28]
 800b114:	e7fe      	b.n	800b114 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b116:	f001 fb85 	bl	800c824 <vPortValidateInterruptPriority>
	__asm volatile
 800b11a:	f3ef 8211 	mrs	r2, BASEPRI
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	61ba      	str	r2, [r7, #24]
 800b130:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b132:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b134:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d02f      	beq.n	800b1a2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b14c:	68b9      	ldr	r1, [r7, #8]
 800b14e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b150:	f000 f8b5 	bl	800b2be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b156:	1e5a      	subs	r2, r3, #1
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b15c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b164:	d112      	bne.n	800b18c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d016      	beq.n	800b19c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b170:	3310      	adds	r3, #16
 800b172:	4618      	mov	r0, r3
 800b174:	f000 fd6c 	bl	800bc50 <xTaskRemoveFromEventList>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00e      	beq.n	800b19c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00b      	beq.n	800b19c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	e007      	b.n	800b19c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b18c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b190:	3301      	adds	r3, #1
 800b192:	b2db      	uxtb	r3, r3
 800b194:	b25a      	sxtb	r2, r3
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b19c:	2301      	movs	r3, #1
 800b19e:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a0:	e001      	b.n	800b1a6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3738      	adds	r7, #56	; 0x38
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d006      	beq.n	800b1d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f1c3 0307 	rsb	r3, r3, #7
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	e001      	b.n	800b1dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
	}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b086      	sub	sp, #24
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	60f8      	str	r0, [r7, #12]
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10d      	bne.n	800b224 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d14d      	bne.n	800b2ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	4618      	mov	r0, r3
 800b216:	f000 ff6f 	bl	800c0f8 <xTaskPriorityDisinherit>
 800b21a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	609a      	str	r2, [r3, #8]
 800b222:	e043      	b.n	800b2ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d119      	bne.n	800b25e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6858      	ldr	r0, [r3, #4]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	461a      	mov	r2, r3
 800b234:	68b9      	ldr	r1, [r7, #8]
 800b236:	f00d feb0 	bl	8018f9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	441a      	add	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	429a      	cmp	r2, r3
 800b252:	d32b      	bcc.n	800b2ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	605a      	str	r2, [r3, #4]
 800b25c:	e026      	b.n	800b2ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	68d8      	ldr	r0, [r3, #12]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b266:	461a      	mov	r2, r3
 800b268:	68b9      	ldr	r1, [r7, #8]
 800b26a:	f00d fe96 	bl	8018f9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	68da      	ldr	r2, [r3, #12]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b276:	425b      	negs	r3, r3
 800b278:	441a      	add	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	68da      	ldr	r2, [r3, #12]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	429a      	cmp	r2, r3
 800b288:	d207      	bcs.n	800b29a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	689a      	ldr	r2, [r3, #8]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b292:	425b      	negs	r3, r3
 800b294:	441a      	add	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d105      	bne.n	800b2ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2b4:	697b      	ldr	r3, [r7, #20]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d018      	beq.n	800b302 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68da      	ldr	r2, [r3, #12]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d8:	441a      	add	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	68da      	ldr	r2, [r3, #12]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d303      	bcc.n	800b2f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	68d9      	ldr	r1, [r3, #12]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	6838      	ldr	r0, [r7, #0]
 800b2fe:	f00d fe4c 	bl	8018f9a <memcpy>
	}
}
 800b302:	bf00      	nop
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b312:	f001 f9ab 	bl	800c66c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b31c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b31e:	e011      	b.n	800b344 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b324:	2b00      	cmp	r3, #0
 800b326:	d012      	beq.n	800b34e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3324      	adds	r3, #36	; 0x24
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 fc8f 	bl	800bc50 <xTaskRemoveFromEventList>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b338:	f000 fd62 	bl	800be00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	3b01      	subs	r3, #1
 800b340:	b2db      	uxtb	r3, r3
 800b342:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	dce9      	bgt.n	800b320 <prvUnlockQueue+0x16>
 800b34c:	e000      	b.n	800b350 <prvUnlockQueue+0x46>
					break;
 800b34e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	22ff      	movs	r2, #255	; 0xff
 800b354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b358:	f001 f9b6 	bl	800c6c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b35c:	f001 f986 	bl	800c66c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b366:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b368:	e011      	b.n	800b38e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d012      	beq.n	800b398 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3310      	adds	r3, #16
 800b376:	4618      	mov	r0, r3
 800b378:	f000 fc6a 	bl	800bc50 <xTaskRemoveFromEventList>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b382:	f000 fd3d 	bl	800be00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b386:	7bbb      	ldrb	r3, [r7, #14]
 800b388:	3b01      	subs	r3, #1
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b38e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b392:	2b00      	cmp	r3, #0
 800b394:	dce9      	bgt.n	800b36a <prvUnlockQueue+0x60>
 800b396:	e000      	b.n	800b39a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b398:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	22ff      	movs	r2, #255	; 0xff
 800b39e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3a2:	f001 f991 	bl	800c6c8 <vPortExitCritical>
}
 800b3a6:	bf00      	nop
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b084      	sub	sp, #16
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3b6:	f001 f959 	bl	800c66c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d102      	bne.n	800b3c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	60fb      	str	r3, [r7, #12]
 800b3c6:	e001      	b.n	800b3cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3cc:	f001 f97c 	bl	800c6c8 <vPortExitCritical>

	return xReturn;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3e2:	f001 f943 	bl	800c66c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d102      	bne.n	800b3f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	60fb      	str	r3, [r7, #12]
 800b3f6:	e001      	b.n	800b3fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3fc:	f001 f964 	bl	800c6c8 <vPortExitCritical>

	return xReturn;
 800b400:	68fb      	ldr	r3, [r7, #12]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b08e      	sub	sp, #56	; 0x38
 800b40e:	af04      	add	r7, sp, #16
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	607a      	str	r2, [r7, #4]
 800b416:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d109      	bne.n	800b432 <xTaskCreateStatic+0x28>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	623b      	str	r3, [r7, #32]
 800b430:	e7fe      	b.n	800b430 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	2b00      	cmp	r3, #0
 800b436:	d109      	bne.n	800b44c <xTaskCreateStatic+0x42>
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	61fb      	str	r3, [r7, #28]
 800b44a:	e7fe      	b.n	800b44a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b44c:	2354      	movs	r3, #84	; 0x54
 800b44e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	2b54      	cmp	r3, #84	; 0x54
 800b454:	d009      	beq.n	800b46a <xTaskCreateStatic+0x60>
 800b456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	61bb      	str	r3, [r7, #24]
 800b468:	e7fe      	b.n	800b468 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b46a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d01e      	beq.n	800b4b0 <xTaskCreateStatic+0xa6>
 800b472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b474:	2b00      	cmp	r3, #0
 800b476:	d01b      	beq.n	800b4b0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b480:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	2202      	movs	r2, #2
 800b486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b48a:	2300      	movs	r3, #0
 800b48c:	9303      	str	r3, [sp, #12]
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	9302      	str	r3, [sp, #8]
 800b492:	f107 0314 	add.w	r3, r7, #20
 800b496:	9301      	str	r3, [sp, #4]
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	68b9      	ldr	r1, [r7, #8]
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f000 f850 	bl	800b548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4aa:	f000 f8d3 	bl	800b654 <prvAddNewTaskToReadyList>
 800b4ae:	e001      	b.n	800b4b4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4b4:	697b      	ldr	r3, [r7, #20]
	}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3728      	adds	r7, #40	; 0x28
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b08c      	sub	sp, #48	; 0x30
 800b4c2:	af04      	add	r7, sp, #16
 800b4c4:	60f8      	str	r0, [r7, #12]
 800b4c6:	60b9      	str	r1, [r7, #8]
 800b4c8:	603b      	str	r3, [r7, #0]
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b4ce:	88fb      	ldrh	r3, [r7, #6]
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f001 f9e4 	bl	800c8a0 <pvPortMalloc>
 800b4d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00e      	beq.n	800b4fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b4e0:	2054      	movs	r0, #84	; 0x54
 800b4e2:	f001 f9dd 	bl	800c8a0 <pvPortMalloc>
 800b4e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	631a      	str	r2, [r3, #48]	; 0x30
 800b4f4:	e005      	b.n	800b502 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4f6:	6978      	ldr	r0, [r7, #20]
 800b4f8:	f001 fa94 	bl	800ca24 <vPortFree>
 800b4fc:	e001      	b.n	800b502 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d017      	beq.n	800b538 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b510:	88fa      	ldrh	r2, [r7, #6]
 800b512:	2300      	movs	r3, #0
 800b514:	9303      	str	r3, [sp, #12]
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	9302      	str	r3, [sp, #8]
 800b51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	68b9      	ldr	r1, [r7, #8]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f000 f80e 	bl	800b548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b52c:	69f8      	ldr	r0, [r7, #28]
 800b52e:	f000 f891 	bl	800b654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b532:	2301      	movs	r3, #1
 800b534:	61bb      	str	r3, [r7, #24]
 800b536:	e002      	b.n	800b53e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b538:	f04f 33ff 	mov.w	r3, #4294967295
 800b53c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b53e:	69bb      	ldr	r3, [r7, #24]
	}
 800b540:	4618      	mov	r0, r3
 800b542:	3720      	adds	r7, #32
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b560:	3b01      	subs	r3, #1
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4413      	add	r3, r2
 800b566:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	f023 0307 	bic.w	r3, r3, #7
 800b56e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	f003 0307 	and.w	r3, r3, #7
 800b576:	2b00      	cmp	r3, #0
 800b578:	d009      	beq.n	800b58e <prvInitialiseNewTask+0x46>
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	617b      	str	r3, [r7, #20]
 800b58c:	e7fe      	b.n	800b58c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d01f      	beq.n	800b5d4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b594:	2300      	movs	r3, #0
 800b596:	61fb      	str	r3, [r7, #28]
 800b598:	e012      	b.n	800b5c0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	4413      	add	r3, r2
 800b5a0:	7819      	ldrb	r1, [r3, #0]
 800b5a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	3334      	adds	r3, #52	; 0x34
 800b5aa:	460a      	mov	r2, r1
 800b5ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d006      	beq.n	800b5c8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	61fb      	str	r3, [r7, #28]
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	2b0f      	cmp	r3, #15
 800b5c4:	d9e9      	bls.n	800b59a <prvInitialiseNewTask+0x52>
 800b5c6:	e000      	b.n	800b5ca <prvInitialiseNewTask+0x82>
			{
				break;
 800b5c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5d2:	e003      	b.n	800b5dc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	2b06      	cmp	r3, #6
 800b5e0:	d901      	bls.n	800b5e6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b5e2:	2306      	movs	r3, #6
 800b5e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5f0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe ff49 	bl	800a494 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	3318      	adds	r3, #24
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe ff44 	bl	800a494 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b610:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	f1c3 0207 	rsb	r2, r3, #7
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b620:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	2200      	movs	r2, #0
 800b626:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	68f9      	ldr	r1, [r7, #12]
 800b634:	69b8      	ldr	r0, [r7, #24]
 800b636:	f000 fef5 	bl	800c424 <pxPortInitialiseStack>
 800b63a:	4602      	mov	r2, r0
 800b63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b642:	2b00      	cmp	r3, #0
 800b644:	d002      	beq.n	800b64c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b64a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b64c:	bf00      	nop
 800b64e:	3720      	adds	r7, #32
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b65c:	f001 f806 	bl	800c66c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b660:	4b2a      	ldr	r3, [pc, #168]	; (800b70c <prvAddNewTaskToReadyList+0xb8>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	4a29      	ldr	r2, [pc, #164]	; (800b70c <prvAddNewTaskToReadyList+0xb8>)
 800b668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b66a:	4b29      	ldr	r3, [pc, #164]	; (800b710 <prvAddNewTaskToReadyList+0xbc>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d109      	bne.n	800b686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b672:	4a27      	ldr	r2, [pc, #156]	; (800b710 <prvAddNewTaskToReadyList+0xbc>)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b678:	4b24      	ldr	r3, [pc, #144]	; (800b70c <prvAddNewTaskToReadyList+0xb8>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d110      	bne.n	800b6a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b680:	f000 fbe2 	bl	800be48 <prvInitialiseTaskLists>
 800b684:	e00d      	b.n	800b6a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b686:	4b23      	ldr	r3, [pc, #140]	; (800b714 <prvAddNewTaskToReadyList+0xc0>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d109      	bne.n	800b6a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b68e:	4b20      	ldr	r3, [pc, #128]	; (800b710 <prvAddNewTaskToReadyList+0xbc>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b698:	429a      	cmp	r2, r3
 800b69a:	d802      	bhi.n	800b6a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b69c:	4a1c      	ldr	r2, [pc, #112]	; (800b710 <prvAddNewTaskToReadyList+0xbc>)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6a2:	4b1d      	ldr	r3, [pc, #116]	; (800b718 <prvAddNewTaskToReadyList+0xc4>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	4a1b      	ldr	r2, [pc, #108]	; (800b718 <prvAddNewTaskToReadyList+0xc4>)
 800b6aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	409a      	lsls	r2, r3
 800b6b4:	4b19      	ldr	r3, [pc, #100]	; (800b71c <prvAddNewTaskToReadyList+0xc8>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	4a18      	ldr	r2, [pc, #96]	; (800b71c <prvAddNewTaskToReadyList+0xc8>)
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4413      	add	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	4a15      	ldr	r2, [pc, #84]	; (800b720 <prvAddNewTaskToReadyList+0xcc>)
 800b6cc:	441a      	add	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	f7fe feea 	bl	800a4ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b6da:	f000 fff5 	bl	800c6c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b6de:	4b0d      	ldr	r3, [pc, #52]	; (800b714 <prvAddNewTaskToReadyList+0xc0>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00e      	beq.n	800b704 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b6e6:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <prvAddNewTaskToReadyList+0xbc>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d207      	bcs.n	800b704 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b6f4:	4b0b      	ldr	r3, [pc, #44]	; (800b724 <prvAddNewTaskToReadyList+0xd0>)
 800b6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b704:	bf00      	nop
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	20000a74 	.word	0x20000a74
 800b710:	20000974 	.word	0x20000974
 800b714:	20000a80 	.word	0x20000a80
 800b718:	20000a90 	.word	0x20000a90
 800b71c:	20000a7c 	.word	0x20000a7c
 800b720:	20000978 	.word	0x20000978
 800b724:	e000ed04 	.word	0xe000ed04

0800b728 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b730:	2300      	movs	r3, #0
 800b732:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d016      	beq.n	800b768 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b73a:	4b13      	ldr	r3, [pc, #76]	; (800b788 <vTaskDelay+0x60>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d009      	beq.n	800b756 <vTaskDelay+0x2e>
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	60bb      	str	r3, [r7, #8]
 800b754:	e7fe      	b.n	800b754 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b756:	f000 f879 	bl	800b84c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b75a:	2100      	movs	r1, #0
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fdfb 	bl	800c358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b762:	f000 f881 	bl	800b868 <xTaskResumeAll>
 800b766:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d107      	bne.n	800b77e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b76e:	4b07      	ldr	r3, [pc, #28]	; (800b78c <vTaskDelay+0x64>)
 800b770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b774:	601a      	str	r2, [r3, #0]
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b77e:	bf00      	nop
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	20000a9c 	.word	0x20000a9c
 800b78c:	e000ed04 	.word	0xe000ed04

0800b790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08a      	sub	sp, #40	; 0x28
 800b794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b796:	2300      	movs	r3, #0
 800b798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b79e:	463a      	mov	r2, r7
 800b7a0:	1d39      	adds	r1, r7, #4
 800b7a2:	f107 0308 	add.w	r3, r7, #8
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7f6 f83e 	bl	8001828 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	9202      	str	r2, [sp, #8]
 800b7b4:	9301      	str	r3, [sp, #4]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9300      	str	r3, [sp, #0]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	460a      	mov	r2, r1
 800b7be:	491d      	ldr	r1, [pc, #116]	; (800b834 <vTaskStartScheduler+0xa4>)
 800b7c0:	481d      	ldr	r0, [pc, #116]	; (800b838 <vTaskStartScheduler+0xa8>)
 800b7c2:	f7ff fe22 	bl	800b40a <xTaskCreateStatic>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	4b1c      	ldr	r3, [pc, #112]	; (800b83c <vTaskStartScheduler+0xac>)
 800b7ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7cc:	4b1b      	ldr	r3, [pc, #108]	; (800b83c <vTaskStartScheduler+0xac>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	e001      	b.n	800b7de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d115      	bne.n	800b810 <vTaskStartScheduler+0x80>
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7f6:	4b12      	ldr	r3, [pc, #72]	; (800b840 <vTaskStartScheduler+0xb0>)
 800b7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7fe:	4b11      	ldr	r3, [pc, #68]	; (800b844 <vTaskStartScheduler+0xb4>)
 800b800:	2201      	movs	r2, #1
 800b802:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b804:	4b10      	ldr	r3, [pc, #64]	; (800b848 <vTaskStartScheduler+0xb8>)
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b80a:	f000 fe91 	bl	800c530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b80e:	e00d      	b.n	800b82c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b816:	d109      	bne.n	800b82c <vTaskStartScheduler+0x9c>
 800b818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	60fb      	str	r3, [r7, #12]
 800b82a:	e7fe      	b.n	800b82a <vTaskStartScheduler+0x9a>
}
 800b82c:	bf00      	nop
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	0801d36c 	.word	0x0801d36c
 800b838:	0800be19 	.word	0x0800be19
 800b83c:	20000a98 	.word	0x20000a98
 800b840:	20000a94 	.word	0x20000a94
 800b844:	20000a80 	.word	0x20000a80
 800b848:	20000a78 	.word	0x20000a78

0800b84c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b850:	4b04      	ldr	r3, [pc, #16]	; (800b864 <vTaskSuspendAll+0x18>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	3301      	adds	r3, #1
 800b856:	4a03      	ldr	r2, [pc, #12]	; (800b864 <vTaskSuspendAll+0x18>)
 800b858:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b85a:	bf00      	nop
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	20000a9c 	.word	0x20000a9c

0800b868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b86e:	2300      	movs	r3, #0
 800b870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b872:	2300      	movs	r3, #0
 800b874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b876:	4b41      	ldr	r3, [pc, #260]	; (800b97c <xTaskResumeAll+0x114>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d109      	bne.n	800b892 <xTaskResumeAll+0x2a>
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	603b      	str	r3, [r7, #0]
 800b890:	e7fe      	b.n	800b890 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b892:	f000 feeb 	bl	800c66c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b896:	4b39      	ldr	r3, [pc, #228]	; (800b97c <xTaskResumeAll+0x114>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	4a37      	ldr	r2, [pc, #220]	; (800b97c <xTaskResumeAll+0x114>)
 800b89e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8a0:	4b36      	ldr	r3, [pc, #216]	; (800b97c <xTaskResumeAll+0x114>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d161      	bne.n	800b96c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8a8:	4b35      	ldr	r3, [pc, #212]	; (800b980 <xTaskResumeAll+0x118>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d05d      	beq.n	800b96c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8b0:	e02e      	b.n	800b910 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8b2:	4b34      	ldr	r3, [pc, #208]	; (800b984 <xTaskResumeAll+0x11c>)
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3318      	adds	r3, #24
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fe fe52 	bl	800a568 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe fe4d 	bl	800a568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	409a      	lsls	r2, r3
 800b8d6:	4b2c      	ldr	r3, [pc, #176]	; (800b988 <xTaskResumeAll+0x120>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	4a2a      	ldr	r2, [pc, #168]	; (800b988 <xTaskResumeAll+0x120>)
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4a27      	ldr	r2, [pc, #156]	; (800b98c <xTaskResumeAll+0x124>)
 800b8ee:	441a      	add	r2, r3
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	f7fe fdd9 	bl	800a4ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b900:	4b23      	ldr	r3, [pc, #140]	; (800b990 <xTaskResumeAll+0x128>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b906:	429a      	cmp	r2, r3
 800b908:	d302      	bcc.n	800b910 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b90a:	4b22      	ldr	r3, [pc, #136]	; (800b994 <xTaskResumeAll+0x12c>)
 800b90c:	2201      	movs	r2, #1
 800b90e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b910:	4b1c      	ldr	r3, [pc, #112]	; (800b984 <xTaskResumeAll+0x11c>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1cc      	bne.n	800b8b2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b91e:	f000 fb2d 	bl	800bf7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b922:	4b1d      	ldr	r3, [pc, #116]	; (800b998 <xTaskResumeAll+0x130>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d010      	beq.n	800b950 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b92e:	f000 f859 	bl	800b9e4 <xTaskIncrementTick>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b938:	4b16      	ldr	r3, [pc, #88]	; (800b994 <xTaskResumeAll+0x12c>)
 800b93a:	2201      	movs	r2, #1
 800b93c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	3b01      	subs	r3, #1
 800b942:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1f1      	bne.n	800b92e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b94a:	4b13      	ldr	r3, [pc, #76]	; (800b998 <xTaskResumeAll+0x130>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b950:	4b10      	ldr	r3, [pc, #64]	; (800b994 <xTaskResumeAll+0x12c>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d009      	beq.n	800b96c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b958:	2301      	movs	r3, #1
 800b95a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b95c:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <xTaskResumeAll+0x134>)
 800b95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b96c:	f000 feac 	bl	800c6c8 <vPortExitCritical>

	return xAlreadyYielded;
 800b970:	68bb      	ldr	r3, [r7, #8]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	20000a9c 	.word	0x20000a9c
 800b980:	20000a74 	.word	0x20000a74
 800b984:	20000a34 	.word	0x20000a34
 800b988:	20000a7c 	.word	0x20000a7c
 800b98c:	20000978 	.word	0x20000978
 800b990:	20000974 	.word	0x20000974
 800b994:	20000a88 	.word	0x20000a88
 800b998:	20000a84 	.word	0x20000a84
 800b99c:	e000ed04 	.word	0xe000ed04

0800b9a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b9a6:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <xTaskGetTickCount+0x1c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b9ac:	687b      	ldr	r3, [r7, #4]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	370c      	adds	r7, #12
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	20000a78 	.word	0x20000a78

0800b9c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9c6:	f000 ff2d 	bl	800c824 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b9ce:	4b04      	ldr	r3, [pc, #16]	; (800b9e0 <xTaskGetTickCountFromISR+0x20>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9d4:	683b      	ldr	r3, [r7, #0]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20000a78 	.word	0x20000a78

0800b9e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ee:	4b4e      	ldr	r3, [pc, #312]	; (800bb28 <xTaskIncrementTick+0x144>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f040 8087 	bne.w	800bb06 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9f8:	4b4c      	ldr	r3, [pc, #304]	; (800bb2c <xTaskIncrementTick+0x148>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba00:	4a4a      	ldr	r2, [pc, #296]	; (800bb2c <xTaskIncrementTick+0x148>)
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d11f      	bne.n	800ba4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba0c:	4b48      	ldr	r3, [pc, #288]	; (800bb30 <xTaskIncrementTick+0x14c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d009      	beq.n	800ba2a <xTaskIncrementTick+0x46>
 800ba16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1a:	f383 8811 	msr	BASEPRI, r3
 800ba1e:	f3bf 8f6f 	isb	sy
 800ba22:	f3bf 8f4f 	dsb	sy
 800ba26:	603b      	str	r3, [r7, #0]
 800ba28:	e7fe      	b.n	800ba28 <xTaskIncrementTick+0x44>
 800ba2a:	4b41      	ldr	r3, [pc, #260]	; (800bb30 <xTaskIncrementTick+0x14c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	60fb      	str	r3, [r7, #12]
 800ba30:	4b40      	ldr	r3, [pc, #256]	; (800bb34 <xTaskIncrementTick+0x150>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a3e      	ldr	r2, [pc, #248]	; (800bb30 <xTaskIncrementTick+0x14c>)
 800ba36:	6013      	str	r3, [r2, #0]
 800ba38:	4a3e      	ldr	r2, [pc, #248]	; (800bb34 <xTaskIncrementTick+0x150>)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6013      	str	r3, [r2, #0]
 800ba3e:	4b3e      	ldr	r3, [pc, #248]	; (800bb38 <xTaskIncrementTick+0x154>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3301      	adds	r3, #1
 800ba44:	4a3c      	ldr	r2, [pc, #240]	; (800bb38 <xTaskIncrementTick+0x154>)
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	f000 fa98 	bl	800bf7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba4c:	4b3b      	ldr	r3, [pc, #236]	; (800bb3c <xTaskIncrementTick+0x158>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	693a      	ldr	r2, [r7, #16]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d348      	bcc.n	800bae8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba56:	4b36      	ldr	r3, [pc, #216]	; (800bb30 <xTaskIncrementTick+0x14c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d104      	bne.n	800ba6a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba60:	4b36      	ldr	r3, [pc, #216]	; (800bb3c <xTaskIncrementTick+0x158>)
 800ba62:	f04f 32ff 	mov.w	r2, #4294967295
 800ba66:	601a      	str	r2, [r3, #0]
					break;
 800ba68:	e03e      	b.n	800bae8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba6a:	4b31      	ldr	r3, [pc, #196]	; (800bb30 <xTaskIncrementTick+0x14c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d203      	bcs.n	800ba8a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba82:	4a2e      	ldr	r2, [pc, #184]	; (800bb3c <xTaskIncrementTick+0x158>)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba88:	e02e      	b.n	800bae8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fe fd6a 	bl	800a568 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d004      	beq.n	800baa6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	3318      	adds	r3, #24
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fe fd61 	bl	800a568 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baaa:	2201      	movs	r2, #1
 800baac:	409a      	lsls	r2, r3
 800baae:	4b24      	ldr	r3, [pc, #144]	; (800bb40 <xTaskIncrementTick+0x15c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	4a22      	ldr	r2, [pc, #136]	; (800bb40 <xTaskIncrementTick+0x15c>)
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800babc:	4613      	mov	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4a1f      	ldr	r2, [pc, #124]	; (800bb44 <xTaskIncrementTick+0x160>)
 800bac6:	441a      	add	r2, r3
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	3304      	adds	r3, #4
 800bacc:	4619      	mov	r1, r3
 800bace:	4610      	mov	r0, r2
 800bad0:	f7fe fced 	bl	800a4ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad8:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <xTaskIncrementTick+0x164>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	429a      	cmp	r2, r3
 800bae0:	d3b9      	bcc.n	800ba56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bae2:	2301      	movs	r3, #1
 800bae4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bae6:	e7b6      	b.n	800ba56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bae8:	4b17      	ldr	r3, [pc, #92]	; (800bb48 <xTaskIncrementTick+0x164>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baee:	4915      	ldr	r1, [pc, #84]	; (800bb44 <xTaskIncrementTick+0x160>)
 800baf0:	4613      	mov	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	440b      	add	r3, r1
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d907      	bls.n	800bb10 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800bb00:	2301      	movs	r3, #1
 800bb02:	617b      	str	r3, [r7, #20]
 800bb04:	e004      	b.n	800bb10 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bb06:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <xTaskIncrementTick+0x168>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	4a0f      	ldr	r2, [pc, #60]	; (800bb4c <xTaskIncrementTick+0x168>)
 800bb0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bb10:	4b0f      	ldr	r3, [pc, #60]	; (800bb50 <xTaskIncrementTick+0x16c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bb1c:	697b      	ldr	r3, [r7, #20]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20000a9c 	.word	0x20000a9c
 800bb2c:	20000a78 	.word	0x20000a78
 800bb30:	20000a2c 	.word	0x20000a2c
 800bb34:	20000a30 	.word	0x20000a30
 800bb38:	20000a8c 	.word	0x20000a8c
 800bb3c:	20000a94 	.word	0x20000a94
 800bb40:	20000a7c 	.word	0x20000a7c
 800bb44:	20000978 	.word	0x20000978
 800bb48:	20000974 	.word	0x20000974
 800bb4c:	20000a84 	.word	0x20000a84
 800bb50:	20000a88 	.word	0x20000a88

0800bb54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb5a:	4b26      	ldr	r3, [pc, #152]	; (800bbf4 <vTaskSwitchContext+0xa0>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb62:	4b25      	ldr	r3, [pc, #148]	; (800bbf8 <vTaskSwitchContext+0xa4>)
 800bb64:	2201      	movs	r2, #1
 800bb66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb68:	e03e      	b.n	800bbe8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800bb6a:	4b23      	ldr	r3, [pc, #140]	; (800bbf8 <vTaskSwitchContext+0xa4>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb70:	4b22      	ldr	r3, [pc, #136]	; (800bbfc <vTaskSwitchContext+0xa8>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	fab3 f383 	clz	r3, r3
 800bb7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bb7e:	7afb      	ldrb	r3, [r7, #11]
 800bb80:	f1c3 031f 	rsb	r3, r3, #31
 800bb84:	617b      	str	r3, [r7, #20]
 800bb86:	491e      	ldr	r1, [pc, #120]	; (800bc00 <vTaskSwitchContext+0xac>)
 800bb88:	697a      	ldr	r2, [r7, #20]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	440b      	add	r3, r1
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d109      	bne.n	800bbae <vTaskSwitchContext+0x5a>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	607b      	str	r3, [r7, #4]
 800bbac:	e7fe      	b.n	800bbac <vTaskSwitchContext+0x58>
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4a11      	ldr	r2, [pc, #68]	; (800bc00 <vTaskSwitchContext+0xac>)
 800bbba:	4413      	add	r3, r2
 800bbbc:	613b      	str	r3, [r7, #16]
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	605a      	str	r2, [r3, #4]
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	3308      	adds	r3, #8
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d104      	bne.n	800bbde <vTaskSwitchContext+0x8a>
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	685a      	ldr	r2, [r3, #4]
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	605a      	str	r2, [r3, #4]
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	4a07      	ldr	r2, [pc, #28]	; (800bc04 <vTaskSwitchContext+0xb0>)
 800bbe6:	6013      	str	r3, [r2, #0]
}
 800bbe8:	bf00      	nop
 800bbea:	371c      	adds	r7, #28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	20000a9c 	.word	0x20000a9c
 800bbf8:	20000a88 	.word	0x20000a88
 800bbfc:	20000a7c 	.word	0x20000a7c
 800bc00:	20000978 	.word	0x20000978
 800bc04:	20000974 	.word	0x20000974

0800bc08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d109      	bne.n	800bc2c <vTaskPlaceOnEventList+0x24>
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	60fb      	str	r3, [r7, #12]
 800bc2a:	e7fe      	b.n	800bc2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc2c:	4b07      	ldr	r3, [pc, #28]	; (800bc4c <vTaskPlaceOnEventList+0x44>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3318      	adds	r3, #24
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7fe fc5e 	bl	800a4f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	6838      	ldr	r0, [r7, #0]
 800bc3e:	f000 fb8b 	bl	800c358 <prvAddCurrentTaskToDelayedList>
}
 800bc42:	bf00      	nop
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20000974 	.word	0x20000974

0800bc50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d109      	bne.n	800bc7a <xTaskRemoveFromEventList+0x2a>
 800bc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6a:	f383 8811 	msr	BASEPRI, r3
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	e7fe      	b.n	800bc78 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	3318      	adds	r3, #24
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe fc72 	bl	800a568 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc84:	4b1d      	ldr	r3, [pc, #116]	; (800bcfc <xTaskRemoveFromEventList+0xac>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d11c      	bne.n	800bcc6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	3304      	adds	r3, #4
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7fe fc69 	bl	800a568 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	409a      	lsls	r2, r3
 800bc9e:	4b18      	ldr	r3, [pc, #96]	; (800bd00 <xTaskRemoveFromEventList+0xb0>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	4a16      	ldr	r2, [pc, #88]	; (800bd00 <xTaskRemoveFromEventList+0xb0>)
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcac:	4613      	mov	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4a13      	ldr	r2, [pc, #76]	; (800bd04 <xTaskRemoveFromEventList+0xb4>)
 800bcb6:	441a      	add	r2, r3
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	3304      	adds	r3, #4
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	4610      	mov	r0, r2
 800bcc0:	f7fe fbf5 	bl	800a4ae <vListInsertEnd>
 800bcc4:	e005      	b.n	800bcd2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	3318      	adds	r3, #24
 800bcca:	4619      	mov	r1, r3
 800bccc:	480e      	ldr	r0, [pc, #56]	; (800bd08 <xTaskRemoveFromEventList+0xb8>)
 800bcce:	f7fe fbee 	bl	800a4ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd6:	4b0d      	ldr	r3, [pc, #52]	; (800bd0c <xTaskRemoveFromEventList+0xbc>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d905      	bls.n	800bcec <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bce0:	2301      	movs	r3, #1
 800bce2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bce4:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <xTaskRemoveFromEventList+0xc0>)
 800bce6:	2201      	movs	r2, #1
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	e001      	b.n	800bcf0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800bcec:	2300      	movs	r3, #0
 800bcee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bcf0:	697b      	ldr	r3, [r7, #20]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3718      	adds	r7, #24
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000a9c 	.word	0x20000a9c
 800bd00:	20000a7c 	.word	0x20000a7c
 800bd04:	20000978 	.word	0x20000978
 800bd08:	20000a34 	.word	0x20000a34
 800bd0c:	20000974 	.word	0x20000974
 800bd10:	20000a88 	.word	0x20000a88

0800bd14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd1c:	4b06      	ldr	r3, [pc, #24]	; (800bd38 <vTaskInternalSetTimeOutState+0x24>)
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd24:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <vTaskInternalSetTimeOutState+0x28>)
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	605a      	str	r2, [r3, #4]
}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	20000a8c 	.word	0x20000a8c
 800bd3c:	20000a78 	.word	0x20000a78

0800bd40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b088      	sub	sp, #32
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d109      	bne.n	800bd64 <xTaskCheckForTimeOut+0x24>
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	613b      	str	r3, [r7, #16]
 800bd62:	e7fe      	b.n	800bd62 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d109      	bne.n	800bd7e <xTaskCheckForTimeOut+0x3e>
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	e7fe      	b.n	800bd7c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bd7e:	f000 fc75 	bl	800c66c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd82:	4b1d      	ldr	r3, [pc, #116]	; (800bdf8 <xTaskCheckForTimeOut+0xb8>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	69ba      	ldr	r2, [r7, #24]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9a:	d102      	bne.n	800bda2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	61fb      	str	r3, [r7, #28]
 800bda0:	e023      	b.n	800bdea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	4b15      	ldr	r3, [pc, #84]	; (800bdfc <xTaskCheckForTimeOut+0xbc>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d007      	beq.n	800bdbe <xTaskCheckForTimeOut+0x7e>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	69ba      	ldr	r2, [r7, #24]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d302      	bcc.n	800bdbe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	61fb      	str	r3, [r7, #28]
 800bdbc:	e015      	b.n	800bdea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d20b      	bcs.n	800bde0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	1ad2      	subs	r2, r2, r3
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7ff ff9d 	bl	800bd14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bdda:	2300      	movs	r3, #0
 800bddc:	61fb      	str	r3, [r7, #28]
 800bdde:	e004      	b.n	800bdea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	2200      	movs	r2, #0
 800bde4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bde6:	2301      	movs	r3, #1
 800bde8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bdea:	f000 fc6d 	bl	800c6c8 <vPortExitCritical>

	return xReturn;
 800bdee:	69fb      	ldr	r3, [r7, #28]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3720      	adds	r7, #32
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	20000a78 	.word	0x20000a78
 800bdfc:	20000a8c 	.word	0x20000a8c

0800be00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be00:	b480      	push	{r7}
 800be02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be04:	4b03      	ldr	r3, [pc, #12]	; (800be14 <vTaskMissedYield+0x14>)
 800be06:	2201      	movs	r2, #1
 800be08:	601a      	str	r2, [r3, #0]
}
 800be0a:	bf00      	nop
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	20000a88 	.word	0x20000a88

0800be18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be20:	f000 f852 	bl	800bec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be24:	4b06      	ldr	r3, [pc, #24]	; (800be40 <prvIdleTask+0x28>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d9f9      	bls.n	800be20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be2c:	4b05      	ldr	r3, [pc, #20]	; (800be44 <prvIdleTask+0x2c>)
 800be2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be3c:	e7f0      	b.n	800be20 <prvIdleTask+0x8>
 800be3e:	bf00      	nop
 800be40:	20000978 	.word	0x20000978
 800be44:	e000ed04 	.word	0xe000ed04

0800be48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be4e:	2300      	movs	r3, #0
 800be50:	607b      	str	r3, [r7, #4]
 800be52:	e00c      	b.n	800be6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4a12      	ldr	r2, [pc, #72]	; (800bea8 <prvInitialiseTaskLists+0x60>)
 800be60:	4413      	add	r3, r2
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe faf6 	bl	800a454 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3301      	adds	r3, #1
 800be6c:	607b      	str	r3, [r7, #4]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b06      	cmp	r3, #6
 800be72:	d9ef      	bls.n	800be54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be74:	480d      	ldr	r0, [pc, #52]	; (800beac <prvInitialiseTaskLists+0x64>)
 800be76:	f7fe faed 	bl	800a454 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be7a:	480d      	ldr	r0, [pc, #52]	; (800beb0 <prvInitialiseTaskLists+0x68>)
 800be7c:	f7fe faea 	bl	800a454 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be80:	480c      	ldr	r0, [pc, #48]	; (800beb4 <prvInitialiseTaskLists+0x6c>)
 800be82:	f7fe fae7 	bl	800a454 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be86:	480c      	ldr	r0, [pc, #48]	; (800beb8 <prvInitialiseTaskLists+0x70>)
 800be88:	f7fe fae4 	bl	800a454 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be8c:	480b      	ldr	r0, [pc, #44]	; (800bebc <prvInitialiseTaskLists+0x74>)
 800be8e:	f7fe fae1 	bl	800a454 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be92:	4b0b      	ldr	r3, [pc, #44]	; (800bec0 <prvInitialiseTaskLists+0x78>)
 800be94:	4a05      	ldr	r2, [pc, #20]	; (800beac <prvInitialiseTaskLists+0x64>)
 800be96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be98:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <prvInitialiseTaskLists+0x7c>)
 800be9a:	4a05      	ldr	r2, [pc, #20]	; (800beb0 <prvInitialiseTaskLists+0x68>)
 800be9c:	601a      	str	r2, [r3, #0]
}
 800be9e:	bf00      	nop
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20000978 	.word	0x20000978
 800beac:	20000a04 	.word	0x20000a04
 800beb0:	20000a18 	.word	0x20000a18
 800beb4:	20000a34 	.word	0x20000a34
 800beb8:	20000a48 	.word	0x20000a48
 800bebc:	20000a60 	.word	0x20000a60
 800bec0:	20000a2c 	.word	0x20000a2c
 800bec4:	20000a30 	.word	0x20000a30

0800bec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bece:	e019      	b.n	800bf04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bed0:	f000 fbcc 	bl	800c66c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed4:	4b0f      	ldr	r3, [pc, #60]	; (800bf14 <prvCheckTasksWaitingTermination+0x4c>)
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3304      	adds	r3, #4
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fe fb41 	bl	800a568 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bee6:	4b0c      	ldr	r3, [pc, #48]	; (800bf18 <prvCheckTasksWaitingTermination+0x50>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3b01      	subs	r3, #1
 800beec:	4a0a      	ldr	r2, [pc, #40]	; (800bf18 <prvCheckTasksWaitingTermination+0x50>)
 800beee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bef0:	4b0a      	ldr	r3, [pc, #40]	; (800bf1c <prvCheckTasksWaitingTermination+0x54>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3b01      	subs	r3, #1
 800bef6:	4a09      	ldr	r2, [pc, #36]	; (800bf1c <prvCheckTasksWaitingTermination+0x54>)
 800bef8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800befa:	f000 fbe5 	bl	800c6c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 f80e 	bl	800bf20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf04:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <prvCheckTasksWaitingTermination+0x54>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1e1      	bne.n	800bed0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	20000a48 	.word	0x20000a48
 800bf18:	20000a74 	.word	0x20000a74
 800bf1c:	20000a5c 	.word	0x20000a5c

0800bf20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d108      	bne.n	800bf44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 fd74 	bl	800ca24 <vPortFree>
				vPortFree( pxTCB );
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 fd71 	bl	800ca24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf42:	e017      	b.n	800bf74 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d103      	bne.n	800bf56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fd68 	bl	800ca24 <vPortFree>
	}
 800bf54:	e00e      	b.n	800bf74 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d009      	beq.n	800bf74 <prvDeleteTCB+0x54>
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	e7fe      	b.n	800bf72 <prvDeleteTCB+0x52>
	}
 800bf74:	bf00      	nop
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf82:	4b0c      	ldr	r3, [pc, #48]	; (800bfb4 <prvResetNextTaskUnblockTime+0x38>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d104      	bne.n	800bf96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf8c:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <prvResetNextTaskUnblockTime+0x3c>)
 800bf8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf94:	e008      	b.n	800bfa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf96:	4b07      	ldr	r3, [pc, #28]	; (800bfb4 <prvResetNextTaskUnblockTime+0x38>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	4a04      	ldr	r2, [pc, #16]	; (800bfb8 <prvResetNextTaskUnblockTime+0x3c>)
 800bfa6:	6013      	str	r3, [r2, #0]
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	20000a2c 	.word	0x20000a2c
 800bfb8:	20000a94 	.word	0x20000a94

0800bfbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bfc2:	4b0b      	ldr	r3, [pc, #44]	; (800bff0 <xTaskGetSchedulerState+0x34>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d102      	bne.n	800bfd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	607b      	str	r3, [r7, #4]
 800bfce:	e008      	b.n	800bfe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfd0:	4b08      	ldr	r3, [pc, #32]	; (800bff4 <xTaskGetSchedulerState+0x38>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d102      	bne.n	800bfde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bfd8:	2302      	movs	r3, #2
 800bfda:	607b      	str	r3, [r7, #4]
 800bfdc:	e001      	b.n	800bfe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bfe2:	687b      	ldr	r3, [r7, #4]
	}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	20000a80 	.word	0x20000a80
 800bff4:	20000a9c 	.word	0x20000a9c

0800bff8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c004:	2300      	movs	r3, #0
 800c006:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d069      	beq.n	800c0e2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c012:	4b36      	ldr	r3, [pc, #216]	; (800c0ec <xTaskPriorityInherit+0xf4>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c018:	429a      	cmp	r2, r3
 800c01a:	d259      	bcs.n	800c0d0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	2b00      	cmp	r3, #0
 800c022:	db06      	blt.n	800c032 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c024:	4b31      	ldr	r3, [pc, #196]	; (800c0ec <xTaskPriorityInherit+0xf4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02a:	f1c3 0207 	rsb	r2, r3, #7
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	6959      	ldr	r1, [r3, #20]
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c03a:	4613      	mov	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4413      	add	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4a2b      	ldr	r2, [pc, #172]	; (800c0f0 <xTaskPriorityInherit+0xf8>)
 800c044:	4413      	add	r3, r2
 800c046:	4299      	cmp	r1, r3
 800c048:	d13a      	bne.n	800c0c0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fe fa8a 	bl	800a568 <uxListRemove>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d115      	bne.n	800c086 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05e:	4924      	ldr	r1, [pc, #144]	; (800c0f0 <xTaskPriorityInherit+0xf8>)
 800c060:	4613      	mov	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	440b      	add	r3, r1
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10a      	bne.n	800c086 <xTaskPriorityInherit+0x8e>
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c074:	2201      	movs	r2, #1
 800c076:	fa02 f303 	lsl.w	r3, r2, r3
 800c07a:	43da      	mvns	r2, r3
 800c07c:	4b1d      	ldr	r3, [pc, #116]	; (800c0f4 <xTaskPriorityInherit+0xfc>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4013      	ands	r3, r2
 800c082:	4a1c      	ldr	r2, [pc, #112]	; (800c0f4 <xTaskPriorityInherit+0xfc>)
 800c084:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c086:	4b19      	ldr	r3, [pc, #100]	; (800c0ec <xTaskPriorityInherit+0xf4>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c094:	2201      	movs	r2, #1
 800c096:	409a      	lsls	r2, r3
 800c098:	4b16      	ldr	r3, [pc, #88]	; (800c0f4 <xTaskPriorityInherit+0xfc>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	4a15      	ldr	r2, [pc, #84]	; (800c0f4 <xTaskPriorityInherit+0xfc>)
 800c0a0:	6013      	str	r3, [r2, #0]
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4413      	add	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4a10      	ldr	r2, [pc, #64]	; (800c0f0 <xTaskPriorityInherit+0xf8>)
 800c0b0:	441a      	add	r2, r3
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	f7fe f9f8 	bl	800a4ae <vListInsertEnd>
 800c0be:	e004      	b.n	800c0ca <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0c0:	4b0a      	ldr	r3, [pc, #40]	; (800c0ec <xTaskPriorityInherit+0xf4>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	60fb      	str	r3, [r7, #12]
 800c0ce:	e008      	b.n	800c0e2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0d4:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <xTaskPriorityInherit+0xf4>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d201      	bcs.n	800c0e2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
	}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	20000974 	.word	0x20000974
 800c0f0:	20000978 	.word	0x20000978
 800c0f4:	20000a7c 	.word	0x20000a7c

0800c0f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c104:	2300      	movs	r3, #0
 800c106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d06c      	beq.n	800c1e8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c10e:	4b39      	ldr	r3, [pc, #228]	; (800c1f4 <xTaskPriorityDisinherit+0xfc>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	693a      	ldr	r2, [r7, #16]
 800c114:	429a      	cmp	r2, r3
 800c116:	d009      	beq.n	800c12c <xTaskPriorityDisinherit+0x34>
 800c118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11c:	f383 8811 	msr	BASEPRI, r3
 800c120:	f3bf 8f6f 	isb	sy
 800c124:	f3bf 8f4f 	dsb	sy
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	e7fe      	b.n	800c12a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c130:	2b00      	cmp	r3, #0
 800c132:	d109      	bne.n	800c148 <xTaskPriorityDisinherit+0x50>
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	60bb      	str	r3, [r7, #8]
 800c146:	e7fe      	b.n	800c146 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c14c:	1e5a      	subs	r2, r3, #1
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d044      	beq.n	800c1e8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c162:	2b00      	cmp	r3, #0
 800c164:	d140      	bne.n	800c1e8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	3304      	adds	r3, #4
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7fe f9fc 	bl	800a568 <uxListRemove>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d115      	bne.n	800c1a2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17a:	491f      	ldr	r1, [pc, #124]	; (800c1f8 <xTaskPriorityDisinherit+0x100>)
 800c17c:	4613      	mov	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	440b      	add	r3, r1
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10a      	bne.n	800c1a2 <xTaskPriorityDisinherit+0xaa>
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c190:	2201      	movs	r2, #1
 800c192:	fa02 f303 	lsl.w	r3, r2, r3
 800c196:	43da      	mvns	r2, r3
 800c198:	4b18      	ldr	r3, [pc, #96]	; (800c1fc <xTaskPriorityDisinherit+0x104>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4013      	ands	r3, r2
 800c19e:	4a17      	ldr	r2, [pc, #92]	; (800c1fc <xTaskPriorityDisinherit+0x104>)
 800c1a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ae:	f1c3 0207 	rsb	r2, r3, #7
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	409a      	lsls	r2, r3
 800c1be:	4b0f      	ldr	r3, [pc, #60]	; (800c1fc <xTaskPriorityDisinherit+0x104>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	4a0d      	ldr	r2, [pc, #52]	; (800c1fc <xTaskPriorityDisinherit+0x104>)
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4a08      	ldr	r2, [pc, #32]	; (800c1f8 <xTaskPriorityDisinherit+0x100>)
 800c1d6:	441a      	add	r2, r3
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	3304      	adds	r3, #4
 800c1dc:	4619      	mov	r1, r3
 800c1de:	4610      	mov	r0, r2
 800c1e0:	f7fe f965 	bl	800a4ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1e8:	697b      	ldr	r3, [r7, #20]
	}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3718      	adds	r7, #24
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	20000974 	.word	0x20000974
 800c1f8:	20000978 	.word	0x20000978
 800c1fc:	20000a7c 	.word	0x20000a7c

0800c200 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c200:	b580      	push	{r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c20e:	2301      	movs	r3, #1
 800c210:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 8081 	beq.w	800c31c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d109      	bne.n	800c236 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	60fb      	str	r3, [r7, #12]
 800c234:	e7fe      	b.n	800c234 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d902      	bls.n	800c246 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	61fb      	str	r3, [r7, #28]
 800c244:	e002      	b.n	800c24c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c24a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c250:	69fa      	ldr	r2, [r7, #28]
 800c252:	429a      	cmp	r2, r3
 800c254:	d062      	beq.n	800c31c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d15d      	bne.n	800c31c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c260:	4b30      	ldr	r3, [pc, #192]	; (800c324 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	69ba      	ldr	r2, [r7, #24]
 800c266:	429a      	cmp	r2, r3
 800c268:	d109      	bne.n	800c27e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	60bb      	str	r3, [r7, #8]
 800c27c:	e7fe      	b.n	800c27c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c282:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	699b      	ldr	r3, [r3, #24]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	db04      	blt.n	800c29c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	f1c3 0207 	rsb	r2, r3, #7
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	6959      	ldr	r1, [r3, #20]
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4413      	add	r3, r2
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	4a1f      	ldr	r2, [pc, #124]	; (800c328 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c2ac:	4413      	add	r3, r2
 800c2ae:	4299      	cmp	r1, r3
 800c2b0:	d134      	bne.n	800c31c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fe f956 	bl	800a568 <uxListRemove>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d115      	bne.n	800c2ee <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c6:	4918      	ldr	r1, [pc, #96]	; (800c328 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	440b      	add	r3, r1
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10a      	bne.n	800c2ee <vTaskPriorityDisinheritAfterTimeout+0xee>
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2dc:	2201      	movs	r2, #1
 800c2de:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e2:	43da      	mvns	r2, r3
 800c2e4:	4b11      	ldr	r3, [pc, #68]	; (800c32c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	4a10      	ldr	r2, [pc, #64]	; (800c32c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	409a      	lsls	r2, r3
 800c2f6:	4b0d      	ldr	r3, [pc, #52]	; (800c32c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	4a0b      	ldr	r2, [pc, #44]	; (800c32c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c304:	4613      	mov	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4a06      	ldr	r2, [pc, #24]	; (800c328 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c30e:	441a      	add	r2, r3
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	3304      	adds	r3, #4
 800c314:	4619      	mov	r1, r3
 800c316:	4610      	mov	r0, r2
 800c318:	f7fe f8c9 	bl	800a4ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c31c:	bf00      	nop
 800c31e:	3720      	adds	r7, #32
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	20000974 	.word	0x20000974
 800c328:	20000978 	.word	0x20000978
 800c32c:	20000a7c 	.word	0x20000a7c

0800c330 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c330:	b480      	push	{r7}
 800c332:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c334:	4b07      	ldr	r3, [pc, #28]	; (800c354 <pvTaskIncrementMutexHeldCount+0x24>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d004      	beq.n	800c346 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c33c:	4b05      	ldr	r3, [pc, #20]	; (800c354 <pvTaskIncrementMutexHeldCount+0x24>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c342:	3201      	adds	r2, #1
 800c344:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c346:	4b03      	ldr	r3, [pc, #12]	; (800c354 <pvTaskIncrementMutexHeldCount+0x24>)
 800c348:	681b      	ldr	r3, [r3, #0]
	}
 800c34a:	4618      	mov	r0, r3
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	20000974 	.word	0x20000974

0800c358 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c362:	4b29      	ldr	r3, [pc, #164]	; (800c408 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c368:	4b28      	ldr	r3, [pc, #160]	; (800c40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3304      	adds	r3, #4
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fe f8fa 	bl	800a568 <uxListRemove>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10b      	bne.n	800c392 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c37a:	4b24      	ldr	r3, [pc, #144]	; (800c40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c380:	2201      	movs	r2, #1
 800c382:	fa02 f303 	lsl.w	r3, r2, r3
 800c386:	43da      	mvns	r2, r3
 800c388:	4b21      	ldr	r3, [pc, #132]	; (800c410 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4013      	ands	r3, r2
 800c38e:	4a20      	ldr	r2, [pc, #128]	; (800c410 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c390:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c398:	d10a      	bne.n	800c3b0 <prvAddCurrentTaskToDelayedList+0x58>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d007      	beq.n	800c3b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3a0:	4b1a      	ldr	r3, [pc, #104]	; (800c40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	481a      	ldr	r0, [pc, #104]	; (800c414 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c3aa:	f7fe f880 	bl	800a4ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3ae:	e026      	b.n	800c3fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3b8:	4b14      	ldr	r3, [pc, #80]	; (800c40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d209      	bcs.n	800c3dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3c8:	4b13      	ldr	r3, [pc, #76]	; (800c418 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	4b0f      	ldr	r3, [pc, #60]	; (800c40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	3304      	adds	r3, #4
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	f7fe f88e 	bl	800a4f6 <vListInsert>
}
 800c3da:	e010      	b.n	800c3fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3dc:	4b0f      	ldr	r3, [pc, #60]	; (800c41c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	f7fe f884 	bl	800a4f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3ee:	4b0c      	ldr	r3, [pc, #48]	; (800c420 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d202      	bcs.n	800c3fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c3f8:	4a09      	ldr	r2, [pc, #36]	; (800c420 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	6013      	str	r3, [r2, #0]
}
 800c3fe:	bf00      	nop
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	20000a78 	.word	0x20000a78
 800c40c:	20000974 	.word	0x20000974
 800c410:	20000a7c 	.word	0x20000a7c
 800c414:	20000a60 	.word	0x20000a60
 800c418:	20000a30 	.word	0x20000a30
 800c41c:	20000a2c 	.word	0x20000a2c
 800c420:	20000a94 	.word	0x20000a94

0800c424 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	3b04      	subs	r3, #4
 800c434:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c43c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	3b04      	subs	r3, #4
 800c442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	f023 0201 	bic.w	r2, r3, #1
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3b04      	subs	r3, #4
 800c452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c454:	4a0c      	ldr	r2, [pc, #48]	; (800c488 <pxPortInitialiseStack+0x64>)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	3b14      	subs	r3, #20
 800c45e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	3b04      	subs	r3, #4
 800c46a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f06f 0202 	mvn.w	r2, #2
 800c472:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	3b20      	subs	r3, #32
 800c478:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c47a:	68fb      	ldr	r3, [r7, #12]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	0800c48d 	.word	0x0800c48d

0800c48c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c492:	2300      	movs	r3, #0
 800c494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c496:	4b11      	ldr	r3, [pc, #68]	; (800c4dc <prvTaskExitError+0x50>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49e:	d009      	beq.n	800c4b4 <prvTaskExitError+0x28>
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	60fb      	str	r3, [r7, #12]
 800c4b2:	e7fe      	b.n	800c4b2 <prvTaskExitError+0x26>
 800c4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4c6:	bf00      	nop
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0fc      	beq.n	800c4c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c4ce:	bf00      	nop
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	200000ac 	.word	0x200000ac

0800c4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4e0:	4b07      	ldr	r3, [pc, #28]	; (800c500 <pxCurrentTCBConst2>)
 800c4e2:	6819      	ldr	r1, [r3, #0]
 800c4e4:	6808      	ldr	r0, [r1, #0]
 800c4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	f380 8809 	msr	PSP, r0
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f04f 0000 	mov.w	r0, #0
 800c4f6:	f380 8811 	msr	BASEPRI, r0
 800c4fa:	4770      	bx	lr
 800c4fc:	f3af 8000 	nop.w

0800c500 <pxCurrentTCBConst2>:
 800c500:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop

0800c508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c508:	4808      	ldr	r0, [pc, #32]	; (800c52c <prvPortStartFirstTask+0x24>)
 800c50a:	6800      	ldr	r0, [r0, #0]
 800c50c:	6800      	ldr	r0, [r0, #0]
 800c50e:	f380 8808 	msr	MSP, r0
 800c512:	f04f 0000 	mov.w	r0, #0
 800c516:	f380 8814 	msr	CONTROL, r0
 800c51a:	b662      	cpsie	i
 800c51c:	b661      	cpsie	f
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	df00      	svc	0
 800c528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c52a:	bf00      	nop
 800c52c:	e000ed08 	.word	0xe000ed08

0800c530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c536:	4b44      	ldr	r3, [pc, #272]	; (800c648 <xPortStartScheduler+0x118>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a44      	ldr	r2, [pc, #272]	; (800c64c <xPortStartScheduler+0x11c>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d109      	bne.n	800c554 <xPortStartScheduler+0x24>
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	613b      	str	r3, [r7, #16]
 800c552:	e7fe      	b.n	800c552 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c554:	4b3c      	ldr	r3, [pc, #240]	; (800c648 <xPortStartScheduler+0x118>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a3d      	ldr	r2, [pc, #244]	; (800c650 <xPortStartScheduler+0x120>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d109      	bne.n	800c572 <xPortStartScheduler+0x42>
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	e7fe      	b.n	800c570 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c572:	4b38      	ldr	r3, [pc, #224]	; (800c654 <xPortStartScheduler+0x124>)
 800c574:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	22ff      	movs	r2, #255	; 0xff
 800c582:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c58c:	78fb      	ldrb	r3, [r7, #3]
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c594:	b2da      	uxtb	r2, r3
 800c596:	4b30      	ldr	r3, [pc, #192]	; (800c658 <xPortStartScheduler+0x128>)
 800c598:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c59a:	4b30      	ldr	r3, [pc, #192]	; (800c65c <xPortStartScheduler+0x12c>)
 800c59c:	2207      	movs	r2, #7
 800c59e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5a0:	e009      	b.n	800c5b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c5a2:	4b2e      	ldr	r3, [pc, #184]	; (800c65c <xPortStartScheduler+0x12c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	4a2c      	ldr	r2, [pc, #176]	; (800c65c <xPortStartScheduler+0x12c>)
 800c5aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5ac:	78fb      	ldrb	r3, [r7, #3]
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	005b      	lsls	r3, r3, #1
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5b6:	78fb      	ldrb	r3, [r7, #3]
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5be:	2b80      	cmp	r3, #128	; 0x80
 800c5c0:	d0ef      	beq.n	800c5a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c5c2:	4b26      	ldr	r3, [pc, #152]	; (800c65c <xPortStartScheduler+0x12c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f1c3 0307 	rsb	r3, r3, #7
 800c5ca:	2b04      	cmp	r3, #4
 800c5cc:	d009      	beq.n	800c5e2 <xPortStartScheduler+0xb2>
 800c5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	60bb      	str	r3, [r7, #8]
 800c5e0:	e7fe      	b.n	800c5e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5e2:	4b1e      	ldr	r3, [pc, #120]	; (800c65c <xPortStartScheduler+0x12c>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	021b      	lsls	r3, r3, #8
 800c5e8:	4a1c      	ldr	r2, [pc, #112]	; (800c65c <xPortStartScheduler+0x12c>)
 800c5ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5ec:	4b1b      	ldr	r3, [pc, #108]	; (800c65c <xPortStartScheduler+0x12c>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5f4:	4a19      	ldr	r2, [pc, #100]	; (800c65c <xPortStartScheduler+0x12c>)
 800c5f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c600:	4b17      	ldr	r3, [pc, #92]	; (800c660 <xPortStartScheduler+0x130>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a16      	ldr	r2, [pc, #88]	; (800c660 <xPortStartScheduler+0x130>)
 800c606:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c60a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c60c:	4b14      	ldr	r3, [pc, #80]	; (800c660 <xPortStartScheduler+0x130>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a13      	ldr	r2, [pc, #76]	; (800c660 <xPortStartScheduler+0x130>)
 800c612:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c616:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c618:	f000 f8d6 	bl	800c7c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c61c:	4b11      	ldr	r3, [pc, #68]	; (800c664 <xPortStartScheduler+0x134>)
 800c61e:	2200      	movs	r2, #0
 800c620:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c622:	f000 f8f5 	bl	800c810 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c626:	4b10      	ldr	r3, [pc, #64]	; (800c668 <xPortStartScheduler+0x138>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a0f      	ldr	r2, [pc, #60]	; (800c668 <xPortStartScheduler+0x138>)
 800c62c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c630:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c632:	f7ff ff69 	bl	800c508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c636:	f7ff fa8d 	bl	800bb54 <vTaskSwitchContext>
	prvTaskExitError();
 800c63a:	f7ff ff27 	bl	800c48c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3718      	adds	r7, #24
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	e000ed00 	.word	0xe000ed00
 800c64c:	410fc271 	.word	0x410fc271
 800c650:	410fc270 	.word	0x410fc270
 800c654:	e000e400 	.word	0xe000e400
 800c658:	20000aa0 	.word	0x20000aa0
 800c65c:	20000aa4 	.word	0x20000aa4
 800c660:	e000ed20 	.word	0xe000ed20
 800c664:	200000ac 	.word	0x200000ac
 800c668:	e000ef34 	.word	0xe000ef34

0800c66c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c684:	4b0e      	ldr	r3, [pc, #56]	; (800c6c0 <vPortEnterCritical+0x54>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	3301      	adds	r3, #1
 800c68a:	4a0d      	ldr	r2, [pc, #52]	; (800c6c0 <vPortEnterCritical+0x54>)
 800c68c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c68e:	4b0c      	ldr	r3, [pc, #48]	; (800c6c0 <vPortEnterCritical+0x54>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b01      	cmp	r3, #1
 800c694:	d10e      	bne.n	800c6b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c696:	4b0b      	ldr	r3, [pc, #44]	; (800c6c4 <vPortEnterCritical+0x58>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d009      	beq.n	800c6b4 <vPortEnterCritical+0x48>
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	603b      	str	r3, [r7, #0]
 800c6b2:	e7fe      	b.n	800c6b2 <vPortEnterCritical+0x46>
	}
}
 800c6b4:	bf00      	nop
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	200000ac 	.word	0x200000ac
 800c6c4:	e000ed04 	.word	0xe000ed04

0800c6c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6ce:	4b11      	ldr	r3, [pc, #68]	; (800c714 <vPortExitCritical+0x4c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d109      	bne.n	800c6ea <vPortExitCritical+0x22>
 800c6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	607b      	str	r3, [r7, #4]
 800c6e8:	e7fe      	b.n	800c6e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c6ea:	4b0a      	ldr	r3, [pc, #40]	; (800c714 <vPortExitCritical+0x4c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	4a08      	ldr	r2, [pc, #32]	; (800c714 <vPortExitCritical+0x4c>)
 800c6f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6f4:	4b07      	ldr	r3, [pc, #28]	; (800c714 <vPortExitCritical+0x4c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d104      	bne.n	800c706 <vPortExitCritical+0x3e>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c706:	bf00      	nop
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	200000ac 	.word	0x200000ac
	...

0800c720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c720:	f3ef 8009 	mrs	r0, PSP
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	4b15      	ldr	r3, [pc, #84]	; (800c780 <pxCurrentTCBConst>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	f01e 0f10 	tst.w	lr, #16
 800c730:	bf08      	it	eq
 800c732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c73a:	6010      	str	r0, [r2, #0]
 800c73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c740:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c744:	f380 8811 	msr	BASEPRI, r0
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f7ff fa00 	bl	800bb54 <vTaskSwitchContext>
 800c754:	f04f 0000 	mov.w	r0, #0
 800c758:	f380 8811 	msr	BASEPRI, r0
 800c75c:	bc09      	pop	{r0, r3}
 800c75e:	6819      	ldr	r1, [r3, #0]
 800c760:	6808      	ldr	r0, [r1, #0]
 800c762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c766:	f01e 0f10 	tst.w	lr, #16
 800c76a:	bf08      	it	eq
 800c76c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c770:	f380 8809 	msr	PSP, r0
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	f3af 8000 	nop.w

0800c780 <pxCurrentTCBConst>:
 800c780:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c784:	bf00      	nop
 800c786:	bf00      	nop

0800c788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7a0:	f7ff f920 	bl	800b9e4 <xTaskIncrementTick>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d003      	beq.n	800c7b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7aa:	4b06      	ldr	r3, [pc, #24]	; (800c7c4 <SysTick_Handler+0x3c>)
 800c7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7bc:	bf00      	nop
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	e000ed04 	.word	0xe000ed04

0800c7c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7cc:	4b0b      	ldr	r3, [pc, #44]	; (800c7fc <vPortSetupTimerInterrupt+0x34>)
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7d2:	4b0b      	ldr	r3, [pc, #44]	; (800c800 <vPortSetupTimerInterrupt+0x38>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7d8:	4b0a      	ldr	r3, [pc, #40]	; (800c804 <vPortSetupTimerInterrupt+0x3c>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a0a      	ldr	r2, [pc, #40]	; (800c808 <vPortSetupTimerInterrupt+0x40>)
 800c7de:	fba2 2303 	umull	r2, r3, r2, r3
 800c7e2:	099b      	lsrs	r3, r3, #6
 800c7e4:	4a09      	ldr	r2, [pc, #36]	; (800c80c <vPortSetupTimerInterrupt+0x44>)
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7ea:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <vPortSetupTimerInterrupt+0x34>)
 800c7ec:	2207      	movs	r2, #7
 800c7ee:	601a      	str	r2, [r3, #0]
}
 800c7f0:	bf00      	nop
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	e000e010 	.word	0xe000e010
 800c800:	e000e018 	.word	0xe000e018
 800c804:	200000a0 	.word	0x200000a0
 800c808:	10624dd3 	.word	0x10624dd3
 800c80c:	e000e014 	.word	0xe000e014

0800c810 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c810:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c820 <vPortEnableVFP+0x10>
 800c814:	6801      	ldr	r1, [r0, #0]
 800c816:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c81a:	6001      	str	r1, [r0, #0]
 800c81c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c81e:	bf00      	nop
 800c820:	e000ed88 	.word	0xe000ed88

0800c824 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c82a:	f3ef 8305 	mrs	r3, IPSR
 800c82e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2b0f      	cmp	r3, #15
 800c834:	d913      	bls.n	800c85e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c836:	4a16      	ldr	r2, [pc, #88]	; (800c890 <vPortValidateInterruptPriority+0x6c>)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4413      	add	r3, r2
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c840:	4b14      	ldr	r3, [pc, #80]	; (800c894 <vPortValidateInterruptPriority+0x70>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	7afa      	ldrb	r2, [r7, #11]
 800c846:	429a      	cmp	r2, r3
 800c848:	d209      	bcs.n	800c85e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84e:	f383 8811 	msr	BASEPRI, r3
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	607b      	str	r3, [r7, #4]
 800c85c:	e7fe      	b.n	800c85c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c85e:	4b0e      	ldr	r3, [pc, #56]	; (800c898 <vPortValidateInterruptPriority+0x74>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c866:	4b0d      	ldr	r3, [pc, #52]	; (800c89c <vPortValidateInterruptPriority+0x78>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d909      	bls.n	800c882 <vPortValidateInterruptPriority+0x5e>
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	603b      	str	r3, [r7, #0]
 800c880:	e7fe      	b.n	800c880 <vPortValidateInterruptPriority+0x5c>
	}
 800c882:	bf00      	nop
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	e000e3f0 	.word	0xe000e3f0
 800c894:	20000aa0 	.word	0x20000aa0
 800c898:	e000ed0c 	.word	0xe000ed0c
 800c89c:	20000aa4 	.word	0x20000aa4

0800c8a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b08a      	sub	sp, #40	; 0x28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8ac:	f7fe ffce 	bl	800b84c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8b0:	4b57      	ldr	r3, [pc, #348]	; (800ca10 <pvPortMalloc+0x170>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d101      	bne.n	800c8bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8b8:	f000 f90c 	bl	800cad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8bc:	4b55      	ldr	r3, [pc, #340]	; (800ca14 <pvPortMalloc+0x174>)
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f040 808c 	bne.w	800c9e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d01c      	beq.n	800c90a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c8d0:	2208      	movs	r2, #8
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f003 0307 	and.w	r3, r3, #7
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d013      	beq.n	800c90a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f023 0307 	bic.w	r3, r3, #7
 800c8e8:	3308      	adds	r3, #8
 800c8ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f003 0307 	and.w	r3, r3, #7
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d009      	beq.n	800c90a <pvPortMalloc+0x6a>
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	617b      	str	r3, [r7, #20]
 800c908:	e7fe      	b.n	800c908 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d068      	beq.n	800c9e2 <pvPortMalloc+0x142>
 800c910:	4b41      	ldr	r3, [pc, #260]	; (800ca18 <pvPortMalloc+0x178>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	429a      	cmp	r2, r3
 800c918:	d863      	bhi.n	800c9e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c91a:	4b40      	ldr	r3, [pc, #256]	; (800ca1c <pvPortMalloc+0x17c>)
 800c91c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c91e:	4b3f      	ldr	r3, [pc, #252]	; (800ca1c <pvPortMalloc+0x17c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c924:	e004      	b.n	800c930 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	429a      	cmp	r2, r3
 800c938:	d903      	bls.n	800c942 <pvPortMalloc+0xa2>
 800c93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1f1      	bne.n	800c926 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c942:	4b33      	ldr	r3, [pc, #204]	; (800ca10 <pvPortMalloc+0x170>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c948:	429a      	cmp	r2, r3
 800c94a:	d04a      	beq.n	800c9e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c94c:	6a3b      	ldr	r3, [r7, #32]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2208      	movs	r2, #8
 800c952:	4413      	add	r3, r2
 800c954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	6a3b      	ldr	r3, [r7, #32]
 800c95c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	1ad2      	subs	r2, r2, r3
 800c966:	2308      	movs	r3, #8
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d91e      	bls.n	800c9ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4413      	add	r3, r2
 800c974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	f003 0307 	and.w	r3, r3, #7
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d009      	beq.n	800c994 <pvPortMalloc+0xf4>
 800c980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c984:	f383 8811 	msr	BASEPRI, r3
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	613b      	str	r3, [r7, #16]
 800c992:	e7fe      	b.n	800c992 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	685a      	ldr	r2, [r3, #4]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	1ad2      	subs	r2, r2, r3
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9a6:	69b8      	ldr	r0, [r7, #24]
 800c9a8:	f000 f8f6 	bl	800cb98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9ac:	4b1a      	ldr	r3, [pc, #104]	; (800ca18 <pvPortMalloc+0x178>)
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	4a18      	ldr	r2, [pc, #96]	; (800ca18 <pvPortMalloc+0x178>)
 800c9b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9ba:	4b17      	ldr	r3, [pc, #92]	; (800ca18 <pvPortMalloc+0x178>)
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	4b18      	ldr	r3, [pc, #96]	; (800ca20 <pvPortMalloc+0x180>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d203      	bcs.n	800c9ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9c6:	4b14      	ldr	r3, [pc, #80]	; (800ca18 <pvPortMalloc+0x178>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a15      	ldr	r2, [pc, #84]	; (800ca20 <pvPortMalloc+0x180>)
 800c9cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	4b10      	ldr	r3, [pc, #64]	; (800ca14 <pvPortMalloc+0x174>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	431a      	orrs	r2, r3
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	2200      	movs	r2, #0
 800c9e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9e2:	f7fe ff41 	bl	800b868 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	f003 0307 	and.w	r3, r3, #7
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d009      	beq.n	800ca04 <pvPortMalloc+0x164>
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	e7fe      	b.n	800ca02 <pvPortMalloc+0x162>
	return pvReturn;
 800ca04:	69fb      	ldr	r3, [r7, #28]
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3728      	adds	r7, #40	; 0x28
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	200046b0 	.word	0x200046b0
 800ca14:	200046bc 	.word	0x200046bc
 800ca18:	200046b4 	.word	0x200046b4
 800ca1c:	200046a8 	.word	0x200046a8
 800ca20:	200046b8 	.word	0x200046b8

0800ca24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d046      	beq.n	800cac4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca36:	2308      	movs	r3, #8
 800ca38:	425b      	negs	r3, r3
 800ca3a:	697a      	ldr	r2, [r7, #20]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	4b20      	ldr	r3, [pc, #128]	; (800cacc <vPortFree+0xa8>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4013      	ands	r3, r2
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d109      	bne.n	800ca66 <vPortFree+0x42>
 800ca52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca56:	f383 8811 	msr	BASEPRI, r3
 800ca5a:	f3bf 8f6f 	isb	sy
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	e7fe      	b.n	800ca64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d009      	beq.n	800ca82 <vPortFree+0x5e>
 800ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	60bb      	str	r3, [r7, #8]
 800ca80:	e7fe      	b.n	800ca80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	685a      	ldr	r2, [r3, #4]
 800ca86:	4b11      	ldr	r3, [pc, #68]	; (800cacc <vPortFree+0xa8>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d019      	beq.n	800cac4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d115      	bne.n	800cac4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	4b0b      	ldr	r3, [pc, #44]	; (800cacc <vPortFree+0xa8>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	43db      	mvns	r3, r3
 800caa2:	401a      	ands	r2, r3
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800caa8:	f7fe fed0 	bl	800b84c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	685a      	ldr	r2, [r3, #4]
 800cab0:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <vPortFree+0xac>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4413      	add	r3, r2
 800cab6:	4a06      	ldr	r2, [pc, #24]	; (800cad0 <vPortFree+0xac>)
 800cab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caba:	6938      	ldr	r0, [r7, #16]
 800cabc:	f000 f86c 	bl	800cb98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cac0:	f7fe fed2 	bl	800b868 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cac4:	bf00      	nop
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	200046bc 	.word	0x200046bc
 800cad0:	200046b4 	.word	0x200046b4

0800cad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cada:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cae0:	4b27      	ldr	r3, [pc, #156]	; (800cb80 <prvHeapInit+0xac>)
 800cae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f003 0307 	and.w	r3, r3, #7
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00c      	beq.n	800cb08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3307      	adds	r3, #7
 800caf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f023 0307 	bic.w	r3, r3, #7
 800cafa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	1ad3      	subs	r3, r2, r3
 800cb02:	4a1f      	ldr	r2, [pc, #124]	; (800cb80 <prvHeapInit+0xac>)
 800cb04:	4413      	add	r3, r2
 800cb06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb0c:	4a1d      	ldr	r2, [pc, #116]	; (800cb84 <prvHeapInit+0xb0>)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb12:	4b1c      	ldr	r3, [pc, #112]	; (800cb84 <prvHeapInit+0xb0>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb20:	2208      	movs	r2, #8
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	1a9b      	subs	r3, r3, r2
 800cb26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f023 0307 	bic.w	r3, r3, #7
 800cb2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	4a15      	ldr	r2, [pc, #84]	; (800cb88 <prvHeapInit+0xb4>)
 800cb34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb36:	4b14      	ldr	r3, [pc, #80]	; (800cb88 <prvHeapInit+0xb4>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb3e:	4b12      	ldr	r3, [pc, #72]	; (800cb88 <prvHeapInit+0xb4>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	1ad2      	subs	r2, r2, r3
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb54:	4b0c      	ldr	r3, [pc, #48]	; (800cb88 <prvHeapInit+0xb4>)
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	4a0a      	ldr	r2, [pc, #40]	; (800cb8c <prvHeapInit+0xb8>)
 800cb62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	4a09      	ldr	r2, [pc, #36]	; (800cb90 <prvHeapInit+0xbc>)
 800cb6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb6c:	4b09      	ldr	r3, [pc, #36]	; (800cb94 <prvHeapInit+0xc0>)
 800cb6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb72:	601a      	str	r2, [r3, #0]
}
 800cb74:	bf00      	nop
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	20000aa8 	.word	0x20000aa8
 800cb84:	200046a8 	.word	0x200046a8
 800cb88:	200046b0 	.word	0x200046b0
 800cb8c:	200046b8 	.word	0x200046b8
 800cb90:	200046b4 	.word	0x200046b4
 800cb94:	200046bc 	.word	0x200046bc

0800cb98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cba0:	4b28      	ldr	r3, [pc, #160]	; (800cc44 <prvInsertBlockIntoFreeList+0xac>)
 800cba2:	60fb      	str	r3, [r7, #12]
 800cba4:	e002      	b.n	800cbac <prvInsertBlockIntoFreeList+0x14>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	60fb      	str	r3, [r7, #12]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d8f7      	bhi.n	800cba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d108      	bne.n	800cbda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	441a      	add	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	68ba      	ldr	r2, [r7, #8]
 800cbe4:	441a      	add	r2, r3
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d118      	bne.n	800cc20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	4b15      	ldr	r3, [pc, #84]	; (800cc48 <prvInsertBlockIntoFreeList+0xb0>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d00d      	beq.n	800cc16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685a      	ldr	r2, [r3, #4]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	441a      	add	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	e008      	b.n	800cc28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc16:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <prvInsertBlockIntoFreeList+0xb0>)
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	e003      	b.n	800cc28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d002      	beq.n	800cc36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc36:	bf00      	nop
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	200046a8 	.word	0x200046a8
 800cc48:	200046b0 	.word	0x200046b0

0800cc4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cc56:	f007 fa11 	bl	801407c <sys_timeouts_sleeptime>
 800cc5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc62:	d10b      	bne.n	800cc7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cc64:	4813      	ldr	r0, [pc, #76]	; (800ccb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800cc66:	f00c f8f2 	bl	8018e4e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	6839      	ldr	r1, [r7, #0]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f00c f864 	bl	8018d3c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cc74:	480f      	ldr	r0, [pc, #60]	; (800ccb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800cc76:	f00c f8db 	bl	8018e30 <sys_mutex_lock>
    return;
 800cc7a:	e018      	b.n	800ccae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d102      	bne.n	800cc88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cc82:	f007 f9c1 	bl	8014008 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cc86:	e7e6      	b.n	800cc56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cc88:	480a      	ldr	r0, [pc, #40]	; (800ccb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800cc8a:	f00c f8e0 	bl	8018e4e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	6839      	ldr	r1, [r7, #0]
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f00c f852 	bl	8018d3c <sys_arch_mbox_fetch>
 800cc98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cc9a:	4806      	ldr	r0, [pc, #24]	; (800ccb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800cc9c:	f00c f8c8 	bl	8018e30 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca6:	d102      	bne.n	800ccae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cca8:	f007 f9ae 	bl	8014008 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ccac:	e7d3      	b.n	800cc56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	20007d88 	.word	0x20007d88

0800ccb8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ccc0:	4810      	ldr	r0, [pc, #64]	; (800cd04 <tcpip_thread+0x4c>)
 800ccc2:	f00c f8b5 	bl	8018e30 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ccc6:	4b10      	ldr	r3, [pc, #64]	; (800cd08 <tcpip_thread+0x50>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d005      	beq.n	800ccda <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ccce:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <tcpip_thread+0x50>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a0e      	ldr	r2, [pc, #56]	; (800cd0c <tcpip_thread+0x54>)
 800ccd4:	6812      	ldr	r2, [r2, #0]
 800ccd6:	4610      	mov	r0, r2
 800ccd8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ccda:	f107 030c 	add.w	r3, r7, #12
 800ccde:	4619      	mov	r1, r3
 800cce0:	480b      	ldr	r0, [pc, #44]	; (800cd10 <tcpip_thread+0x58>)
 800cce2:	f7ff ffb3 	bl	800cc4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d106      	bne.n	800ccfa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ccec:	4b09      	ldr	r3, [pc, #36]	; (800cd14 <tcpip_thread+0x5c>)
 800ccee:	2291      	movs	r2, #145	; 0x91
 800ccf0:	4909      	ldr	r1, [pc, #36]	; (800cd18 <tcpip_thread+0x60>)
 800ccf2:	480a      	ldr	r0, [pc, #40]	; (800cd1c <tcpip_thread+0x64>)
 800ccf4:	f00c fe82 	bl	80199fc <iprintf>
      continue;
 800ccf8:	e003      	b.n	800cd02 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 f80f 	bl	800cd20 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cd02:	e7ea      	b.n	800ccda <tcpip_thread+0x22>
 800cd04:	20007d88 	.word	0x20007d88
 800cd08:	200046c0 	.word	0x200046c0
 800cd0c:	200046c4 	.word	0x200046c4
 800cd10:	200046c8 	.word	0x200046c8
 800cd14:	0801d374 	.word	0x0801d374
 800cd18:	0801d3a4 	.word	0x0801d3a4
 800cd1c:	0801d3c4 	.word	0x0801d3c4

0800cd20 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d018      	beq.n	800cd62 <tcpip_thread_handle_msg+0x42>
 800cd30:	2b02      	cmp	r3, #2
 800cd32:	d021      	beq.n	800cd78 <tcpip_thread_handle_msg+0x58>
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d126      	bne.n	800cd86 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	6850      	ldr	r0, [r2, #4]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	6892      	ldr	r2, [r2, #8]
 800cd44:	4611      	mov	r1, r2
 800cd46:	4798      	blx	r3
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d004      	beq.n	800cd58 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	4618      	mov	r0, r3
 800cd54:	f001 fc4e 	bl	800e5f4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cd58:	6879      	ldr	r1, [r7, #4]
 800cd5a:	2009      	movs	r0, #9
 800cd5c:	f000 fe1c 	bl	800d998 <memp_free>
      break;
 800cd60:	e018      	b.n	800cd94 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	6892      	ldr	r2, [r2, #8]
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cd6e:	6879      	ldr	r1, [r7, #4]
 800cd70:	2008      	movs	r0, #8
 800cd72:	f000 fe11 	bl	800d998 <memp_free>
      break;
 800cd76:	e00d      	b.n	800cd94 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	6892      	ldr	r2, [r2, #8]
 800cd80:	4610      	mov	r0, r2
 800cd82:	4798      	blx	r3
      break;
 800cd84:	e006      	b.n	800cd94 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cd86:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <tcpip_thread_handle_msg+0x7c>)
 800cd88:	22cf      	movs	r2, #207	; 0xcf
 800cd8a:	4905      	ldr	r1, [pc, #20]	; (800cda0 <tcpip_thread_handle_msg+0x80>)
 800cd8c:	4805      	ldr	r0, [pc, #20]	; (800cda4 <tcpip_thread_handle_msg+0x84>)
 800cd8e:	f00c fe35 	bl	80199fc <iprintf>
      break;
 800cd92:	bf00      	nop
  }
}
 800cd94:	bf00      	nop
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	0801d374 	.word	0x0801d374
 800cda0:	0801d3a4 	.word	0x0801d3a4
 800cda4:	0801d3c4 	.word	0x0801d3c4

0800cda8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cdb4:	481a      	ldr	r0, [pc, #104]	; (800ce20 <tcpip_inpkt+0x78>)
 800cdb6:	f00c f800 	bl	8018dba <sys_mbox_valid>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d105      	bne.n	800cdcc <tcpip_inpkt+0x24>
 800cdc0:	4b18      	ldr	r3, [pc, #96]	; (800ce24 <tcpip_inpkt+0x7c>)
 800cdc2:	22fc      	movs	r2, #252	; 0xfc
 800cdc4:	4918      	ldr	r1, [pc, #96]	; (800ce28 <tcpip_inpkt+0x80>)
 800cdc6:	4819      	ldr	r0, [pc, #100]	; (800ce2c <tcpip_inpkt+0x84>)
 800cdc8:	f00c fe18 	bl	80199fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cdcc:	2009      	movs	r0, #9
 800cdce:	f000 fd91 	bl	800d8f4 <memp_malloc>
 800cdd2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d102      	bne.n	800cde0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cdda:	f04f 33ff 	mov.w	r3, #4294967295
 800cdde:	e01a      	b.n	800ce16 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	2200      	movs	r2, #0
 800cde4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cdf8:	6979      	ldr	r1, [r7, #20]
 800cdfa:	4809      	ldr	r0, [pc, #36]	; (800ce20 <tcpip_inpkt+0x78>)
 800cdfc:	f00b ff84 	bl	8018d08 <sys_mbox_trypost>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d006      	beq.n	800ce14 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ce06:	6979      	ldr	r1, [r7, #20]
 800ce08:	2009      	movs	r0, #9
 800ce0a:	f000 fdc5 	bl	800d998 <memp_free>
    return ERR_MEM;
 800ce0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce12:	e000      	b.n	800ce16 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ce14:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3718      	adds	r7, #24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	200046c8 	.word	0x200046c8
 800ce24:	0801d374 	.word	0x0801d374
 800ce28:	0801d3ec 	.word	0x0801d3ec
 800ce2c:	0801d3c4 	.word	0x0801d3c4

0800ce30 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce40:	f003 0318 	and.w	r3, r3, #24
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d006      	beq.n	800ce56 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ce48:	4a08      	ldr	r2, [pc, #32]	; (800ce6c <tcpip_input+0x3c>)
 800ce4a:	6839      	ldr	r1, [r7, #0]
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7ff ffab 	bl	800cda8 <tcpip_inpkt>
 800ce52:	4603      	mov	r3, r0
 800ce54:	e005      	b.n	800ce62 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ce56:	4a06      	ldr	r2, [pc, #24]	; (800ce70 <tcpip_input+0x40>)
 800ce58:	6839      	ldr	r1, [r7, #0]
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7ff ffa4 	bl	800cda8 <tcpip_inpkt>
 800ce60:	4603      	mov	r3, r0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	08018b19 	.word	0x08018b19
 800ce70:	080179fd 	.word	0x080179fd

0800ce74 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ce7e:	4819      	ldr	r0, [pc, #100]	; (800cee4 <tcpip_try_callback+0x70>)
 800ce80:	f00b ff9b 	bl	8018dba <sys_mbox_valid>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d106      	bne.n	800ce98 <tcpip_try_callback+0x24>
 800ce8a:	4b17      	ldr	r3, [pc, #92]	; (800cee8 <tcpip_try_callback+0x74>)
 800ce8c:	f240 125d 	movw	r2, #349	; 0x15d
 800ce90:	4916      	ldr	r1, [pc, #88]	; (800ceec <tcpip_try_callback+0x78>)
 800ce92:	4817      	ldr	r0, [pc, #92]	; (800cef0 <tcpip_try_callback+0x7c>)
 800ce94:	f00c fdb2 	bl	80199fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ce98:	2008      	movs	r0, #8
 800ce9a:	f000 fd2b 	bl	800d8f4 <memp_malloc>
 800ce9e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d102      	bne.n	800ceac <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cea6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceaa:	e017      	b.n	800cedc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cebe:	68f9      	ldr	r1, [r7, #12]
 800cec0:	4808      	ldr	r0, [pc, #32]	; (800cee4 <tcpip_try_callback+0x70>)
 800cec2:	f00b ff21 	bl	8018d08 <sys_mbox_trypost>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d006      	beq.n	800ceda <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cecc:	68f9      	ldr	r1, [r7, #12]
 800cece:	2008      	movs	r0, #8
 800ced0:	f000 fd62 	bl	800d998 <memp_free>
    return ERR_MEM;
 800ced4:	f04f 33ff 	mov.w	r3, #4294967295
 800ced8:	e000      	b.n	800cedc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	200046c8 	.word	0x200046c8
 800cee8:	0801d374 	.word	0x0801d374
 800ceec:	0801d3ec 	.word	0x0801d3ec
 800cef0:	0801d3c4 	.word	0x0801d3c4

0800cef4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af02      	add	r7, sp, #8
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cefe:	f000 f871 	bl	800cfe4 <lwip_init>

  tcpip_init_done = initfunc;
 800cf02:	4a17      	ldr	r2, [pc, #92]	; (800cf60 <tcpip_init+0x6c>)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cf08:	4a16      	ldr	r2, [pc, #88]	; (800cf64 <tcpip_init+0x70>)
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cf0e:	2106      	movs	r1, #6
 800cf10:	4815      	ldr	r0, [pc, #84]	; (800cf68 <tcpip_init+0x74>)
 800cf12:	f00b fed7 	bl	8018cc4 <sys_mbox_new>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d006      	beq.n	800cf2a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cf1c:	4b13      	ldr	r3, [pc, #76]	; (800cf6c <tcpip_init+0x78>)
 800cf1e:	f240 2261 	movw	r2, #609	; 0x261
 800cf22:	4913      	ldr	r1, [pc, #76]	; (800cf70 <tcpip_init+0x7c>)
 800cf24:	4813      	ldr	r0, [pc, #76]	; (800cf74 <tcpip_init+0x80>)
 800cf26:	f00c fd69 	bl	80199fc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cf2a:	4813      	ldr	r0, [pc, #76]	; (800cf78 <tcpip_init+0x84>)
 800cf2c:	f00b ff64 	bl	8018df8 <sys_mutex_new>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d006      	beq.n	800cf44 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cf36:	4b0d      	ldr	r3, [pc, #52]	; (800cf6c <tcpip_init+0x78>)
 800cf38:	f240 2265 	movw	r2, #613	; 0x265
 800cf3c:	490f      	ldr	r1, [pc, #60]	; (800cf7c <tcpip_init+0x88>)
 800cf3e:	480d      	ldr	r0, [pc, #52]	; (800cf74 <tcpip_init+0x80>)
 800cf40:	f00c fd5c 	bl	80199fc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cf44:	2300      	movs	r3, #0
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	490c      	ldr	r1, [pc, #48]	; (800cf80 <tcpip_init+0x8c>)
 800cf50:	480c      	ldr	r0, [pc, #48]	; (800cf84 <tcpip_init+0x90>)
 800cf52:	f00b ff89 	bl	8018e68 <sys_thread_new>
}
 800cf56:	bf00      	nop
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	200046c0 	.word	0x200046c0
 800cf64:	200046c4 	.word	0x200046c4
 800cf68:	200046c8 	.word	0x200046c8
 800cf6c:	0801d374 	.word	0x0801d374
 800cf70:	0801d3fc 	.word	0x0801d3fc
 800cf74:	0801d3c4 	.word	0x0801d3c4
 800cf78:	20007d88 	.word	0x20007d88
 800cf7c:	0801d420 	.word	0x0801d420
 800cf80:	0800ccb9 	.word	0x0800ccb9
 800cf84:	0801d444 	.word	0x0801d444

0800cf88 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	4603      	mov	r3, r0
 800cf90:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cf92:	88fb      	ldrh	r3, [r7, #6]
 800cf94:	021b      	lsls	r3, r3, #8
 800cf96:	b21a      	sxth	r2, r3
 800cf98:	88fb      	ldrh	r3, [r7, #6]
 800cf9a:	0a1b      	lsrs	r3, r3, #8
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	b21b      	sxth	r3, r3
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	b21b      	sxth	r3, r3
 800cfa4:	b29b      	uxth	r3, r3
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	370c      	adds	r7, #12
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b083      	sub	sp, #12
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	061a      	lsls	r2, r3, #24
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	021b      	lsls	r3, r3, #8
 800cfc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cfc6:	431a      	orrs	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	0a1b      	lsrs	r3, r3, #8
 800cfcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cfd0:	431a      	orrs	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	0e1b      	lsrs	r3, r3, #24
 800cfd6:	4313      	orrs	r3, r2
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cfee:	f00b fef5 	bl	8018ddc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cff2:	f000 f8d5 	bl	800d1a0 <mem_init>
  memp_init();
 800cff6:	f000 fc31 	bl	800d85c <memp_init>
  pbuf_init();
  netif_init();
 800cffa:	f000 fcf7 	bl	800d9ec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cffe:	f007 f875 	bl	80140ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d002:	f001 fda1 	bl	800eb48 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d006:	f006 ffb9 	bl	8013f7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d00a:	bf00      	nop
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d01e:	4b05      	ldr	r3, [pc, #20]	; (800d034 <ptr_to_mem+0x20>)
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	88fb      	ldrh	r3, [r7, #6]
 800d024:	4413      	add	r3, r2
}
 800d026:	4618      	mov	r0, r3
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	200046cc 	.word	0x200046cc

0800d038 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a05      	ldr	r2, [pc, #20]	; (800d058 <mem_to_ptr+0x20>)
 800d044:	6812      	ldr	r2, [r2, #0]
 800d046:	1a9b      	subs	r3, r3, r2
 800d048:	b29b      	uxth	r3, r3
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	200046cc 	.word	0x200046cc

0800d05c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d05c:	b590      	push	{r4, r7, lr}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d064:	4b45      	ldr	r3, [pc, #276]	; (800d17c <plug_holes+0x120>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d206      	bcs.n	800d07c <plug_holes+0x20>
 800d06e:	4b44      	ldr	r3, [pc, #272]	; (800d180 <plug_holes+0x124>)
 800d070:	f240 12df 	movw	r2, #479	; 0x1df
 800d074:	4943      	ldr	r1, [pc, #268]	; (800d184 <plug_holes+0x128>)
 800d076:	4844      	ldr	r0, [pc, #272]	; (800d188 <plug_holes+0x12c>)
 800d078:	f00c fcc0 	bl	80199fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d07c:	4b43      	ldr	r3, [pc, #268]	; (800d18c <plug_holes+0x130>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	429a      	cmp	r2, r3
 800d084:	d306      	bcc.n	800d094 <plug_holes+0x38>
 800d086:	4b3e      	ldr	r3, [pc, #248]	; (800d180 <plug_holes+0x124>)
 800d088:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d08c:	4940      	ldr	r1, [pc, #256]	; (800d190 <plug_holes+0x134>)
 800d08e:	483e      	ldr	r0, [pc, #248]	; (800d188 <plug_holes+0x12c>)
 800d090:	f00c fcb4 	bl	80199fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	791b      	ldrb	r3, [r3, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d006      	beq.n	800d0aa <plug_holes+0x4e>
 800d09c:	4b38      	ldr	r3, [pc, #224]	; (800d180 <plug_holes+0x124>)
 800d09e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d0a2:	493c      	ldr	r1, [pc, #240]	; (800d194 <plug_holes+0x138>)
 800d0a4:	4838      	ldr	r0, [pc, #224]	; (800d188 <plug_holes+0x12c>)
 800d0a6:	f00c fca9 	bl	80199fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	881b      	ldrh	r3, [r3, #0]
 800d0ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d0b2:	d906      	bls.n	800d0c2 <plug_holes+0x66>
 800d0b4:	4b32      	ldr	r3, [pc, #200]	; (800d180 <plug_holes+0x124>)
 800d0b6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d0ba:	4937      	ldr	r1, [pc, #220]	; (800d198 <plug_holes+0x13c>)
 800d0bc:	4832      	ldr	r0, [pc, #200]	; (800d188 <plug_holes+0x12c>)
 800d0be:	f00c fc9d 	bl	80199fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	881b      	ldrh	r3, [r3, #0]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7ff ffa4 	bl	800d014 <ptr_to_mem>
 800d0cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d024      	beq.n	800d120 <plug_holes+0xc4>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	791b      	ldrb	r3, [r3, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d120      	bne.n	800d120 <plug_holes+0xc4>
 800d0de:	4b2b      	ldr	r3, [pc, #172]	; (800d18c <plug_holes+0x130>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d01b      	beq.n	800d120 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d0e8:	4b2c      	ldr	r3, [pc, #176]	; (800d19c <plug_holes+0x140>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d102      	bne.n	800d0f8 <plug_holes+0x9c>
      lfree = mem;
 800d0f2:	4a2a      	ldr	r2, [pc, #168]	; (800d19c <plug_holes+0x140>)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	881a      	ldrh	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	881b      	ldrh	r3, [r3, #0]
 800d104:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d108:	d00a      	beq.n	800d120 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	881b      	ldrh	r3, [r3, #0]
 800d10e:	4618      	mov	r0, r3
 800d110:	f7ff ff80 	bl	800d014 <ptr_to_mem>
 800d114:	4604      	mov	r4, r0
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7ff ff8e 	bl	800d038 <mem_to_ptr>
 800d11c:	4603      	mov	r3, r0
 800d11e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	885b      	ldrh	r3, [r3, #2]
 800d124:	4618      	mov	r0, r3
 800d126:	f7ff ff75 	bl	800d014 <ptr_to_mem>
 800d12a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	429a      	cmp	r2, r3
 800d132:	d01f      	beq.n	800d174 <plug_holes+0x118>
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	791b      	ldrb	r3, [r3, #4]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d11b      	bne.n	800d174 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d13c:	4b17      	ldr	r3, [pc, #92]	; (800d19c <plug_holes+0x140>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	429a      	cmp	r2, r3
 800d144:	d102      	bne.n	800d14c <plug_holes+0xf0>
      lfree = pmem;
 800d146:	4a15      	ldr	r2, [pc, #84]	; (800d19c <plug_holes+0x140>)
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	881a      	ldrh	r2, [r3, #0]
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	881b      	ldrh	r3, [r3, #0]
 800d158:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d15c:	d00a      	beq.n	800d174 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	4618      	mov	r0, r3
 800d164:	f7ff ff56 	bl	800d014 <ptr_to_mem>
 800d168:	4604      	mov	r4, r0
 800d16a:	68b8      	ldr	r0, [r7, #8]
 800d16c:	f7ff ff64 	bl	800d038 <mem_to_ptr>
 800d170:	4603      	mov	r3, r0
 800d172:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d174:	bf00      	nop
 800d176:	3714      	adds	r7, #20
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd90      	pop	{r4, r7, pc}
 800d17c:	200046cc 	.word	0x200046cc
 800d180:	0801d454 	.word	0x0801d454
 800d184:	0801d484 	.word	0x0801d484
 800d188:	0801d49c 	.word	0x0801d49c
 800d18c:	200046d0 	.word	0x200046d0
 800d190:	0801d4c4 	.word	0x0801d4c4
 800d194:	0801d4e0 	.word	0x0801d4e0
 800d198:	0801d4fc 	.word	0x0801d4fc
 800d19c:	200046d8 	.word	0x200046d8

0800d1a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d1a6:	4b1f      	ldr	r3, [pc, #124]	; (800d224 <mem_init+0x84>)
 800d1a8:	3303      	adds	r3, #3
 800d1aa:	f023 0303 	bic.w	r3, r3, #3
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	4b1d      	ldr	r3, [pc, #116]	; (800d228 <mem_init+0x88>)
 800d1b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d1b4:	4b1c      	ldr	r3, [pc, #112]	; (800d228 <mem_init+0x88>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d1c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d1ce:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d1d2:	f7ff ff1f 	bl	800d014 <ptr_to_mem>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	4b14      	ldr	r3, [pc, #80]	; (800d22c <mem_init+0x8c>)
 800d1da:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800d1dc:	4b13      	ldr	r3, [pc, #76]	; (800d22c <mem_init+0x8c>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d1e4:	4b11      	ldr	r3, [pc, #68]	; (800d22c <mem_init+0x8c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d1ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d1ee:	4b0f      	ldr	r3, [pc, #60]	; (800d22c <mem_init+0x8c>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d1f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d1f8:	4b0b      	ldr	r3, [pc, #44]	; (800d228 <mem_init+0x88>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a0c      	ldr	r2, [pc, #48]	; (800d230 <mem_init+0x90>)
 800d1fe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d200:	480c      	ldr	r0, [pc, #48]	; (800d234 <mem_init+0x94>)
 800d202:	f00b fdf9 	bl	8018df8 <sys_mutex_new>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d006      	beq.n	800d21a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d20c:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <mem_init+0x98>)
 800d20e:	f240 221f 	movw	r2, #543	; 0x21f
 800d212:	490a      	ldr	r1, [pc, #40]	; (800d23c <mem_init+0x9c>)
 800d214:	480a      	ldr	r0, [pc, #40]	; (800d240 <mem_init+0xa0>)
 800d216:	f00c fbf1 	bl	80199fc <iprintf>
  }
}
 800d21a:	bf00      	nop
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	20007da4 	.word	0x20007da4
 800d228:	200046cc 	.word	0x200046cc
 800d22c:	200046d0 	.word	0x200046d0
 800d230:	200046d8 	.word	0x200046d8
 800d234:	200046d4 	.word	0x200046d4
 800d238:	0801d454 	.word	0x0801d454
 800d23c:	0801d528 	.word	0x0801d528
 800d240:	0801d49c 	.word	0x0801d49c

0800d244 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b086      	sub	sp, #24
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7ff fef3 	bl	800d038 <mem_to_ptr>
 800d252:	4603      	mov	r3, r0
 800d254:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7ff feda 	bl	800d014 <ptr_to_mem>
 800d260:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	885b      	ldrh	r3, [r3, #2]
 800d266:	4618      	mov	r0, r3
 800d268:	f7ff fed4 	bl	800d014 <ptr_to_mem>
 800d26c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d276:	d818      	bhi.n	800d2aa <mem_link_valid+0x66>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	885b      	ldrh	r3, [r3, #2]
 800d27c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d280:	d813      	bhi.n	800d2aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d286:	8afa      	ldrh	r2, [r7, #22]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d004      	beq.n	800d296 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	881b      	ldrh	r3, [r3, #0]
 800d290:	8afa      	ldrh	r2, [r7, #22]
 800d292:	429a      	cmp	r2, r3
 800d294:	d109      	bne.n	800d2aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d296:	4b08      	ldr	r3, [pc, #32]	; (800d2b8 <mem_link_valid+0x74>)
 800d298:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d006      	beq.n	800d2ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	885b      	ldrh	r3, [r3, #2]
 800d2a4:	8afa      	ldrh	r2, [r7, #22]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d001      	beq.n	800d2ae <mem_link_valid+0x6a>
    return 0;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	e000      	b.n	800d2b0 <mem_link_valid+0x6c>
  }
  return 1;
 800d2ae:	2301      	movs	r3, #1
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3718      	adds	r7, #24
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	200046d0 	.word	0x200046d0

0800d2bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b088      	sub	sp, #32
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d070      	beq.n	800d3ac <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f003 0303 	and.w	r3, r3, #3
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00d      	beq.n	800d2f0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d2d4:	4b37      	ldr	r3, [pc, #220]	; (800d3b4 <mem_free+0xf8>)
 800d2d6:	f240 2273 	movw	r2, #627	; 0x273
 800d2da:	4937      	ldr	r1, [pc, #220]	; (800d3b8 <mem_free+0xfc>)
 800d2dc:	4837      	ldr	r0, [pc, #220]	; (800d3bc <mem_free+0x100>)
 800d2de:	f00c fb8d 	bl	80199fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d2e2:	f00b fde7 	bl	8018eb4 <sys_arch_protect>
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f00b fdf1 	bl	8018ed0 <sys_arch_unprotect>
    return;
 800d2ee:	e05e      	b.n	800d3ae <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3b08      	subs	r3, #8
 800d2f4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d2f6:	4b32      	ldr	r3, [pc, #200]	; (800d3c0 <mem_free+0x104>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	69fa      	ldr	r2, [r7, #28]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d306      	bcc.n	800d30e <mem_free+0x52>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f103 020c 	add.w	r2, r3, #12
 800d306:	4b2f      	ldr	r3, [pc, #188]	; (800d3c4 <mem_free+0x108>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d90d      	bls.n	800d32a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d30e:	4b29      	ldr	r3, [pc, #164]	; (800d3b4 <mem_free+0xf8>)
 800d310:	f240 227f 	movw	r2, #639	; 0x27f
 800d314:	492c      	ldr	r1, [pc, #176]	; (800d3c8 <mem_free+0x10c>)
 800d316:	4829      	ldr	r0, [pc, #164]	; (800d3bc <mem_free+0x100>)
 800d318:	f00c fb70 	bl	80199fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d31c:	f00b fdca 	bl	8018eb4 <sys_arch_protect>
 800d320:	6138      	str	r0, [r7, #16]
 800d322:	6938      	ldr	r0, [r7, #16]
 800d324:	f00b fdd4 	bl	8018ed0 <sys_arch_unprotect>
    return;
 800d328:	e041      	b.n	800d3ae <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d32a:	4828      	ldr	r0, [pc, #160]	; (800d3cc <mem_free+0x110>)
 800d32c:	f00b fd80 	bl	8018e30 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	791b      	ldrb	r3, [r3, #4]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d110      	bne.n	800d35a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d338:	4b1e      	ldr	r3, [pc, #120]	; (800d3b4 <mem_free+0xf8>)
 800d33a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d33e:	4924      	ldr	r1, [pc, #144]	; (800d3d0 <mem_free+0x114>)
 800d340:	481e      	ldr	r0, [pc, #120]	; (800d3bc <mem_free+0x100>)
 800d342:	f00c fb5b 	bl	80199fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d346:	4821      	ldr	r0, [pc, #132]	; (800d3cc <mem_free+0x110>)
 800d348:	f00b fd81 	bl	8018e4e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d34c:	f00b fdb2 	bl	8018eb4 <sys_arch_protect>
 800d350:	6178      	str	r0, [r7, #20]
 800d352:	6978      	ldr	r0, [r7, #20]
 800d354:	f00b fdbc 	bl	8018ed0 <sys_arch_unprotect>
    return;
 800d358:	e029      	b.n	800d3ae <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d35a:	69f8      	ldr	r0, [r7, #28]
 800d35c:	f7ff ff72 	bl	800d244 <mem_link_valid>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d110      	bne.n	800d388 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d366:	4b13      	ldr	r3, [pc, #76]	; (800d3b4 <mem_free+0xf8>)
 800d368:	f240 2295 	movw	r2, #661	; 0x295
 800d36c:	4919      	ldr	r1, [pc, #100]	; (800d3d4 <mem_free+0x118>)
 800d36e:	4813      	ldr	r0, [pc, #76]	; (800d3bc <mem_free+0x100>)
 800d370:	f00c fb44 	bl	80199fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d374:	4815      	ldr	r0, [pc, #84]	; (800d3cc <mem_free+0x110>)
 800d376:	f00b fd6a 	bl	8018e4e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d37a:	f00b fd9b 	bl	8018eb4 <sys_arch_protect>
 800d37e:	61b8      	str	r0, [r7, #24]
 800d380:	69b8      	ldr	r0, [r7, #24]
 800d382:	f00b fda5 	bl	8018ed0 <sys_arch_unprotect>
    return;
 800d386:	e012      	b.n	800d3ae <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	2200      	movs	r2, #0
 800d38c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d38e:	4b12      	ldr	r3, [pc, #72]	; (800d3d8 <mem_free+0x11c>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	69fa      	ldr	r2, [r7, #28]
 800d394:	429a      	cmp	r2, r3
 800d396:	d202      	bcs.n	800d39e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d398:	4a0f      	ldr	r2, [pc, #60]	; (800d3d8 <mem_free+0x11c>)
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d39e:	69f8      	ldr	r0, [r7, #28]
 800d3a0:	f7ff fe5c 	bl	800d05c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d3a4:	4809      	ldr	r0, [pc, #36]	; (800d3cc <mem_free+0x110>)
 800d3a6:	f00b fd52 	bl	8018e4e <sys_mutex_unlock>
 800d3aa:	e000      	b.n	800d3ae <mem_free+0xf2>
    return;
 800d3ac:	bf00      	nop
}
 800d3ae:	3720      	adds	r7, #32
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	0801d454 	.word	0x0801d454
 800d3b8:	0801d544 	.word	0x0801d544
 800d3bc:	0801d49c 	.word	0x0801d49c
 800d3c0:	200046cc 	.word	0x200046cc
 800d3c4:	200046d0 	.word	0x200046d0
 800d3c8:	0801d568 	.word	0x0801d568
 800d3cc:	200046d4 	.word	0x200046d4
 800d3d0:	0801d584 	.word	0x0801d584
 800d3d4:	0801d5ac 	.word	0x0801d5ac
 800d3d8:	200046d8 	.word	0x200046d8

0800d3dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b088      	sub	sp, #32
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d3e8:	887b      	ldrh	r3, [r7, #2]
 800d3ea:	3303      	adds	r3, #3
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	f023 0303 	bic.w	r3, r3, #3
 800d3f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d3f4:	8bfb      	ldrh	r3, [r7, #30]
 800d3f6:	2b0b      	cmp	r3, #11
 800d3f8:	d801      	bhi.n	800d3fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d3fa:	230c      	movs	r3, #12
 800d3fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d3fe:	8bfb      	ldrh	r3, [r7, #30]
 800d400:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d404:	d803      	bhi.n	800d40e <mem_trim+0x32>
 800d406:	8bfa      	ldrh	r2, [r7, #30]
 800d408:	887b      	ldrh	r3, [r7, #2]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d201      	bcs.n	800d412 <mem_trim+0x36>
    return NULL;
 800d40e:	2300      	movs	r3, #0
 800d410:	e0d8      	b.n	800d5c4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d412:	4b6e      	ldr	r3, [pc, #440]	; (800d5cc <mem_trim+0x1f0>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d304      	bcc.n	800d426 <mem_trim+0x4a>
 800d41c:	4b6c      	ldr	r3, [pc, #432]	; (800d5d0 <mem_trim+0x1f4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	429a      	cmp	r2, r3
 800d424:	d306      	bcc.n	800d434 <mem_trim+0x58>
 800d426:	4b6b      	ldr	r3, [pc, #428]	; (800d5d4 <mem_trim+0x1f8>)
 800d428:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d42c:	496a      	ldr	r1, [pc, #424]	; (800d5d8 <mem_trim+0x1fc>)
 800d42e:	486b      	ldr	r0, [pc, #428]	; (800d5dc <mem_trim+0x200>)
 800d430:	f00c fae4 	bl	80199fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d434:	4b65      	ldr	r3, [pc, #404]	; (800d5cc <mem_trim+0x1f0>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d304      	bcc.n	800d448 <mem_trim+0x6c>
 800d43e:	4b64      	ldr	r3, [pc, #400]	; (800d5d0 <mem_trim+0x1f4>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	429a      	cmp	r2, r3
 800d446:	d307      	bcc.n	800d458 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d448:	f00b fd34 	bl	8018eb4 <sys_arch_protect>
 800d44c:	60b8      	str	r0, [r7, #8]
 800d44e:	68b8      	ldr	r0, [r7, #8]
 800d450:	f00b fd3e 	bl	8018ed0 <sys_arch_unprotect>
    return rmem;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	e0b5      	b.n	800d5c4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	3b08      	subs	r3, #8
 800d45c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d45e:	69b8      	ldr	r0, [r7, #24]
 800d460:	f7ff fdea 	bl	800d038 <mem_to_ptr>
 800d464:	4603      	mov	r3, r0
 800d466:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	881a      	ldrh	r2, [r3, #0]
 800d46c:	8afb      	ldrh	r3, [r7, #22]
 800d46e:	1ad3      	subs	r3, r2, r3
 800d470:	b29b      	uxth	r3, r3
 800d472:	3b08      	subs	r3, #8
 800d474:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d476:	8bfa      	ldrh	r2, [r7, #30]
 800d478:	8abb      	ldrh	r3, [r7, #20]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d906      	bls.n	800d48c <mem_trim+0xb0>
 800d47e:	4b55      	ldr	r3, [pc, #340]	; (800d5d4 <mem_trim+0x1f8>)
 800d480:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d484:	4956      	ldr	r1, [pc, #344]	; (800d5e0 <mem_trim+0x204>)
 800d486:	4855      	ldr	r0, [pc, #340]	; (800d5dc <mem_trim+0x200>)
 800d488:	f00c fab8 	bl	80199fc <iprintf>
  if (newsize > size) {
 800d48c:	8bfa      	ldrh	r2, [r7, #30]
 800d48e:	8abb      	ldrh	r3, [r7, #20]
 800d490:	429a      	cmp	r2, r3
 800d492:	d901      	bls.n	800d498 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d494:	2300      	movs	r3, #0
 800d496:	e095      	b.n	800d5c4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d498:	8bfa      	ldrh	r2, [r7, #30]
 800d49a:	8abb      	ldrh	r3, [r7, #20]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d101      	bne.n	800d4a4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	e08f      	b.n	800d5c4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d4a4:	484f      	ldr	r0, [pc, #316]	; (800d5e4 <mem_trim+0x208>)
 800d4a6:	f00b fcc3 	bl	8018e30 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7ff fdb0 	bl	800d014 <ptr_to_mem>
 800d4b4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	791b      	ldrb	r3, [r3, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d13f      	bne.n	800d53e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	881b      	ldrh	r3, [r3, #0]
 800d4c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4c6:	d106      	bne.n	800d4d6 <mem_trim+0xfa>
 800d4c8:	4b42      	ldr	r3, [pc, #264]	; (800d5d4 <mem_trim+0x1f8>)
 800d4ca:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d4ce:	4946      	ldr	r1, [pc, #280]	; (800d5e8 <mem_trim+0x20c>)
 800d4d0:	4842      	ldr	r0, [pc, #264]	; (800d5dc <mem_trim+0x200>)
 800d4d2:	f00c fa93 	bl	80199fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d4dc:	8afa      	ldrh	r2, [r7, #22]
 800d4de:	8bfb      	ldrh	r3, [r7, #30]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	3308      	adds	r3, #8
 800d4e6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d4e8:	4b40      	ldr	r3, [pc, #256]	; (800d5ec <mem_trim+0x210>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	693a      	ldr	r2, [r7, #16]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d106      	bne.n	800d500 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d4f2:	89fb      	ldrh	r3, [r7, #14]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff fd8d 	bl	800d014 <ptr_to_mem>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	4b3b      	ldr	r3, [pc, #236]	; (800d5ec <mem_trim+0x210>)
 800d4fe:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d500:	89fb      	ldrh	r3, [r7, #14]
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff fd86 	bl	800d014 <ptr_to_mem>
 800d508:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	2200      	movs	r2, #0
 800d50e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	89ba      	ldrh	r2, [r7, #12]
 800d514:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	8afa      	ldrh	r2, [r7, #22]
 800d51a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	89fa      	ldrh	r2, [r7, #14]
 800d520:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	881b      	ldrh	r3, [r3, #0]
 800d526:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d52a:	d047      	beq.n	800d5bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	881b      	ldrh	r3, [r3, #0]
 800d530:	4618      	mov	r0, r3
 800d532:	f7ff fd6f 	bl	800d014 <ptr_to_mem>
 800d536:	4602      	mov	r2, r0
 800d538:	89fb      	ldrh	r3, [r7, #14]
 800d53a:	8053      	strh	r3, [r2, #2]
 800d53c:	e03e      	b.n	800d5bc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d53e:	8bfb      	ldrh	r3, [r7, #30]
 800d540:	f103 0214 	add.w	r2, r3, #20
 800d544:	8abb      	ldrh	r3, [r7, #20]
 800d546:	429a      	cmp	r2, r3
 800d548:	d838      	bhi.n	800d5bc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d54a:	8afa      	ldrh	r2, [r7, #22]
 800d54c:	8bfb      	ldrh	r3, [r7, #30]
 800d54e:	4413      	add	r3, r2
 800d550:	b29b      	uxth	r3, r3
 800d552:	3308      	adds	r3, #8
 800d554:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d55e:	d106      	bne.n	800d56e <mem_trim+0x192>
 800d560:	4b1c      	ldr	r3, [pc, #112]	; (800d5d4 <mem_trim+0x1f8>)
 800d562:	f240 3216 	movw	r2, #790	; 0x316
 800d566:	4920      	ldr	r1, [pc, #128]	; (800d5e8 <mem_trim+0x20c>)
 800d568:	481c      	ldr	r0, [pc, #112]	; (800d5dc <mem_trim+0x200>)
 800d56a:	f00c fa47 	bl	80199fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d56e:	89fb      	ldrh	r3, [r7, #14]
 800d570:	4618      	mov	r0, r3
 800d572:	f7ff fd4f 	bl	800d014 <ptr_to_mem>
 800d576:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d578:	4b1c      	ldr	r3, [pc, #112]	; (800d5ec <mem_trim+0x210>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	693a      	ldr	r2, [r7, #16]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d202      	bcs.n	800d588 <mem_trim+0x1ac>
      lfree = mem2;
 800d582:	4a1a      	ldr	r2, [pc, #104]	; (800d5ec <mem_trim+0x210>)
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	2200      	movs	r2, #0
 800d58c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	881a      	ldrh	r2, [r3, #0]
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	8afa      	ldrh	r2, [r7, #22]
 800d59a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	89fa      	ldrh	r2, [r7, #14]
 800d5a0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	881b      	ldrh	r3, [r3, #0]
 800d5a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d5aa:	d007      	beq.n	800d5bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	881b      	ldrh	r3, [r3, #0]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff fd2f 	bl	800d014 <ptr_to_mem>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	89fb      	ldrh	r3, [r7, #14]
 800d5ba:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d5bc:	4809      	ldr	r0, [pc, #36]	; (800d5e4 <mem_trim+0x208>)
 800d5be:	f00b fc46 	bl	8018e4e <sys_mutex_unlock>
  return rmem;
 800d5c2:	687b      	ldr	r3, [r7, #4]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3720      	adds	r7, #32
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	200046cc 	.word	0x200046cc
 800d5d0:	200046d0 	.word	0x200046d0
 800d5d4:	0801d454 	.word	0x0801d454
 800d5d8:	0801d5e0 	.word	0x0801d5e0
 800d5dc:	0801d49c 	.word	0x0801d49c
 800d5e0:	0801d5f8 	.word	0x0801d5f8
 800d5e4:	200046d4 	.word	0x200046d4
 800d5e8:	0801d618 	.word	0x0801d618
 800d5ec:	200046d8 	.word	0x200046d8

0800d5f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b088      	sub	sp, #32
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d5fa:	88fb      	ldrh	r3, [r7, #6]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <mem_malloc+0x14>
    return NULL;
 800d600:	2300      	movs	r3, #0
 800d602:	e0e2      	b.n	800d7ca <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d604:	88fb      	ldrh	r3, [r7, #6]
 800d606:	3303      	adds	r3, #3
 800d608:	b29b      	uxth	r3, r3
 800d60a:	f023 0303 	bic.w	r3, r3, #3
 800d60e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d610:	8bbb      	ldrh	r3, [r7, #28]
 800d612:	2b0b      	cmp	r3, #11
 800d614:	d801      	bhi.n	800d61a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d616:	230c      	movs	r3, #12
 800d618:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d61a:	8bbb      	ldrh	r3, [r7, #28]
 800d61c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d620:	d803      	bhi.n	800d62a <mem_malloc+0x3a>
 800d622:	8bba      	ldrh	r2, [r7, #28]
 800d624:	88fb      	ldrh	r3, [r7, #6]
 800d626:	429a      	cmp	r2, r3
 800d628:	d201      	bcs.n	800d62e <mem_malloc+0x3e>
    return NULL;
 800d62a:	2300      	movs	r3, #0
 800d62c:	e0cd      	b.n	800d7ca <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d62e:	4869      	ldr	r0, [pc, #420]	; (800d7d4 <mem_malloc+0x1e4>)
 800d630:	f00b fbfe 	bl	8018e30 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d634:	4b68      	ldr	r3, [pc, #416]	; (800d7d8 <mem_malloc+0x1e8>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4618      	mov	r0, r3
 800d63a:	f7ff fcfd 	bl	800d038 <mem_to_ptr>
 800d63e:	4603      	mov	r3, r0
 800d640:	83fb      	strh	r3, [r7, #30]
 800d642:	e0b7      	b.n	800d7b4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d644:	8bfb      	ldrh	r3, [r7, #30]
 800d646:	4618      	mov	r0, r3
 800d648:	f7ff fce4 	bl	800d014 <ptr_to_mem>
 800d64c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	791b      	ldrb	r3, [r3, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	f040 80a7 	bne.w	800d7a6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	881b      	ldrh	r3, [r3, #0]
 800d65c:	461a      	mov	r2, r3
 800d65e:	8bfb      	ldrh	r3, [r7, #30]
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	f1a3 0208 	sub.w	r2, r3, #8
 800d666:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d668:	429a      	cmp	r2, r3
 800d66a:	f0c0 809c 	bcc.w	800d7a6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	881b      	ldrh	r3, [r3, #0]
 800d672:	461a      	mov	r2, r3
 800d674:	8bfb      	ldrh	r3, [r7, #30]
 800d676:	1ad3      	subs	r3, r2, r3
 800d678:	f1a3 0208 	sub.w	r2, r3, #8
 800d67c:	8bbb      	ldrh	r3, [r7, #28]
 800d67e:	3314      	adds	r3, #20
 800d680:	429a      	cmp	r2, r3
 800d682:	d333      	bcc.n	800d6ec <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d684:	8bfa      	ldrh	r2, [r7, #30]
 800d686:	8bbb      	ldrh	r3, [r7, #28]
 800d688:	4413      	add	r3, r2
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	3308      	adds	r3, #8
 800d68e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d690:	8a7b      	ldrh	r3, [r7, #18]
 800d692:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d696:	d106      	bne.n	800d6a6 <mem_malloc+0xb6>
 800d698:	4b50      	ldr	r3, [pc, #320]	; (800d7dc <mem_malloc+0x1ec>)
 800d69a:	f240 3287 	movw	r2, #903	; 0x387
 800d69e:	4950      	ldr	r1, [pc, #320]	; (800d7e0 <mem_malloc+0x1f0>)
 800d6a0:	4850      	ldr	r0, [pc, #320]	; (800d7e4 <mem_malloc+0x1f4>)
 800d6a2:	f00c f9ab 	bl	80199fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d6a6:	8a7b      	ldrh	r3, [r7, #18]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff fcb3 	bl	800d014 <ptr_to_mem>
 800d6ae:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	881a      	ldrh	r2, [r3, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	8bfa      	ldrh	r2, [r7, #30]
 800d6c2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	8a7a      	ldrh	r2, [r7, #18]
 800d6c8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	881b      	ldrh	r3, [r3, #0]
 800d6d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6d8:	d00b      	beq.n	800d6f2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7ff fc98 	bl	800d014 <ptr_to_mem>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	8a7b      	ldrh	r3, [r7, #18]
 800d6e8:	8053      	strh	r3, [r2, #2]
 800d6ea:	e002      	b.n	800d6f2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d6f2:	4b39      	ldr	r3, [pc, #228]	; (800d7d8 <mem_malloc+0x1e8>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d127      	bne.n	800d74c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d6fc:	4b36      	ldr	r3, [pc, #216]	; (800d7d8 <mem_malloc+0x1e8>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d702:	e005      	b.n	800d710 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fc83 	bl	800d014 <ptr_to_mem>
 800d70e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	791b      	ldrb	r3, [r3, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d004      	beq.n	800d722 <mem_malloc+0x132>
 800d718:	4b33      	ldr	r3, [pc, #204]	; (800d7e8 <mem_malloc+0x1f8>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	69ba      	ldr	r2, [r7, #24]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d1f0      	bne.n	800d704 <mem_malloc+0x114>
          }
          lfree = cur;
 800d722:	4a2d      	ldr	r2, [pc, #180]	; (800d7d8 <mem_malloc+0x1e8>)
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d728:	4b2b      	ldr	r3, [pc, #172]	; (800d7d8 <mem_malloc+0x1e8>)
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	4b2e      	ldr	r3, [pc, #184]	; (800d7e8 <mem_malloc+0x1f8>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	429a      	cmp	r2, r3
 800d732:	d00b      	beq.n	800d74c <mem_malloc+0x15c>
 800d734:	4b28      	ldr	r3, [pc, #160]	; (800d7d8 <mem_malloc+0x1e8>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	791b      	ldrb	r3, [r3, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d006      	beq.n	800d74c <mem_malloc+0x15c>
 800d73e:	4b27      	ldr	r3, [pc, #156]	; (800d7dc <mem_malloc+0x1ec>)
 800d740:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d744:	4929      	ldr	r1, [pc, #164]	; (800d7ec <mem_malloc+0x1fc>)
 800d746:	4827      	ldr	r0, [pc, #156]	; (800d7e4 <mem_malloc+0x1f4>)
 800d748:	f00c f958 	bl	80199fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d74c:	4821      	ldr	r0, [pc, #132]	; (800d7d4 <mem_malloc+0x1e4>)
 800d74e:	f00b fb7e 	bl	8018e4e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d752:	8bba      	ldrh	r2, [r7, #28]
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	4413      	add	r3, r2
 800d758:	3308      	adds	r3, #8
 800d75a:	4a23      	ldr	r2, [pc, #140]	; (800d7e8 <mem_malloc+0x1f8>)
 800d75c:	6812      	ldr	r2, [r2, #0]
 800d75e:	4293      	cmp	r3, r2
 800d760:	d906      	bls.n	800d770 <mem_malloc+0x180>
 800d762:	4b1e      	ldr	r3, [pc, #120]	; (800d7dc <mem_malloc+0x1ec>)
 800d764:	f240 32ba 	movw	r2, #954	; 0x3ba
 800d768:	4921      	ldr	r1, [pc, #132]	; (800d7f0 <mem_malloc+0x200>)
 800d76a:	481e      	ldr	r0, [pc, #120]	; (800d7e4 <mem_malloc+0x1f4>)
 800d76c:	f00c f946 	bl	80199fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	f003 0303 	and.w	r3, r3, #3
 800d776:	2b00      	cmp	r3, #0
 800d778:	d006      	beq.n	800d788 <mem_malloc+0x198>
 800d77a:	4b18      	ldr	r3, [pc, #96]	; (800d7dc <mem_malloc+0x1ec>)
 800d77c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800d780:	491c      	ldr	r1, [pc, #112]	; (800d7f4 <mem_malloc+0x204>)
 800d782:	4818      	ldr	r0, [pc, #96]	; (800d7e4 <mem_malloc+0x1f4>)
 800d784:	f00c f93a 	bl	80199fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	f003 0303 	and.w	r3, r3, #3
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d006      	beq.n	800d7a0 <mem_malloc+0x1b0>
 800d792:	4b12      	ldr	r3, [pc, #72]	; (800d7dc <mem_malloc+0x1ec>)
 800d794:	f240 32be 	movw	r2, #958	; 0x3be
 800d798:	4917      	ldr	r1, [pc, #92]	; (800d7f8 <mem_malloc+0x208>)
 800d79a:	4812      	ldr	r0, [pc, #72]	; (800d7e4 <mem_malloc+0x1f4>)
 800d79c:	f00c f92e 	bl	80199fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	3308      	adds	r3, #8
 800d7a4:	e011      	b.n	800d7ca <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d7a6:	8bfb      	ldrh	r3, [r7, #30]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7ff fc33 	bl	800d014 <ptr_to_mem>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	881b      	ldrh	r3, [r3, #0]
 800d7b2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d7b4:	8bfa      	ldrh	r2, [r7, #30]
 800d7b6:	8bbb      	ldrh	r3, [r7, #28]
 800d7b8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	f4ff af41 	bcc.w	800d644 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d7c2:	4804      	ldr	r0, [pc, #16]	; (800d7d4 <mem_malloc+0x1e4>)
 800d7c4:	f00b fb43 	bl	8018e4e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d7c8:	2300      	movs	r3, #0
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3720      	adds	r7, #32
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	200046d4 	.word	0x200046d4
 800d7d8:	200046d8 	.word	0x200046d8
 800d7dc:	0801d454 	.word	0x0801d454
 800d7e0:	0801d618 	.word	0x0801d618
 800d7e4:	0801d49c 	.word	0x0801d49c
 800d7e8:	200046d0 	.word	0x200046d0
 800d7ec:	0801d62c 	.word	0x0801d62c
 800d7f0:	0801d648 	.word	0x0801d648
 800d7f4:	0801d678 	.word	0x0801d678
 800d7f8:	0801d6a8 	.word	0x0801d6a8

0800d7fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	2200      	movs	r2, #0
 800d80a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	3303      	adds	r3, #3
 800d812:	f023 0303 	bic.w	r3, r3, #3
 800d816:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d818:	2300      	movs	r3, #0
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	e011      	b.n	800d842 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	689b      	ldr	r3, [r3, #8]
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	881b      	ldrh	r3, [r3, #0]
 800d834:	461a      	mov	r2, r3
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	4413      	add	r3, r2
 800d83a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	3301      	adds	r3, #1
 800d840:	60fb      	str	r3, [r7, #12]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	885b      	ldrh	r3, [r3, #2]
 800d846:	461a      	mov	r2, r3
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	4293      	cmp	r3, r2
 800d84c:	dbe7      	blt.n	800d81e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d84e:	bf00      	nop
 800d850:	3714      	adds	r7, #20
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
	...

0800d85c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d862:	2300      	movs	r3, #0
 800d864:	80fb      	strh	r3, [r7, #6]
 800d866:	e009      	b.n	800d87c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d868:	88fb      	ldrh	r3, [r7, #6]
 800d86a:	4a08      	ldr	r2, [pc, #32]	; (800d88c <memp_init+0x30>)
 800d86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff ffc3 	bl	800d7fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d876:	88fb      	ldrh	r3, [r7, #6]
 800d878:	3301      	adds	r3, #1
 800d87a:	80fb      	strh	r3, [r7, #6]
 800d87c:	88fb      	ldrh	r3, [r7, #6]
 800d87e:	2b0c      	cmp	r3, #12
 800d880:	d9f2      	bls.n	800d868 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d882:	bf00      	nop
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	08020fac 	.word	0x08020fac

0800d890 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d898:	f00b fb0c 	bl	8018eb4 <sys_arch_protect>
 800d89c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d015      	beq.n	800d8d8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	6812      	ldr	r2, [r2, #0]
 800d8b4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	f003 0303 	and.w	r3, r3, #3
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d006      	beq.n	800d8ce <do_memp_malloc_pool+0x3e>
 800d8c0:	4b09      	ldr	r3, [pc, #36]	; (800d8e8 <do_memp_malloc_pool+0x58>)
 800d8c2:	f240 1219 	movw	r2, #281	; 0x119
 800d8c6:	4909      	ldr	r1, [pc, #36]	; (800d8ec <do_memp_malloc_pool+0x5c>)
 800d8c8:	4809      	ldr	r0, [pc, #36]	; (800d8f0 <do_memp_malloc_pool+0x60>)
 800d8ca:	f00c f897 	bl	80199fc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f00b fafe 	bl	8018ed0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	e003      	b.n	800d8e0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f00b faf9 	bl	8018ed0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	0801d6cc 	.word	0x0801d6cc
 800d8ec:	0801d6fc 	.word	0x0801d6fc
 800d8f0:	0801d720 	.word	0x0801d720

0800d8f4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d8fe:	79fb      	ldrb	r3, [r7, #7]
 800d900:	2b0c      	cmp	r3, #12
 800d902:	d908      	bls.n	800d916 <memp_malloc+0x22>
 800d904:	4b0a      	ldr	r3, [pc, #40]	; (800d930 <memp_malloc+0x3c>)
 800d906:	f240 1257 	movw	r2, #343	; 0x157
 800d90a:	490a      	ldr	r1, [pc, #40]	; (800d934 <memp_malloc+0x40>)
 800d90c:	480a      	ldr	r0, [pc, #40]	; (800d938 <memp_malloc+0x44>)
 800d90e:	f00c f875 	bl	80199fc <iprintf>
 800d912:	2300      	movs	r3, #0
 800d914:	e008      	b.n	800d928 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d916:	79fb      	ldrb	r3, [r7, #7]
 800d918:	4a08      	ldr	r2, [pc, #32]	; (800d93c <memp_malloc+0x48>)
 800d91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d91e:	4618      	mov	r0, r3
 800d920:	f7ff ffb6 	bl	800d890 <do_memp_malloc_pool>
 800d924:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d926:	68fb      	ldr	r3, [r7, #12]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	0801d6cc 	.word	0x0801d6cc
 800d934:	0801d75c 	.word	0x0801d75c
 800d938:	0801d720 	.word	0x0801d720
 800d93c:	08020fac 	.word	0x08020fac

0800d940 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	f003 0303 	and.w	r3, r3, #3
 800d950:	2b00      	cmp	r3, #0
 800d952:	d006      	beq.n	800d962 <do_memp_free_pool+0x22>
 800d954:	4b0d      	ldr	r3, [pc, #52]	; (800d98c <do_memp_free_pool+0x4c>)
 800d956:	f240 126d 	movw	r2, #365	; 0x16d
 800d95a:	490d      	ldr	r1, [pc, #52]	; (800d990 <do_memp_free_pool+0x50>)
 800d95c:	480d      	ldr	r0, [pc, #52]	; (800d994 <do_memp_free_pool+0x54>)
 800d95e:	f00c f84d 	bl	80199fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d966:	f00b faa5 	bl	8018eb4 <sys_arch_protect>
 800d96a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d97e:	68b8      	ldr	r0, [r7, #8]
 800d980:	f00b faa6 	bl	8018ed0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d984:	bf00      	nop
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	0801d6cc 	.word	0x0801d6cc
 800d990:	0801d77c 	.word	0x0801d77c
 800d994:	0801d720 	.word	0x0801d720

0800d998 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	4603      	mov	r3, r0
 800d9a0:	6039      	str	r1, [r7, #0]
 800d9a2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d9a4:	79fb      	ldrb	r3, [r7, #7]
 800d9a6:	2b0c      	cmp	r3, #12
 800d9a8:	d907      	bls.n	800d9ba <memp_free+0x22>
 800d9aa:	4b0c      	ldr	r3, [pc, #48]	; (800d9dc <memp_free+0x44>)
 800d9ac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d9b0:	490b      	ldr	r1, [pc, #44]	; (800d9e0 <memp_free+0x48>)
 800d9b2:	480c      	ldr	r0, [pc, #48]	; (800d9e4 <memp_free+0x4c>)
 800d9b4:	f00c f822 	bl	80199fc <iprintf>
 800d9b8:	e00c      	b.n	800d9d4 <memp_free+0x3c>

  if (mem == NULL) {
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d008      	beq.n	800d9d2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d9c0:	79fb      	ldrb	r3, [r7, #7]
 800d9c2:	4a09      	ldr	r2, [pc, #36]	; (800d9e8 <memp_free+0x50>)
 800d9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7ff ffb8 	bl	800d940 <do_memp_free_pool>
 800d9d0:	e000      	b.n	800d9d4 <memp_free+0x3c>
    return;
 800d9d2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d9d4:	3708      	adds	r7, #8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	0801d6cc 	.word	0x0801d6cc
 800d9e0:	0801d79c 	.word	0x0801d79c
 800d9e4:	0801d720 	.word	0x0801d720
 800d9e8:	08020fac 	.word	0x08020fac

0800d9ec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d9f0:	bf00      	nop
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
	...

0800d9fc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	607a      	str	r2, [r7, #4]
 800da08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d108      	bne.n	800da22 <netif_add+0x26>
 800da10:	4b59      	ldr	r3, [pc, #356]	; (800db78 <netif_add+0x17c>)
 800da12:	f240 1227 	movw	r2, #295	; 0x127
 800da16:	4959      	ldr	r1, [pc, #356]	; (800db7c <netif_add+0x180>)
 800da18:	4859      	ldr	r0, [pc, #356]	; (800db80 <netif_add+0x184>)
 800da1a:	f00b ffef 	bl	80199fc <iprintf>
 800da1e:	2300      	movs	r3, #0
 800da20:	e0a6      	b.n	800db70 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800da22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da24:	2b00      	cmp	r3, #0
 800da26:	d108      	bne.n	800da3a <netif_add+0x3e>
 800da28:	4b53      	ldr	r3, [pc, #332]	; (800db78 <netif_add+0x17c>)
 800da2a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800da2e:	4955      	ldr	r1, [pc, #340]	; (800db84 <netif_add+0x188>)
 800da30:	4853      	ldr	r0, [pc, #332]	; (800db80 <netif_add+0x184>)
 800da32:	f00b ffe3 	bl	80199fc <iprintf>
 800da36:	2300      	movs	r3, #0
 800da38:	e09a      	b.n	800db70 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800da40:	4b51      	ldr	r3, [pc, #324]	; (800db88 <netif_add+0x18c>)
 800da42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800da4a:	4b4f      	ldr	r3, [pc, #316]	; (800db88 <netif_add+0x18c>)
 800da4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d101      	bne.n	800da58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800da54:	4b4c      	ldr	r3, [pc, #304]	; (800db88 <netif_add+0x18c>)
 800da56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2200      	movs	r2, #0
 800da5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2200      	movs	r2, #0
 800da62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2200      	movs	r2, #0
 800da68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	4a47      	ldr	r2, [pc, #284]	; (800db8c <netif_add+0x190>)
 800da6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2200      	movs	r2, #0
 800da7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	3320      	adds	r3, #32
 800da82:	2204      	movs	r2, #4
 800da84:	2100      	movs	r1, #0
 800da86:	4618      	mov	r0, r3
 800da88:	f00b faab 	bl	8018fe2 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6a3a      	ldr	r2, [r7, #32]
 800da90:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800da92:	4b3f      	ldr	r3, [pc, #252]	; (800db90 <netif_add+0x194>)
 800da94:	781a      	ldrb	r2, [r3, #0]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daa0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	68b9      	ldr	r1, [r7, #8]
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f000 f913 	bl	800dcd4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800daae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	4798      	blx	r3
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d001      	beq.n	800dabe <netif_add+0xc2>
    return NULL;
 800daba:	2300      	movs	r3, #0
 800dabc:	e058      	b.n	800db70 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dac4:	2bff      	cmp	r3, #255	; 0xff
 800dac6:	d103      	bne.n	800dad0 <netif_add+0xd4>
        netif->num = 0;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dad0:	2300      	movs	r3, #0
 800dad2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dad4:	4b2f      	ldr	r3, [pc, #188]	; (800db94 <netif_add+0x198>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	617b      	str	r3, [r7, #20]
 800dada:	e02b      	b.n	800db34 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dadc:	697a      	ldr	r2, [r7, #20]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d106      	bne.n	800daf2 <netif_add+0xf6>
 800dae4:	4b24      	ldr	r3, [pc, #144]	; (800db78 <netif_add+0x17c>)
 800dae6:	f240 128b 	movw	r2, #395	; 0x18b
 800daea:	492b      	ldr	r1, [pc, #172]	; (800db98 <netif_add+0x19c>)
 800daec:	4824      	ldr	r0, [pc, #144]	; (800db80 <netif_add+0x184>)
 800daee:	f00b ff85 	bl	80199fc <iprintf>
        num_netifs++;
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	3301      	adds	r3, #1
 800daf6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	2bff      	cmp	r3, #255	; 0xff
 800dafc:	dd06      	ble.n	800db0c <netif_add+0x110>
 800dafe:	4b1e      	ldr	r3, [pc, #120]	; (800db78 <netif_add+0x17c>)
 800db00:	f240 128d 	movw	r2, #397	; 0x18d
 800db04:	4925      	ldr	r1, [pc, #148]	; (800db9c <netif_add+0x1a0>)
 800db06:	481e      	ldr	r0, [pc, #120]	; (800db80 <netif_add+0x184>)
 800db08:	f00b ff78 	bl	80199fc <iprintf>
        if (netif2->num == netif->num) {
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db18:	429a      	cmp	r2, r3
 800db1a:	d108      	bne.n	800db2e <netif_add+0x132>
          netif->num++;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db22:	3301      	adds	r3, #1
 800db24:	b2da      	uxtb	r2, r3
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800db2c:	e005      	b.n	800db3a <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	617b      	str	r3, [r7, #20]
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1d0      	bne.n	800dadc <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1be      	bne.n	800dabe <netif_add+0xc2>
  }
  if (netif->num == 254) {
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db46:	2bfe      	cmp	r3, #254	; 0xfe
 800db48:	d103      	bne.n	800db52 <netif_add+0x156>
    netif_num = 0;
 800db4a:	4b11      	ldr	r3, [pc, #68]	; (800db90 <netif_add+0x194>)
 800db4c:	2200      	movs	r2, #0
 800db4e:	701a      	strb	r2, [r3, #0]
 800db50:	e006      	b.n	800db60 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db58:	3301      	adds	r3, #1
 800db5a:	b2da      	uxtb	r2, r3
 800db5c:	4b0c      	ldr	r3, [pc, #48]	; (800db90 <netif_add+0x194>)
 800db5e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800db60:	4b0c      	ldr	r3, [pc, #48]	; (800db94 <netif_add+0x198>)
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800db68:	4a0a      	ldr	r2, [pc, #40]	; (800db94 <netif_add+0x198>)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800db6e:	68fb      	ldr	r3, [r7, #12]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3718      	adds	r7, #24
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	0801d7b8 	.word	0x0801d7b8
 800db7c:	0801d84c 	.word	0x0801d84c
 800db80:	0801d808 	.word	0x0801d808
 800db84:	0801d868 	.word	0x0801d868
 800db88:	08021030 	.word	0x08021030
 800db8c:	0800dec5 	.word	0x0800dec5
 800db90:	20004710 	.word	0x20004710
 800db94:	2000b4b0 	.word	0x2000b4b0
 800db98:	0801d88c 	.word	0x0801d88c
 800db9c:	0801d8a0 	.word	0x0801d8a0

0800dba0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dbaa:	6839      	ldr	r1, [r7, #0]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f002 fb07 	bl	80101c0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dbb2:	6839      	ldr	r1, [r7, #0]
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f006 ff25 	bl	8014a04 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dbba:	bf00      	nop
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
	...

0800dbc4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b086      	sub	sp, #24
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d106      	bne.n	800dbe4 <netif_do_set_ipaddr+0x20>
 800dbd6:	4b1d      	ldr	r3, [pc, #116]	; (800dc4c <netif_do_set_ipaddr+0x88>)
 800dbd8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dbdc:	491c      	ldr	r1, [pc, #112]	; (800dc50 <netif_do_set_ipaddr+0x8c>)
 800dbde:	481d      	ldr	r0, [pc, #116]	; (800dc54 <netif_do_set_ipaddr+0x90>)
 800dbe0:	f00b ff0c 	bl	80199fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d106      	bne.n	800dbf8 <netif_do_set_ipaddr+0x34>
 800dbea:	4b18      	ldr	r3, [pc, #96]	; (800dc4c <netif_do_set_ipaddr+0x88>)
 800dbec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dbf0:	4917      	ldr	r1, [pc, #92]	; (800dc50 <netif_do_set_ipaddr+0x8c>)
 800dbf2:	4818      	ldr	r0, [pc, #96]	; (800dc54 <netif_do_set_ipaddr+0x90>)
 800dbf4:	f00b ff02 	bl	80199fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	3304      	adds	r3, #4
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d01c      	beq.n	800dc40 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	3304      	adds	r3, #4
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dc16:	f107 0314 	add.w	r3, r7, #20
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff ffbf 	bl	800dba0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d002      	beq.n	800dc2e <netif_do_set_ipaddr+0x6a>
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	e000      	b.n	800dc30 <netif_do_set_ipaddr+0x6c>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dc34:	2101      	movs	r1, #1
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f000 f8d2 	bl	800dde0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	e000      	b.n	800dc42 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dc40:	2300      	movs	r3, #0
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3718      	adds	r7, #24
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	0801d7b8 	.word	0x0801d7b8
 800dc50:	0801d8d0 	.word	0x0801d8d0
 800dc54:	0801d808 	.word	0x0801d808

0800dc58 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3308      	adds	r3, #8
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d00a      	beq.n	800dc88 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d002      	beq.n	800dc7e <netif_do_set_netmask+0x26>
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	e000      	b.n	800dc80 <netif_do_set_netmask+0x28>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dc84:	2301      	movs	r3, #1
 800dc86:	e000      	b.n	800dc8a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dc88:	2300      	movs	r3, #0
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3714      	adds	r7, #20
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr

0800dc96 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dc96:	b480      	push	{r7}
 800dc98:	b085      	sub	sp, #20
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	60f8      	str	r0, [r7, #12]
 800dc9e:	60b9      	str	r1, [r7, #8]
 800dca0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	330c      	adds	r3, #12
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d00a      	beq.n	800dcc6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <netif_do_set_gw+0x26>
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	e000      	b.n	800dcbe <netif_do_set_gw+0x28>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e000      	b.n	800dcc8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3714      	adds	r7, #20
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
 800dce0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dce2:	2300      	movs	r3, #0
 800dce4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dce6:	2300      	movs	r3, #0
 800dce8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d101      	bne.n	800dcf4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dcf0:	4b1c      	ldr	r3, [pc, #112]	; (800dd64 <netif_set_addr+0x90>)
 800dcf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d101      	bne.n	800dcfe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dcfa:	4b1a      	ldr	r3, [pc, #104]	; (800dd64 <netif_set_addr+0x90>)
 800dcfc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d101      	bne.n	800dd08 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dd04:	4b17      	ldr	r3, [pc, #92]	; (800dd64 <netif_set_addr+0x90>)
 800dd06:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d003      	beq.n	800dd16 <netif_set_addr+0x42>
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d101      	bne.n	800dd1a <netif_set_addr+0x46>
 800dd16:	2301      	movs	r3, #1
 800dd18:	e000      	b.n	800dd1c <netif_set_addr+0x48>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d006      	beq.n	800dd32 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dd24:	f107 0310 	add.w	r3, r7, #16
 800dd28:	461a      	mov	r2, r3
 800dd2a:	68b9      	ldr	r1, [r7, #8]
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f7ff ff49 	bl	800dbc4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dd32:	69fa      	ldr	r2, [r7, #28]
 800dd34:	6879      	ldr	r1, [r7, #4]
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	f7ff ff8e 	bl	800dc58 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dd3c:	69ba      	ldr	r2, [r7, #24]
 800dd3e:	6839      	ldr	r1, [r7, #0]
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f7ff ffa8 	bl	800dc96 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d106      	bne.n	800dd5a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dd4c:	f107 0310 	add.w	r3, r7, #16
 800dd50:	461a      	mov	r2, r3
 800dd52:	68b9      	ldr	r1, [r7, #8]
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f7ff ff35 	bl	800dbc4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dd5a:	bf00      	nop
 800dd5c:	3720      	adds	r7, #32
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	08021030 	.word	0x08021030

0800dd68 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dd70:	4a04      	ldr	r2, [pc, #16]	; (800dd84 <netif_set_default+0x1c>)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dd76:	bf00      	nop
 800dd78:	370c      	adds	r7, #12
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	2000b4b4 	.word	0x2000b4b4

0800dd88 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d107      	bne.n	800dda6 <netif_set_up+0x1e>
 800dd96:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <netif_set_up+0x4c>)
 800dd98:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dd9c:	490e      	ldr	r1, [pc, #56]	; (800ddd8 <netif_set_up+0x50>)
 800dd9e:	480f      	ldr	r0, [pc, #60]	; (800dddc <netif_set_up+0x54>)
 800dda0:	f00b fe2c 	bl	80199fc <iprintf>
 800dda4:	e013      	b.n	800ddce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddac:	f003 0301 	and.w	r3, r3, #1
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10c      	bne.n	800ddce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddba:	f043 0301 	orr.w	r3, r3, #1
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ddc6:	2103      	movs	r1, #3
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 f809 	bl	800dde0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	0801d7b8 	.word	0x0801d7b8
 800ddd8:	0801d940 	.word	0x0801d940
 800dddc:	0801d808 	.word	0x0801d808

0800dde0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	460b      	mov	r3, r1
 800ddea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d106      	bne.n	800de00 <netif_issue_reports+0x20>
 800ddf2:	4b18      	ldr	r3, [pc, #96]	; (800de54 <netif_issue_reports+0x74>)
 800ddf4:	f240 326d 	movw	r2, #877	; 0x36d
 800ddf8:	4917      	ldr	r1, [pc, #92]	; (800de58 <netif_issue_reports+0x78>)
 800ddfa:	4818      	ldr	r0, [pc, #96]	; (800de5c <netif_issue_reports+0x7c>)
 800ddfc:	f00b fdfe 	bl	80199fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de06:	f003 0304 	and.w	r3, r3, #4
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d01e      	beq.n	800de4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d017      	beq.n	800de4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800de1c:	78fb      	ldrb	r3, [r7, #3]
 800de1e:	f003 0301 	and.w	r3, r3, #1
 800de22:	2b00      	cmp	r3, #0
 800de24:	d013      	beq.n	800de4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	3304      	adds	r3, #4
 800de2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00e      	beq.n	800de4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de36:	f003 0308 	and.w	r3, r3, #8
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d007      	beq.n	800de4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	3304      	adds	r3, #4
 800de42:	4619      	mov	r1, r3
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f009 fb9f 	bl	8017588 <etharp_request>
 800de4a:	e000      	b.n	800de4e <netif_issue_reports+0x6e>
    return;
 800de4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	0801d7b8 	.word	0x0801d7b8
 800de58:	0801d95c 	.word	0x0801d95c
 800de5c:	0801d808 	.word	0x0801d808

0800de60 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d107      	bne.n	800de7e <netif_set_down+0x1e>
 800de6e:	4b12      	ldr	r3, [pc, #72]	; (800deb8 <netif_set_down+0x58>)
 800de70:	f240 329b 	movw	r2, #923	; 0x39b
 800de74:	4911      	ldr	r1, [pc, #68]	; (800debc <netif_set_down+0x5c>)
 800de76:	4812      	ldr	r0, [pc, #72]	; (800dec0 <netif_set_down+0x60>)
 800de78:	f00b fdc0 	bl	80199fc <iprintf>
 800de7c:	e019      	b.n	800deb2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d012      	beq.n	800deb2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de92:	f023 0301 	bic.w	r3, r3, #1
 800de96:	b2da      	uxtb	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dea4:	f003 0308 	and.w	r3, r3, #8
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f008 ff25 	bl	8016cfc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	0801d7b8 	.word	0x0801d7b8
 800debc:	0801d980 	.word	0x0801d980
 800dec0:	0801d808 	.word	0x0801d808

0800dec4 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ded0:	f06f 030b 	mvn.w	r3, #11
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	4603      	mov	r3, r0
 800dee8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800deea:	79fb      	ldrb	r3, [r7, #7]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d013      	beq.n	800df18 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800def0:	4b0d      	ldr	r3, [pc, #52]	; (800df28 <netif_get_by_index+0x48>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	60fb      	str	r3, [r7, #12]
 800def6:	e00c      	b.n	800df12 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800defe:	3301      	adds	r3, #1
 800df00:	b2db      	uxtb	r3, r3
 800df02:	79fa      	ldrb	r2, [r7, #7]
 800df04:	429a      	cmp	r2, r3
 800df06:	d101      	bne.n	800df0c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	e006      	b.n	800df1a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	60fb      	str	r3, [r7, #12]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1ef      	bne.n	800def8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3714      	adds	r7, #20
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	2000b4b0 	.word	0x2000b4b0

0800df2c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800df32:	f00a ffbf 	bl	8018eb4 <sys_arch_protect>
 800df36:	6038      	str	r0, [r7, #0]
 800df38:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <pbuf_free_ooseq+0x44>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	701a      	strb	r2, [r3, #0]
 800df3e:	6838      	ldr	r0, [r7, #0]
 800df40:	f00a ffc6 	bl	8018ed0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800df44:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <pbuf_free_ooseq+0x48>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	607b      	str	r3, [r7, #4]
 800df4a:	e00a      	b.n	800df62 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df50:	2b00      	cmp	r3, #0
 800df52:	d003      	beq.n	800df5c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f002 f971 	bl	801023c <tcp_free_ooseq>
      return;
 800df5a:	e005      	b.n	800df68 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	607b      	str	r3, [r7, #4]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d1f1      	bne.n	800df4c <pbuf_free_ooseq+0x20>
    }
  }
}
 800df68:	3708      	adds	r7, #8
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	2000b4b8 	.word	0x2000b4b8
 800df74:	2000b4c0 	.word	0x2000b4c0

0800df78 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800df80:	f7ff ffd4 	bl	800df2c <pbuf_free_ooseq>
}
 800df84:	bf00      	nop
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800df92:	f00a ff8f 	bl	8018eb4 <sys_arch_protect>
 800df96:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800df98:	4b0f      	ldr	r3, [pc, #60]	; (800dfd8 <pbuf_pool_is_empty+0x4c>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800df9e:	4b0e      	ldr	r3, [pc, #56]	; (800dfd8 <pbuf_pool_is_empty+0x4c>)
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f00a ff93 	bl	8018ed0 <sys_arch_unprotect>

  if (!queued) {
 800dfaa:	78fb      	ldrb	r3, [r7, #3]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d10f      	bne.n	800dfd0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	480a      	ldr	r0, [pc, #40]	; (800dfdc <pbuf_pool_is_empty+0x50>)
 800dfb4:	f7fe ff5e 	bl	800ce74 <tcpip_try_callback>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d008      	beq.n	800dfd0 <pbuf_pool_is_empty+0x44>
 800dfbe:	f00a ff79 	bl	8018eb4 <sys_arch_protect>
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	4b04      	ldr	r3, [pc, #16]	; (800dfd8 <pbuf_pool_is_empty+0x4c>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f00a ff80 	bl	8018ed0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dfd0:	bf00      	nop
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	2000b4b8 	.word	0x2000b4b8
 800dfdc:	0800df79 	.word	0x0800df79

0800dfe0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	4611      	mov	r1, r2
 800dfec:	461a      	mov	r2, r3
 800dfee:	460b      	mov	r3, r1
 800dff0:	80fb      	strh	r3, [r7, #6]
 800dff2:	4613      	mov	r3, r2
 800dff4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2200      	movs	r2, #0
 800dffa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	88fa      	ldrh	r2, [r7, #6]
 800e006:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	88ba      	ldrh	r2, [r7, #4]
 800e00c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e00e:	8b3b      	ldrh	r3, [r7, #24]
 800e010:	b2da      	uxtb	r2, r3
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	7f3a      	ldrb	r2, [r7, #28]
 800e01a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2201      	movs	r2, #1
 800e020:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	73da      	strb	r2, [r3, #15]
}
 800e028:	bf00      	nop
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b08c      	sub	sp, #48	; 0x30
 800e038:	af02      	add	r7, sp, #8
 800e03a:	4603      	mov	r3, r0
 800e03c:	71fb      	strb	r3, [r7, #7]
 800e03e:	460b      	mov	r3, r1
 800e040:	80bb      	strh	r3, [r7, #4]
 800e042:	4613      	mov	r3, r2
 800e044:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e046:	79fb      	ldrb	r3, [r7, #7]
 800e048:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e04a:	887b      	ldrh	r3, [r7, #2]
 800e04c:	2b41      	cmp	r3, #65	; 0x41
 800e04e:	d00b      	beq.n	800e068 <pbuf_alloc+0x34>
 800e050:	2b41      	cmp	r3, #65	; 0x41
 800e052:	dc02      	bgt.n	800e05a <pbuf_alloc+0x26>
 800e054:	2b01      	cmp	r3, #1
 800e056:	d007      	beq.n	800e068 <pbuf_alloc+0x34>
 800e058:	e0c2      	b.n	800e1e0 <pbuf_alloc+0x1ac>
 800e05a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e05e:	d00b      	beq.n	800e078 <pbuf_alloc+0x44>
 800e060:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e064:	d070      	beq.n	800e148 <pbuf_alloc+0x114>
 800e066:	e0bb      	b.n	800e1e0 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e068:	887a      	ldrh	r2, [r7, #2]
 800e06a:	88bb      	ldrh	r3, [r7, #4]
 800e06c:	4619      	mov	r1, r3
 800e06e:	2000      	movs	r0, #0
 800e070:	f000 f8d2 	bl	800e218 <pbuf_alloc_reference>
 800e074:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e076:	e0bd      	b.n	800e1f4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e078:	2300      	movs	r3, #0
 800e07a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e07c:	2300      	movs	r3, #0
 800e07e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e080:	88bb      	ldrh	r3, [r7, #4]
 800e082:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e084:	200c      	movs	r0, #12
 800e086:	f7ff fc35 	bl	800d8f4 <memp_malloc>
 800e08a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d109      	bne.n	800e0a6 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800e092:	f7ff ff7b 	bl	800df8c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d002      	beq.n	800e0a2 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800e09c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e09e:	f000 faa9 	bl	800e5f4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	e0a7      	b.n	800e1f6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e0a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0a8:	3303      	adds	r3, #3
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	f023 0303 	bic.w	r3, r3, #3
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	8b7a      	ldrh	r2, [r7, #26]
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	bf28      	it	cs
 800e0be:	4613      	movcs	r3, r2
 800e0c0:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e0c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0c4:	3310      	adds	r3, #16
 800e0c6:	693a      	ldr	r2, [r7, #16]
 800e0c8:	4413      	add	r3, r2
 800e0ca:	3303      	adds	r3, #3
 800e0cc:	f023 0303 	bic.w	r3, r3, #3
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	89f9      	ldrh	r1, [r7, #14]
 800e0d4:	8b7a      	ldrh	r2, [r7, #26]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	887b      	ldrh	r3, [r7, #2]
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	460b      	mov	r3, r1
 800e0e0:	4601      	mov	r1, r0
 800e0e2:	6938      	ldr	r0, [r7, #16]
 800e0e4:	f7ff ff7c 	bl	800dfe0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	f003 0303 	and.w	r3, r3, #3
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d006      	beq.n	800e102 <pbuf_alloc+0xce>
 800e0f4:	4b42      	ldr	r3, [pc, #264]	; (800e200 <pbuf_alloc+0x1cc>)
 800e0f6:	f240 1201 	movw	r2, #257	; 0x101
 800e0fa:	4942      	ldr	r1, [pc, #264]	; (800e204 <pbuf_alloc+0x1d0>)
 800e0fc:	4842      	ldr	r0, [pc, #264]	; (800e208 <pbuf_alloc+0x1d4>)
 800e0fe:	f00b fc7d 	bl	80199fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e102:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e104:	3303      	adds	r3, #3
 800e106:	f023 0303 	bic.w	r3, r3, #3
 800e10a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e10e:	d106      	bne.n	800e11e <pbuf_alloc+0xea>
 800e110:	4b3b      	ldr	r3, [pc, #236]	; (800e200 <pbuf_alloc+0x1cc>)
 800e112:	f240 1203 	movw	r2, #259	; 0x103
 800e116:	493d      	ldr	r1, [pc, #244]	; (800e20c <pbuf_alloc+0x1d8>)
 800e118:	483b      	ldr	r0, [pc, #236]	; (800e208 <pbuf_alloc+0x1d4>)
 800e11a:	f00b fc6f 	bl	80199fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e120:	2b00      	cmp	r3, #0
 800e122:	d102      	bne.n	800e12a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	627b      	str	r3, [r7, #36]	; 0x24
 800e128:	e002      	b.n	800e130 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	693a      	ldr	r2, [r7, #16]
 800e12e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e134:	8b7a      	ldrh	r2, [r7, #26]
 800e136:	89fb      	ldrh	r3, [r7, #14]
 800e138:	1ad3      	subs	r3, r2, r3
 800e13a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e13c:	2300      	movs	r3, #0
 800e13e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e140:	8b7b      	ldrh	r3, [r7, #26]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d19e      	bne.n	800e084 <pbuf_alloc+0x50>
      break;
 800e146:	e055      	b.n	800e1f4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e14a:	3303      	adds	r3, #3
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	f023 0303 	bic.w	r3, r3, #3
 800e152:	b29a      	uxth	r2, r3
 800e154:	88bb      	ldrh	r3, [r7, #4]
 800e156:	3303      	adds	r3, #3
 800e158:	b29b      	uxth	r3, r3
 800e15a:	f023 0303 	bic.w	r3, r3, #3
 800e15e:	b29b      	uxth	r3, r3
 800e160:	4413      	add	r3, r2
 800e162:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e164:	8b3b      	ldrh	r3, [r7, #24]
 800e166:	3310      	adds	r3, #16
 800e168:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e16a:	8b3a      	ldrh	r2, [r7, #24]
 800e16c:	88bb      	ldrh	r3, [r7, #4]
 800e16e:	3303      	adds	r3, #3
 800e170:	f023 0303 	bic.w	r3, r3, #3
 800e174:	429a      	cmp	r2, r3
 800e176:	d306      	bcc.n	800e186 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e178:	8afa      	ldrh	r2, [r7, #22]
 800e17a:	88bb      	ldrh	r3, [r7, #4]
 800e17c:	3303      	adds	r3, #3
 800e17e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e182:	429a      	cmp	r2, r3
 800e184:	d201      	bcs.n	800e18a <pbuf_alloc+0x156>
        return NULL;
 800e186:	2300      	movs	r3, #0
 800e188:	e035      	b.n	800e1f6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e18a:	8afb      	ldrh	r3, [r7, #22]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7ff fa2f 	bl	800d5f0 <mem_malloc>
 800e192:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <pbuf_alloc+0x16a>
        return NULL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	e02b      	b.n	800e1f6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e19e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1a0:	3310      	adds	r3, #16
 800e1a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1a4:	4413      	add	r3, r2
 800e1a6:	3303      	adds	r3, #3
 800e1a8:	f023 0303 	bic.w	r3, r3, #3
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	88b9      	ldrh	r1, [r7, #4]
 800e1b0:	88ba      	ldrh	r2, [r7, #4]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	9301      	str	r3, [sp, #4]
 800e1b6:	887b      	ldrh	r3, [r7, #2]
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	4601      	mov	r1, r0
 800e1be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1c0:	f7ff ff0e 	bl	800dfe0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	f003 0303 	and.w	r3, r3, #3
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d010      	beq.n	800e1f2 <pbuf_alloc+0x1be>
 800e1d0:	4b0b      	ldr	r3, [pc, #44]	; (800e200 <pbuf_alloc+0x1cc>)
 800e1d2:	f240 1223 	movw	r2, #291	; 0x123
 800e1d6:	490e      	ldr	r1, [pc, #56]	; (800e210 <pbuf_alloc+0x1dc>)
 800e1d8:	480b      	ldr	r0, [pc, #44]	; (800e208 <pbuf_alloc+0x1d4>)
 800e1da:	f00b fc0f 	bl	80199fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e1de:	e008      	b.n	800e1f2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e1e0:	4b07      	ldr	r3, [pc, #28]	; (800e200 <pbuf_alloc+0x1cc>)
 800e1e2:	f240 1227 	movw	r2, #295	; 0x127
 800e1e6:	490b      	ldr	r1, [pc, #44]	; (800e214 <pbuf_alloc+0x1e0>)
 800e1e8:	4807      	ldr	r0, [pc, #28]	; (800e208 <pbuf_alloc+0x1d4>)
 800e1ea:	f00b fc07 	bl	80199fc <iprintf>
      return NULL;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	e001      	b.n	800e1f6 <pbuf_alloc+0x1c2>
      break;
 800e1f2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3728      	adds	r7, #40	; 0x28
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	0801d9e8 	.word	0x0801d9e8
 800e204:	0801da18 	.word	0x0801da18
 800e208:	0801da48 	.word	0x0801da48
 800e20c:	0801da70 	.word	0x0801da70
 800e210:	0801daa4 	.word	0x0801daa4
 800e214:	0801dad0 	.word	0x0801dad0

0800e218 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b086      	sub	sp, #24
 800e21c:	af02      	add	r7, sp, #8
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	460b      	mov	r3, r1
 800e222:	807b      	strh	r3, [r7, #2]
 800e224:	4613      	mov	r3, r2
 800e226:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e228:	883b      	ldrh	r3, [r7, #0]
 800e22a:	2b41      	cmp	r3, #65	; 0x41
 800e22c:	d009      	beq.n	800e242 <pbuf_alloc_reference+0x2a>
 800e22e:	883b      	ldrh	r3, [r7, #0]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d006      	beq.n	800e242 <pbuf_alloc_reference+0x2a>
 800e234:	4b0f      	ldr	r3, [pc, #60]	; (800e274 <pbuf_alloc_reference+0x5c>)
 800e236:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e23a:	490f      	ldr	r1, [pc, #60]	; (800e278 <pbuf_alloc_reference+0x60>)
 800e23c:	480f      	ldr	r0, [pc, #60]	; (800e27c <pbuf_alloc_reference+0x64>)
 800e23e:	f00b fbdd 	bl	80199fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e242:	200b      	movs	r0, #11
 800e244:	f7ff fb56 	bl	800d8f4 <memp_malloc>
 800e248:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d101      	bne.n	800e254 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e250:	2300      	movs	r3, #0
 800e252:	e00b      	b.n	800e26c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e254:	8879      	ldrh	r1, [r7, #2]
 800e256:	887a      	ldrh	r2, [r7, #2]
 800e258:	2300      	movs	r3, #0
 800e25a:	9301      	str	r3, [sp, #4]
 800e25c:	883b      	ldrh	r3, [r7, #0]
 800e25e:	9300      	str	r3, [sp, #0]
 800e260:	460b      	mov	r3, r1
 800e262:	6879      	ldr	r1, [r7, #4]
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f7ff febb 	bl	800dfe0 <pbuf_init_alloced_pbuf>
  return p;
 800e26a:	68fb      	ldr	r3, [r7, #12]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3710      	adds	r7, #16
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	0801d9e8 	.word	0x0801d9e8
 800e278:	0801daec 	.word	0x0801daec
 800e27c:	0801da48 	.word	0x0801da48

0800e280 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af02      	add	r7, sp, #8
 800e286:	607b      	str	r3, [r7, #4]
 800e288:	4603      	mov	r3, r0
 800e28a:	73fb      	strb	r3, [r7, #15]
 800e28c:	460b      	mov	r3, r1
 800e28e:	81bb      	strh	r3, [r7, #12]
 800e290:	4613      	mov	r3, r2
 800e292:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e294:	7bfb      	ldrb	r3, [r7, #15]
 800e296:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e298:	8a7b      	ldrh	r3, [r7, #18]
 800e29a:	3303      	adds	r3, #3
 800e29c:	f023 0203 	bic.w	r2, r3, #3
 800e2a0:	89bb      	ldrh	r3, [r7, #12]
 800e2a2:	441a      	add	r2, r3
 800e2a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d901      	bls.n	800e2ae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	e018      	b.n	800e2e0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e2ae:	6a3b      	ldr	r3, [r7, #32]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d007      	beq.n	800e2c4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e2b4:	8a7b      	ldrh	r3, [r7, #18]
 800e2b6:	3303      	adds	r3, #3
 800e2b8:	f023 0303 	bic.w	r3, r3, #3
 800e2bc:	6a3a      	ldr	r2, [r7, #32]
 800e2be:	4413      	add	r3, r2
 800e2c0:	617b      	str	r3, [r7, #20]
 800e2c2:	e001      	b.n	800e2c8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	89b9      	ldrh	r1, [r7, #12]
 800e2cc:	89ba      	ldrh	r2, [r7, #12]
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	9301      	str	r3, [sp, #4]
 800e2d2:	897b      	ldrh	r3, [r7, #10]
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	6979      	ldr	r1, [r7, #20]
 800e2da:	f7ff fe81 	bl	800dfe0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e2de:	687b      	ldr	r3, [r7, #4]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d106      	bne.n	800e308 <pbuf_realloc+0x20>
 800e2fa:	4b3a      	ldr	r3, [pc, #232]	; (800e3e4 <pbuf_realloc+0xfc>)
 800e2fc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e300:	4939      	ldr	r1, [pc, #228]	; (800e3e8 <pbuf_realloc+0x100>)
 800e302:	483a      	ldr	r0, [pc, #232]	; (800e3ec <pbuf_realloc+0x104>)
 800e304:	f00b fb7a 	bl	80199fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	891b      	ldrh	r3, [r3, #8]
 800e30c:	887a      	ldrh	r2, [r7, #2]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d264      	bcs.n	800e3dc <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	891a      	ldrh	r2, [r3, #8]
 800e316:	887b      	ldrh	r3, [r7, #2]
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e31c:	887b      	ldrh	r3, [r7, #2]
 800e31e:	817b      	strh	r3, [r7, #10]
  q = p;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e324:	e018      	b.n	800e358 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	895b      	ldrh	r3, [r3, #10]
 800e32a:	897a      	ldrh	r2, [r7, #10]
 800e32c:	1ad3      	subs	r3, r2, r3
 800e32e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	891a      	ldrh	r2, [r3, #8]
 800e334:	893b      	ldrh	r3, [r7, #8]
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	b29a      	uxth	r2, r3
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d106      	bne.n	800e358 <pbuf_realloc+0x70>
 800e34a:	4b26      	ldr	r3, [pc, #152]	; (800e3e4 <pbuf_realloc+0xfc>)
 800e34c:	f240 12af 	movw	r2, #431	; 0x1af
 800e350:	4927      	ldr	r1, [pc, #156]	; (800e3f0 <pbuf_realloc+0x108>)
 800e352:	4826      	ldr	r0, [pc, #152]	; (800e3ec <pbuf_realloc+0x104>)
 800e354:	f00b fb52 	bl	80199fc <iprintf>
  while (rem_len > q->len) {
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	895b      	ldrh	r3, [r3, #10]
 800e35c:	897a      	ldrh	r2, [r7, #10]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d8e1      	bhi.n	800e326 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	7b1b      	ldrb	r3, [r3, #12]
 800e366:	f003 030f 	and.w	r3, r3, #15
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d122      	bne.n	800e3b4 <pbuf_realloc+0xcc>
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	895b      	ldrh	r3, [r3, #10]
 800e372:	897a      	ldrh	r2, [r7, #10]
 800e374:	429a      	cmp	r2, r3
 800e376:	d01d      	beq.n	800e3b4 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	7b5b      	ldrb	r3, [r3, #13]
 800e37c:	f003 0302 	and.w	r3, r3, #2
 800e380:	2b00      	cmp	r3, #0
 800e382:	d117      	bne.n	800e3b4 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	461a      	mov	r2, r3
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	1ad3      	subs	r3, r2, r3
 800e38e:	b29a      	uxth	r2, r3
 800e390:	897b      	ldrh	r3, [r7, #10]
 800e392:	4413      	add	r3, r2
 800e394:	b29b      	uxth	r3, r3
 800e396:	4619      	mov	r1, r3
 800e398:	68f8      	ldr	r0, [r7, #12]
 800e39a:	f7ff f81f 	bl	800d3dc <mem_trim>
 800e39e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d106      	bne.n	800e3b4 <pbuf_realloc+0xcc>
 800e3a6:	4b0f      	ldr	r3, [pc, #60]	; (800e3e4 <pbuf_realloc+0xfc>)
 800e3a8:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e3ac:	4911      	ldr	r1, [pc, #68]	; (800e3f4 <pbuf_realloc+0x10c>)
 800e3ae:	480f      	ldr	r0, [pc, #60]	; (800e3ec <pbuf_realloc+0x104>)
 800e3b0:	f00b fb24 	bl	80199fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	897a      	ldrh	r2, [r7, #10]
 800e3b8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	895a      	ldrh	r2, [r3, #10]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d004      	beq.n	800e3d4 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f000 f910 	bl	800e5f4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	601a      	str	r2, [r3, #0]
 800e3da:	e000      	b.n	800e3de <pbuf_realloc+0xf6>
    return;
 800e3dc:	bf00      	nop

}
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	0801d9e8 	.word	0x0801d9e8
 800e3e8:	0801db00 	.word	0x0801db00
 800e3ec:	0801da48 	.word	0x0801da48
 800e3f0:	0801db18 	.word	0x0801db18
 800e3f4:	0801db30 	.word	0x0801db30

0800e3f8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b086      	sub	sp, #24
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	4613      	mov	r3, r2
 800e404:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d106      	bne.n	800e41a <pbuf_add_header_impl+0x22>
 800e40c:	4b2b      	ldr	r3, [pc, #172]	; (800e4bc <pbuf_add_header_impl+0xc4>)
 800e40e:	f240 12df 	movw	r2, #479	; 0x1df
 800e412:	492b      	ldr	r1, [pc, #172]	; (800e4c0 <pbuf_add_header_impl+0xc8>)
 800e414:	482b      	ldr	r0, [pc, #172]	; (800e4c4 <pbuf_add_header_impl+0xcc>)
 800e416:	f00b faf1 	bl	80199fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d003      	beq.n	800e428 <pbuf_add_header_impl+0x30>
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e426:	d301      	bcc.n	800e42c <pbuf_add_header_impl+0x34>
    return 1;
 800e428:	2301      	movs	r3, #1
 800e42a:	e043      	b.n	800e4b4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <pbuf_add_header_impl+0x3e>
    return 0;
 800e432:	2300      	movs	r3, #0
 800e434:	e03e      	b.n	800e4b4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	891a      	ldrh	r2, [r3, #8]
 800e43e:	8a7b      	ldrh	r3, [r7, #18]
 800e440:	4413      	add	r3, r2
 800e442:	b29b      	uxth	r3, r3
 800e444:	8a7a      	ldrh	r2, [r7, #18]
 800e446:	429a      	cmp	r2, r3
 800e448:	d901      	bls.n	800e44e <pbuf_add_header_impl+0x56>
    return 1;
 800e44a:	2301      	movs	r3, #1
 800e44c:	e032      	b.n	800e4b4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	7b1b      	ldrb	r3, [r3, #12]
 800e452:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e454:	8a3b      	ldrh	r3, [r7, #16]
 800e456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00c      	beq.n	800e478 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	685a      	ldr	r2, [r3, #4]
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	425b      	negs	r3, r3
 800e466:	4413      	add	r3, r2
 800e468:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	3310      	adds	r3, #16
 800e46e:	697a      	ldr	r2, [r7, #20]
 800e470:	429a      	cmp	r2, r3
 800e472:	d20d      	bcs.n	800e490 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e474:	2301      	movs	r3, #1
 800e476:	e01d      	b.n	800e4b4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e478:	79fb      	ldrb	r3, [r7, #7]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d006      	beq.n	800e48c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	685a      	ldr	r2, [r3, #4]
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	425b      	negs	r3, r3
 800e486:	4413      	add	r3, r2
 800e488:	617b      	str	r3, [r7, #20]
 800e48a:	e001      	b.n	800e490 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e48c:	2301      	movs	r3, #1
 800e48e:	e011      	b.n	800e4b4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	697a      	ldr	r2, [r7, #20]
 800e494:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	895a      	ldrh	r2, [r3, #10]
 800e49a:	8a7b      	ldrh	r3, [r7, #18]
 800e49c:	4413      	add	r3, r2
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	891a      	ldrh	r2, [r3, #8]
 800e4a8:	8a7b      	ldrh	r3, [r7, #18]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	811a      	strh	r2, [r3, #8]


  return 0;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3718      	adds	r7, #24
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	0801d9e8 	.word	0x0801d9e8
 800e4c0:	0801db4c 	.word	0x0801db4c
 800e4c4:	0801da48 	.word	0x0801da48

0800e4c8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f7ff ff8e 	bl	800e3f8 <pbuf_add_header_impl>
 800e4dc:	4603      	mov	r3, r0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
	...

0800e4e8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d106      	bne.n	800e506 <pbuf_remove_header+0x1e>
 800e4f8:	4b20      	ldr	r3, [pc, #128]	; (800e57c <pbuf_remove_header+0x94>)
 800e4fa:	f240 224b 	movw	r2, #587	; 0x24b
 800e4fe:	4920      	ldr	r1, [pc, #128]	; (800e580 <pbuf_remove_header+0x98>)
 800e500:	4820      	ldr	r0, [pc, #128]	; (800e584 <pbuf_remove_header+0x9c>)
 800e502:	f00b fa7b 	bl	80199fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d003      	beq.n	800e514 <pbuf_remove_header+0x2c>
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e512:	d301      	bcc.n	800e518 <pbuf_remove_header+0x30>
    return 1;
 800e514:	2301      	movs	r3, #1
 800e516:	e02c      	b.n	800e572 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d101      	bne.n	800e522 <pbuf_remove_header+0x3a>
    return 0;
 800e51e:	2300      	movs	r3, #0
 800e520:	e027      	b.n	800e572 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	895b      	ldrh	r3, [r3, #10]
 800e52a:	89fa      	ldrh	r2, [r7, #14]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d908      	bls.n	800e542 <pbuf_remove_header+0x5a>
 800e530:	4b12      	ldr	r3, [pc, #72]	; (800e57c <pbuf_remove_header+0x94>)
 800e532:	f240 2255 	movw	r2, #597	; 0x255
 800e536:	4914      	ldr	r1, [pc, #80]	; (800e588 <pbuf_remove_header+0xa0>)
 800e538:	4812      	ldr	r0, [pc, #72]	; (800e584 <pbuf_remove_header+0x9c>)
 800e53a:	f00b fa5f 	bl	80199fc <iprintf>
 800e53e:	2301      	movs	r3, #1
 800e540:	e017      	b.n	800e572 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	441a      	add	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	895a      	ldrh	r2, [r3, #10]
 800e558:	89fb      	ldrh	r3, [r7, #14]
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	891a      	ldrh	r2, [r3, #8]
 800e566:	89fb      	ldrh	r3, [r7, #14]
 800e568:	1ad3      	subs	r3, r2, r3
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	0801d9e8 	.word	0x0801d9e8
 800e580:	0801db4c 	.word	0x0801db4c
 800e584:	0801da48 	.word	0x0801da48
 800e588:	0801db58 	.word	0x0801db58

0800e58c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	460b      	mov	r3, r1
 800e596:	807b      	strh	r3, [r7, #2]
 800e598:	4613      	mov	r3, r2
 800e59a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e59c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	da08      	bge.n	800e5b6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e5a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5a8:	425b      	negs	r3, r3
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7ff ff9b 	bl	800e4e8 <pbuf_remove_header>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	e007      	b.n	800e5c6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e5b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5ba:	787a      	ldrb	r2, [r7, #1]
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7ff ff1a 	bl	800e3f8 <pbuf_add_header_impl>
 800e5c4:	4603      	mov	r3, r0
  }
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3708      	adds	r7, #8
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b082      	sub	sp, #8
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e5da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7ff ffd2 	bl	800e58c <pbuf_header_impl>
 800e5e8:	4603      	mov	r3, r0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
	...

0800e5f4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b088      	sub	sp, #32
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10b      	bne.n	800e61a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d106      	bne.n	800e616 <pbuf_free+0x22>
 800e608:	4b3b      	ldr	r3, [pc, #236]	; (800e6f8 <pbuf_free+0x104>)
 800e60a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e60e:	493b      	ldr	r1, [pc, #236]	; (800e6fc <pbuf_free+0x108>)
 800e610:	483b      	ldr	r0, [pc, #236]	; (800e700 <pbuf_free+0x10c>)
 800e612:	f00b f9f3 	bl	80199fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e616:	2300      	movs	r3, #0
 800e618:	e069      	b.n	800e6ee <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e61a:	2300      	movs	r3, #0
 800e61c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e61e:	e062      	b.n	800e6e6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e620:	f00a fc48 	bl	8018eb4 <sys_arch_protect>
 800e624:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	7b9b      	ldrb	r3, [r3, #14]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d106      	bne.n	800e63c <pbuf_free+0x48>
 800e62e:	4b32      	ldr	r3, [pc, #200]	; (800e6f8 <pbuf_free+0x104>)
 800e630:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e634:	4933      	ldr	r1, [pc, #204]	; (800e704 <pbuf_free+0x110>)
 800e636:	4832      	ldr	r0, [pc, #200]	; (800e700 <pbuf_free+0x10c>)
 800e638:	f00b f9e0 	bl	80199fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	7b9b      	ldrb	r3, [r3, #14]
 800e640:	3b01      	subs	r3, #1
 800e642:	b2da      	uxtb	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	739a      	strb	r2, [r3, #14]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	7b9b      	ldrb	r3, [r3, #14]
 800e64c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e64e:	69b8      	ldr	r0, [r7, #24]
 800e650:	f00a fc3e 	bl	8018ed0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e654:	7dfb      	ldrb	r3, [r7, #23]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d143      	bne.n	800e6e2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	7b1b      	ldrb	r3, [r3, #12]
 800e664:	f003 030f 	and.w	r3, r3, #15
 800e668:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	7b5b      	ldrb	r3, [r3, #13]
 800e66e:	f003 0302 	and.w	r3, r3, #2
 800e672:	2b00      	cmp	r3, #0
 800e674:	d011      	beq.n	800e69a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	691b      	ldr	r3, [r3, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d106      	bne.n	800e690 <pbuf_free+0x9c>
 800e682:	4b1d      	ldr	r3, [pc, #116]	; (800e6f8 <pbuf_free+0x104>)
 800e684:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e688:	491f      	ldr	r1, [pc, #124]	; (800e708 <pbuf_free+0x114>)
 800e68a:	481d      	ldr	r0, [pc, #116]	; (800e700 <pbuf_free+0x10c>)
 800e68c:	f00b f9b6 	bl	80199fc <iprintf>
        pc->custom_free_function(p);
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	691b      	ldr	r3, [r3, #16]
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	4798      	blx	r3
 800e698:	e01d      	b.n	800e6d6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	d104      	bne.n	800e6aa <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e6a0:	6879      	ldr	r1, [r7, #4]
 800e6a2:	200c      	movs	r0, #12
 800e6a4:	f7ff f978 	bl	800d998 <memp_free>
 800e6a8:	e015      	b.n	800e6d6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e6aa:	7bfb      	ldrb	r3, [r7, #15]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d104      	bne.n	800e6ba <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e6b0:	6879      	ldr	r1, [r7, #4]
 800e6b2:	200b      	movs	r0, #11
 800e6b4:	f7ff f970 	bl	800d998 <memp_free>
 800e6b8:	e00d      	b.n	800e6d6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e6ba:	7bfb      	ldrb	r3, [r7, #15]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d103      	bne.n	800e6c8 <pbuf_free+0xd4>
          mem_free(p);
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7fe fdfb 	bl	800d2bc <mem_free>
 800e6c6:	e006      	b.n	800e6d6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e6c8:	4b0b      	ldr	r3, [pc, #44]	; (800e6f8 <pbuf_free+0x104>)
 800e6ca:	f240 320f 	movw	r2, #783	; 0x30f
 800e6ce:	490f      	ldr	r1, [pc, #60]	; (800e70c <pbuf_free+0x118>)
 800e6d0:	480b      	ldr	r0, [pc, #44]	; (800e700 <pbuf_free+0x10c>)
 800e6d2:	f00b f993 	bl	80199fc <iprintf>
        }
      }
      count++;
 800e6d6:	7ffb      	ldrb	r3, [r7, #31]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	607b      	str	r3, [r7, #4]
 800e6e0:	e001      	b.n	800e6e6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d199      	bne.n	800e620 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e6ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3720      	adds	r7, #32
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	0801d9e8 	.word	0x0801d9e8
 800e6fc:	0801db4c 	.word	0x0801db4c
 800e700:	0801da48 	.word	0x0801da48
 800e704:	0801db78 	.word	0x0801db78
 800e708:	0801db90 	.word	0x0801db90
 800e70c:	0801dbb4 	.word	0x0801dbb4

0800e710 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e710:	b480      	push	{r7}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e718:	2300      	movs	r3, #0
 800e71a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e71c:	e005      	b.n	800e72a <pbuf_clen+0x1a>
    ++len;
 800e71e:	89fb      	ldrh	r3, [r7, #14]
 800e720:	3301      	adds	r3, #1
 800e722:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1f6      	bne.n	800e71e <pbuf_clen+0xe>
  }
  return len;
 800e730:	89fb      	ldrh	r3, [r7, #14]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3714      	adds	r7, #20
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
	...

0800e740 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d016      	beq.n	800e77c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e74e:	f00a fbb1 	bl	8018eb4 <sys_arch_protect>
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	7b9b      	ldrb	r3, [r3, #14]
 800e758:	3301      	adds	r3, #1
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	739a      	strb	r2, [r3, #14]
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f00a fbb5 	bl	8018ed0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	7b9b      	ldrb	r3, [r3, #14]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d106      	bne.n	800e77c <pbuf_ref+0x3c>
 800e76e:	4b05      	ldr	r3, [pc, #20]	; (800e784 <pbuf_ref+0x44>)
 800e770:	f240 3242 	movw	r2, #834	; 0x342
 800e774:	4904      	ldr	r1, [pc, #16]	; (800e788 <pbuf_ref+0x48>)
 800e776:	4805      	ldr	r0, [pc, #20]	; (800e78c <pbuf_ref+0x4c>)
 800e778:	f00b f940 	bl	80199fc <iprintf>
  }
}
 800e77c:	bf00      	nop
 800e77e:	3710      	adds	r7, #16
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	0801d9e8 	.word	0x0801d9e8
 800e788:	0801dbc8 	.word	0x0801dbc8
 800e78c:	0801da48 	.word	0x0801da48

0800e790 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d002      	beq.n	800e7a6 <pbuf_cat+0x16>
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d107      	bne.n	800e7b6 <pbuf_cat+0x26>
 800e7a6:	4b20      	ldr	r3, [pc, #128]	; (800e828 <pbuf_cat+0x98>)
 800e7a8:	f240 325a 	movw	r2, #858	; 0x35a
 800e7ac:	491f      	ldr	r1, [pc, #124]	; (800e82c <pbuf_cat+0x9c>)
 800e7ae:	4820      	ldr	r0, [pc, #128]	; (800e830 <pbuf_cat+0xa0>)
 800e7b0:	f00b f924 	bl	80199fc <iprintf>
 800e7b4:	e034      	b.n	800e820 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	60fb      	str	r3, [r7, #12]
 800e7ba:	e00a      	b.n	800e7d2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	891a      	ldrh	r2, [r3, #8]
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	891b      	ldrh	r3, [r3, #8]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	60fb      	str	r3, [r7, #12]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1f0      	bne.n	800e7bc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	891a      	ldrh	r2, [r3, #8]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	895b      	ldrh	r3, [r3, #10]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d006      	beq.n	800e7f4 <pbuf_cat+0x64>
 800e7e6:	4b10      	ldr	r3, [pc, #64]	; (800e828 <pbuf_cat+0x98>)
 800e7e8:	f240 3262 	movw	r2, #866	; 0x362
 800e7ec:	4911      	ldr	r1, [pc, #68]	; (800e834 <pbuf_cat+0xa4>)
 800e7ee:	4810      	ldr	r0, [pc, #64]	; (800e830 <pbuf_cat+0xa0>)
 800e7f0:	f00b f904 	bl	80199fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d006      	beq.n	800e80a <pbuf_cat+0x7a>
 800e7fc:	4b0a      	ldr	r3, [pc, #40]	; (800e828 <pbuf_cat+0x98>)
 800e7fe:	f240 3263 	movw	r2, #867	; 0x363
 800e802:	490d      	ldr	r1, [pc, #52]	; (800e838 <pbuf_cat+0xa8>)
 800e804:	480a      	ldr	r0, [pc, #40]	; (800e830 <pbuf_cat+0xa0>)
 800e806:	f00b f8f9 	bl	80199fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	891a      	ldrh	r2, [r3, #8]
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	891b      	ldrh	r3, [r3, #8]
 800e812:	4413      	add	r3, r2
 800e814:	b29a      	uxth	r2, r3
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	683a      	ldr	r2, [r7, #0]
 800e81e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	0801d9e8 	.word	0x0801d9e8
 800e82c:	0801dbdc 	.word	0x0801dbdc
 800e830:	0801da48 	.word	0x0801da48
 800e834:	0801dc14 	.word	0x0801dc14
 800e838:	0801dc44 	.word	0x0801dc44

0800e83c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e846:	6839      	ldr	r1, [r7, #0]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7ff ffa1 	bl	800e790 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e84e:	6838      	ldr	r0, [r7, #0]
 800e850:	f7ff ff76 	bl	800e740 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e854:	bf00      	nop
 800e856:	3708      	adds	r7, #8
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e866:	2300      	movs	r3, #0
 800e868:	617b      	str	r3, [r7, #20]
 800e86a:	2300      	movs	r3, #0
 800e86c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d008      	beq.n	800e886 <pbuf_copy+0x2a>
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d005      	beq.n	800e886 <pbuf_copy+0x2a>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	891a      	ldrh	r2, [r3, #8]
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	891b      	ldrh	r3, [r3, #8]
 800e882:	429a      	cmp	r2, r3
 800e884:	d209      	bcs.n	800e89a <pbuf_copy+0x3e>
 800e886:	4b57      	ldr	r3, [pc, #348]	; (800e9e4 <pbuf_copy+0x188>)
 800e888:	f240 32ca 	movw	r2, #970	; 0x3ca
 800e88c:	4956      	ldr	r1, [pc, #344]	; (800e9e8 <pbuf_copy+0x18c>)
 800e88e:	4857      	ldr	r0, [pc, #348]	; (800e9ec <pbuf_copy+0x190>)
 800e890:	f00b f8b4 	bl	80199fc <iprintf>
 800e894:	f06f 030f 	mvn.w	r3, #15
 800e898:	e09f      	b.n	800e9da <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	895b      	ldrh	r3, [r3, #10]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	1ad2      	subs	r2, r2, r3
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	895b      	ldrh	r3, [r3, #10]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	1acb      	subs	r3, r1, r3
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d306      	bcc.n	800e8c0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	895b      	ldrh	r3, [r3, #10]
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	1ad3      	subs	r3, r2, r3
 800e8bc:	60fb      	str	r3, [r7, #12]
 800e8be:	e005      	b.n	800e8cc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	895b      	ldrh	r3, [r3, #10]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	1ad3      	subs	r3, r2, r3
 800e8ca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	685a      	ldr	r2, [r3, #4]
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	18d0      	adds	r0, r2, r3
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	4413      	add	r3, r2
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	4619      	mov	r1, r3
 800e8e0:	f00a fb5b 	bl	8018f9a <memcpy>
    offset_to += len;
 800e8e4:	697a      	ldr	r2, [r7, #20]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e8ec:	693a      	ldr	r2, [r7, #16]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	895b      	ldrh	r3, [r3, #10]
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d906      	bls.n	800e90e <pbuf_copy+0xb2>
 800e900:	4b38      	ldr	r3, [pc, #224]	; (800e9e4 <pbuf_copy+0x188>)
 800e902:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e906:	493a      	ldr	r1, [pc, #232]	; (800e9f0 <pbuf_copy+0x194>)
 800e908:	4838      	ldr	r0, [pc, #224]	; (800e9ec <pbuf_copy+0x190>)
 800e90a:	f00b f877 	bl	80199fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	895b      	ldrh	r3, [r3, #10]
 800e912:	461a      	mov	r2, r3
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	4293      	cmp	r3, r2
 800e918:	d906      	bls.n	800e928 <pbuf_copy+0xcc>
 800e91a:	4b32      	ldr	r3, [pc, #200]	; (800e9e4 <pbuf_copy+0x188>)
 800e91c:	f240 32da 	movw	r2, #986	; 0x3da
 800e920:	4934      	ldr	r1, [pc, #208]	; (800e9f4 <pbuf_copy+0x198>)
 800e922:	4832      	ldr	r0, [pc, #200]	; (800e9ec <pbuf_copy+0x190>)
 800e924:	f00b f86a 	bl	80199fc <iprintf>
    if (offset_from >= p_from->len) {
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	895b      	ldrh	r3, [r3, #10]
 800e92c:	461a      	mov	r2, r3
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	4293      	cmp	r3, r2
 800e932:	d304      	bcc.n	800e93e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e934:	2300      	movs	r3, #0
 800e936:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	895b      	ldrh	r3, [r3, #10]
 800e942:	461a      	mov	r2, r3
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	4293      	cmp	r3, r2
 800e948:	d114      	bne.n	800e974 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d10c      	bne.n	800e974 <pbuf_copy+0x118>
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d009      	beq.n	800e974 <pbuf_copy+0x118>
 800e960:	4b20      	ldr	r3, [pc, #128]	; (800e9e4 <pbuf_copy+0x188>)
 800e962:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e966:	4924      	ldr	r1, [pc, #144]	; (800e9f8 <pbuf_copy+0x19c>)
 800e968:	4820      	ldr	r0, [pc, #128]	; (800e9ec <pbuf_copy+0x190>)
 800e96a:	f00b f847 	bl	80199fc <iprintf>
 800e96e:	f06f 030f 	mvn.w	r3, #15
 800e972:	e032      	b.n	800e9da <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d013      	beq.n	800e9a2 <pbuf_copy+0x146>
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	895a      	ldrh	r2, [r3, #10]
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	891b      	ldrh	r3, [r3, #8]
 800e982:	429a      	cmp	r2, r3
 800e984:	d10d      	bne.n	800e9a2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d009      	beq.n	800e9a2 <pbuf_copy+0x146>
 800e98e:	4b15      	ldr	r3, [pc, #84]	; (800e9e4 <pbuf_copy+0x188>)
 800e990:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800e994:	4919      	ldr	r1, [pc, #100]	; (800e9fc <pbuf_copy+0x1a0>)
 800e996:	4815      	ldr	r0, [pc, #84]	; (800e9ec <pbuf_copy+0x190>)
 800e998:	f00b f830 	bl	80199fc <iprintf>
 800e99c:	f06f 0305 	mvn.w	r3, #5
 800e9a0:	e01b      	b.n	800e9da <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d013      	beq.n	800e9d0 <pbuf_copy+0x174>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	895a      	ldrh	r2, [r3, #10]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	891b      	ldrh	r3, [r3, #8]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d10d      	bne.n	800e9d0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d009      	beq.n	800e9d0 <pbuf_copy+0x174>
 800e9bc:	4b09      	ldr	r3, [pc, #36]	; (800e9e4 <pbuf_copy+0x188>)
 800e9be:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e9c2:	490e      	ldr	r1, [pc, #56]	; (800e9fc <pbuf_copy+0x1a0>)
 800e9c4:	4809      	ldr	r0, [pc, #36]	; (800e9ec <pbuf_copy+0x190>)
 800e9c6:	f00b f819 	bl	80199fc <iprintf>
 800e9ca:	f06f 0305 	mvn.w	r3, #5
 800e9ce:	e004      	b.n	800e9da <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f47f af61 	bne.w	800e89a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e9d8:	2300      	movs	r3, #0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	0801d9e8 	.word	0x0801d9e8
 800e9e8:	0801dc90 	.word	0x0801dc90
 800e9ec:	0801da48 	.word	0x0801da48
 800e9f0:	0801dcc0 	.word	0x0801dcc0
 800e9f4:	0801dcd8 	.word	0x0801dcd8
 800e9f8:	0801dcf4 	.word	0x0801dcf4
 800e9fc:	0801dd04 	.word	0x0801dd04

0800ea00 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b088      	sub	sp, #32
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	460b      	mov	r3, r1
 800ea10:	80fb      	strh	r3, [r7, #6]
 800ea12:	4613      	mov	r3, r2
 800ea14:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ea16:	2300      	movs	r3, #0
 800ea18:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d108      	bne.n	800ea36 <pbuf_copy_partial+0x36>
 800ea24:	4b2b      	ldr	r3, [pc, #172]	; (800ead4 <pbuf_copy_partial+0xd4>)
 800ea26:	f240 420a 	movw	r2, #1034	; 0x40a
 800ea2a:	492b      	ldr	r1, [pc, #172]	; (800ead8 <pbuf_copy_partial+0xd8>)
 800ea2c:	482b      	ldr	r0, [pc, #172]	; (800eadc <pbuf_copy_partial+0xdc>)
 800ea2e:	f00a ffe5 	bl	80199fc <iprintf>
 800ea32:	2300      	movs	r3, #0
 800ea34:	e04a      	b.n	800eacc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d108      	bne.n	800ea4e <pbuf_copy_partial+0x4e>
 800ea3c:	4b25      	ldr	r3, [pc, #148]	; (800ead4 <pbuf_copy_partial+0xd4>)
 800ea3e:	f240 420b 	movw	r2, #1035	; 0x40b
 800ea42:	4927      	ldr	r1, [pc, #156]	; (800eae0 <pbuf_copy_partial+0xe0>)
 800ea44:	4825      	ldr	r0, [pc, #148]	; (800eadc <pbuf_copy_partial+0xdc>)
 800ea46:	f00a ffd9 	bl	80199fc <iprintf>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	e03e      	b.n	800eacc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	61fb      	str	r3, [r7, #28]
 800ea52:	e034      	b.n	800eabe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ea54:	88bb      	ldrh	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00a      	beq.n	800ea70 <pbuf_copy_partial+0x70>
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	895b      	ldrh	r3, [r3, #10]
 800ea5e:	88ba      	ldrh	r2, [r7, #4]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d305      	bcc.n	800ea70 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	895b      	ldrh	r3, [r3, #10]
 800ea68:	88ba      	ldrh	r2, [r7, #4]
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	80bb      	strh	r3, [r7, #4]
 800ea6e:	e023      	b.n	800eab8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	895a      	ldrh	r2, [r3, #10]
 800ea74:	88bb      	ldrh	r3, [r7, #4]
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ea7a:	8b3a      	ldrh	r2, [r7, #24]
 800ea7c:	88fb      	ldrh	r3, [r7, #6]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d901      	bls.n	800ea86 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ea82:	88fb      	ldrh	r3, [r7, #6]
 800ea84:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ea86:	8b7b      	ldrh	r3, [r7, #26]
 800ea88:	68ba      	ldr	r2, [r7, #8]
 800ea8a:	18d0      	adds	r0, r2, r3
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	685a      	ldr	r2, [r3, #4]
 800ea90:	88bb      	ldrh	r3, [r7, #4]
 800ea92:	4413      	add	r3, r2
 800ea94:	8b3a      	ldrh	r2, [r7, #24]
 800ea96:	4619      	mov	r1, r3
 800ea98:	f00a fa7f 	bl	8018f9a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ea9c:	8afa      	ldrh	r2, [r7, #22]
 800ea9e:	8b3b      	ldrh	r3, [r7, #24]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800eaa4:	8b7a      	ldrh	r2, [r7, #26]
 800eaa6:	8b3b      	ldrh	r3, [r7, #24]
 800eaa8:	4413      	add	r3, r2
 800eaaa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800eaac:	88fa      	ldrh	r2, [r7, #6]
 800eaae:	8b3b      	ldrh	r3, [r7, #24]
 800eab0:	1ad3      	subs	r3, r2, r3
 800eab2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800eab4:	2300      	movs	r3, #0
 800eab6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	61fb      	str	r3, [r7, #28]
 800eabe:	88fb      	ldrh	r3, [r7, #6]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d002      	beq.n	800eaca <pbuf_copy_partial+0xca>
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1c4      	bne.n	800ea54 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800eaca:	8afb      	ldrh	r3, [r7, #22]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3720      	adds	r7, #32
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	0801d9e8 	.word	0x0801d9e8
 800ead8:	0801dd30 	.word	0x0801dd30
 800eadc:	0801da48 	.word	0x0801da48
 800eae0:	0801dd50 	.word	0x0801dd50

0800eae4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b084      	sub	sp, #16
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	4603      	mov	r3, r0
 800eaec:	603a      	str	r2, [r7, #0]
 800eaee:	71fb      	strb	r3, [r7, #7]
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	8919      	ldrh	r1, [r3, #8]
 800eaf8:	88ba      	ldrh	r2, [r7, #4]
 800eafa:	79fb      	ldrb	r3, [r7, #7]
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7ff fa99 	bl	800e034 <pbuf_alloc>
 800eb02:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d101      	bne.n	800eb0e <pbuf_clone+0x2a>
    return NULL;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	e011      	b.n	800eb32 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800eb0e:	6839      	ldr	r1, [r7, #0]
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f7ff fea3 	bl	800e85c <pbuf_copy>
 800eb16:	4603      	mov	r3, r0
 800eb18:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eb1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d006      	beq.n	800eb30 <pbuf_clone+0x4c>
 800eb22:	4b06      	ldr	r3, [pc, #24]	; (800eb3c <pbuf_clone+0x58>)
 800eb24:	f240 5224 	movw	r2, #1316	; 0x524
 800eb28:	4905      	ldr	r1, [pc, #20]	; (800eb40 <pbuf_clone+0x5c>)
 800eb2a:	4806      	ldr	r0, [pc, #24]	; (800eb44 <pbuf_clone+0x60>)
 800eb2c:	f00a ff66 	bl	80199fc <iprintf>
  return q;
 800eb30:	68fb      	ldr	r3, [r7, #12]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	0801d9e8 	.word	0x0801d9e8
 800eb40:	0801de5c 	.word	0x0801de5c
 800eb44:	0801da48 	.word	0x0801da48

0800eb48 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eb4c:	f00a ff6e 	bl	8019a2c <rand>
 800eb50:	4603      	mov	r3, r0
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	4b01      	ldr	r3, [pc, #4]	; (800eb68 <tcp_init+0x20>)
 800eb62:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eb64:	bf00      	nop
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	200000b0 	.word	0x200000b0

0800eb6c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	7d1b      	ldrb	r3, [r3, #20]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d105      	bne.n	800eb88 <tcp_free+0x1c>
 800eb7c:	4b06      	ldr	r3, [pc, #24]	; (800eb98 <tcp_free+0x2c>)
 800eb7e:	22d4      	movs	r2, #212	; 0xd4
 800eb80:	4906      	ldr	r1, [pc, #24]	; (800eb9c <tcp_free+0x30>)
 800eb82:	4807      	ldr	r0, [pc, #28]	; (800eba0 <tcp_free+0x34>)
 800eb84:	f00a ff3a 	bl	80199fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800eb88:	6879      	ldr	r1, [r7, #4]
 800eb8a:	2001      	movs	r0, #1
 800eb8c:	f7fe ff04 	bl	800d998 <memp_free>
}
 800eb90:	bf00      	nop
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	0801dee8 	.word	0x0801dee8
 800eb9c:	0801df18 	.word	0x0801df18
 800eba0:	0801df2c 	.word	0x0801df2c

0800eba4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	7d1b      	ldrb	r3, [r3, #20]
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d105      	bne.n	800ebc0 <tcp_free_listen+0x1c>
 800ebb4:	4b06      	ldr	r3, [pc, #24]	; (800ebd0 <tcp_free_listen+0x2c>)
 800ebb6:	22df      	movs	r2, #223	; 0xdf
 800ebb8:	4906      	ldr	r1, [pc, #24]	; (800ebd4 <tcp_free_listen+0x30>)
 800ebba:	4807      	ldr	r0, [pc, #28]	; (800ebd8 <tcp_free_listen+0x34>)
 800ebbc:	f00a ff1e 	bl	80199fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ebc0:	6879      	ldr	r1, [r7, #4]
 800ebc2:	2002      	movs	r0, #2
 800ebc4:	f7fe fee8 	bl	800d998 <memp_free>
}
 800ebc8:	bf00      	nop
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	0801dee8 	.word	0x0801dee8
 800ebd4:	0801df54 	.word	0x0801df54
 800ebd8:	0801df2c 	.word	0x0801df2c

0800ebdc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ebe0:	f000 fe98 	bl	800f914 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ebe4:	4b07      	ldr	r3, [pc, #28]	; (800ec04 <tcp_tmr+0x28>)
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	4b05      	ldr	r3, [pc, #20]	; (800ec04 <tcp_tmr+0x28>)
 800ebee:	701a      	strb	r2, [r3, #0]
 800ebf0:	4b04      	ldr	r3, [pc, #16]	; (800ec04 <tcp_tmr+0x28>)
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	f003 0301 	and.w	r3, r3, #1
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ebfc:	f000 fb4c 	bl	800f298 <tcp_slowtmr>
  }
}
 800ec00:	bf00      	nop
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	20004711 	.word	0x20004711

0800ec08 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d105      	bne.n	800ec24 <tcp_remove_listener+0x1c>
 800ec18:	4b0d      	ldr	r3, [pc, #52]	; (800ec50 <tcp_remove_listener+0x48>)
 800ec1a:	22ff      	movs	r2, #255	; 0xff
 800ec1c:	490d      	ldr	r1, [pc, #52]	; (800ec54 <tcp_remove_listener+0x4c>)
 800ec1e:	480e      	ldr	r0, [pc, #56]	; (800ec58 <tcp_remove_listener+0x50>)
 800ec20:	f00a feec 	bl	80199fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	60fb      	str	r3, [r7, #12]
 800ec28:	e00a      	b.n	800ec40 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec2e:	683a      	ldr	r2, [r7, #0]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d102      	bne.n	800ec3a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2200      	movs	r2, #0
 800ec38:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	60fb      	str	r3, [r7, #12]
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d1f1      	bne.n	800ec2a <tcp_remove_listener+0x22>
    }
  }
}
 800ec46:	bf00      	nop
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	0801dee8 	.word	0x0801dee8
 800ec54:	0801df70 	.word	0x0801df70
 800ec58:	0801df2c 	.word	0x0801df2c

0800ec5c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d106      	bne.n	800ec78 <tcp_listen_closed+0x1c>
 800ec6a:	4b14      	ldr	r3, [pc, #80]	; (800ecbc <tcp_listen_closed+0x60>)
 800ec6c:	f240 1211 	movw	r2, #273	; 0x111
 800ec70:	4913      	ldr	r1, [pc, #76]	; (800ecc0 <tcp_listen_closed+0x64>)
 800ec72:	4814      	ldr	r0, [pc, #80]	; (800ecc4 <tcp_listen_closed+0x68>)
 800ec74:	f00a fec2 	bl	80199fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	7d1b      	ldrb	r3, [r3, #20]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d006      	beq.n	800ec8e <tcp_listen_closed+0x32>
 800ec80:	4b0e      	ldr	r3, [pc, #56]	; (800ecbc <tcp_listen_closed+0x60>)
 800ec82:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ec86:	4910      	ldr	r1, [pc, #64]	; (800ecc8 <tcp_listen_closed+0x6c>)
 800ec88:	480e      	ldr	r0, [pc, #56]	; (800ecc4 <tcp_listen_closed+0x68>)
 800ec8a:	f00a feb7 	bl	80199fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ec8e:	2301      	movs	r3, #1
 800ec90:	60fb      	str	r3, [r7, #12]
 800ec92:	e00b      	b.n	800ecac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ec94:	4a0d      	ldr	r2, [pc, #52]	; (800eccc <tcp_listen_closed+0x70>)
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	6879      	ldr	r1, [r7, #4]
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7ff ffb1 	bl	800ec08 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	60fb      	str	r3, [r7, #12]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2b03      	cmp	r3, #3
 800ecb0:	d9f0      	bls.n	800ec94 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ecb2:	bf00      	nop
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	0801dee8 	.word	0x0801dee8
 800ecc0:	0801df98 	.word	0x0801df98
 800ecc4:	0801df2c 	.word	0x0801df2c
 800ecc8:	0801dfa4 	.word	0x0801dfa4
 800eccc:	08020ff8 	.word	0x08020ff8

0800ecd0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ecd0:	b5b0      	push	{r4, r5, r7, lr}
 800ecd2:	b088      	sub	sp, #32
 800ecd4:	af04      	add	r7, sp, #16
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	460b      	mov	r3, r1
 800ecda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d106      	bne.n	800ecf0 <tcp_close_shutdown+0x20>
 800ece2:	4b61      	ldr	r3, [pc, #388]	; (800ee68 <tcp_close_shutdown+0x198>)
 800ece4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ece8:	4960      	ldr	r1, [pc, #384]	; (800ee6c <tcp_close_shutdown+0x19c>)
 800ecea:	4861      	ldr	r0, [pc, #388]	; (800ee70 <tcp_close_shutdown+0x1a0>)
 800ecec:	f00a fe86 	bl	80199fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ecf0:	78fb      	ldrb	r3, [r7, #3]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d066      	beq.n	800edc4 <tcp_close_shutdown+0xf4>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	7d1b      	ldrb	r3, [r3, #20]
 800ecfa:	2b04      	cmp	r3, #4
 800ecfc:	d003      	beq.n	800ed06 <tcp_close_shutdown+0x36>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	7d1b      	ldrb	r3, [r3, #20]
 800ed02:	2b07      	cmp	r3, #7
 800ed04:	d15e      	bne.n	800edc4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d104      	bne.n	800ed18 <tcp_close_shutdown+0x48>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed16:	d055      	beq.n	800edc4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	8b5b      	ldrh	r3, [r3, #26]
 800ed1c:	f003 0310 	and.w	r3, r3, #16
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d106      	bne.n	800ed32 <tcp_close_shutdown+0x62>
 800ed24:	4b50      	ldr	r3, [pc, #320]	; (800ee68 <tcp_close_shutdown+0x198>)
 800ed26:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ed2a:	4952      	ldr	r1, [pc, #328]	; (800ee74 <tcp_close_shutdown+0x1a4>)
 800ed2c:	4850      	ldr	r0, [pc, #320]	; (800ee70 <tcp_close_shutdown+0x1a0>)
 800ed2e:	f00a fe65 	bl	80199fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ed3a:	687d      	ldr	r5, [r7, #4]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3304      	adds	r3, #4
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	8ad2      	ldrh	r2, [r2, #22]
 800ed44:	6879      	ldr	r1, [r7, #4]
 800ed46:	8b09      	ldrh	r1, [r1, #24]
 800ed48:	9102      	str	r1, [sp, #8]
 800ed4a:	9201      	str	r2, [sp, #4]
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	462b      	mov	r3, r5
 800ed50:	4622      	mov	r2, r4
 800ed52:	4601      	mov	r1, r0
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f004 fe8f 	bl	8013a78 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f001 f8ba 	bl	800fed4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ed60:	4b45      	ldr	r3, [pc, #276]	; (800ee78 <tcp_close_shutdown+0x1a8>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d105      	bne.n	800ed76 <tcp_close_shutdown+0xa6>
 800ed6a:	4b43      	ldr	r3, [pc, #268]	; (800ee78 <tcp_close_shutdown+0x1a8>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	4a41      	ldr	r2, [pc, #260]	; (800ee78 <tcp_close_shutdown+0x1a8>)
 800ed72:	6013      	str	r3, [r2, #0]
 800ed74:	e013      	b.n	800ed9e <tcp_close_shutdown+0xce>
 800ed76:	4b40      	ldr	r3, [pc, #256]	; (800ee78 <tcp_close_shutdown+0x1a8>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	60fb      	str	r3, [r7, #12]
 800ed7c:	e00c      	b.n	800ed98 <tcp_close_shutdown+0xc8>
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d104      	bne.n	800ed92 <tcp_close_shutdown+0xc2>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	68da      	ldr	r2, [r3, #12]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	60da      	str	r2, [r3, #12]
 800ed90:	e005      	b.n	800ed9e <tcp_close_shutdown+0xce>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	60fb      	str	r3, [r7, #12]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d1ef      	bne.n	800ed7e <tcp_close_shutdown+0xae>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	60da      	str	r2, [r3, #12]
 800eda4:	4b35      	ldr	r3, [pc, #212]	; (800ee7c <tcp_close_shutdown+0x1ac>)
 800eda6:	2201      	movs	r2, #1
 800eda8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800edaa:	4b35      	ldr	r3, [pc, #212]	; (800ee80 <tcp_close_shutdown+0x1b0>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d102      	bne.n	800edba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800edb4:	f003 fd4c 	bl	8012850 <tcp_trigger_input_pcb_close>
 800edb8:	e002      	b.n	800edc0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7ff fed6 	bl	800eb6c <tcp_free>
      }
      return ERR_OK;
 800edc0:	2300      	movs	r3, #0
 800edc2:	e04d      	b.n	800ee60 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	7d1b      	ldrb	r3, [r3, #20]
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d02d      	beq.n	800ee28 <tcp_close_shutdown+0x158>
 800edcc:	2b02      	cmp	r3, #2
 800edce:	d036      	beq.n	800ee3e <tcp_close_shutdown+0x16e>
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d13f      	bne.n	800ee54 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	8adb      	ldrh	r3, [r3, #22]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d021      	beq.n	800ee20 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eddc:	4b29      	ldr	r3, [pc, #164]	; (800ee84 <tcp_close_shutdown+0x1b4>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d105      	bne.n	800edf2 <tcp_close_shutdown+0x122>
 800ede6:	4b27      	ldr	r3, [pc, #156]	; (800ee84 <tcp_close_shutdown+0x1b4>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	4a25      	ldr	r2, [pc, #148]	; (800ee84 <tcp_close_shutdown+0x1b4>)
 800edee:	6013      	str	r3, [r2, #0]
 800edf0:	e013      	b.n	800ee1a <tcp_close_shutdown+0x14a>
 800edf2:	4b24      	ldr	r3, [pc, #144]	; (800ee84 <tcp_close_shutdown+0x1b4>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	60bb      	str	r3, [r7, #8]
 800edf8:	e00c      	b.n	800ee14 <tcp_close_shutdown+0x144>
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d104      	bne.n	800ee0e <tcp_close_shutdown+0x13e>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	68da      	ldr	r2, [r3, #12]
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	60da      	str	r2, [r3, #12]
 800ee0c:	e005      	b.n	800ee1a <tcp_close_shutdown+0x14a>
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	60bb      	str	r3, [r7, #8]
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1ef      	bne.n	800edfa <tcp_close_shutdown+0x12a>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f7ff fea3 	bl	800eb6c <tcp_free>
      break;
 800ee26:	e01a      	b.n	800ee5e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7ff ff17 	bl	800ec5c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ee2e:	6879      	ldr	r1, [r7, #4]
 800ee30:	4815      	ldr	r0, [pc, #84]	; (800ee88 <tcp_close_shutdown+0x1b8>)
 800ee32:	f001 f89f 	bl	800ff74 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f7ff feb4 	bl	800eba4 <tcp_free_listen>
      break;
 800ee3c:	e00f      	b.n	800ee5e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ee3e:	6879      	ldr	r1, [r7, #4]
 800ee40:	480d      	ldr	r0, [pc, #52]	; (800ee78 <tcp_close_shutdown+0x1a8>)
 800ee42:	f001 f897 	bl	800ff74 <tcp_pcb_remove>
 800ee46:	4b0d      	ldr	r3, [pc, #52]	; (800ee7c <tcp_close_shutdown+0x1ac>)
 800ee48:	2201      	movs	r2, #1
 800ee4a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7ff fe8d 	bl	800eb6c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ee52:	e004      	b.n	800ee5e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 f819 	bl	800ee8c <tcp_close_shutdown_fin>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	e000      	b.n	800ee60 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800ee5e:	2300      	movs	r3, #0
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3710      	adds	r7, #16
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bdb0      	pop	{r4, r5, r7, pc}
 800ee68:	0801dee8 	.word	0x0801dee8
 800ee6c:	0801dfbc 	.word	0x0801dfbc
 800ee70:	0801df2c 	.word	0x0801df2c
 800ee74:	0801dfdc 	.word	0x0801dfdc
 800ee78:	2000b4c0 	.word	0x2000b4c0
 800ee7c:	2000b4bc 	.word	0x2000b4bc
 800ee80:	2000b4d4 	.word	0x2000b4d4
 800ee84:	2000b4cc 	.word	0x2000b4cc
 800ee88:	2000b4c8 	.word	0x2000b4c8

0800ee8c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d106      	bne.n	800eea8 <tcp_close_shutdown_fin+0x1c>
 800ee9a:	4b2c      	ldr	r3, [pc, #176]	; (800ef4c <tcp_close_shutdown_fin+0xc0>)
 800ee9c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800eea0:	492b      	ldr	r1, [pc, #172]	; (800ef50 <tcp_close_shutdown_fin+0xc4>)
 800eea2:	482c      	ldr	r0, [pc, #176]	; (800ef54 <tcp_close_shutdown_fin+0xc8>)
 800eea4:	f00a fdaa 	bl	80199fc <iprintf>

  switch (pcb->state) {
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	7d1b      	ldrb	r3, [r3, #20]
 800eeac:	2b04      	cmp	r3, #4
 800eeae:	d010      	beq.n	800eed2 <tcp_close_shutdown_fin+0x46>
 800eeb0:	2b07      	cmp	r3, #7
 800eeb2:	d01b      	beq.n	800eeec <tcp_close_shutdown_fin+0x60>
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d126      	bne.n	800ef06 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f003 fedb 	bl	8012c74 <tcp_send_fin>
 800eebe:	4603      	mov	r3, r0
 800eec0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d11f      	bne.n	800ef0a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2205      	movs	r2, #5
 800eece:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eed0:	e01b      	b.n	800ef0a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f003 fece 	bl	8012c74 <tcp_send_fin>
 800eed8:	4603      	mov	r3, r0
 800eeda:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eedc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d114      	bne.n	800ef0e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2205      	movs	r2, #5
 800eee8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eeea:	e010      	b.n	800ef0e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f003 fec1 	bl	8012c74 <tcp_send_fin>
 800eef2:	4603      	mov	r3, r0
 800eef4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d109      	bne.n	800ef12 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2209      	movs	r2, #9
 800ef02:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef04:	e005      	b.n	800ef12 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ef06:	2300      	movs	r3, #0
 800ef08:	e01c      	b.n	800ef44 <tcp_close_shutdown_fin+0xb8>
      break;
 800ef0a:	bf00      	nop
 800ef0c:	e002      	b.n	800ef14 <tcp_close_shutdown_fin+0x88>
      break;
 800ef0e:	bf00      	nop
 800ef10:	e000      	b.n	800ef14 <tcp_close_shutdown_fin+0x88>
      break;
 800ef12:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ef14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d103      	bne.n	800ef24 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f003 ffe7 	bl	8012ef0 <tcp_output>
 800ef22:	e00d      	b.n	800ef40 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800ef24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef2c:	d108      	bne.n	800ef40 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	8b5b      	ldrh	r3, [r3, #26]
 800ef32:	f043 0308 	orr.w	r3, r3, #8
 800ef36:	b29a      	uxth	r2, r3
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	e001      	b.n	800ef44 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800ef40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	0801dee8 	.word	0x0801dee8
 800ef50:	0801df98 	.word	0x0801df98
 800ef54:	0801df2c 	.word	0x0801df2c

0800ef58 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d109      	bne.n	800ef7a <tcp_close+0x22>
 800ef66:	4b0f      	ldr	r3, [pc, #60]	; (800efa4 <tcp_close+0x4c>)
 800ef68:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ef6c:	490e      	ldr	r1, [pc, #56]	; (800efa8 <tcp_close+0x50>)
 800ef6e:	480f      	ldr	r0, [pc, #60]	; (800efac <tcp_close+0x54>)
 800ef70:	f00a fd44 	bl	80199fc <iprintf>
 800ef74:	f06f 030f 	mvn.w	r3, #15
 800ef78:	e00f      	b.n	800ef9a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	7d1b      	ldrb	r3, [r3, #20]
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d006      	beq.n	800ef90 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	8b5b      	ldrh	r3, [r3, #26]
 800ef86:	f043 0310 	orr.w	r3, r3, #16
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ef90:	2101      	movs	r1, #1
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7ff fe9c 	bl	800ecd0 <tcp_close_shutdown>
 800ef98:	4603      	mov	r3, r0
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3708      	adds	r7, #8
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	0801dee8 	.word	0x0801dee8
 800efa8:	0801dff8 	.word	0x0801dff8
 800efac:	0801df2c 	.word	0x0801df2c

0800efb0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b08e      	sub	sp, #56	; 0x38
 800efb4:	af04      	add	r7, sp, #16
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d107      	bne.n	800efd0 <tcp_abandon+0x20>
 800efc0:	4b52      	ldr	r3, [pc, #328]	; (800f10c <tcp_abandon+0x15c>)
 800efc2:	f240 223d 	movw	r2, #573	; 0x23d
 800efc6:	4952      	ldr	r1, [pc, #328]	; (800f110 <tcp_abandon+0x160>)
 800efc8:	4852      	ldr	r0, [pc, #328]	; (800f114 <tcp_abandon+0x164>)
 800efca:	f00a fd17 	bl	80199fc <iprintf>
 800efce:	e099      	b.n	800f104 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	7d1b      	ldrb	r3, [r3, #20]
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d106      	bne.n	800efe6 <tcp_abandon+0x36>
 800efd8:	4b4c      	ldr	r3, [pc, #304]	; (800f10c <tcp_abandon+0x15c>)
 800efda:	f240 2241 	movw	r2, #577	; 0x241
 800efde:	494e      	ldr	r1, [pc, #312]	; (800f118 <tcp_abandon+0x168>)
 800efe0:	484c      	ldr	r0, [pc, #304]	; (800f114 <tcp_abandon+0x164>)
 800efe2:	f00a fd0b 	bl	80199fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	7d1b      	ldrb	r3, [r3, #20]
 800efea:	2b0a      	cmp	r3, #10
 800efec:	d107      	bne.n	800effe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800efee:	6879      	ldr	r1, [r7, #4]
 800eff0:	484a      	ldr	r0, [pc, #296]	; (800f11c <tcp_abandon+0x16c>)
 800eff2:	f000 ffbf 	bl	800ff74 <tcp_pcb_remove>
    tcp_free(pcb);
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7ff fdb8 	bl	800eb6c <tcp_free>
 800effc:	e082      	b.n	800f104 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800effe:	2300      	movs	r3, #0
 800f000:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f002:	2300      	movs	r3, #0
 800f004:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f00a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f010:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f018:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	691b      	ldr	r3, [r3, #16]
 800f01e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	7d1b      	ldrb	r3, [r3, #20]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d126      	bne.n	800f076 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	8adb      	ldrh	r3, [r3, #22]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d02e      	beq.n	800f08e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f030:	4b3b      	ldr	r3, [pc, #236]	; (800f120 <tcp_abandon+0x170>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	429a      	cmp	r2, r3
 800f038:	d105      	bne.n	800f046 <tcp_abandon+0x96>
 800f03a:	4b39      	ldr	r3, [pc, #228]	; (800f120 <tcp_abandon+0x170>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	4a37      	ldr	r2, [pc, #220]	; (800f120 <tcp_abandon+0x170>)
 800f042:	6013      	str	r3, [r2, #0]
 800f044:	e013      	b.n	800f06e <tcp_abandon+0xbe>
 800f046:	4b36      	ldr	r3, [pc, #216]	; (800f120 <tcp_abandon+0x170>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	61fb      	str	r3, [r7, #28]
 800f04c:	e00c      	b.n	800f068 <tcp_abandon+0xb8>
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	429a      	cmp	r2, r3
 800f056:	d104      	bne.n	800f062 <tcp_abandon+0xb2>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	68da      	ldr	r2, [r3, #12]
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	60da      	str	r2, [r3, #12]
 800f060:	e005      	b.n	800f06e <tcp_abandon+0xbe>
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	61fb      	str	r3, [r7, #28]
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d1ef      	bne.n	800f04e <tcp_abandon+0x9e>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2200      	movs	r2, #0
 800f072:	60da      	str	r2, [r3, #12]
 800f074:	e00b      	b.n	800f08e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	8adb      	ldrh	r3, [r3, #22]
 800f07e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f080:	6879      	ldr	r1, [r7, #4]
 800f082:	4828      	ldr	r0, [pc, #160]	; (800f124 <tcp_abandon+0x174>)
 800f084:	f000 ff76 	bl	800ff74 <tcp_pcb_remove>
 800f088:	4b27      	ldr	r3, [pc, #156]	; (800f128 <tcp_abandon+0x178>)
 800f08a:	2201      	movs	r2, #1
 800f08c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f092:	2b00      	cmp	r3, #0
 800f094:	d004      	beq.n	800f0a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 fd1a 	bl	800fad4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d004      	beq.n	800f0b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f000 fd11 	bl	800fad4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d004      	beq.n	800f0c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 fd08 	bl	800fad4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00e      	beq.n	800f0e8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f0ca:	6879      	ldr	r1, [r7, #4]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	3304      	adds	r3, #4
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	8b12      	ldrh	r2, [r2, #24]
 800f0d4:	9202      	str	r2, [sp, #8]
 800f0d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f0d8:	9201      	str	r2, [sp, #4]
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	460b      	mov	r3, r1
 800f0de:	697a      	ldr	r2, [r7, #20]
 800f0e0:	69b9      	ldr	r1, [r7, #24]
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f004 fcc8 	bl	8013a78 <tcp_rst>
    }
    last_state = pcb->state;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	7d1b      	ldrb	r3, [r3, #20]
 800f0ec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7ff fd3c 	bl	800eb6c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d004      	beq.n	800f104 <tcp_abandon+0x154>
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	f06f 010c 	mvn.w	r1, #12
 800f100:	68f8      	ldr	r0, [r7, #12]
 800f102:	4798      	blx	r3
  }
}
 800f104:	3728      	adds	r7, #40	; 0x28
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	0801dee8 	.word	0x0801dee8
 800f110:	0801e02c 	.word	0x0801e02c
 800f114:	0801df2c 	.word	0x0801df2c
 800f118:	0801e048 	.word	0x0801e048
 800f11c:	2000b4d0 	.word	0x2000b4d0
 800f120:	2000b4cc 	.word	0x2000b4cc
 800f124:	2000b4c0 	.word	0x2000b4c0
 800f128:	2000b4bc 	.word	0x2000b4bc

0800f12c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f134:	2101      	movs	r1, #1
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f7ff ff3a 	bl	800efb0 <tcp_abandon>
}
 800f13c:	bf00      	nop
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d106      	bne.n	800f160 <tcp_update_rcv_ann_wnd+0x1c>
 800f152:	4b25      	ldr	r3, [pc, #148]	; (800f1e8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f154:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f158:	4924      	ldr	r1, [pc, #144]	; (800f1ec <tcp_update_rcv_ann_wnd+0xa8>)
 800f15a:	4825      	ldr	r0, [pc, #148]	; (800f1f0 <tcp_update_rcv_ann_wnd+0xac>)
 800f15c:	f00a fc4e 	bl	80199fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f168:	4413      	add	r3, r2
 800f16a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f174:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f178:	bf28      	it	cs
 800f17a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f17e:	b292      	uxth	r2, r2
 800f180:	4413      	add	r3, r2
 800f182:	68fa      	ldr	r2, [r7, #12]
 800f184:	1ad3      	subs	r3, r2, r3
 800f186:	2b00      	cmp	r3, #0
 800f188:	db08      	blt.n	800f19c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f196:	68fa      	ldr	r2, [r7, #12]
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	e020      	b.n	800f1de <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	dd03      	ble.n	800f1b2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f1b0:	e014      	b.n	800f1dc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ba:	1ad3      	subs	r3, r2, r3
 800f1bc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1c4:	d306      	bcc.n	800f1d4 <tcp_update_rcv_ann_wnd+0x90>
 800f1c6:	4b08      	ldr	r3, [pc, #32]	; (800f1e8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f1c8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f1cc:	4909      	ldr	r1, [pc, #36]	; (800f1f4 <tcp_update_rcv_ann_wnd+0xb0>)
 800f1ce:	4808      	ldr	r0, [pc, #32]	; (800f1f0 <tcp_update_rcv_ann_wnd+0xac>)
 800f1d0:	f00a fc14 	bl	80199fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f1dc:	2300      	movs	r3, #0
  }
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	0801dee8 	.word	0x0801dee8
 800f1ec:	0801e144 	.word	0x0801e144
 800f1f0:	0801df2c 	.word	0x0801df2c
 800f1f4:	0801e168 	.word	0x0801e168

0800f1f8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d107      	bne.n	800f21a <tcp_recved+0x22>
 800f20a:	4b1f      	ldr	r3, [pc, #124]	; (800f288 <tcp_recved+0x90>)
 800f20c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f210:	491e      	ldr	r1, [pc, #120]	; (800f28c <tcp_recved+0x94>)
 800f212:	481f      	ldr	r0, [pc, #124]	; (800f290 <tcp_recved+0x98>)
 800f214:	f00a fbf2 	bl	80199fc <iprintf>
 800f218:	e032      	b.n	800f280 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	7d1b      	ldrb	r3, [r3, #20]
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d106      	bne.n	800f230 <tcp_recved+0x38>
 800f222:	4b19      	ldr	r3, [pc, #100]	; (800f288 <tcp_recved+0x90>)
 800f224:	f240 32d3 	movw	r2, #979	; 0x3d3
 800f228:	491a      	ldr	r1, [pc, #104]	; (800f294 <tcp_recved+0x9c>)
 800f22a:	4819      	ldr	r0, [pc, #100]	; (800f290 <tcp_recved+0x98>)
 800f22c:	f00a fbe6 	bl	80199fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f234:	887b      	ldrh	r3, [r7, #2]
 800f236:	4413      	add	r3, r2
 800f238:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f23a:	89fb      	ldrh	r3, [r7, #14]
 800f23c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f240:	d804      	bhi.n	800f24c <tcp_recved+0x54>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f246:	89fa      	ldrh	r2, [r7, #14]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d204      	bcs.n	800f256 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f252:	851a      	strh	r2, [r3, #40]	; 0x28
 800f254:	e002      	b.n	800f25c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	89fa      	ldrh	r2, [r7, #14]
 800f25a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7ff ff71 	bl	800f144 <tcp_update_rcv_ann_wnd>
 800f262:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f26a:	d309      	bcc.n	800f280 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	8b5b      	ldrh	r3, [r3, #26]
 800f270:	f043 0302 	orr.w	r3, r3, #2
 800f274:	b29a      	uxth	r2, r3
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f003 fe38 	bl	8012ef0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f280:	3710      	adds	r7, #16
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	0801dee8 	.word	0x0801dee8
 800f28c:	0801e184 	.word	0x0801e184
 800f290:	0801df2c 	.word	0x0801df2c
 800f294:	0801e19c 	.word	0x0801e19c

0800f298 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f298:	b5b0      	push	{r4, r5, r7, lr}
 800f29a:	b090      	sub	sp, #64	; 0x40
 800f29c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f2a4:	4b94      	ldr	r3, [pc, #592]	; (800f4f8 <tcp_slowtmr+0x260>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	3301      	adds	r3, #1
 800f2aa:	4a93      	ldr	r2, [pc, #588]	; (800f4f8 <tcp_slowtmr+0x260>)
 800f2ac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f2ae:	4b93      	ldr	r3, [pc, #588]	; (800f4fc <tcp_slowtmr+0x264>)
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	b2da      	uxtb	r2, r3
 800f2b6:	4b91      	ldr	r3, [pc, #580]	; (800f4fc <tcp_slowtmr+0x264>)
 800f2b8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f2be:	4b90      	ldr	r3, [pc, #576]	; (800f500 <tcp_slowtmr+0x268>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f2c4:	e29f      	b.n	800f806 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d106      	bne.n	800f2dc <tcp_slowtmr+0x44>
 800f2ce:	4b8d      	ldr	r3, [pc, #564]	; (800f504 <tcp_slowtmr+0x26c>)
 800f2d0:	f240 42be 	movw	r2, #1214	; 0x4be
 800f2d4:	498c      	ldr	r1, [pc, #560]	; (800f508 <tcp_slowtmr+0x270>)
 800f2d6:	488d      	ldr	r0, [pc, #564]	; (800f50c <tcp_slowtmr+0x274>)
 800f2d8:	f00a fb90 	bl	80199fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2de:	7d1b      	ldrb	r3, [r3, #20]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d106      	bne.n	800f2f2 <tcp_slowtmr+0x5a>
 800f2e4:	4b87      	ldr	r3, [pc, #540]	; (800f504 <tcp_slowtmr+0x26c>)
 800f2e6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f2ea:	4989      	ldr	r1, [pc, #548]	; (800f510 <tcp_slowtmr+0x278>)
 800f2ec:	4887      	ldr	r0, [pc, #540]	; (800f50c <tcp_slowtmr+0x274>)
 800f2ee:	f00a fb85 	bl	80199fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f4:	7d1b      	ldrb	r3, [r3, #20]
 800f2f6:	2b0a      	cmp	r3, #10
 800f2f8:	d106      	bne.n	800f308 <tcp_slowtmr+0x70>
 800f2fa:	4b82      	ldr	r3, [pc, #520]	; (800f504 <tcp_slowtmr+0x26c>)
 800f2fc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f300:	4984      	ldr	r1, [pc, #528]	; (800f514 <tcp_slowtmr+0x27c>)
 800f302:	4882      	ldr	r0, [pc, #520]	; (800f50c <tcp_slowtmr+0x274>)
 800f304:	f00a fb7a 	bl	80199fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30a:	7f9a      	ldrb	r2, [r3, #30]
 800f30c:	4b7b      	ldr	r3, [pc, #492]	; (800f4fc <tcp_slowtmr+0x264>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	429a      	cmp	r2, r3
 800f312:	d105      	bne.n	800f320 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f316:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f31e:	e272      	b.n	800f806 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f320:	4b76      	ldr	r3, [pc, #472]	; (800f4fc <tcp_slowtmr+0x264>)
 800f322:	781a      	ldrb	r2, [r3, #0]
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f328:	2300      	movs	r3, #0
 800f32a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f32e:	2300      	movs	r3, #0
 800f330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f336:	7d1b      	ldrb	r3, [r3, #20]
 800f338:	2b02      	cmp	r3, #2
 800f33a:	d10a      	bne.n	800f352 <tcp_slowtmr+0xba>
 800f33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f342:	2b05      	cmp	r3, #5
 800f344:	d905      	bls.n	800f352 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f34a:	3301      	adds	r3, #1
 800f34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f350:	e11e      	b.n	800f590 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f354:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f358:	2b0b      	cmp	r3, #11
 800f35a:	d905      	bls.n	800f368 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f360:	3301      	adds	r3, #1
 800f362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f366:	e113      	b.n	800f590 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d075      	beq.n	800f45e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f376:	2b00      	cmp	r3, #0
 800f378:	d006      	beq.n	800f388 <tcp_slowtmr+0xf0>
 800f37a:	4b62      	ldr	r3, [pc, #392]	; (800f504 <tcp_slowtmr+0x26c>)
 800f37c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f380:	4965      	ldr	r1, [pc, #404]	; (800f518 <tcp_slowtmr+0x280>)
 800f382:	4862      	ldr	r0, [pc, #392]	; (800f50c <tcp_slowtmr+0x274>)
 800f384:	f00a fb3a 	bl	80199fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d106      	bne.n	800f39e <tcp_slowtmr+0x106>
 800f390:	4b5c      	ldr	r3, [pc, #368]	; (800f504 <tcp_slowtmr+0x26c>)
 800f392:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f396:	4961      	ldr	r1, [pc, #388]	; (800f51c <tcp_slowtmr+0x284>)
 800f398:	485c      	ldr	r0, [pc, #368]	; (800f50c <tcp_slowtmr+0x274>)
 800f39a:	f00a fb2f 	bl	80199fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f3a4:	2b0b      	cmp	r3, #11
 800f3a6:	d905      	bls.n	800f3b4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3b2:	e0ed      	b.n	800f590 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	4a58      	ldr	r2, [pc, #352]	; (800f520 <tcp_slowtmr+0x288>)
 800f3be:	5cd3      	ldrb	r3, [r2, r3]
 800f3c0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f3c8:	7c7a      	ldrb	r2, [r7, #17]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d907      	bls.n	800f3de <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	b2da      	uxtb	r2, r3
 800f3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f3e4:	7c7a      	ldrb	r2, [r7, #17]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	f200 80d2 	bhi.w	800f590 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d108      	bne.n	800f40c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f3fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3fc:	f004 fc30 	bl	8013c60 <tcp_zero_window_probe>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	d014      	beq.n	800f430 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f406:	2300      	movs	r3, #0
 800f408:	623b      	str	r3, [r7, #32]
 800f40a:	e011      	b.n	800f430 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f412:	4619      	mov	r1, r3
 800f414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f416:	f003 fae5 	bl	80129e4 <tcp_split_unsent_seg>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d107      	bne.n	800f430 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f422:	f003 fd65 	bl	8012ef0 <tcp_output>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d101      	bne.n	800f430 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f430:	6a3b      	ldr	r3, [r7, #32]
 800f432:	2b00      	cmp	r3, #0
 800f434:	f000 80ac 	beq.w	800f590 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43a:	2200      	movs	r2, #0
 800f43c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f442:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f446:	2b06      	cmp	r3, #6
 800f448:	f200 80a2 	bhi.w	800f590 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f452:	3301      	adds	r3, #1
 800f454:	b2da      	uxtb	r2, r3
 800f456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f458:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f45c:	e098      	b.n	800f590 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f460:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f464:	2b00      	cmp	r3, #0
 800f466:	db0f      	blt.n	800f488 <tcp_slowtmr+0x1f0>
 800f468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f46e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f472:	4293      	cmp	r3, r2
 800f474:	d008      	beq.n	800f488 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f478:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	3301      	adds	r3, #1
 800f480:	b29b      	uxth	r3, r3
 800f482:	b21a      	sxth	r2, r3
 800f484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f486:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f490:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f494:	429a      	cmp	r2, r3
 800f496:	db7b      	blt.n	800f590 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f49a:	f004 f821 	bl	80134e0 <tcp_rexmit_rto_prepare>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d007      	beq.n	800f4b4 <tcp_slowtmr+0x21c>
 800f4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d171      	bne.n	800f590 <tcp_slowtmr+0x2f8>
 800f4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d06d      	beq.n	800f590 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b6:	7d1b      	ldrb	r3, [r3, #20]
 800f4b8:	2b02      	cmp	r3, #2
 800f4ba:	d03a      	beq.n	800f532 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f4c2:	2b0c      	cmp	r3, #12
 800f4c4:	bf28      	it	cs
 800f4c6:	230c      	movcs	r3, #12
 800f4c8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4d0:	10db      	asrs	r3, r3, #3
 800f4d2:	b21b      	sxth	r3, r3
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4dc:	4413      	add	r3, r2
 800f4de:	7efa      	ldrb	r2, [r7, #27]
 800f4e0:	4910      	ldr	r1, [pc, #64]	; (800f524 <tcp_slowtmr+0x28c>)
 800f4e2:	5c8a      	ldrb	r2, [r1, r2]
 800f4e4:	4093      	lsls	r3, r2
 800f4e6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	dc1a      	bgt.n	800f528 <tcp_slowtmr+0x290>
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	b21a      	sxth	r2, r3
 800f4f6:	e019      	b.n	800f52c <tcp_slowtmr+0x294>
 800f4f8:	2000b4c4 	.word	0x2000b4c4
 800f4fc:	20004712 	.word	0x20004712
 800f500:	2000b4c0 	.word	0x2000b4c0
 800f504:	0801dee8 	.word	0x0801dee8
 800f508:	0801e22c 	.word	0x0801e22c
 800f50c:	0801df2c 	.word	0x0801df2c
 800f510:	0801e258 	.word	0x0801e258
 800f514:	0801e284 	.word	0x0801e284
 800f518:	0801e2b4 	.word	0x0801e2b4
 800f51c:	0801e2e8 	.word	0x0801e2e8
 800f520:	08020ff0 	.word	0x08020ff0
 800f524:	08020fe0 	.word	0x08020fe0
 800f528:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f534:	2200      	movs	r2, #0
 800f536:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f540:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f544:	4293      	cmp	r3, r2
 800f546:	bf28      	it	cs
 800f548:	4613      	movcs	r3, r2
 800f54a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f54c:	8a7b      	ldrh	r3, [r7, #18]
 800f54e:	085b      	lsrs	r3, r3, #1
 800f550:	b29a      	uxth	r2, r3
 800f552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f554:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f562:	005b      	lsls	r3, r3, #1
 800f564:	b29b      	uxth	r3, r3
 800f566:	429a      	cmp	r2, r3
 800f568:	d206      	bcs.n	800f578 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f56e:	005b      	lsls	r3, r3, #1
 800f570:	b29a      	uxth	r2, r3
 800f572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f574:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f584:	2200      	movs	r2, #0
 800f586:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f58a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f58c:	f004 f818 	bl	80135c0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f592:	7d1b      	ldrb	r3, [r3, #20]
 800f594:	2b06      	cmp	r3, #6
 800f596:	d111      	bne.n	800f5bc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59a:	8b5b      	ldrh	r3, [r3, #26]
 800f59c:	f003 0310 	and.w	r3, r3, #16
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d00b      	beq.n	800f5bc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5a4:	4b9d      	ldr	r3, [pc, #628]	; (800f81c <tcp_slowtmr+0x584>)
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5aa:	6a1b      	ldr	r3, [r3, #32]
 800f5ac:	1ad3      	subs	r3, r2, r3
 800f5ae:	2b28      	cmp	r3, #40	; 0x28
 800f5b0:	d904      	bls.n	800f5bc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f5b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5be:	7a5b      	ldrb	r3, [r3, #9]
 800f5c0:	f003 0308 	and.w	r3, r3, #8
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d04c      	beq.n	800f662 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f5cc:	2b04      	cmp	r3, #4
 800f5ce:	d003      	beq.n	800f5d8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f5d4:	2b07      	cmp	r3, #7
 800f5d6:	d144      	bne.n	800f662 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5d8:	4b90      	ldr	r3, [pc, #576]	; (800f81c <tcp_slowtmr+0x584>)
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5de:	6a1b      	ldr	r3, [r3, #32]
 800f5e0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f5e8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f5ec:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f5f0:	498b      	ldr	r1, [pc, #556]	; (800f820 <tcp_slowtmr+0x588>)
 800f5f2:	fba1 1303 	umull	r1, r3, r1, r3
 800f5f6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d90a      	bls.n	800f612 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f600:	3301      	adds	r3, #1
 800f602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f606:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f60a:	3301      	adds	r3, #1
 800f60c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f610:	e027      	b.n	800f662 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f612:	4b82      	ldr	r3, [pc, #520]	; (800f81c <tcp_slowtmr+0x584>)
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f618:	6a1b      	ldr	r3, [r3, #32]
 800f61a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f624:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f628:	4618      	mov	r0, r3
 800f62a:	4b7e      	ldr	r3, [pc, #504]	; (800f824 <tcp_slowtmr+0x58c>)
 800f62c:	fb03 f300 	mul.w	r3, r3, r0
 800f630:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f632:	497b      	ldr	r1, [pc, #492]	; (800f820 <tcp_slowtmr+0x588>)
 800f634:	fba1 1303 	umull	r1, r3, r1, r3
 800f638:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d911      	bls.n	800f662 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f63e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f640:	f004 face 	bl	8013be0 <tcp_keepalive>
 800f644:	4603      	mov	r3, r0
 800f646:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f64a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d107      	bne.n	800f662 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f654:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f658:	3301      	adds	r3, #1
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f666:	2b00      	cmp	r3, #0
 800f668:	d011      	beq.n	800f68e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f66a:	4b6c      	ldr	r3, [pc, #432]	; (800f81c <tcp_slowtmr+0x584>)
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f670:	6a1b      	ldr	r3, [r3, #32]
 800f672:	1ad2      	subs	r2, r2, r3
 800f674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f676:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f67a:	4619      	mov	r1, r3
 800f67c:	460b      	mov	r3, r1
 800f67e:	005b      	lsls	r3, r3, #1
 800f680:	440b      	add	r3, r1
 800f682:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f684:	429a      	cmp	r2, r3
 800f686:	d302      	bcc.n	800f68e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f68a:	f000 fdd7 	bl	801023c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f690:	7d1b      	ldrb	r3, [r3, #20]
 800f692:	2b03      	cmp	r3, #3
 800f694:	d10b      	bne.n	800f6ae <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f696:	4b61      	ldr	r3, [pc, #388]	; (800f81c <tcp_slowtmr+0x584>)
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69c:	6a1b      	ldr	r3, [r3, #32]
 800f69e:	1ad3      	subs	r3, r2, r3
 800f6a0:	2b28      	cmp	r3, #40	; 0x28
 800f6a2:	d904      	bls.n	800f6ae <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b0:	7d1b      	ldrb	r3, [r3, #20]
 800f6b2:	2b09      	cmp	r3, #9
 800f6b4:	d10b      	bne.n	800f6ce <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f6b6:	4b59      	ldr	r3, [pc, #356]	; (800f81c <tcp_slowtmr+0x584>)
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6bc:	6a1b      	ldr	r3, [r3, #32]
 800f6be:	1ad3      	subs	r3, r2, r3
 800f6c0:	2bf0      	cmp	r3, #240	; 0xf0
 800f6c2:	d904      	bls.n	800f6ce <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d060      	beq.n	800f798 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6dc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f6de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6e0:	f000 fbf8 	bl	800fed4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d010      	beq.n	800f70c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f6ea:	4b4f      	ldr	r3, [pc, #316]	; (800f828 <tcp_slowtmr+0x590>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d106      	bne.n	800f702 <tcp_slowtmr+0x46a>
 800f6f4:	4b4d      	ldr	r3, [pc, #308]	; (800f82c <tcp_slowtmr+0x594>)
 800f6f6:	f240 526d 	movw	r2, #1389	; 0x56d
 800f6fa:	494d      	ldr	r1, [pc, #308]	; (800f830 <tcp_slowtmr+0x598>)
 800f6fc:	484d      	ldr	r0, [pc, #308]	; (800f834 <tcp_slowtmr+0x59c>)
 800f6fe:	f00a f97d 	bl	80199fc <iprintf>
        prev->next = pcb->next;
 800f702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f704:	68da      	ldr	r2, [r3, #12]
 800f706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f708:	60da      	str	r2, [r3, #12]
 800f70a:	e00f      	b.n	800f72c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f70c:	4b46      	ldr	r3, [pc, #280]	; (800f828 <tcp_slowtmr+0x590>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f712:	429a      	cmp	r2, r3
 800f714:	d006      	beq.n	800f724 <tcp_slowtmr+0x48c>
 800f716:	4b45      	ldr	r3, [pc, #276]	; (800f82c <tcp_slowtmr+0x594>)
 800f718:	f240 5271 	movw	r2, #1393	; 0x571
 800f71c:	4946      	ldr	r1, [pc, #280]	; (800f838 <tcp_slowtmr+0x5a0>)
 800f71e:	4845      	ldr	r0, [pc, #276]	; (800f834 <tcp_slowtmr+0x59c>)
 800f720:	f00a f96c 	bl	80199fc <iprintf>
        tcp_active_pcbs = pcb->next;
 800f724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f726:	68db      	ldr	r3, [r3, #12]
 800f728:	4a3f      	ldr	r2, [pc, #252]	; (800f828 <tcp_slowtmr+0x590>)
 800f72a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f72c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f730:	2b00      	cmp	r3, #0
 800f732:	d013      	beq.n	800f75c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f736:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f73c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f740:	3304      	adds	r3, #4
 800f742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f744:	8ad2      	ldrh	r2, [r2, #22]
 800f746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f748:	8b09      	ldrh	r1, [r1, #24]
 800f74a:	9102      	str	r1, [sp, #8]
 800f74c:	9201      	str	r2, [sp, #4]
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	462b      	mov	r3, r5
 800f752:	4622      	mov	r2, r4
 800f754:	4601      	mov	r1, r0
 800f756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f758:	f004 f98e 	bl	8013a78 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75e:	691b      	ldr	r3, [r3, #16]
 800f760:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f764:	7d1b      	ldrb	r3, [r3, #20]
 800f766:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f772:	6838      	ldr	r0, [r7, #0]
 800f774:	f7ff f9fa 	bl	800eb6c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f778:	4b30      	ldr	r3, [pc, #192]	; (800f83c <tcp_slowtmr+0x5a4>)
 800f77a:	2200      	movs	r2, #0
 800f77c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d004      	beq.n	800f78e <tcp_slowtmr+0x4f6>
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f06f 010c 	mvn.w	r1, #12
 800f78a:	68b8      	ldr	r0, [r7, #8]
 800f78c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f78e:	4b2b      	ldr	r3, [pc, #172]	; (800f83c <tcp_slowtmr+0x5a4>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d037      	beq.n	800f806 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f796:	e590      	b.n	800f2ba <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a4:	7f1b      	ldrb	r3, [r3, #28]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	b2da      	uxtb	r2, r3
 800f7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b0:	7f1a      	ldrb	r2, [r3, #28]
 800f7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b4:	7f5b      	ldrb	r3, [r3, #29]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d325      	bcc.n	800f806 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	2200      	movs	r2, #0
 800f7be:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f7c0:	4b1e      	ldr	r3, [pc, #120]	; (800f83c <tcp_slowtmr+0x5a4>)
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00b      	beq.n	800f7e8 <tcp_slowtmr+0x550>
 800f7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7d8:	6912      	ldr	r2, [r2, #16]
 800f7da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7dc:	4610      	mov	r0, r2
 800f7de:	4798      	blx	r3
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f7e6:	e002      	b.n	800f7ee <tcp_slowtmr+0x556>
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f7ee:	4b13      	ldr	r3, [pc, #76]	; (800f83c <tcp_slowtmr+0x5a4>)
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d000      	beq.n	800f7f8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f7f6:	e560      	b.n	800f2ba <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f7f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d102      	bne.n	800f806 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f802:	f003 fb75 	bl	8012ef0 <tcp_output>
  while (pcb != NULL) {
 800f806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f808:	2b00      	cmp	r3, #0
 800f80a:	f47f ad5c 	bne.w	800f2c6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f80e:	2300      	movs	r3, #0
 800f810:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f812:	4b0b      	ldr	r3, [pc, #44]	; (800f840 <tcp_slowtmr+0x5a8>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f818:	e067      	b.n	800f8ea <tcp_slowtmr+0x652>
 800f81a:	bf00      	nop
 800f81c:	2000b4c4 	.word	0x2000b4c4
 800f820:	10624dd3 	.word	0x10624dd3
 800f824:	000124f8 	.word	0x000124f8
 800f828:	2000b4c0 	.word	0x2000b4c0
 800f82c:	0801dee8 	.word	0x0801dee8
 800f830:	0801e320 	.word	0x0801e320
 800f834:	0801df2c 	.word	0x0801df2c
 800f838:	0801e34c 	.word	0x0801e34c
 800f83c:	2000b4bc 	.word	0x2000b4bc
 800f840:	2000b4d0 	.word	0x2000b4d0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f846:	7d1b      	ldrb	r3, [r3, #20]
 800f848:	2b0a      	cmp	r3, #10
 800f84a:	d006      	beq.n	800f85a <tcp_slowtmr+0x5c2>
 800f84c:	4b2a      	ldr	r3, [pc, #168]	; (800f8f8 <tcp_slowtmr+0x660>)
 800f84e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f852:	492a      	ldr	r1, [pc, #168]	; (800f8fc <tcp_slowtmr+0x664>)
 800f854:	482a      	ldr	r0, [pc, #168]	; (800f900 <tcp_slowtmr+0x668>)
 800f856:	f00a f8d1 	bl	80199fc <iprintf>
    pcb_remove = 0;
 800f85a:	2300      	movs	r3, #0
 800f85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f860:	4b28      	ldr	r3, [pc, #160]	; (800f904 <tcp_slowtmr+0x66c>)
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f866:	6a1b      	ldr	r3, [r3, #32]
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	2bf0      	cmp	r3, #240	; 0xf0
 800f86c:	d904      	bls.n	800f878 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f86e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f872:	3301      	adds	r3, #1
 800f874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d02f      	beq.n	800f8e0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f882:	f000 fb27 	bl	800fed4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d010      	beq.n	800f8ae <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f88c:	4b1e      	ldr	r3, [pc, #120]	; (800f908 <tcp_slowtmr+0x670>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f892:	429a      	cmp	r2, r3
 800f894:	d106      	bne.n	800f8a4 <tcp_slowtmr+0x60c>
 800f896:	4b18      	ldr	r3, [pc, #96]	; (800f8f8 <tcp_slowtmr+0x660>)
 800f898:	f240 52af 	movw	r2, #1455	; 0x5af
 800f89c:	491b      	ldr	r1, [pc, #108]	; (800f90c <tcp_slowtmr+0x674>)
 800f89e:	4818      	ldr	r0, [pc, #96]	; (800f900 <tcp_slowtmr+0x668>)
 800f8a0:	f00a f8ac 	bl	80199fc <iprintf>
        prev->next = pcb->next;
 800f8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a6:	68da      	ldr	r2, [r3, #12]
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	60da      	str	r2, [r3, #12]
 800f8ac:	e00f      	b.n	800f8ce <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f8ae:	4b16      	ldr	r3, [pc, #88]	; (800f908 <tcp_slowtmr+0x670>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d006      	beq.n	800f8c6 <tcp_slowtmr+0x62e>
 800f8b8:	4b0f      	ldr	r3, [pc, #60]	; (800f8f8 <tcp_slowtmr+0x660>)
 800f8ba:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f8be:	4914      	ldr	r1, [pc, #80]	; (800f910 <tcp_slowtmr+0x678>)
 800f8c0:	480f      	ldr	r0, [pc, #60]	; (800f900 <tcp_slowtmr+0x668>)
 800f8c2:	f00a f89b 	bl	80199fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	4a0f      	ldr	r2, [pc, #60]	; (800f908 <tcp_slowtmr+0x670>)
 800f8cc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f8d8:	69f8      	ldr	r0, [r7, #28]
 800f8da:	f7ff f947 	bl	800eb6c <tcp_free>
 800f8de:	e004      	b.n	800f8ea <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d1a9      	bne.n	800f844 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f8f0:	bf00      	nop
 800f8f2:	3730      	adds	r7, #48	; 0x30
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bdb0      	pop	{r4, r5, r7, pc}
 800f8f8:	0801dee8 	.word	0x0801dee8
 800f8fc:	0801e378 	.word	0x0801e378
 800f900:	0801df2c 	.word	0x0801df2c
 800f904:	2000b4c4 	.word	0x2000b4c4
 800f908:	2000b4d0 	.word	0x2000b4d0
 800f90c:	0801e3a8 	.word	0x0801e3a8
 800f910:	0801e3d0 	.word	0x0801e3d0

0800f914 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f91a:	4b2d      	ldr	r3, [pc, #180]	; (800f9d0 <tcp_fasttmr+0xbc>)
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	3301      	adds	r3, #1
 800f920:	b2da      	uxtb	r2, r3
 800f922:	4b2b      	ldr	r3, [pc, #172]	; (800f9d0 <tcp_fasttmr+0xbc>)
 800f924:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f926:	4b2b      	ldr	r3, [pc, #172]	; (800f9d4 <tcp_fasttmr+0xc0>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f92c:	e048      	b.n	800f9c0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	7f9a      	ldrb	r2, [r3, #30]
 800f932:	4b27      	ldr	r3, [pc, #156]	; (800f9d0 <tcp_fasttmr+0xbc>)
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	429a      	cmp	r2, r3
 800f938:	d03f      	beq.n	800f9ba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f93a:	4b25      	ldr	r3, [pc, #148]	; (800f9d0 <tcp_fasttmr+0xbc>)
 800f93c:	781a      	ldrb	r2, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8b5b      	ldrh	r3, [r3, #26]
 800f946:	f003 0301 	and.w	r3, r3, #1
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d010      	beq.n	800f970 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	8b5b      	ldrh	r3, [r3, #26]
 800f952:	f043 0302 	orr.w	r3, r3, #2
 800f956:	b29a      	uxth	r2, r3
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f003 fac7 	bl	8012ef0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	8b5b      	ldrh	r3, [r3, #26]
 800f966:	f023 0303 	bic.w	r3, r3, #3
 800f96a:	b29a      	uxth	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	8b5b      	ldrh	r3, [r3, #26]
 800f974:	f003 0308 	and.w	r3, r3, #8
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d009      	beq.n	800f990 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	8b5b      	ldrh	r3, [r3, #26]
 800f980:	f023 0308 	bic.w	r3, r3, #8
 800f984:	b29a      	uxth	r2, r3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7ff fa7e 	bl	800ee8c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d00a      	beq.n	800f9b4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f99e:	4b0e      	ldr	r3, [pc, #56]	; (800f9d8 <tcp_fasttmr+0xc4>)
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 f819 	bl	800f9dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f9aa:	4b0b      	ldr	r3, [pc, #44]	; (800f9d8 <tcp_fasttmr+0xc4>)
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d000      	beq.n	800f9b4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f9b2:	e7b8      	b.n	800f926 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	607b      	str	r3, [r7, #4]
 800f9b8:	e002      	b.n	800f9c0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d1b3      	bne.n	800f92e <tcp_fasttmr+0x1a>
    }
  }
}
 800f9c6:	bf00      	nop
 800f9c8:	3708      	adds	r7, #8
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	20004712 	.word	0x20004712
 800f9d4:	2000b4c0 	.word	0x2000b4c0
 800f9d8:	2000b4bc 	.word	0x2000b4bc

0800f9dc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f9dc:	b590      	push	{r4, r7, lr}
 800f9de:	b085      	sub	sp, #20
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d109      	bne.n	800f9fe <tcp_process_refused_data+0x22>
 800f9ea:	4b37      	ldr	r3, [pc, #220]	; (800fac8 <tcp_process_refused_data+0xec>)
 800f9ec:	f240 6209 	movw	r2, #1545	; 0x609
 800f9f0:	4936      	ldr	r1, [pc, #216]	; (800facc <tcp_process_refused_data+0xf0>)
 800f9f2:	4837      	ldr	r0, [pc, #220]	; (800fad0 <tcp_process_refused_data+0xf4>)
 800f9f4:	f00a f802 	bl	80199fc <iprintf>
 800f9f8:	f06f 030f 	mvn.w	r3, #15
 800f9fc:	e060      	b.n	800fac0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa02:	7b5b      	ldrb	r3, [r3, #13]
 800fa04:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa0a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00b      	beq.n	800fa34 <tcp_process_refused_data+0x58>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6918      	ldr	r0, [r3, #16]
 800fa26:	2300      	movs	r3, #0
 800fa28:	68ba      	ldr	r2, [r7, #8]
 800fa2a:	6879      	ldr	r1, [r7, #4]
 800fa2c:	47a0      	blx	r4
 800fa2e:	4603      	mov	r3, r0
 800fa30:	73fb      	strb	r3, [r7, #15]
 800fa32:	e007      	b.n	800fa44 <tcp_process_refused_data+0x68>
 800fa34:	2300      	movs	r3, #0
 800fa36:	68ba      	ldr	r2, [r7, #8]
 800fa38:	6879      	ldr	r1, [r7, #4]
 800fa3a:	2000      	movs	r0, #0
 800fa3c:	f000 f8a2 	bl	800fb84 <tcp_recv_null>
 800fa40:	4603      	mov	r3, r0
 800fa42:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fa44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d12a      	bne.n	800faa2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fa4c:	7bbb      	ldrb	r3, [r7, #14]
 800fa4e:	f003 0320 	and.w	r3, r3, #32
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d033      	beq.n	800fabe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fa5e:	d005      	beq.n	800fa6c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa64:	3301      	adds	r3, #1
 800fa66:	b29a      	uxth	r2, r3
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00b      	beq.n	800fa8e <tcp_process_refused_data+0xb2>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6918      	ldr	r0, [r3, #16]
 800fa80:	2300      	movs	r3, #0
 800fa82:	2200      	movs	r2, #0
 800fa84:	6879      	ldr	r1, [r7, #4]
 800fa86:	47a0      	blx	r4
 800fa88:	4603      	mov	r3, r0
 800fa8a:	73fb      	strb	r3, [r7, #15]
 800fa8c:	e001      	b.n	800fa92 <tcp_process_refused_data+0xb6>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fa92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa96:	f113 0f0d 	cmn.w	r3, #13
 800fa9a:	d110      	bne.n	800fabe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fa9c:	f06f 030c 	mvn.w	r3, #12
 800faa0:	e00e      	b.n	800fac0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800faa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faa6:	f113 0f0d 	cmn.w	r3, #13
 800faaa:	d102      	bne.n	800fab2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800faac:	f06f 030c 	mvn.w	r3, #12
 800fab0:	e006      	b.n	800fac0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	68ba      	ldr	r2, [r7, #8]
 800fab6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fab8:	f06f 0304 	mvn.w	r3, #4
 800fabc:	e000      	b.n	800fac0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3714      	adds	r7, #20
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd90      	pop	{r4, r7, pc}
 800fac8:	0801dee8 	.word	0x0801dee8
 800facc:	0801e3f8 	.word	0x0801e3f8
 800fad0:	0801df2c 	.word	0x0801df2c

0800fad4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fadc:	e007      	b.n	800faee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f000 f809 	bl	800fafc <tcp_seg_free>
    seg = next;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d1f4      	bne.n	800fade <tcp_segs_free+0xa>
  }
}
 800faf4:	bf00      	nop
 800faf6:	3710      	adds	r7, #16
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00c      	beq.n	800fb24 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d004      	beq.n	800fb1c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fe fd6c 	bl	800e5f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fb1c:	6879      	ldr	r1, [r7, #4]
 800fb1e:	2003      	movs	r0, #3
 800fb20:	f7fd ff3a 	bl	800d998 <memp_free>
  }
}
 800fb24:	bf00      	nop
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d106      	bne.n	800fb48 <tcp_seg_copy+0x1c>
 800fb3a:	4b0f      	ldr	r3, [pc, #60]	; (800fb78 <tcp_seg_copy+0x4c>)
 800fb3c:	f240 6282 	movw	r2, #1666	; 0x682
 800fb40:	490e      	ldr	r1, [pc, #56]	; (800fb7c <tcp_seg_copy+0x50>)
 800fb42:	480f      	ldr	r0, [pc, #60]	; (800fb80 <tcp_seg_copy+0x54>)
 800fb44:	f009 ff5a 	bl	80199fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fb48:	2003      	movs	r0, #3
 800fb4a:	f7fd fed3 	bl	800d8f4 <memp_malloc>
 800fb4e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d101      	bne.n	800fb5a <tcp_seg_copy+0x2e>
    return NULL;
 800fb56:	2300      	movs	r3, #0
 800fb58:	e00a      	b.n	800fb70 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fb5a:	2210      	movs	r2, #16
 800fb5c:	6879      	ldr	r1, [r7, #4]
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f009 fa1b 	bl	8018f9a <memcpy>
  pbuf_ref(cseg->p);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fe fde9 	bl	800e740 <pbuf_ref>
  return cseg;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	0801dee8 	.word	0x0801dee8
 800fb7c:	0801e43c 	.word	0x0801e43c
 800fb80:	0801df2c 	.word	0x0801df2c

0800fb84 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
 800fb90:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d109      	bne.n	800fbac <tcp_recv_null+0x28>
 800fb98:	4b12      	ldr	r3, [pc, #72]	; (800fbe4 <tcp_recv_null+0x60>)
 800fb9a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fb9e:	4912      	ldr	r1, [pc, #72]	; (800fbe8 <tcp_recv_null+0x64>)
 800fba0:	4812      	ldr	r0, [pc, #72]	; (800fbec <tcp_recv_null+0x68>)
 800fba2:	f009 ff2b 	bl	80199fc <iprintf>
 800fba6:	f06f 030f 	mvn.w	r3, #15
 800fbaa:	e016      	b.n	800fbda <tcp_recv_null+0x56>

  if (p != NULL) {
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d009      	beq.n	800fbc6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	891b      	ldrh	r3, [r3, #8]
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	68b8      	ldr	r0, [r7, #8]
 800fbba:	f7ff fb1d 	bl	800f1f8 <tcp_recved>
    pbuf_free(p);
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f7fe fd18 	bl	800e5f4 <pbuf_free>
 800fbc4:	e008      	b.n	800fbd8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fbc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d104      	bne.n	800fbd8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fbce:	68b8      	ldr	r0, [r7, #8]
 800fbd0:	f7ff f9c2 	bl	800ef58 <tcp_close>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	e000      	b.n	800fbda <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	0801dee8 	.word	0x0801dee8
 800fbe8:	0801e458 	.word	0x0801e458
 800fbec:	0801df2c 	.word	0x0801df2c

0800fbf0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b086      	sub	sp, #24
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800fbfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	db01      	blt.n	800fc06 <tcp_kill_prio+0x16>
 800fc02:	79fb      	ldrb	r3, [r7, #7]
 800fc04:	e000      	b.n	800fc08 <tcp_kill_prio+0x18>
 800fc06:	237f      	movs	r3, #127	; 0x7f
 800fc08:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800fc0a:	7afb      	ldrb	r3, [r7, #11]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d034      	beq.n	800fc7a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fc10:	7afb      	ldrb	r3, [r7, #11]
 800fc12:	3b01      	subs	r3, #1
 800fc14:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc1e:	4b19      	ldr	r3, [pc, #100]	; (800fc84 <tcp_kill_prio+0x94>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	617b      	str	r3, [r7, #20]
 800fc24:	e01f      	b.n	800fc66 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	7d5b      	ldrb	r3, [r3, #21]
 800fc2a:	7afa      	ldrb	r2, [r7, #11]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d80c      	bhi.n	800fc4a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fc34:	7afa      	ldrb	r2, [r7, #11]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d112      	bne.n	800fc60 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fc3a:	4b13      	ldr	r3, [pc, #76]	; (800fc88 <tcp_kill_prio+0x98>)
 800fc3c:	681a      	ldr	r2, [r3, #0]
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	6a1b      	ldr	r3, [r3, #32]
 800fc42:	1ad3      	subs	r3, r2, r3
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d80a      	bhi.n	800fc60 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fc4a:	4b0f      	ldr	r3, [pc, #60]	; (800fc88 <tcp_kill_prio+0x98>)
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	6a1b      	ldr	r3, [r3, #32]
 800fc52:	1ad3      	subs	r3, r2, r3
 800fc54:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	7d5b      	ldrb	r3, [r3, #21]
 800fc5e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	617b      	str	r3, [r7, #20]
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d1dc      	bne.n	800fc26 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d004      	beq.n	800fc7c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fc72:	6938      	ldr	r0, [r7, #16]
 800fc74:	f7ff fa5a 	bl	800f12c <tcp_abort>
 800fc78:	e000      	b.n	800fc7c <tcp_kill_prio+0x8c>
    return;
 800fc7a:	bf00      	nop
  }
}
 800fc7c:	3718      	adds	r7, #24
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	2000b4c0 	.word	0x2000b4c0
 800fc88:	2000b4c4 	.word	0x2000b4c4

0800fc8c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b086      	sub	sp, #24
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	4603      	mov	r3, r0
 800fc94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fc96:	79fb      	ldrb	r3, [r7, #7]
 800fc98:	2b08      	cmp	r3, #8
 800fc9a:	d009      	beq.n	800fcb0 <tcp_kill_state+0x24>
 800fc9c:	79fb      	ldrb	r3, [r7, #7]
 800fc9e:	2b09      	cmp	r3, #9
 800fca0:	d006      	beq.n	800fcb0 <tcp_kill_state+0x24>
 800fca2:	4b1a      	ldr	r3, [pc, #104]	; (800fd0c <tcp_kill_state+0x80>)
 800fca4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800fca8:	4919      	ldr	r1, [pc, #100]	; (800fd10 <tcp_kill_state+0x84>)
 800fcaa:	481a      	ldr	r0, [pc, #104]	; (800fd14 <tcp_kill_state+0x88>)
 800fcac:	f009 fea6 	bl	80199fc <iprintf>

  inactivity = 0;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcb8:	4b17      	ldr	r3, [pc, #92]	; (800fd18 <tcp_kill_state+0x8c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	617b      	str	r3, [r7, #20]
 800fcbe:	e017      	b.n	800fcf0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	7d1b      	ldrb	r3, [r3, #20]
 800fcc4:	79fa      	ldrb	r2, [r7, #7]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d10f      	bne.n	800fcea <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fcca:	4b14      	ldr	r3, [pc, #80]	; (800fd1c <tcp_kill_state+0x90>)
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	6a1b      	ldr	r3, [r3, #32]
 800fcd2:	1ad3      	subs	r3, r2, r3
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d807      	bhi.n	800fcea <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fcda:	4b10      	ldr	r3, [pc, #64]	; (800fd1c <tcp_kill_state+0x90>)
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	6a1b      	ldr	r3, [r3, #32]
 800fce2:	1ad3      	subs	r3, r2, r3
 800fce4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	617b      	str	r3, [r7, #20]
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d1e4      	bne.n	800fcc0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d003      	beq.n	800fd04 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	6938      	ldr	r0, [r7, #16]
 800fd00:	f7ff f956 	bl	800efb0 <tcp_abandon>
  }
}
 800fd04:	bf00      	nop
 800fd06:	3718      	adds	r7, #24
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	0801dee8 	.word	0x0801dee8
 800fd10:	0801e474 	.word	0x0801e474
 800fd14:	0801df2c 	.word	0x0801df2c
 800fd18:	2000b4c0 	.word	0x2000b4c0
 800fd1c:	2000b4c4 	.word	0x2000b4c4

0800fd20 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fd26:	2300      	movs	r3, #0
 800fd28:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd2e:	4b12      	ldr	r3, [pc, #72]	; (800fd78 <tcp_kill_timewait+0x58>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	60fb      	str	r3, [r7, #12]
 800fd34:	e012      	b.n	800fd5c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fd36:	4b11      	ldr	r3, [pc, #68]	; (800fd7c <tcp_kill_timewait+0x5c>)
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	6a1b      	ldr	r3, [r3, #32]
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d807      	bhi.n	800fd56 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fd46:	4b0d      	ldr	r3, [pc, #52]	; (800fd7c <tcp_kill_timewait+0x5c>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	6a1b      	ldr	r3, [r3, #32]
 800fd4e:	1ad3      	subs	r3, r2, r3
 800fd50:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	60fb      	str	r3, [r7, #12]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1e9      	bne.n	800fd36 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fd68:	68b8      	ldr	r0, [r7, #8]
 800fd6a:	f7ff f9df 	bl	800f12c <tcp_abort>
  }
}
 800fd6e:	bf00      	nop
 800fd70:	3710      	adds	r7, #16
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	2000b4d0 	.word	0x2000b4d0
 800fd7c:	2000b4c4 	.word	0x2000b4c4

0800fd80 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fd86:	4b10      	ldr	r3, [pc, #64]	; (800fdc8 <tcp_handle_closepend+0x48>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fd8c:	e014      	b.n	800fdb8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	8b5b      	ldrh	r3, [r3, #26]
 800fd98:	f003 0308 	and.w	r3, r3, #8
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d009      	beq.n	800fdb4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	8b5b      	ldrh	r3, [r3, #26]
 800fda4:	f023 0308 	bic.w	r3, r3, #8
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7ff f86c 	bl	800ee8c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d1e7      	bne.n	800fd8e <tcp_handle_closepend+0xe>
  }
}
 800fdbe:	bf00      	nop
 800fdc0:	3708      	adds	r7, #8
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	2000b4c0 	.word	0x2000b4c0

0800fdcc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fdd6:	2001      	movs	r0, #1
 800fdd8:	f7fd fd8c 	bl	800d8f4 <memp_malloc>
 800fddc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d126      	bne.n	800fe32 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fde4:	f7ff ffcc 	bl	800fd80 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fde8:	f7ff ff9a 	bl	800fd20 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fdec:	2001      	movs	r0, #1
 800fdee:	f7fd fd81 	bl	800d8f4 <memp_malloc>
 800fdf2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d11b      	bne.n	800fe32 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fdfa:	2009      	movs	r0, #9
 800fdfc:	f7ff ff46 	bl	800fc8c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe00:	2001      	movs	r0, #1
 800fe02:	f7fd fd77 	bl	800d8f4 <memp_malloc>
 800fe06:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d111      	bne.n	800fe32 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fe0e:	2008      	movs	r0, #8
 800fe10:	f7ff ff3c 	bl	800fc8c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe14:	2001      	movs	r0, #1
 800fe16:	f7fd fd6d 	bl	800d8f4 <memp_malloc>
 800fe1a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d107      	bne.n	800fe32 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fe22:	79fb      	ldrb	r3, [r7, #7]
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff fee3 	bl	800fbf0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe2a:	2001      	movs	r0, #1
 800fe2c:	f7fd fd62 	bl	800d8f4 <memp_malloc>
 800fe30:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d03f      	beq.n	800feb8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fe38:	229c      	movs	r2, #156	; 0x9c
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f009 f8d0 	bl	8018fe2 <memset>
    pcb->prio = prio;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	79fa      	ldrb	r2, [r7, #7]
 800fe46:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fe4e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fe58:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	22ff      	movs	r2, #255	; 0xff
 800fe66:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fe6e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2206      	movs	r2, #6
 800fe74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2206      	movs	r2, #6
 800fe7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe84:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2201      	movs	r2, #1
 800fe8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fe8e:	4b0d      	ldr	r3, [pc, #52]	; (800fec4 <tcp_alloc+0xf8>)
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fe96:	4b0c      	ldr	r3, [pc, #48]	; (800fec8 <tcp_alloc+0xfc>)
 800fe98:	781a      	ldrb	r2, [r3, #0]
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fea4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	4a08      	ldr	r2, [pc, #32]	; (800fecc <tcp_alloc+0x100>)
 800feac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	4a07      	ldr	r2, [pc, #28]	; (800fed0 <tcp_alloc+0x104>)
 800feb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800feb8:	68fb      	ldr	r3, [r7, #12]
}
 800feba:	4618      	mov	r0, r3
 800febc:	3710      	adds	r7, #16
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	2000b4c4 	.word	0x2000b4c4
 800fec8:	20004712 	.word	0x20004712
 800fecc:	0800fb85 	.word	0x0800fb85
 800fed0:	006ddd00 	.word	0x006ddd00

0800fed4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d107      	bne.n	800fef2 <tcp_pcb_purge+0x1e>
 800fee2:	4b21      	ldr	r3, [pc, #132]	; (800ff68 <tcp_pcb_purge+0x94>)
 800fee4:	f640 0251 	movw	r2, #2129	; 0x851
 800fee8:	4920      	ldr	r1, [pc, #128]	; (800ff6c <tcp_pcb_purge+0x98>)
 800feea:	4821      	ldr	r0, [pc, #132]	; (800ff70 <tcp_pcb_purge+0x9c>)
 800feec:	f009 fd86 	bl	80199fc <iprintf>
 800fef0:	e037      	b.n	800ff62 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	7d1b      	ldrb	r3, [r3, #20]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d033      	beq.n	800ff62 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fefe:	2b0a      	cmp	r3, #10
 800ff00:	d02f      	beq.n	800ff62 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d02b      	beq.n	800ff62 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d007      	beq.n	800ff22 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7fe fb6c 	bl	800e5f4 <pbuf_free>
      pcb->refused_data = NULL;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d002      	beq.n	800ff30 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 f986 	bl	801023c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff36:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7ff fdc9 	bl	800fad4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7ff fdc4 	bl	800fad4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	66da      	str	r2, [r3, #108]	; 0x6c
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	0801dee8 	.word	0x0801dee8
 800ff6c:	0801e534 	.word	0x0801e534
 800ff70:	0801df2c 	.word	0x0801df2c

0800ff74 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d106      	bne.n	800ff92 <tcp_pcb_remove+0x1e>
 800ff84:	4b3e      	ldr	r3, [pc, #248]	; (8010080 <tcp_pcb_remove+0x10c>)
 800ff86:	f640 0283 	movw	r2, #2179	; 0x883
 800ff8a:	493e      	ldr	r1, [pc, #248]	; (8010084 <tcp_pcb_remove+0x110>)
 800ff8c:	483e      	ldr	r0, [pc, #248]	; (8010088 <tcp_pcb_remove+0x114>)
 800ff8e:	f009 fd35 	bl	80199fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d106      	bne.n	800ffa6 <tcp_pcb_remove+0x32>
 800ff98:	4b39      	ldr	r3, [pc, #228]	; (8010080 <tcp_pcb_remove+0x10c>)
 800ff9a:	f640 0284 	movw	r2, #2180	; 0x884
 800ff9e:	493b      	ldr	r1, [pc, #236]	; (801008c <tcp_pcb_remove+0x118>)
 800ffa0:	4839      	ldr	r0, [pc, #228]	; (8010088 <tcp_pcb_remove+0x114>)
 800ffa2:	f009 fd2b 	bl	80199fc <iprintf>

  TCP_RMV(pcblist, pcb);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	683a      	ldr	r2, [r7, #0]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d105      	bne.n	800ffbc <tcp_pcb_remove+0x48>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	68da      	ldr	r2, [r3, #12]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	601a      	str	r2, [r3, #0]
 800ffba:	e013      	b.n	800ffe4 <tcp_pcb_remove+0x70>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	60fb      	str	r3, [r7, #12]
 800ffc2:	e00c      	b.n	800ffde <tcp_pcb_remove+0x6a>
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	683a      	ldr	r2, [r7, #0]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d104      	bne.n	800ffd8 <tcp_pcb_remove+0x64>
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	68da      	ldr	r2, [r3, #12]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	60da      	str	r2, [r3, #12]
 800ffd6:	e005      	b.n	800ffe4 <tcp_pcb_remove+0x70>
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	60fb      	str	r3, [r7, #12]
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d1ef      	bne.n	800ffc4 <tcp_pcb_remove+0x50>
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ffea:	6838      	ldr	r0, [r7, #0]
 800ffec:	f7ff ff72 	bl	800fed4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	7d1b      	ldrb	r3, [r3, #20]
 800fff4:	2b0a      	cmp	r3, #10
 800fff6:	d013      	beq.n	8010020 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d00f      	beq.n	8010020 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	8b5b      	ldrh	r3, [r3, #26]
 8010004:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010008:	2b00      	cmp	r3, #0
 801000a:	d009      	beq.n	8010020 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	8b5b      	ldrh	r3, [r3, #26]
 8010010:	f043 0302 	orr.w	r3, r3, #2
 8010014:	b29a      	uxth	r2, r3
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801001a:	6838      	ldr	r0, [r7, #0]
 801001c:	f002 ff68 	bl	8012ef0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	7d1b      	ldrb	r3, [r3, #20]
 8010024:	2b01      	cmp	r3, #1
 8010026:	d020      	beq.n	801006a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801002c:	2b00      	cmp	r3, #0
 801002e:	d006      	beq.n	801003e <tcp_pcb_remove+0xca>
 8010030:	4b13      	ldr	r3, [pc, #76]	; (8010080 <tcp_pcb_remove+0x10c>)
 8010032:	f640 0293 	movw	r2, #2195	; 0x893
 8010036:	4916      	ldr	r1, [pc, #88]	; (8010090 <tcp_pcb_remove+0x11c>)
 8010038:	4813      	ldr	r0, [pc, #76]	; (8010088 <tcp_pcb_remove+0x114>)
 801003a:	f009 fcdf 	bl	80199fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010042:	2b00      	cmp	r3, #0
 8010044:	d006      	beq.n	8010054 <tcp_pcb_remove+0xe0>
 8010046:	4b0e      	ldr	r3, [pc, #56]	; (8010080 <tcp_pcb_remove+0x10c>)
 8010048:	f640 0294 	movw	r2, #2196	; 0x894
 801004c:	4911      	ldr	r1, [pc, #68]	; (8010094 <tcp_pcb_remove+0x120>)
 801004e:	480e      	ldr	r0, [pc, #56]	; (8010088 <tcp_pcb_remove+0x114>)
 8010050:	f009 fcd4 	bl	80199fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010058:	2b00      	cmp	r3, #0
 801005a:	d006      	beq.n	801006a <tcp_pcb_remove+0xf6>
 801005c:	4b08      	ldr	r3, [pc, #32]	; (8010080 <tcp_pcb_remove+0x10c>)
 801005e:	f640 0296 	movw	r2, #2198	; 0x896
 8010062:	490d      	ldr	r1, [pc, #52]	; (8010098 <tcp_pcb_remove+0x124>)
 8010064:	4808      	ldr	r0, [pc, #32]	; (8010088 <tcp_pcb_remove+0x114>)
 8010066:	f009 fcc9 	bl	80199fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	2200      	movs	r2, #0
 801006e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	2200      	movs	r2, #0
 8010074:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010076:	bf00      	nop
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	0801dee8 	.word	0x0801dee8
 8010084:	0801e550 	.word	0x0801e550
 8010088:	0801df2c 	.word	0x0801df2c
 801008c:	0801e56c 	.word	0x0801e56c
 8010090:	0801e58c 	.word	0x0801e58c
 8010094:	0801e5a4 	.word	0x0801e5a4
 8010098:	0801e5c0 	.word	0x0801e5c0

0801009c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d106      	bne.n	80100b8 <tcp_next_iss+0x1c>
 80100aa:	4b0a      	ldr	r3, [pc, #40]	; (80100d4 <tcp_next_iss+0x38>)
 80100ac:	f640 02af 	movw	r2, #2223	; 0x8af
 80100b0:	4909      	ldr	r1, [pc, #36]	; (80100d8 <tcp_next_iss+0x3c>)
 80100b2:	480a      	ldr	r0, [pc, #40]	; (80100dc <tcp_next_iss+0x40>)
 80100b4:	f009 fca2 	bl	80199fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80100b8:	4b09      	ldr	r3, [pc, #36]	; (80100e0 <tcp_next_iss+0x44>)
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	4b09      	ldr	r3, [pc, #36]	; (80100e4 <tcp_next_iss+0x48>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4413      	add	r3, r2
 80100c2:	4a07      	ldr	r2, [pc, #28]	; (80100e0 <tcp_next_iss+0x44>)
 80100c4:	6013      	str	r3, [r2, #0]
  return iss;
 80100c6:	4b06      	ldr	r3, [pc, #24]	; (80100e0 <tcp_next_iss+0x44>)
 80100c8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	0801dee8 	.word	0x0801dee8
 80100d8:	0801e5d8 	.word	0x0801e5d8
 80100dc:	0801df2c 	.word	0x0801df2c
 80100e0:	200000b4 	.word	0x200000b4
 80100e4:	2000b4c4 	.word	0x2000b4c4

080100e8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b086      	sub	sp, #24
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	4603      	mov	r3, r0
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	607a      	str	r2, [r7, #4]
 80100f4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d106      	bne.n	801010a <tcp_eff_send_mss_netif+0x22>
 80100fc:	4b14      	ldr	r3, [pc, #80]	; (8010150 <tcp_eff_send_mss_netif+0x68>)
 80100fe:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010102:	4914      	ldr	r1, [pc, #80]	; (8010154 <tcp_eff_send_mss_netif+0x6c>)
 8010104:	4814      	ldr	r0, [pc, #80]	; (8010158 <tcp_eff_send_mss_netif+0x70>)
 8010106:	f009 fc79 	bl	80199fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d101      	bne.n	8010114 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010110:	89fb      	ldrh	r3, [r7, #14]
 8010112:	e019      	b.n	8010148 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010118:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801011a:	8afb      	ldrh	r3, [r7, #22]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d012      	beq.n	8010146 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010120:	2328      	movs	r3, #40	; 0x28
 8010122:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010124:	8afa      	ldrh	r2, [r7, #22]
 8010126:	8abb      	ldrh	r3, [r7, #20]
 8010128:	429a      	cmp	r2, r3
 801012a:	d904      	bls.n	8010136 <tcp_eff_send_mss_netif+0x4e>
 801012c:	8afa      	ldrh	r2, [r7, #22]
 801012e:	8abb      	ldrh	r3, [r7, #20]
 8010130:	1ad3      	subs	r3, r2, r3
 8010132:	b29b      	uxth	r3, r3
 8010134:	e000      	b.n	8010138 <tcp_eff_send_mss_netif+0x50>
 8010136:	2300      	movs	r3, #0
 8010138:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801013a:	8a7a      	ldrh	r2, [r7, #18]
 801013c:	89fb      	ldrh	r3, [r7, #14]
 801013e:	4293      	cmp	r3, r2
 8010140:	bf28      	it	cs
 8010142:	4613      	movcs	r3, r2
 8010144:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010146:	89fb      	ldrh	r3, [r7, #14]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3718      	adds	r7, #24
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	0801dee8 	.word	0x0801dee8
 8010154:	0801e5f4 	.word	0x0801e5f4
 8010158:	0801df2c 	.word	0x0801df2c

0801015c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b084      	sub	sp, #16
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d119      	bne.n	80101a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010170:	4b10      	ldr	r3, [pc, #64]	; (80101b4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010172:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010176:	4910      	ldr	r1, [pc, #64]	; (80101b8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010178:	4810      	ldr	r0, [pc, #64]	; (80101bc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801017a:	f009 fc3f 	bl	80199fc <iprintf>

  while (pcb != NULL) {
 801017e:	e011      	b.n	80101a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	429a      	cmp	r2, r3
 801018a:	d108      	bne.n	801019e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f7fe ffca 	bl	800f12c <tcp_abort>
      pcb = next;
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	60fb      	str	r3, [r7, #12]
 801019c:	e002      	b.n	80101a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d1ea      	bne.n	8010180 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80101aa:	bf00      	nop
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	0801dee8 	.word	0x0801dee8
 80101b8:	0801e61c 	.word	0x0801e61c
 80101bc:	0801df2c 	.word	0x0801df2c

080101c0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b084      	sub	sp, #16
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d02a      	beq.n	8010226 <tcp_netif_ip_addr_changed+0x66>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d026      	beq.n	8010226 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80101d8:	4b15      	ldr	r3, [pc, #84]	; (8010230 <tcp_netif_ip_addr_changed+0x70>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	4619      	mov	r1, r3
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f7ff ffbc 	bl	801015c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80101e4:	4b13      	ldr	r3, [pc, #76]	; (8010234 <tcp_netif_ip_addr_changed+0x74>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4619      	mov	r1, r3
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f7ff ffb6 	bl	801015c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d017      	beq.n	8010226 <tcp_netif_ip_addr_changed+0x66>
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d013      	beq.n	8010226 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80101fe:	4b0e      	ldr	r3, [pc, #56]	; (8010238 <tcp_netif_ip_addr_changed+0x78>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	60fb      	str	r3, [r7, #12]
 8010204:	e00c      	b.n	8010220 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	429a      	cmp	r2, r3
 8010210:	d103      	bne.n	801021a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	68db      	ldr	r3, [r3, #12]
 801021e:	60fb      	str	r3, [r7, #12]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d1ef      	bne.n	8010206 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010226:	bf00      	nop
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	2000b4c0 	.word	0x2000b4c0
 8010234:	2000b4cc 	.word	0x2000b4cc
 8010238:	2000b4c8 	.word	0x2000b4c8

0801023c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010248:	2b00      	cmp	r3, #0
 801024a:	d007      	beq.n	801025c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010250:	4618      	mov	r0, r3
 8010252:	f7ff fc3f 	bl	800fad4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801025c:	bf00      	nop
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010264:	b590      	push	{r4, r7, lr}
 8010266:	b08d      	sub	sp, #52	; 0x34
 8010268:	af04      	add	r7, sp, #16
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d105      	bne.n	8010280 <tcp_input+0x1c>
 8010274:	4b9b      	ldr	r3, [pc, #620]	; (80104e4 <tcp_input+0x280>)
 8010276:	2283      	movs	r2, #131	; 0x83
 8010278:	499b      	ldr	r1, [pc, #620]	; (80104e8 <tcp_input+0x284>)
 801027a:	489c      	ldr	r0, [pc, #624]	; (80104ec <tcp_input+0x288>)
 801027c:	f009 fbbe 	bl	80199fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	4a9a      	ldr	r2, [pc, #616]	; (80104f0 <tcp_input+0x28c>)
 8010286:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	895b      	ldrh	r3, [r3, #10]
 801028c:	2b13      	cmp	r3, #19
 801028e:	f240 83c4 	bls.w	8010a1a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010292:	4b98      	ldr	r3, [pc, #608]	; (80104f4 <tcp_input+0x290>)
 8010294:	695a      	ldr	r2, [r3, #20]
 8010296:	4b97      	ldr	r3, [pc, #604]	; (80104f4 <tcp_input+0x290>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4619      	mov	r1, r3
 801029c:	4610      	mov	r0, r2
 801029e:	f007 fdc5 	bl	8017e2c <ip4_addr_isbroadcast_u32>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f040 83ba 	bne.w	8010a1e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80102aa:	4b92      	ldr	r3, [pc, #584]	; (80104f4 <tcp_input+0x290>)
 80102ac:	695b      	ldr	r3, [r3, #20]
 80102ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80102b2:	2be0      	cmp	r3, #224	; 0xe0
 80102b4:	f000 83b3 	beq.w	8010a1e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80102b8:	4b8d      	ldr	r3, [pc, #564]	; (80104f0 <tcp_input+0x28c>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	899b      	ldrh	r3, [r3, #12]
 80102be:	b29b      	uxth	r3, r3
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fc fe61 	bl	800cf88 <lwip_htons>
 80102c6:	4603      	mov	r3, r0
 80102c8:	0b1b      	lsrs	r3, r3, #12
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	009b      	lsls	r3, r3, #2
 80102d0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80102d2:	7cbb      	ldrb	r3, [r7, #18]
 80102d4:	2b13      	cmp	r3, #19
 80102d6:	f240 83a2 	bls.w	8010a1e <tcp_input+0x7ba>
 80102da:	7cbb      	ldrb	r3, [r7, #18]
 80102dc:	b29a      	uxth	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	891b      	ldrh	r3, [r3, #8]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	f200 839b 	bhi.w	8010a1e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80102e8:	7cbb      	ldrb	r3, [r7, #18]
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	3b14      	subs	r3, #20
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	4b81      	ldr	r3, [pc, #516]	; (80104f8 <tcp_input+0x294>)
 80102f2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80102f4:	4b81      	ldr	r3, [pc, #516]	; (80104fc <tcp_input+0x298>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	895a      	ldrh	r2, [r3, #10]
 80102fe:	7cbb      	ldrb	r3, [r7, #18]
 8010300:	b29b      	uxth	r3, r3
 8010302:	429a      	cmp	r2, r3
 8010304:	d309      	bcc.n	801031a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010306:	4b7c      	ldr	r3, [pc, #496]	; (80104f8 <tcp_input+0x294>)
 8010308:	881a      	ldrh	r2, [r3, #0]
 801030a:	4b7d      	ldr	r3, [pc, #500]	; (8010500 <tcp_input+0x29c>)
 801030c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801030e:	7cbb      	ldrb	r3, [r7, #18]
 8010310:	4619      	mov	r1, r3
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f7fe f8e8 	bl	800e4e8 <pbuf_remove_header>
 8010318:	e04e      	b.n	80103b8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d105      	bne.n	801032e <tcp_input+0xca>
 8010322:	4b70      	ldr	r3, [pc, #448]	; (80104e4 <tcp_input+0x280>)
 8010324:	22c2      	movs	r2, #194	; 0xc2
 8010326:	4977      	ldr	r1, [pc, #476]	; (8010504 <tcp_input+0x2a0>)
 8010328:	4870      	ldr	r0, [pc, #448]	; (80104ec <tcp_input+0x288>)
 801032a:	f009 fb67 	bl	80199fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801032e:	2114      	movs	r1, #20
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f7fe f8d9 	bl	800e4e8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	895a      	ldrh	r2, [r3, #10]
 801033a:	4b71      	ldr	r3, [pc, #452]	; (8010500 <tcp_input+0x29c>)
 801033c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801033e:	4b6e      	ldr	r3, [pc, #440]	; (80104f8 <tcp_input+0x294>)
 8010340:	881a      	ldrh	r2, [r3, #0]
 8010342:	4b6f      	ldr	r3, [pc, #444]	; (8010500 <tcp_input+0x29c>)
 8010344:	881b      	ldrh	r3, [r3, #0]
 8010346:	1ad3      	subs	r3, r2, r3
 8010348:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801034a:	4b6d      	ldr	r3, [pc, #436]	; (8010500 <tcp_input+0x29c>)
 801034c:	881b      	ldrh	r3, [r3, #0]
 801034e:	4619      	mov	r1, r3
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f7fe f8c9 	bl	800e4e8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	895b      	ldrh	r3, [r3, #10]
 801035c:	8a3a      	ldrh	r2, [r7, #16]
 801035e:	429a      	cmp	r2, r3
 8010360:	f200 835f 	bhi.w	8010a22 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	685b      	ldr	r3, [r3, #4]
 801036a:	4a64      	ldr	r2, [pc, #400]	; (80104fc <tcp_input+0x298>)
 801036c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	8a3a      	ldrh	r2, [r7, #16]
 8010374:	4611      	mov	r1, r2
 8010376:	4618      	mov	r0, r3
 8010378:	f7fe f8b6 	bl	800e4e8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	891a      	ldrh	r2, [r3, #8]
 8010380:	8a3b      	ldrh	r3, [r7, #16]
 8010382:	1ad3      	subs	r3, r2, r3
 8010384:	b29a      	uxth	r2, r3
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	895b      	ldrh	r3, [r3, #10]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d005      	beq.n	801039e <tcp_input+0x13a>
 8010392:	4b54      	ldr	r3, [pc, #336]	; (80104e4 <tcp_input+0x280>)
 8010394:	22df      	movs	r2, #223	; 0xdf
 8010396:	495c      	ldr	r1, [pc, #368]	; (8010508 <tcp_input+0x2a4>)
 8010398:	4854      	ldr	r0, [pc, #336]	; (80104ec <tcp_input+0x288>)
 801039a:	f009 fb2f 	bl	80199fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	891a      	ldrh	r2, [r3, #8]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	891b      	ldrh	r3, [r3, #8]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d005      	beq.n	80103b8 <tcp_input+0x154>
 80103ac:	4b4d      	ldr	r3, [pc, #308]	; (80104e4 <tcp_input+0x280>)
 80103ae:	22e0      	movs	r2, #224	; 0xe0
 80103b0:	4956      	ldr	r1, [pc, #344]	; (801050c <tcp_input+0x2a8>)
 80103b2:	484e      	ldr	r0, [pc, #312]	; (80104ec <tcp_input+0x288>)
 80103b4:	f009 fb22 	bl	80199fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80103b8:	4b4d      	ldr	r3, [pc, #308]	; (80104f0 <tcp_input+0x28c>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	881b      	ldrh	r3, [r3, #0]
 80103be:	b29a      	uxth	r2, r3
 80103c0:	4b4b      	ldr	r3, [pc, #300]	; (80104f0 <tcp_input+0x28c>)
 80103c2:	681c      	ldr	r4, [r3, #0]
 80103c4:	4610      	mov	r0, r2
 80103c6:	f7fc fddf 	bl	800cf88 <lwip_htons>
 80103ca:	4603      	mov	r3, r0
 80103cc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80103ce:	4b48      	ldr	r3, [pc, #288]	; (80104f0 <tcp_input+0x28c>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	885b      	ldrh	r3, [r3, #2]
 80103d4:	b29a      	uxth	r2, r3
 80103d6:	4b46      	ldr	r3, [pc, #280]	; (80104f0 <tcp_input+0x28c>)
 80103d8:	681c      	ldr	r4, [r3, #0]
 80103da:	4610      	mov	r0, r2
 80103dc:	f7fc fdd4 	bl	800cf88 <lwip_htons>
 80103e0:	4603      	mov	r3, r0
 80103e2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80103e4:	4b42      	ldr	r3, [pc, #264]	; (80104f0 <tcp_input+0x28c>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	685a      	ldr	r2, [r3, #4]
 80103ea:	4b41      	ldr	r3, [pc, #260]	; (80104f0 <tcp_input+0x28c>)
 80103ec:	681c      	ldr	r4, [r3, #0]
 80103ee:	4610      	mov	r0, r2
 80103f0:	f7fc fddf 	bl	800cfb2 <lwip_htonl>
 80103f4:	4603      	mov	r3, r0
 80103f6:	6063      	str	r3, [r4, #4]
 80103f8:	6863      	ldr	r3, [r4, #4]
 80103fa:	4a45      	ldr	r2, [pc, #276]	; (8010510 <tcp_input+0x2ac>)
 80103fc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80103fe:	4b3c      	ldr	r3, [pc, #240]	; (80104f0 <tcp_input+0x28c>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	689a      	ldr	r2, [r3, #8]
 8010404:	4b3a      	ldr	r3, [pc, #232]	; (80104f0 <tcp_input+0x28c>)
 8010406:	681c      	ldr	r4, [r3, #0]
 8010408:	4610      	mov	r0, r2
 801040a:	f7fc fdd2 	bl	800cfb2 <lwip_htonl>
 801040e:	4603      	mov	r3, r0
 8010410:	60a3      	str	r3, [r4, #8]
 8010412:	68a3      	ldr	r3, [r4, #8]
 8010414:	4a3f      	ldr	r2, [pc, #252]	; (8010514 <tcp_input+0x2b0>)
 8010416:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010418:	4b35      	ldr	r3, [pc, #212]	; (80104f0 <tcp_input+0x28c>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	89db      	ldrh	r3, [r3, #14]
 801041e:	b29a      	uxth	r2, r3
 8010420:	4b33      	ldr	r3, [pc, #204]	; (80104f0 <tcp_input+0x28c>)
 8010422:	681c      	ldr	r4, [r3, #0]
 8010424:	4610      	mov	r0, r2
 8010426:	f7fc fdaf 	bl	800cf88 <lwip_htons>
 801042a:	4603      	mov	r3, r0
 801042c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801042e:	4b30      	ldr	r3, [pc, #192]	; (80104f0 <tcp_input+0x28c>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	899b      	ldrh	r3, [r3, #12]
 8010434:	b29b      	uxth	r3, r3
 8010436:	4618      	mov	r0, r3
 8010438:	f7fc fda6 	bl	800cf88 <lwip_htons>
 801043c:	4603      	mov	r3, r0
 801043e:	b2db      	uxtb	r3, r3
 8010440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010444:	b2da      	uxtb	r2, r3
 8010446:	4b34      	ldr	r3, [pc, #208]	; (8010518 <tcp_input+0x2b4>)
 8010448:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	891a      	ldrh	r2, [r3, #8]
 801044e:	4b33      	ldr	r3, [pc, #204]	; (801051c <tcp_input+0x2b8>)
 8010450:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010452:	4b31      	ldr	r3, [pc, #196]	; (8010518 <tcp_input+0x2b4>)
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	f003 0303 	and.w	r3, r3, #3
 801045a:	2b00      	cmp	r3, #0
 801045c:	d00c      	beq.n	8010478 <tcp_input+0x214>
    tcplen++;
 801045e:	4b2f      	ldr	r3, [pc, #188]	; (801051c <tcp_input+0x2b8>)
 8010460:	881b      	ldrh	r3, [r3, #0]
 8010462:	3301      	adds	r3, #1
 8010464:	b29a      	uxth	r2, r3
 8010466:	4b2d      	ldr	r3, [pc, #180]	; (801051c <tcp_input+0x2b8>)
 8010468:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	891a      	ldrh	r2, [r3, #8]
 801046e:	4b2b      	ldr	r3, [pc, #172]	; (801051c <tcp_input+0x2b8>)
 8010470:	881b      	ldrh	r3, [r3, #0]
 8010472:	429a      	cmp	r2, r3
 8010474:	f200 82d7 	bhi.w	8010a26 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010478:	2300      	movs	r3, #0
 801047a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801047c:	4b28      	ldr	r3, [pc, #160]	; (8010520 <tcp_input+0x2bc>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	61fb      	str	r3, [r7, #28]
 8010482:	e09d      	b.n	80105c0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	7d1b      	ldrb	r3, [r3, #20]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d105      	bne.n	8010498 <tcp_input+0x234>
 801048c:	4b15      	ldr	r3, [pc, #84]	; (80104e4 <tcp_input+0x280>)
 801048e:	22fb      	movs	r2, #251	; 0xfb
 8010490:	4924      	ldr	r1, [pc, #144]	; (8010524 <tcp_input+0x2c0>)
 8010492:	4816      	ldr	r0, [pc, #88]	; (80104ec <tcp_input+0x288>)
 8010494:	f009 fab2 	bl	80199fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	7d1b      	ldrb	r3, [r3, #20]
 801049c:	2b0a      	cmp	r3, #10
 801049e:	d105      	bne.n	80104ac <tcp_input+0x248>
 80104a0:	4b10      	ldr	r3, [pc, #64]	; (80104e4 <tcp_input+0x280>)
 80104a2:	22fc      	movs	r2, #252	; 0xfc
 80104a4:	4920      	ldr	r1, [pc, #128]	; (8010528 <tcp_input+0x2c4>)
 80104a6:	4811      	ldr	r0, [pc, #68]	; (80104ec <tcp_input+0x288>)
 80104a8:	f009 faa8 	bl	80199fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	7d1b      	ldrb	r3, [r3, #20]
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d105      	bne.n	80104c0 <tcp_input+0x25c>
 80104b4:	4b0b      	ldr	r3, [pc, #44]	; (80104e4 <tcp_input+0x280>)
 80104b6:	22fd      	movs	r2, #253	; 0xfd
 80104b8:	491c      	ldr	r1, [pc, #112]	; (801052c <tcp_input+0x2c8>)
 80104ba:	480c      	ldr	r0, [pc, #48]	; (80104ec <tcp_input+0x288>)
 80104bc:	f009 fa9e 	bl	80199fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	7a1b      	ldrb	r3, [r3, #8]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d033      	beq.n	8010530 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80104c8:	69fb      	ldr	r3, [r7, #28]
 80104ca:	7a1a      	ldrb	r2, [r3, #8]
 80104cc:	4b09      	ldr	r3, [pc, #36]	; (80104f4 <tcp_input+0x290>)
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80104d4:	3301      	adds	r3, #1
 80104d6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80104d8:	429a      	cmp	r2, r3
 80104da:	d029      	beq.n	8010530 <tcp_input+0x2cc>
      prev = pcb;
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	61bb      	str	r3, [r7, #24]
      continue;
 80104e0:	e06b      	b.n	80105ba <tcp_input+0x356>
 80104e2:	bf00      	nop
 80104e4:	0801e650 	.word	0x0801e650
 80104e8:	0801e684 	.word	0x0801e684
 80104ec:	0801e69c 	.word	0x0801e69c
 80104f0:	20004724 	.word	0x20004724
 80104f4:	20007d8c 	.word	0x20007d8c
 80104f8:	20004728 	.word	0x20004728
 80104fc:	2000472c 	.word	0x2000472c
 8010500:	2000472a 	.word	0x2000472a
 8010504:	0801e6c4 	.word	0x0801e6c4
 8010508:	0801e6d4 	.word	0x0801e6d4
 801050c:	0801e6e0 	.word	0x0801e6e0
 8010510:	20004734 	.word	0x20004734
 8010514:	20004738 	.word	0x20004738
 8010518:	20004740 	.word	0x20004740
 801051c:	2000473e 	.word	0x2000473e
 8010520:	2000b4c0 	.word	0x2000b4c0
 8010524:	0801e700 	.word	0x0801e700
 8010528:	0801e728 	.word	0x0801e728
 801052c:	0801e754 	.word	0x0801e754
    }

    if (pcb->remote_port == tcphdr->src &&
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	8b1a      	ldrh	r2, [r3, #24]
 8010534:	4b94      	ldr	r3, [pc, #592]	; (8010788 <tcp_input+0x524>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	881b      	ldrh	r3, [r3, #0]
 801053a:	b29b      	uxth	r3, r3
 801053c:	429a      	cmp	r2, r3
 801053e:	d13a      	bne.n	80105b6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	8ada      	ldrh	r2, [r3, #22]
 8010544:	4b90      	ldr	r3, [pc, #576]	; (8010788 <tcp_input+0x524>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	885b      	ldrh	r3, [r3, #2]
 801054a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801054c:	429a      	cmp	r2, r3
 801054e:	d132      	bne.n	80105b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	685a      	ldr	r2, [r3, #4]
 8010554:	4b8d      	ldr	r3, [pc, #564]	; (801078c <tcp_input+0x528>)
 8010556:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010558:	429a      	cmp	r2, r3
 801055a:	d12c      	bne.n	80105b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	681a      	ldr	r2, [r3, #0]
 8010560:	4b8a      	ldr	r3, [pc, #552]	; (801078c <tcp_input+0x528>)
 8010562:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010564:	429a      	cmp	r2, r3
 8010566:	d126      	bne.n	80105b6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	69fa      	ldr	r2, [r7, #28]
 801056e:	429a      	cmp	r2, r3
 8010570:	d106      	bne.n	8010580 <tcp_input+0x31c>
 8010572:	4b87      	ldr	r3, [pc, #540]	; (8010790 <tcp_input+0x52c>)
 8010574:	f240 120d 	movw	r2, #269	; 0x10d
 8010578:	4986      	ldr	r1, [pc, #536]	; (8010794 <tcp_input+0x530>)
 801057a:	4887      	ldr	r0, [pc, #540]	; (8010798 <tcp_input+0x534>)
 801057c:	f009 fa3e 	bl	80199fc <iprintf>
      if (prev != NULL) {
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d00a      	beq.n	801059c <tcp_input+0x338>
        prev->next = pcb->next;
 8010586:	69fb      	ldr	r3, [r7, #28]
 8010588:	68da      	ldr	r2, [r3, #12]
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801058e:	4b83      	ldr	r3, [pc, #524]	; (801079c <tcp_input+0x538>)
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	69fb      	ldr	r3, [r7, #28]
 8010594:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010596:	4a81      	ldr	r2, [pc, #516]	; (801079c <tcp_input+0x538>)
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	69fa      	ldr	r2, [r7, #28]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d111      	bne.n	80105ca <tcp_input+0x366>
 80105a6:	4b7a      	ldr	r3, [pc, #488]	; (8010790 <tcp_input+0x52c>)
 80105a8:	f240 1215 	movw	r2, #277	; 0x115
 80105ac:	497c      	ldr	r1, [pc, #496]	; (80107a0 <tcp_input+0x53c>)
 80105ae:	487a      	ldr	r0, [pc, #488]	; (8010798 <tcp_input+0x534>)
 80105b0:	f009 fa24 	bl	80199fc <iprintf>
      break;
 80105b4:	e009      	b.n	80105ca <tcp_input+0x366>
    }
    prev = pcb;
 80105b6:	69fb      	ldr	r3, [r7, #28]
 80105b8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80105ba:	69fb      	ldr	r3, [r7, #28]
 80105bc:	68db      	ldr	r3, [r3, #12]
 80105be:	61fb      	str	r3, [r7, #28]
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	f47f af5e 	bne.w	8010484 <tcp_input+0x220>
 80105c8:	e000      	b.n	80105cc <tcp_input+0x368>
      break;
 80105ca:	bf00      	nop
  }

  if (pcb == NULL) {
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f040 8095 	bne.w	80106fe <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80105d4:	4b73      	ldr	r3, [pc, #460]	; (80107a4 <tcp_input+0x540>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	61fb      	str	r3, [r7, #28]
 80105da:	e03f      	b.n	801065c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	7d1b      	ldrb	r3, [r3, #20]
 80105e0:	2b0a      	cmp	r3, #10
 80105e2:	d006      	beq.n	80105f2 <tcp_input+0x38e>
 80105e4:	4b6a      	ldr	r3, [pc, #424]	; (8010790 <tcp_input+0x52c>)
 80105e6:	f240 121f 	movw	r2, #287	; 0x11f
 80105ea:	496f      	ldr	r1, [pc, #444]	; (80107a8 <tcp_input+0x544>)
 80105ec:	486a      	ldr	r0, [pc, #424]	; (8010798 <tcp_input+0x534>)
 80105ee:	f009 fa05 	bl	80199fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	7a1b      	ldrb	r3, [r3, #8]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d009      	beq.n	801060e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	7a1a      	ldrb	r2, [r3, #8]
 80105fe:	4b63      	ldr	r3, [pc, #396]	; (801078c <tcp_input+0x528>)
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010606:	3301      	adds	r3, #1
 8010608:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801060a:	429a      	cmp	r2, r3
 801060c:	d122      	bne.n	8010654 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	8b1a      	ldrh	r2, [r3, #24]
 8010612:	4b5d      	ldr	r3, [pc, #372]	; (8010788 <tcp_input+0x524>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	881b      	ldrh	r3, [r3, #0]
 8010618:	b29b      	uxth	r3, r3
 801061a:	429a      	cmp	r2, r3
 801061c:	d11b      	bne.n	8010656 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	8ada      	ldrh	r2, [r3, #22]
 8010622:	4b59      	ldr	r3, [pc, #356]	; (8010788 <tcp_input+0x524>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	885b      	ldrh	r3, [r3, #2]
 8010628:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801062a:	429a      	cmp	r2, r3
 801062c:	d113      	bne.n	8010656 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	685a      	ldr	r2, [r3, #4]
 8010632:	4b56      	ldr	r3, [pc, #344]	; (801078c <tcp_input+0x528>)
 8010634:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010636:	429a      	cmp	r2, r3
 8010638:	d10d      	bne.n	8010656 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	4b53      	ldr	r3, [pc, #332]	; (801078c <tcp_input+0x528>)
 8010640:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010642:	429a      	cmp	r2, r3
 8010644:	d107      	bne.n	8010656 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010646:	69f8      	ldr	r0, [r7, #28]
 8010648:	f000 fb52 	bl	8010cf0 <tcp_timewait_input>
        }
        pbuf_free(p);
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f7fd ffd1 	bl	800e5f4 <pbuf_free>
        return;
 8010652:	e1ee      	b.n	8010a32 <tcp_input+0x7ce>
        continue;
 8010654:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010656:	69fb      	ldr	r3, [r7, #28]
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	61fb      	str	r3, [r7, #28]
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1bc      	bne.n	80105dc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010662:	2300      	movs	r3, #0
 8010664:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010666:	4b51      	ldr	r3, [pc, #324]	; (80107ac <tcp_input+0x548>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	617b      	str	r3, [r7, #20]
 801066c:	e02a      	b.n	80106c4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	7a1b      	ldrb	r3, [r3, #8]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d00c      	beq.n	8010690 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	7a1a      	ldrb	r2, [r3, #8]
 801067a:	4b44      	ldr	r3, [pc, #272]	; (801078c <tcp_input+0x528>)
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010682:	3301      	adds	r3, #1
 8010684:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010686:	429a      	cmp	r2, r3
 8010688:	d002      	beq.n	8010690 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	61bb      	str	r3, [r7, #24]
        continue;
 801068e:	e016      	b.n	80106be <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	8ada      	ldrh	r2, [r3, #22]
 8010694:	4b3c      	ldr	r3, [pc, #240]	; (8010788 <tcp_input+0x524>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	885b      	ldrh	r3, [r3, #2]
 801069a:	b29b      	uxth	r3, r3
 801069c:	429a      	cmp	r2, r3
 801069e:	d10c      	bne.n	80106ba <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	4b39      	ldr	r3, [pc, #228]	; (801078c <tcp_input+0x528>)
 80106a6:	695b      	ldr	r3, [r3, #20]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d00f      	beq.n	80106cc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00d      	beq.n	80106ce <tcp_input+0x46a>
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d009      	beq.n	80106ce <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	617b      	str	r3, [r7, #20]
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d1d1      	bne.n	801066e <tcp_input+0x40a>
 80106ca:	e000      	b.n	80106ce <tcp_input+0x46a>
            break;
 80106cc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d014      	beq.n	80106fe <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80106d4:	69bb      	ldr	r3, [r7, #24]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00a      	beq.n	80106f0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	68da      	ldr	r2, [r3, #12]
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80106e2:	4b32      	ldr	r3, [pc, #200]	; (80107ac <tcp_input+0x548>)
 80106e4:	681a      	ldr	r2, [r3, #0]
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80106ea:	4a30      	ldr	r2, [pc, #192]	; (80107ac <tcp_input+0x548>)
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80106f0:	6978      	ldr	r0, [r7, #20]
 80106f2:	f000 f9ff 	bl	8010af4 <tcp_listen_input>
      }
      pbuf_free(p);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7fd ff7c 	bl	800e5f4 <pbuf_free>
      return;
 80106fc:	e199      	b.n	8010a32 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	2b00      	cmp	r3, #0
 8010702:	f000 8160 	beq.w	80109c6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010706:	4b2a      	ldr	r3, [pc, #168]	; (80107b0 <tcp_input+0x54c>)
 8010708:	2200      	movs	r2, #0
 801070a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	891a      	ldrh	r2, [r3, #8]
 8010710:	4b27      	ldr	r3, [pc, #156]	; (80107b0 <tcp_input+0x54c>)
 8010712:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010714:	4a26      	ldr	r2, [pc, #152]	; (80107b0 <tcp_input+0x54c>)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801071a:	4b1b      	ldr	r3, [pc, #108]	; (8010788 <tcp_input+0x524>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	4a24      	ldr	r2, [pc, #144]	; (80107b0 <tcp_input+0x54c>)
 8010720:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010722:	4b24      	ldr	r3, [pc, #144]	; (80107b4 <tcp_input+0x550>)
 8010724:	2200      	movs	r2, #0
 8010726:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010728:	4b23      	ldr	r3, [pc, #140]	; (80107b8 <tcp_input+0x554>)
 801072a:	2200      	movs	r2, #0
 801072c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801072e:	4b23      	ldr	r3, [pc, #140]	; (80107bc <tcp_input+0x558>)
 8010730:	2200      	movs	r2, #0
 8010732:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010734:	4b22      	ldr	r3, [pc, #136]	; (80107c0 <tcp_input+0x55c>)
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	f003 0308 	and.w	r3, r3, #8
 801073c:	2b00      	cmp	r3, #0
 801073e:	d006      	beq.n	801074e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	7b5b      	ldrb	r3, [r3, #13]
 8010744:	f043 0301 	orr.w	r3, r3, #1
 8010748:	b2da      	uxtb	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801074e:	69fb      	ldr	r3, [r7, #28]
 8010750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010752:	2b00      	cmp	r3, #0
 8010754:	d038      	beq.n	80107c8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010756:	69f8      	ldr	r0, [r7, #28]
 8010758:	f7ff f940 	bl	800f9dc <tcp_process_refused_data>
 801075c:	4603      	mov	r3, r0
 801075e:	f113 0f0d 	cmn.w	r3, #13
 8010762:	d007      	beq.n	8010774 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010768:	2b00      	cmp	r3, #0
 801076a:	d02d      	beq.n	80107c8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801076c:	4b15      	ldr	r3, [pc, #84]	; (80107c4 <tcp_input+0x560>)
 801076e:	881b      	ldrh	r3, [r3, #0]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d029      	beq.n	80107c8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010778:	2b00      	cmp	r3, #0
 801077a:	f040 8104 	bne.w	8010986 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801077e:	69f8      	ldr	r0, [r7, #28]
 8010780:	f003 f9cc 	bl	8013b1c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010784:	e0ff      	b.n	8010986 <tcp_input+0x722>
 8010786:	bf00      	nop
 8010788:	20004724 	.word	0x20004724
 801078c:	20007d8c 	.word	0x20007d8c
 8010790:	0801e650 	.word	0x0801e650
 8010794:	0801e77c 	.word	0x0801e77c
 8010798:	0801e69c 	.word	0x0801e69c
 801079c:	2000b4c0 	.word	0x2000b4c0
 80107a0:	0801e7a8 	.word	0x0801e7a8
 80107a4:	2000b4d0 	.word	0x2000b4d0
 80107a8:	0801e7d4 	.word	0x0801e7d4
 80107ac:	2000b4c8 	.word	0x2000b4c8
 80107b0:	20004714 	.word	0x20004714
 80107b4:	20004744 	.word	0x20004744
 80107b8:	20004741 	.word	0x20004741
 80107bc:	2000473c 	.word	0x2000473c
 80107c0:	20004740 	.word	0x20004740
 80107c4:	2000473e 	.word	0x2000473e
      }
    }
    tcp_input_pcb = pcb;
 80107c8:	4a9b      	ldr	r2, [pc, #620]	; (8010a38 <tcp_input+0x7d4>)
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80107ce:	69f8      	ldr	r0, [r7, #28]
 80107d0:	f000 fb0a 	bl	8010de8 <tcp_process>
 80107d4:	4603      	mov	r3, r0
 80107d6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80107d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80107dc:	f113 0f0d 	cmn.w	r3, #13
 80107e0:	f000 80d3 	beq.w	801098a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80107e4:	4b95      	ldr	r3, [pc, #596]	; (8010a3c <tcp_input+0x7d8>)
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	f003 0308 	and.w	r3, r3, #8
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d015      	beq.n	801081c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d008      	beq.n	801080c <tcp_input+0x5a8>
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010800:	69fa      	ldr	r2, [r7, #28]
 8010802:	6912      	ldr	r2, [r2, #16]
 8010804:	f06f 010d 	mvn.w	r1, #13
 8010808:	4610      	mov	r0, r2
 801080a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801080c:	69f9      	ldr	r1, [r7, #28]
 801080e:	488c      	ldr	r0, [pc, #560]	; (8010a40 <tcp_input+0x7dc>)
 8010810:	f7ff fbb0 	bl	800ff74 <tcp_pcb_remove>
        tcp_free(pcb);
 8010814:	69f8      	ldr	r0, [r7, #28]
 8010816:	f7fe f9a9 	bl	800eb6c <tcp_free>
 801081a:	e0c1      	b.n	80109a0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801081c:	2300      	movs	r3, #0
 801081e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010820:	4b88      	ldr	r3, [pc, #544]	; (8010a44 <tcp_input+0x7e0>)
 8010822:	881b      	ldrh	r3, [r3, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d01d      	beq.n	8010864 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010828:	4b86      	ldr	r3, [pc, #536]	; (8010a44 <tcp_input+0x7e0>)
 801082a:	881b      	ldrh	r3, [r3, #0]
 801082c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801082e:	69fb      	ldr	r3, [r7, #28]
 8010830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00a      	beq.n	801084e <tcp_input+0x5ea>
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801083e:	69fa      	ldr	r2, [r7, #28]
 8010840:	6910      	ldr	r0, [r2, #16]
 8010842:	89fa      	ldrh	r2, [r7, #14]
 8010844:	69f9      	ldr	r1, [r7, #28]
 8010846:	4798      	blx	r3
 8010848:	4603      	mov	r3, r0
 801084a:	74fb      	strb	r3, [r7, #19]
 801084c:	e001      	b.n	8010852 <tcp_input+0x5ee>
 801084e:	2300      	movs	r3, #0
 8010850:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010852:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010856:	f113 0f0d 	cmn.w	r3, #13
 801085a:	f000 8098 	beq.w	801098e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801085e:	4b79      	ldr	r3, [pc, #484]	; (8010a44 <tcp_input+0x7e0>)
 8010860:	2200      	movs	r2, #0
 8010862:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010864:	69f8      	ldr	r0, [r7, #28]
 8010866:	f000 f905 	bl	8010a74 <tcp_input_delayed_close>
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	f040 8090 	bne.w	8010992 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010872:	4b75      	ldr	r3, [pc, #468]	; (8010a48 <tcp_input+0x7e4>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d041      	beq.n	80108fe <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801087a:	69fb      	ldr	r3, [r7, #28]
 801087c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801087e:	2b00      	cmp	r3, #0
 8010880:	d006      	beq.n	8010890 <tcp_input+0x62c>
 8010882:	4b72      	ldr	r3, [pc, #456]	; (8010a4c <tcp_input+0x7e8>)
 8010884:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010888:	4971      	ldr	r1, [pc, #452]	; (8010a50 <tcp_input+0x7ec>)
 801088a:	4872      	ldr	r0, [pc, #456]	; (8010a54 <tcp_input+0x7f0>)
 801088c:	f009 f8b6 	bl	80199fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	8b5b      	ldrh	r3, [r3, #26]
 8010894:	f003 0310 	and.w	r3, r3, #16
 8010898:	2b00      	cmp	r3, #0
 801089a:	d008      	beq.n	80108ae <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801089c:	4b6a      	ldr	r3, [pc, #424]	; (8010a48 <tcp_input+0x7e4>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fd fea7 	bl	800e5f4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80108a6:	69f8      	ldr	r0, [r7, #28]
 80108a8:	f7fe fc40 	bl	800f12c <tcp_abort>
            goto aborted;
 80108ac:	e078      	b.n	80109a0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00c      	beq.n	80108d2 <tcp_input+0x66e>
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	6918      	ldr	r0, [r3, #16]
 80108c2:	4b61      	ldr	r3, [pc, #388]	; (8010a48 <tcp_input+0x7e4>)
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	2300      	movs	r3, #0
 80108c8:	69f9      	ldr	r1, [r7, #28]
 80108ca:	47a0      	blx	r4
 80108cc:	4603      	mov	r3, r0
 80108ce:	74fb      	strb	r3, [r7, #19]
 80108d0:	e008      	b.n	80108e4 <tcp_input+0x680>
 80108d2:	4b5d      	ldr	r3, [pc, #372]	; (8010a48 <tcp_input+0x7e4>)
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	2300      	movs	r3, #0
 80108d8:	69f9      	ldr	r1, [r7, #28]
 80108da:	2000      	movs	r0, #0
 80108dc:	f7ff f952 	bl	800fb84 <tcp_recv_null>
 80108e0:	4603      	mov	r3, r0
 80108e2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80108e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108e8:	f113 0f0d 	cmn.w	r3, #13
 80108ec:	d053      	beq.n	8010996 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80108ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d003      	beq.n	80108fe <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80108f6:	4b54      	ldr	r3, [pc, #336]	; (8010a48 <tcp_input+0x7e4>)
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	69fb      	ldr	r3, [r7, #28]
 80108fc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80108fe:	4b4f      	ldr	r3, [pc, #316]	; (8010a3c <tcp_input+0x7d8>)
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	f003 0320 	and.w	r3, r3, #32
 8010906:	2b00      	cmp	r3, #0
 8010908:	d030      	beq.n	801096c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801090e:	2b00      	cmp	r3, #0
 8010910:	d009      	beq.n	8010926 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010916:	7b5a      	ldrb	r2, [r3, #13]
 8010918:	69fb      	ldr	r3, [r7, #28]
 801091a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801091c:	f042 0220 	orr.w	r2, r2, #32
 8010920:	b2d2      	uxtb	r2, r2
 8010922:	735a      	strb	r2, [r3, #13]
 8010924:	e022      	b.n	801096c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010926:	69fb      	ldr	r3, [r7, #28]
 8010928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801092a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801092e:	d005      	beq.n	801093c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010934:	3301      	adds	r3, #1
 8010936:	b29a      	uxth	r2, r3
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010942:	2b00      	cmp	r3, #0
 8010944:	d00b      	beq.n	801095e <tcp_input+0x6fa>
 8010946:	69fb      	ldr	r3, [r7, #28]
 8010948:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	6918      	ldr	r0, [r3, #16]
 8010950:	2300      	movs	r3, #0
 8010952:	2200      	movs	r2, #0
 8010954:	69f9      	ldr	r1, [r7, #28]
 8010956:	47a0      	blx	r4
 8010958:	4603      	mov	r3, r0
 801095a:	74fb      	strb	r3, [r7, #19]
 801095c:	e001      	b.n	8010962 <tcp_input+0x6fe>
 801095e:	2300      	movs	r3, #0
 8010960:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010962:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010966:	f113 0f0d 	cmn.w	r3, #13
 801096a:	d016      	beq.n	801099a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801096c:	4b32      	ldr	r3, [pc, #200]	; (8010a38 <tcp_input+0x7d4>)
 801096e:	2200      	movs	r2, #0
 8010970:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010972:	69f8      	ldr	r0, [r7, #28]
 8010974:	f000 f87e 	bl	8010a74 <tcp_input_delayed_close>
 8010978:	4603      	mov	r3, r0
 801097a:	2b00      	cmp	r3, #0
 801097c:	d10f      	bne.n	801099e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801097e:	69f8      	ldr	r0, [r7, #28]
 8010980:	f002 fab6 	bl	8012ef0 <tcp_output>
 8010984:	e00c      	b.n	80109a0 <tcp_input+0x73c>
        goto aborted;
 8010986:	bf00      	nop
 8010988:	e00a      	b.n	80109a0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801098a:	bf00      	nop
 801098c:	e008      	b.n	80109a0 <tcp_input+0x73c>
              goto aborted;
 801098e:	bf00      	nop
 8010990:	e006      	b.n	80109a0 <tcp_input+0x73c>
          goto aborted;
 8010992:	bf00      	nop
 8010994:	e004      	b.n	80109a0 <tcp_input+0x73c>
            goto aborted;
 8010996:	bf00      	nop
 8010998:	e002      	b.n	80109a0 <tcp_input+0x73c>
              goto aborted;
 801099a:	bf00      	nop
 801099c:	e000      	b.n	80109a0 <tcp_input+0x73c>
          goto aborted;
 801099e:	bf00      	nop
    tcp_input_pcb = NULL;
 80109a0:	4b25      	ldr	r3, [pc, #148]	; (8010a38 <tcp_input+0x7d4>)
 80109a2:	2200      	movs	r2, #0
 80109a4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80109a6:	4b28      	ldr	r3, [pc, #160]	; (8010a48 <tcp_input+0x7e4>)
 80109a8:	2200      	movs	r2, #0
 80109aa:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80109ac:	4b2a      	ldr	r3, [pc, #168]	; (8010a58 <tcp_input+0x7f4>)
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d03d      	beq.n	8010a30 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80109b4:	4b28      	ldr	r3, [pc, #160]	; (8010a58 <tcp_input+0x7f4>)
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fd fe1b 	bl	800e5f4 <pbuf_free>
      inseg.p = NULL;
 80109be:	4b26      	ldr	r3, [pc, #152]	; (8010a58 <tcp_input+0x7f4>)
 80109c0:	2200      	movs	r2, #0
 80109c2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80109c4:	e034      	b.n	8010a30 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80109c6:	4b25      	ldr	r3, [pc, #148]	; (8010a5c <tcp_input+0x7f8>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	899b      	ldrh	r3, [r3, #12]
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7fc fada 	bl	800cf88 <lwip_htons>
 80109d4:	4603      	mov	r3, r0
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	f003 0304 	and.w	r3, r3, #4
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d118      	bne.n	8010a12 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109e0:	4b1f      	ldr	r3, [pc, #124]	; (8010a60 <tcp_input+0x7fc>)
 80109e2:	6819      	ldr	r1, [r3, #0]
 80109e4:	4b1f      	ldr	r3, [pc, #124]	; (8010a64 <tcp_input+0x800>)
 80109e6:	881b      	ldrh	r3, [r3, #0]
 80109e8:	461a      	mov	r2, r3
 80109ea:	4b1f      	ldr	r3, [pc, #124]	; (8010a68 <tcp_input+0x804>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109f0:	4b1a      	ldr	r3, [pc, #104]	; (8010a5c <tcp_input+0x7f8>)
 80109f2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109f4:	885b      	ldrh	r3, [r3, #2]
 80109f6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109f8:	4a18      	ldr	r2, [pc, #96]	; (8010a5c <tcp_input+0x7f8>)
 80109fa:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109fc:	8812      	ldrh	r2, [r2, #0]
 80109fe:	b292      	uxth	r2, r2
 8010a00:	9202      	str	r2, [sp, #8]
 8010a02:	9301      	str	r3, [sp, #4]
 8010a04:	4b19      	ldr	r3, [pc, #100]	; (8010a6c <tcp_input+0x808>)
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	4b19      	ldr	r3, [pc, #100]	; (8010a70 <tcp_input+0x80c>)
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	2000      	movs	r0, #0
 8010a0e:	f003 f833 	bl	8013a78 <tcp_rst>
    pbuf_free(p);
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7fd fdee 	bl	800e5f4 <pbuf_free>
  return;
 8010a18:	e00a      	b.n	8010a30 <tcp_input+0x7cc>
    goto dropped;
 8010a1a:	bf00      	nop
 8010a1c:	e004      	b.n	8010a28 <tcp_input+0x7c4>
dropped:
 8010a1e:	bf00      	nop
 8010a20:	e002      	b.n	8010a28 <tcp_input+0x7c4>
      goto dropped;
 8010a22:	bf00      	nop
 8010a24:	e000      	b.n	8010a28 <tcp_input+0x7c4>
      goto dropped;
 8010a26:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f7fd fde3 	bl	800e5f4 <pbuf_free>
 8010a2e:	e000      	b.n	8010a32 <tcp_input+0x7ce>
  return;
 8010a30:	bf00      	nop
}
 8010a32:	3724      	adds	r7, #36	; 0x24
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd90      	pop	{r4, r7, pc}
 8010a38:	2000b4d4 	.word	0x2000b4d4
 8010a3c:	20004741 	.word	0x20004741
 8010a40:	2000b4c0 	.word	0x2000b4c0
 8010a44:	2000473c 	.word	0x2000473c
 8010a48:	20004744 	.word	0x20004744
 8010a4c:	0801e650 	.word	0x0801e650
 8010a50:	0801e804 	.word	0x0801e804
 8010a54:	0801e69c 	.word	0x0801e69c
 8010a58:	20004714 	.word	0x20004714
 8010a5c:	20004724 	.word	0x20004724
 8010a60:	20004738 	.word	0x20004738
 8010a64:	2000473e 	.word	0x2000473e
 8010a68:	20004734 	.word	0x20004734
 8010a6c:	20007d9c 	.word	0x20007d9c
 8010a70:	20007da0 	.word	0x20007da0

08010a74 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d106      	bne.n	8010a90 <tcp_input_delayed_close+0x1c>
 8010a82:	4b17      	ldr	r3, [pc, #92]	; (8010ae0 <tcp_input_delayed_close+0x6c>)
 8010a84:	f240 225a 	movw	r2, #602	; 0x25a
 8010a88:	4916      	ldr	r1, [pc, #88]	; (8010ae4 <tcp_input_delayed_close+0x70>)
 8010a8a:	4817      	ldr	r0, [pc, #92]	; (8010ae8 <tcp_input_delayed_close+0x74>)
 8010a8c:	f008 ffb6 	bl	80199fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010a90:	4b16      	ldr	r3, [pc, #88]	; (8010aec <tcp_input_delayed_close+0x78>)
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	f003 0310 	and.w	r3, r3, #16
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d01c      	beq.n	8010ad6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	8b5b      	ldrh	r3, [r3, #26]
 8010aa0:	f003 0310 	and.w	r3, r3, #16
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d10d      	bne.n	8010ac4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d008      	beq.n	8010ac4 <tcp_input_delayed_close+0x50>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	6912      	ldr	r2, [r2, #16]
 8010abc:	f06f 010e 	mvn.w	r1, #14
 8010ac0:	4610      	mov	r0, r2
 8010ac2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010ac4:	6879      	ldr	r1, [r7, #4]
 8010ac6:	480a      	ldr	r0, [pc, #40]	; (8010af0 <tcp_input_delayed_close+0x7c>)
 8010ac8:	f7ff fa54 	bl	800ff74 <tcp_pcb_remove>
    tcp_free(pcb);
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f7fe f84d 	bl	800eb6c <tcp_free>
    return 1;
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e000      	b.n	8010ad8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010ad6:	2300      	movs	r3, #0
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3708      	adds	r7, #8
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	0801e650 	.word	0x0801e650
 8010ae4:	0801e820 	.word	0x0801e820
 8010ae8:	0801e69c 	.word	0x0801e69c
 8010aec:	20004741 	.word	0x20004741
 8010af0:	2000b4c0 	.word	0x2000b4c0

08010af4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010af4:	b590      	push	{r4, r7, lr}
 8010af6:	b08b      	sub	sp, #44	; 0x2c
 8010af8:	af04      	add	r7, sp, #16
 8010afa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010afc:	4b6f      	ldr	r3, [pc, #444]	; (8010cbc <tcp_listen_input+0x1c8>)
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	f003 0304 	and.w	r3, r3, #4
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f040 80d3 	bne.w	8010cb0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d106      	bne.n	8010b1e <tcp_listen_input+0x2a>
 8010b10:	4b6b      	ldr	r3, [pc, #428]	; (8010cc0 <tcp_listen_input+0x1cc>)
 8010b12:	f240 2281 	movw	r2, #641	; 0x281
 8010b16:	496b      	ldr	r1, [pc, #428]	; (8010cc4 <tcp_listen_input+0x1d0>)
 8010b18:	486b      	ldr	r0, [pc, #428]	; (8010cc8 <tcp_listen_input+0x1d4>)
 8010b1a:	f008 ff6f 	bl	80199fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010b1e:	4b67      	ldr	r3, [pc, #412]	; (8010cbc <tcp_listen_input+0x1c8>)
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	f003 0310 	and.w	r3, r3, #16
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d019      	beq.n	8010b5e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b2a:	4b68      	ldr	r3, [pc, #416]	; (8010ccc <tcp_listen_input+0x1d8>)
 8010b2c:	6819      	ldr	r1, [r3, #0]
 8010b2e:	4b68      	ldr	r3, [pc, #416]	; (8010cd0 <tcp_listen_input+0x1dc>)
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	461a      	mov	r2, r3
 8010b34:	4b67      	ldr	r3, [pc, #412]	; (8010cd4 <tcp_listen_input+0x1e0>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b3a:	4b67      	ldr	r3, [pc, #412]	; (8010cd8 <tcp_listen_input+0x1e4>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b3e:	885b      	ldrh	r3, [r3, #2]
 8010b40:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b42:	4a65      	ldr	r2, [pc, #404]	; (8010cd8 <tcp_listen_input+0x1e4>)
 8010b44:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b46:	8812      	ldrh	r2, [r2, #0]
 8010b48:	b292      	uxth	r2, r2
 8010b4a:	9202      	str	r2, [sp, #8]
 8010b4c:	9301      	str	r3, [sp, #4]
 8010b4e:	4b63      	ldr	r3, [pc, #396]	; (8010cdc <tcp_listen_input+0x1e8>)
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	4b63      	ldr	r3, [pc, #396]	; (8010ce0 <tcp_listen_input+0x1ec>)
 8010b54:	4602      	mov	r2, r0
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f002 ff8e 	bl	8013a78 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010b5c:	e0aa      	b.n	8010cb4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8010b5e:	4b57      	ldr	r3, [pc, #348]	; (8010cbc <tcp_listen_input+0x1c8>)
 8010b60:	781b      	ldrb	r3, [r3, #0]
 8010b62:	f003 0302 	and.w	r3, r3, #2
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	f000 80a4 	beq.w	8010cb4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	7d5b      	ldrb	r3, [r3, #21]
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7ff f92b 	bl	800fdcc <tcp_alloc>
 8010b76:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d111      	bne.n	8010ba2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	699b      	ldr	r3, [r3, #24]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d00a      	beq.n	8010b9c <tcp_listen_input+0xa8>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	699b      	ldr	r3, [r3, #24]
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	6910      	ldr	r0, [r2, #16]
 8010b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b92:	2100      	movs	r1, #0
 8010b94:	4798      	blx	r3
 8010b96:	4603      	mov	r3, r0
 8010b98:	73bb      	strb	r3, [r7, #14]
      return;
 8010b9a:	e08c      	b.n	8010cb6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010b9c:	23f0      	movs	r3, #240	; 0xf0
 8010b9e:	73bb      	strb	r3, [r7, #14]
      return;
 8010ba0:	e089      	b.n	8010cb6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010ba2:	4b50      	ldr	r3, [pc, #320]	; (8010ce4 <tcp_listen_input+0x1f0>)
 8010ba4:	695a      	ldr	r2, [r3, #20]
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010baa:	4b4e      	ldr	r3, [pc, #312]	; (8010ce4 <tcp_listen_input+0x1f0>)
 8010bac:	691a      	ldr	r2, [r3, #16]
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	8ada      	ldrh	r2, [r3, #22]
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010bba:	4b47      	ldr	r3, [pc, #284]	; (8010cd8 <tcp_listen_input+0x1e4>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	881b      	ldrh	r3, [r3, #0]
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	2203      	movs	r2, #3
 8010bca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010bcc:	4b41      	ldr	r3, [pc, #260]	; (8010cd4 <tcp_listen_input+0x1e0>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	1c5a      	adds	r2, r3, #1
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010bde:	6978      	ldr	r0, [r7, #20]
 8010be0:	f7ff fa5c 	bl	801009c <tcp_next_iss>
 8010be4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	693a      	ldr	r2, [r7, #16]
 8010bea:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	693a      	ldr	r2, [r7, #16]
 8010bf0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	693a      	ldr	r2, [r7, #16]
 8010bf6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	693a      	ldr	r2, [r7, #16]
 8010bfc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010bfe:	4b35      	ldr	r3, [pc, #212]	; (8010cd4 <tcp_listen_input+0x1e0>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	1e5a      	subs	r2, r3, #1
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	691a      	ldr	r2, [r3, #16]
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	7a5b      	ldrb	r3, [r3, #9]
 8010c1a:	f003 030c 	and.w	r3, r3, #12
 8010c1e:	b2da      	uxtb	r2, r3
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	7a1a      	ldrb	r2, [r3, #8]
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010c2c:	4b2e      	ldr	r3, [pc, #184]	; (8010ce8 <tcp_listen_input+0x1f4>)
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	60da      	str	r2, [r3, #12]
 8010c34:	4a2c      	ldr	r2, [pc, #176]	; (8010ce8 <tcp_listen_input+0x1f4>)
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	6013      	str	r3, [r2, #0]
 8010c3a:	f003 f8df 	bl	8013dfc <tcp_timer_needed>
 8010c3e:	4b2b      	ldr	r3, [pc, #172]	; (8010cec <tcp_listen_input+0x1f8>)
 8010c40:	2201      	movs	r2, #1
 8010c42:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010c44:	6978      	ldr	r0, [r7, #20]
 8010c46:	f001 fd8f 	bl	8012768 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010c4a:	4b23      	ldr	r3, [pc, #140]	; (8010cd8 <tcp_listen_input+0x1e4>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	89db      	ldrh	r3, [r3, #14]
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	3304      	adds	r3, #4
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f006 fe2b 	bl	80178c8 <ip4_route>
 8010c72:	4601      	mov	r1, r0
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	3304      	adds	r3, #4
 8010c78:	461a      	mov	r2, r3
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	f7ff fa34 	bl	80100e8 <tcp_eff_send_mss_netif>
 8010c80:	4603      	mov	r3, r0
 8010c82:	461a      	mov	r2, r3
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010c88:	2112      	movs	r1, #18
 8010c8a:	6978      	ldr	r0, [r7, #20]
 8010c8c:	f002 f842 	bl	8012d14 <tcp_enqueue_flags>
 8010c90:	4603      	mov	r3, r0
 8010c92:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d004      	beq.n	8010ca6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	6978      	ldr	r0, [r7, #20]
 8010ca0:	f7fe f986 	bl	800efb0 <tcp_abandon>
      return;
 8010ca4:	e007      	b.n	8010cb6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8010ca6:	6978      	ldr	r0, [r7, #20]
 8010ca8:	f002 f922 	bl	8012ef0 <tcp_output>
  return;
 8010cac:	bf00      	nop
 8010cae:	e001      	b.n	8010cb4 <tcp_listen_input+0x1c0>
    return;
 8010cb0:	bf00      	nop
 8010cb2:	e000      	b.n	8010cb6 <tcp_listen_input+0x1c2>
  return;
 8010cb4:	bf00      	nop
}
 8010cb6:	371c      	adds	r7, #28
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd90      	pop	{r4, r7, pc}
 8010cbc:	20004740 	.word	0x20004740
 8010cc0:	0801e650 	.word	0x0801e650
 8010cc4:	0801e848 	.word	0x0801e848
 8010cc8:	0801e69c 	.word	0x0801e69c
 8010ccc:	20004738 	.word	0x20004738
 8010cd0:	2000473e 	.word	0x2000473e
 8010cd4:	20004734 	.word	0x20004734
 8010cd8:	20004724 	.word	0x20004724
 8010cdc:	20007d9c 	.word	0x20007d9c
 8010ce0:	20007da0 	.word	0x20007da0
 8010ce4:	20007d8c 	.word	0x20007d8c
 8010ce8:	2000b4c0 	.word	0x2000b4c0
 8010cec:	2000b4bc 	.word	0x2000b4bc

08010cf0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b086      	sub	sp, #24
 8010cf4:	af04      	add	r7, sp, #16
 8010cf6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010cf8:	4b30      	ldr	r3, [pc, #192]	; (8010dbc <tcp_timewait_input+0xcc>)
 8010cfa:	781b      	ldrb	r3, [r3, #0]
 8010cfc:	f003 0304 	and.w	r3, r3, #4
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d154      	bne.n	8010dae <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d106      	bne.n	8010d18 <tcp_timewait_input+0x28>
 8010d0a:	4b2d      	ldr	r3, [pc, #180]	; (8010dc0 <tcp_timewait_input+0xd0>)
 8010d0c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010d10:	492c      	ldr	r1, [pc, #176]	; (8010dc4 <tcp_timewait_input+0xd4>)
 8010d12:	482d      	ldr	r0, [pc, #180]	; (8010dc8 <tcp_timewait_input+0xd8>)
 8010d14:	f008 fe72 	bl	80199fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010d18:	4b28      	ldr	r3, [pc, #160]	; (8010dbc <tcp_timewait_input+0xcc>)
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	f003 0302 	and.w	r3, r3, #2
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d02a      	beq.n	8010d7a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010d24:	4b29      	ldr	r3, [pc, #164]	; (8010dcc <tcp_timewait_input+0xdc>)
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d2c:	1ad3      	subs	r3, r2, r3
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	db2d      	blt.n	8010d8e <tcp_timewait_input+0x9e>
 8010d32:	4b26      	ldr	r3, [pc, #152]	; (8010dcc <tcp_timewait_input+0xdc>)
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d3a:	6879      	ldr	r1, [r7, #4]
 8010d3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010d3e:	440b      	add	r3, r1
 8010d40:	1ad3      	subs	r3, r2, r3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	dc23      	bgt.n	8010d8e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d46:	4b22      	ldr	r3, [pc, #136]	; (8010dd0 <tcp_timewait_input+0xe0>)
 8010d48:	6819      	ldr	r1, [r3, #0]
 8010d4a:	4b22      	ldr	r3, [pc, #136]	; (8010dd4 <tcp_timewait_input+0xe4>)
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	4b1e      	ldr	r3, [pc, #120]	; (8010dcc <tcp_timewait_input+0xdc>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d56:	4b20      	ldr	r3, [pc, #128]	; (8010dd8 <tcp_timewait_input+0xe8>)
 8010d58:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d5a:	885b      	ldrh	r3, [r3, #2]
 8010d5c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d5e:	4a1e      	ldr	r2, [pc, #120]	; (8010dd8 <tcp_timewait_input+0xe8>)
 8010d60:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d62:	8812      	ldrh	r2, [r2, #0]
 8010d64:	b292      	uxth	r2, r2
 8010d66:	9202      	str	r2, [sp, #8]
 8010d68:	9301      	str	r3, [sp, #4]
 8010d6a:	4b1c      	ldr	r3, [pc, #112]	; (8010ddc <tcp_timewait_input+0xec>)
 8010d6c:	9300      	str	r3, [sp, #0]
 8010d6e:	4b1c      	ldr	r3, [pc, #112]	; (8010de0 <tcp_timewait_input+0xf0>)
 8010d70:	4602      	mov	r2, r0
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f002 fe80 	bl	8013a78 <tcp_rst>
      return;
 8010d78:	e01c      	b.n	8010db4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8010d7a:	4b10      	ldr	r3, [pc, #64]	; (8010dbc <tcp_timewait_input+0xcc>)
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	f003 0301 	and.w	r3, r3, #1
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d003      	beq.n	8010d8e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010d86:	4b17      	ldr	r3, [pc, #92]	; (8010de4 <tcp_timewait_input+0xf4>)
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010d8e:	4b11      	ldr	r3, [pc, #68]	; (8010dd4 <tcp_timewait_input+0xe4>)
 8010d90:	881b      	ldrh	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d00d      	beq.n	8010db2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	8b5b      	ldrh	r3, [r3, #26]
 8010d9a:	f043 0302 	orr.w	r3, r3, #2
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f002 f8a3 	bl	8012ef0 <tcp_output>
  }
  return;
 8010daa:	bf00      	nop
 8010dac:	e001      	b.n	8010db2 <tcp_timewait_input+0xc2>
    return;
 8010dae:	bf00      	nop
 8010db0:	e000      	b.n	8010db4 <tcp_timewait_input+0xc4>
  return;
 8010db2:	bf00      	nop
}
 8010db4:	3708      	adds	r7, #8
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	20004740 	.word	0x20004740
 8010dc0:	0801e650 	.word	0x0801e650
 8010dc4:	0801e868 	.word	0x0801e868
 8010dc8:	0801e69c 	.word	0x0801e69c
 8010dcc:	20004734 	.word	0x20004734
 8010dd0:	20004738 	.word	0x20004738
 8010dd4:	2000473e 	.word	0x2000473e
 8010dd8:	20004724 	.word	0x20004724
 8010ddc:	20007d9c 	.word	0x20007d9c
 8010de0:	20007da0 	.word	0x20007da0
 8010de4:	2000b4c4 	.word	0x2000b4c4

08010de8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010de8:	b590      	push	{r4, r7, lr}
 8010dea:	b08d      	sub	sp, #52	; 0x34
 8010dec:	af04      	add	r7, sp, #16
 8010dee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010df0:	2300      	movs	r3, #0
 8010df2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010df4:	2300      	movs	r3, #0
 8010df6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d106      	bne.n	8010e0c <tcp_process+0x24>
 8010dfe:	4ba5      	ldr	r3, [pc, #660]	; (8011094 <tcp_process+0x2ac>)
 8010e00:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010e04:	49a4      	ldr	r1, [pc, #656]	; (8011098 <tcp_process+0x2b0>)
 8010e06:	48a5      	ldr	r0, [pc, #660]	; (801109c <tcp_process+0x2b4>)
 8010e08:	f008 fdf8 	bl	80199fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010e0c:	4ba4      	ldr	r3, [pc, #656]	; (80110a0 <tcp_process+0x2b8>)
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	f003 0304 	and.w	r3, r3, #4
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d04e      	beq.n	8010eb6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	7d1b      	ldrb	r3, [r3, #20]
 8010e1c:	2b02      	cmp	r3, #2
 8010e1e:	d108      	bne.n	8010e32 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e24:	4b9f      	ldr	r3, [pc, #636]	; (80110a4 <tcp_process+0x2bc>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d123      	bne.n	8010e74 <tcp_process+0x8c>
        acceptable = 1;
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	76fb      	strb	r3, [r7, #27]
 8010e30:	e020      	b.n	8010e74 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e36:	4b9c      	ldr	r3, [pc, #624]	; (80110a8 <tcp_process+0x2c0>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d102      	bne.n	8010e44 <tcp_process+0x5c>
        acceptable = 1;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	76fb      	strb	r3, [r7, #27]
 8010e42:	e017      	b.n	8010e74 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010e44:	4b98      	ldr	r3, [pc, #608]	; (80110a8 <tcp_process+0x2c0>)
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e4c:	1ad3      	subs	r3, r2, r3
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	db10      	blt.n	8010e74 <tcp_process+0x8c>
 8010e52:	4b95      	ldr	r3, [pc, #596]	; (80110a8 <tcp_process+0x2c0>)
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e5a:	6879      	ldr	r1, [r7, #4]
 8010e5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e5e:	440b      	add	r3, r1
 8010e60:	1ad3      	subs	r3, r2, r3
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	dc06      	bgt.n	8010e74 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	8b5b      	ldrh	r3, [r3, #26]
 8010e6a:	f043 0302 	orr.w	r3, r3, #2
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010e74:	7efb      	ldrb	r3, [r7, #27]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d01b      	beq.n	8010eb2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	7d1b      	ldrb	r3, [r3, #20]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d106      	bne.n	8010e90 <tcp_process+0xa8>
 8010e82:	4b84      	ldr	r3, [pc, #528]	; (8011094 <tcp_process+0x2ac>)
 8010e84:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010e88:	4988      	ldr	r1, [pc, #544]	; (80110ac <tcp_process+0x2c4>)
 8010e8a:	4884      	ldr	r0, [pc, #528]	; (801109c <tcp_process+0x2b4>)
 8010e8c:	f008 fdb6 	bl	80199fc <iprintf>
      recv_flags |= TF_RESET;
 8010e90:	4b87      	ldr	r3, [pc, #540]	; (80110b0 <tcp_process+0x2c8>)
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	f043 0308 	orr.w	r3, r3, #8
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	4b85      	ldr	r3, [pc, #532]	; (80110b0 <tcp_process+0x2c8>)
 8010e9c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	8b5b      	ldrh	r3, [r3, #26]
 8010ea2:	f023 0301 	bic.w	r3, r3, #1
 8010ea6:	b29a      	uxth	r2, r3
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010eac:	f06f 030d 	mvn.w	r3, #13
 8010eb0:	e37a      	b.n	80115a8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	e378      	b.n	80115a8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010eb6:	4b7a      	ldr	r3, [pc, #488]	; (80110a0 <tcp_process+0x2b8>)
 8010eb8:	781b      	ldrb	r3, [r3, #0]
 8010eba:	f003 0302 	and.w	r3, r3, #2
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d010      	beq.n	8010ee4 <tcp_process+0xfc>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	7d1b      	ldrb	r3, [r3, #20]
 8010ec6:	2b02      	cmp	r3, #2
 8010ec8:	d00c      	beq.n	8010ee4 <tcp_process+0xfc>
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	7d1b      	ldrb	r3, [r3, #20]
 8010ece:	2b03      	cmp	r3, #3
 8010ed0:	d008      	beq.n	8010ee4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	8b5b      	ldrh	r3, [r3, #26]
 8010ed6:	f043 0302 	orr.w	r3, r3, #2
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	e361      	b.n	80115a8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	8b5b      	ldrh	r3, [r3, #26]
 8010ee8:	f003 0310 	and.w	r3, r3, #16
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d103      	bne.n	8010ef8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010ef0:	4b70      	ldr	r3, [pc, #448]	; (80110b4 <tcp_process+0x2cc>)
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2200      	movs	r2, #0
 8010efc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2200      	movs	r2, #0
 8010f04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f001 fc2d 	bl	8012768 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	7d1b      	ldrb	r3, [r3, #20]
 8010f12:	3b02      	subs	r3, #2
 8010f14:	2b07      	cmp	r3, #7
 8010f16:	f200 8337 	bhi.w	8011588 <tcp_process+0x7a0>
 8010f1a:	a201      	add	r2, pc, #4	; (adr r2, 8010f20 <tcp_process+0x138>)
 8010f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f20:	08010f41 	.word	0x08010f41
 8010f24:	08011171 	.word	0x08011171
 8010f28:	080112e9 	.word	0x080112e9
 8010f2c:	08011313 	.word	0x08011313
 8010f30:	08011437 	.word	0x08011437
 8010f34:	080112e9 	.word	0x080112e9
 8010f38:	080114c3 	.word	0x080114c3
 8010f3c:	08011553 	.word	0x08011553
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010f40:	4b57      	ldr	r3, [pc, #348]	; (80110a0 <tcp_process+0x2b8>)
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	f003 0310 	and.w	r3, r3, #16
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	f000 80e4 	beq.w	8011116 <tcp_process+0x32e>
 8010f4e:	4b54      	ldr	r3, [pc, #336]	; (80110a0 <tcp_process+0x2b8>)
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	f003 0302 	and.w	r3, r3, #2
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f000 80dd 	beq.w	8011116 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f60:	1c5a      	adds	r2, r3, #1
 8010f62:	4b50      	ldr	r3, [pc, #320]	; (80110a4 <tcp_process+0x2bc>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	f040 80d5 	bne.w	8011116 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010f6c:	4b4e      	ldr	r3, [pc, #312]	; (80110a8 <tcp_process+0x2c0>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	1c5a      	adds	r2, r3, #1
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010f7e:	4b49      	ldr	r3, [pc, #292]	; (80110a4 <tcp_process+0x2bc>)
 8010f80:	681a      	ldr	r2, [r3, #0]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010f86:	4b4c      	ldr	r3, [pc, #304]	; (80110b8 <tcp_process+0x2d0>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	89db      	ldrh	r3, [r3, #14]
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010fa0:	4b41      	ldr	r3, [pc, #260]	; (80110a8 <tcp_process+0x2c0>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	1e5a      	subs	r2, r3, #1
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2204      	movs	r2, #4
 8010fae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	3304      	adds	r3, #4
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f006 fc85 	bl	80178c8 <ip4_route>
 8010fbe:	4601      	mov	r1, r0
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	3304      	adds	r3, #4
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f7ff f88e 	bl	80100e8 <tcp_eff_send_mss_netif>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	461a      	mov	r2, r3
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fd8:	009a      	lsls	r2, r3, #2
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fde:	005b      	lsls	r3, r3, #1
 8010fe0:	f241 111c 	movw	r1, #4380	; 0x111c
 8010fe4:	428b      	cmp	r3, r1
 8010fe6:	bf38      	it	cc
 8010fe8:	460b      	movcc	r3, r1
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d204      	bcs.n	8010ff8 <tcp_process+0x210>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	e00d      	b.n	8011014 <tcp_process+0x22c>
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ffc:	005b      	lsls	r3, r3, #1
 8010ffe:	f241 121c 	movw	r2, #4380	; 0x111c
 8011002:	4293      	cmp	r3, r2
 8011004:	d904      	bls.n	8011010 <tcp_process+0x228>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801100a:	005b      	lsls	r3, r3, #1
 801100c:	b29b      	uxth	r3, r3
 801100e:	e001      	b.n	8011014 <tcp_process+0x22c>
 8011010:	f241 131c 	movw	r3, #4380	; 0x111c
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011020:	2b00      	cmp	r3, #0
 8011022:	d106      	bne.n	8011032 <tcp_process+0x24a>
 8011024:	4b1b      	ldr	r3, [pc, #108]	; (8011094 <tcp_process+0x2ac>)
 8011026:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801102a:	4924      	ldr	r1, [pc, #144]	; (80110bc <tcp_process+0x2d4>)
 801102c:	481b      	ldr	r0, [pc, #108]	; (801109c <tcp_process+0x2b4>)
 801102e:	f008 fce5 	bl	80199fc <iprintf>
        --pcb->snd_queuelen;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011038:	3b01      	subs	r3, #1
 801103a:	b29a      	uxth	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011046:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011048:	69fb      	ldr	r3, [r7, #28]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d111      	bne.n	8011072 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011052:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d106      	bne.n	8011068 <tcp_process+0x280>
 801105a:	4b0e      	ldr	r3, [pc, #56]	; (8011094 <tcp_process+0x2ac>)
 801105c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011060:	4917      	ldr	r1, [pc, #92]	; (80110c0 <tcp_process+0x2d8>)
 8011062:	480e      	ldr	r0, [pc, #56]	; (801109c <tcp_process+0x2b4>)
 8011064:	f008 fcca 	bl	80199fc <iprintf>
          pcb->unsent = rseg->next;
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	66da      	str	r2, [r3, #108]	; 0x6c
 8011070:	e003      	b.n	801107a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	681a      	ldr	r2, [r3, #0]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801107a:	69f8      	ldr	r0, [r7, #28]
 801107c:	f7fe fd3e 	bl	800fafc <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011084:	2b00      	cmp	r3, #0
 8011086:	d11d      	bne.n	80110c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801108e:	861a      	strh	r2, [r3, #48]	; 0x30
 8011090:	e01f      	b.n	80110d2 <tcp_process+0x2ea>
 8011092:	bf00      	nop
 8011094:	0801e650 	.word	0x0801e650
 8011098:	0801e888 	.word	0x0801e888
 801109c:	0801e69c 	.word	0x0801e69c
 80110a0:	20004740 	.word	0x20004740
 80110a4:	20004738 	.word	0x20004738
 80110a8:	20004734 	.word	0x20004734
 80110ac:	0801e8a4 	.word	0x0801e8a4
 80110b0:	20004741 	.word	0x20004741
 80110b4:	2000b4c4 	.word	0x2000b4c4
 80110b8:	20004724 	.word	0x20004724
 80110bc:	0801e8c4 	.word	0x0801e8c4
 80110c0:	0801e8dc 	.word	0x0801e8dc
        } else {
          pcb->rtime = 0;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2200      	movs	r2, #0
 80110c8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d00a      	beq.n	80110f2 <tcp_process+0x30a>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	6910      	ldr	r0, [r2, #16]
 80110e6:	2200      	movs	r2, #0
 80110e8:	6879      	ldr	r1, [r7, #4]
 80110ea:	4798      	blx	r3
 80110ec:	4603      	mov	r3, r0
 80110ee:	76bb      	strb	r3, [r7, #26]
 80110f0:	e001      	b.n	80110f6 <tcp_process+0x30e>
 80110f2:	2300      	movs	r3, #0
 80110f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80110f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80110fa:	f113 0f0d 	cmn.w	r3, #13
 80110fe:	d102      	bne.n	8011106 <tcp_process+0x31e>
          return ERR_ABRT;
 8011100:	f06f 030c 	mvn.w	r3, #12
 8011104:	e250      	b.n	80115a8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	8b5b      	ldrh	r3, [r3, #26]
 801110a:	f043 0302 	orr.w	r3, r3, #2
 801110e:	b29a      	uxth	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011114:	e23a      	b.n	801158c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011116:	4b9d      	ldr	r3, [pc, #628]	; (801138c <tcp_process+0x5a4>)
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	f003 0310 	and.w	r3, r3, #16
 801111e:	2b00      	cmp	r3, #0
 8011120:	f000 8234 	beq.w	801158c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011124:	4b9a      	ldr	r3, [pc, #616]	; (8011390 <tcp_process+0x5a8>)
 8011126:	6819      	ldr	r1, [r3, #0]
 8011128:	4b9a      	ldr	r3, [pc, #616]	; (8011394 <tcp_process+0x5ac>)
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	461a      	mov	r2, r3
 801112e:	4b9a      	ldr	r3, [pc, #616]	; (8011398 <tcp_process+0x5b0>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011134:	4b99      	ldr	r3, [pc, #612]	; (801139c <tcp_process+0x5b4>)
 8011136:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011138:	885b      	ldrh	r3, [r3, #2]
 801113a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801113c:	4a97      	ldr	r2, [pc, #604]	; (801139c <tcp_process+0x5b4>)
 801113e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011140:	8812      	ldrh	r2, [r2, #0]
 8011142:	b292      	uxth	r2, r2
 8011144:	9202      	str	r2, [sp, #8]
 8011146:	9301      	str	r3, [sp, #4]
 8011148:	4b95      	ldr	r3, [pc, #596]	; (80113a0 <tcp_process+0x5b8>)
 801114a:	9300      	str	r3, [sp, #0]
 801114c:	4b95      	ldr	r3, [pc, #596]	; (80113a4 <tcp_process+0x5bc>)
 801114e:	4602      	mov	r2, r0
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f002 fc91 	bl	8013a78 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801115c:	2b05      	cmp	r3, #5
 801115e:	f200 8215 	bhi.w	801158c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f002 fa51 	bl	8013610 <tcp_rexmit_rto>
      break;
 801116e:	e20d      	b.n	801158c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011170:	4b86      	ldr	r3, [pc, #536]	; (801138c <tcp_process+0x5a4>)
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	f003 0310 	and.w	r3, r3, #16
 8011178:	2b00      	cmp	r3, #0
 801117a:	f000 80a1 	beq.w	80112c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801117e:	4b84      	ldr	r3, [pc, #528]	; (8011390 <tcp_process+0x5a8>)
 8011180:	681a      	ldr	r2, [r3, #0]
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011186:	1ad3      	subs	r3, r2, r3
 8011188:	3b01      	subs	r3, #1
 801118a:	2b00      	cmp	r3, #0
 801118c:	db7e      	blt.n	801128c <tcp_process+0x4a4>
 801118e:	4b80      	ldr	r3, [pc, #512]	; (8011390 <tcp_process+0x5a8>)
 8011190:	681a      	ldr	r2, [r3, #0]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011196:	1ad3      	subs	r3, r2, r3
 8011198:	2b00      	cmp	r3, #0
 801119a:	dc77      	bgt.n	801128c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2204      	movs	r2, #4
 80111a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d102      	bne.n	80111b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80111aa:	23fa      	movs	r3, #250	; 0xfa
 80111ac:	76bb      	strb	r3, [r7, #26]
 80111ae:	e01d      	b.n	80111ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111b4:	699b      	ldr	r3, [r3, #24]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d106      	bne.n	80111c8 <tcp_process+0x3e0>
 80111ba:	4b7b      	ldr	r3, [pc, #492]	; (80113a8 <tcp_process+0x5c0>)
 80111bc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80111c0:	497a      	ldr	r1, [pc, #488]	; (80113ac <tcp_process+0x5c4>)
 80111c2:	487b      	ldr	r0, [pc, #492]	; (80113b0 <tcp_process+0x5c8>)
 80111c4:	f008 fc1a 	bl	80199fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111cc:	699b      	ldr	r3, [r3, #24]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d00a      	beq.n	80111e8 <tcp_process+0x400>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111d6:	699b      	ldr	r3, [r3, #24]
 80111d8:	687a      	ldr	r2, [r7, #4]
 80111da:	6910      	ldr	r0, [r2, #16]
 80111dc:	2200      	movs	r2, #0
 80111de:	6879      	ldr	r1, [r7, #4]
 80111e0:	4798      	blx	r3
 80111e2:	4603      	mov	r3, r0
 80111e4:	76bb      	strb	r3, [r7, #26]
 80111e6:	e001      	b.n	80111ec <tcp_process+0x404>
 80111e8:	23f0      	movs	r3, #240	; 0xf0
 80111ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80111ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d00a      	beq.n	801120a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80111f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80111f8:	f113 0f0d 	cmn.w	r3, #13
 80111fc:	d002      	beq.n	8011204 <tcp_process+0x41c>
              tcp_abort(pcb);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f7fd ff94 	bl	800f12c <tcp_abort>
            }
            return ERR_ABRT;
 8011204:	f06f 030c 	mvn.w	r3, #12
 8011208:	e1ce      	b.n	80115a8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 fae0 	bl	80117d0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011210:	4b68      	ldr	r3, [pc, #416]	; (80113b4 <tcp_process+0x5cc>)
 8011212:	881b      	ldrh	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d005      	beq.n	8011224 <tcp_process+0x43c>
            recv_acked--;
 8011218:	4b66      	ldr	r3, [pc, #408]	; (80113b4 <tcp_process+0x5cc>)
 801121a:	881b      	ldrh	r3, [r3, #0]
 801121c:	3b01      	subs	r3, #1
 801121e:	b29a      	uxth	r2, r3
 8011220:	4b64      	ldr	r3, [pc, #400]	; (80113b4 <tcp_process+0x5cc>)
 8011222:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011228:	009a      	lsls	r2, r3, #2
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801122e:	005b      	lsls	r3, r3, #1
 8011230:	f241 111c 	movw	r1, #4380	; 0x111c
 8011234:	428b      	cmp	r3, r1
 8011236:	bf38      	it	cc
 8011238:	460b      	movcc	r3, r1
 801123a:	429a      	cmp	r2, r3
 801123c:	d204      	bcs.n	8011248 <tcp_process+0x460>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011242:	009b      	lsls	r3, r3, #2
 8011244:	b29b      	uxth	r3, r3
 8011246:	e00d      	b.n	8011264 <tcp_process+0x47c>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801124c:	005b      	lsls	r3, r3, #1
 801124e:	f241 121c 	movw	r2, #4380	; 0x111c
 8011252:	4293      	cmp	r3, r2
 8011254:	d904      	bls.n	8011260 <tcp_process+0x478>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801125a:	005b      	lsls	r3, r3, #1
 801125c:	b29b      	uxth	r3, r3
 801125e:	e001      	b.n	8011264 <tcp_process+0x47c>
 8011260:	f241 131c 	movw	r3, #4380	; 0x111c
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801126a:	4b53      	ldr	r3, [pc, #332]	; (80113b8 <tcp_process+0x5d0>)
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	f003 0320 	and.w	r3, r3, #32
 8011272:	2b00      	cmp	r3, #0
 8011274:	d037      	beq.n	80112e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	8b5b      	ldrh	r3, [r3, #26]
 801127a:	f043 0302 	orr.w	r3, r3, #2
 801127e:	b29a      	uxth	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2207      	movs	r2, #7
 8011288:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801128a:	e02c      	b.n	80112e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801128c:	4b40      	ldr	r3, [pc, #256]	; (8011390 <tcp_process+0x5a8>)
 801128e:	6819      	ldr	r1, [r3, #0]
 8011290:	4b40      	ldr	r3, [pc, #256]	; (8011394 <tcp_process+0x5ac>)
 8011292:	881b      	ldrh	r3, [r3, #0]
 8011294:	461a      	mov	r2, r3
 8011296:	4b40      	ldr	r3, [pc, #256]	; (8011398 <tcp_process+0x5b0>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801129c:	4b3f      	ldr	r3, [pc, #252]	; (801139c <tcp_process+0x5b4>)
 801129e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112a0:	885b      	ldrh	r3, [r3, #2]
 80112a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112a4:	4a3d      	ldr	r2, [pc, #244]	; (801139c <tcp_process+0x5b4>)
 80112a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112a8:	8812      	ldrh	r2, [r2, #0]
 80112aa:	b292      	uxth	r2, r2
 80112ac:	9202      	str	r2, [sp, #8]
 80112ae:	9301      	str	r3, [sp, #4]
 80112b0:	4b3b      	ldr	r3, [pc, #236]	; (80113a0 <tcp_process+0x5b8>)
 80112b2:	9300      	str	r3, [sp, #0]
 80112b4:	4b3b      	ldr	r3, [pc, #236]	; (80113a4 <tcp_process+0x5bc>)
 80112b6:	4602      	mov	r2, r0
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f002 fbdd 	bl	8013a78 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80112be:	e167      	b.n	8011590 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80112c0:	4b32      	ldr	r3, [pc, #200]	; (801138c <tcp_process+0x5a4>)
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	f003 0302 	and.w	r3, r3, #2
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f000 8161 	beq.w	8011590 <tcp_process+0x7a8>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112d2:	1e5a      	subs	r2, r3, #1
 80112d4:	4b30      	ldr	r3, [pc, #192]	; (8011398 <tcp_process+0x5b0>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	429a      	cmp	r2, r3
 80112da:	f040 8159 	bne.w	8011590 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f002 f9b8 	bl	8013654 <tcp_rexmit>
      break;
 80112e4:	e154      	b.n	8011590 <tcp_process+0x7a8>
 80112e6:	e153      	b.n	8011590 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f000 fa71 	bl	80117d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80112ee:	4b32      	ldr	r3, [pc, #200]	; (80113b8 <tcp_process+0x5d0>)
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	f003 0320 	and.w	r3, r3, #32
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	f000 814c 	beq.w	8011594 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	8b5b      	ldrh	r3, [r3, #26]
 8011300:	f043 0302 	orr.w	r3, r3, #2
 8011304:	b29a      	uxth	r2, r3
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2207      	movs	r2, #7
 801130e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011310:	e140      	b.n	8011594 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f000 fa5c 	bl	80117d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011318:	4b27      	ldr	r3, [pc, #156]	; (80113b8 <tcp_process+0x5d0>)
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	f003 0320 	and.w	r3, r3, #32
 8011320:	2b00      	cmp	r3, #0
 8011322:	d071      	beq.n	8011408 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011324:	4b19      	ldr	r3, [pc, #100]	; (801138c <tcp_process+0x5a4>)
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	f003 0310 	and.w	r3, r3, #16
 801132c:	2b00      	cmp	r3, #0
 801132e:	d060      	beq.n	80113f2 <tcp_process+0x60a>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011334:	4b16      	ldr	r3, [pc, #88]	; (8011390 <tcp_process+0x5a8>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	429a      	cmp	r2, r3
 801133a:	d15a      	bne.n	80113f2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011340:	2b00      	cmp	r3, #0
 8011342:	d156      	bne.n	80113f2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	8b5b      	ldrh	r3, [r3, #26]
 8011348:	f043 0302 	orr.w	r3, r3, #2
 801134c:	b29a      	uxth	r2, r3
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f7fe fdbe 	bl	800fed4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011358:	4b18      	ldr	r3, [pc, #96]	; (80113bc <tcp_process+0x5d4>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	429a      	cmp	r2, r3
 8011360:	d105      	bne.n	801136e <tcp_process+0x586>
 8011362:	4b16      	ldr	r3, [pc, #88]	; (80113bc <tcp_process+0x5d4>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	68db      	ldr	r3, [r3, #12]
 8011368:	4a14      	ldr	r2, [pc, #80]	; (80113bc <tcp_process+0x5d4>)
 801136a:	6013      	str	r3, [r2, #0]
 801136c:	e02e      	b.n	80113cc <tcp_process+0x5e4>
 801136e:	4b13      	ldr	r3, [pc, #76]	; (80113bc <tcp_process+0x5d4>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	617b      	str	r3, [r7, #20]
 8011374:	e027      	b.n	80113c6 <tcp_process+0x5de>
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	429a      	cmp	r2, r3
 801137e:	d11f      	bne.n	80113c0 <tcp_process+0x5d8>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	68da      	ldr	r2, [r3, #12]
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	60da      	str	r2, [r3, #12]
 8011388:	e020      	b.n	80113cc <tcp_process+0x5e4>
 801138a:	bf00      	nop
 801138c:	20004740 	.word	0x20004740
 8011390:	20004738 	.word	0x20004738
 8011394:	2000473e 	.word	0x2000473e
 8011398:	20004734 	.word	0x20004734
 801139c:	20004724 	.word	0x20004724
 80113a0:	20007d9c 	.word	0x20007d9c
 80113a4:	20007da0 	.word	0x20007da0
 80113a8:	0801e650 	.word	0x0801e650
 80113ac:	0801e8f0 	.word	0x0801e8f0
 80113b0:	0801e69c 	.word	0x0801e69c
 80113b4:	2000473c 	.word	0x2000473c
 80113b8:	20004741 	.word	0x20004741
 80113bc:	2000b4c0 	.word	0x2000b4c0
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	617b      	str	r3, [r7, #20]
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1d4      	bne.n	8011376 <tcp_process+0x58e>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2200      	movs	r2, #0
 80113d0:	60da      	str	r2, [r3, #12]
 80113d2:	4b77      	ldr	r3, [pc, #476]	; (80115b0 <tcp_process+0x7c8>)
 80113d4:	2201      	movs	r2, #1
 80113d6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	220a      	movs	r2, #10
 80113dc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80113de:	4b75      	ldr	r3, [pc, #468]	; (80115b4 <tcp_process+0x7cc>)
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	60da      	str	r2, [r3, #12]
 80113e6:	4a73      	ldr	r2, [pc, #460]	; (80115b4 <tcp_process+0x7cc>)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6013      	str	r3, [r2, #0]
 80113ec:	f002 fd06 	bl	8013dfc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80113f0:	e0d2      	b.n	8011598 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	8b5b      	ldrh	r3, [r3, #26]
 80113f6:	f043 0302 	orr.w	r3, r3, #2
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2208      	movs	r2, #8
 8011404:	751a      	strb	r2, [r3, #20]
      break;
 8011406:	e0c7      	b.n	8011598 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011408:	4b6b      	ldr	r3, [pc, #428]	; (80115b8 <tcp_process+0x7d0>)
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	f003 0310 	and.w	r3, r3, #16
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 80c1 	beq.w	8011598 <tcp_process+0x7b0>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801141a:	4b68      	ldr	r3, [pc, #416]	; (80115bc <tcp_process+0x7d4>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	429a      	cmp	r2, r3
 8011420:	f040 80ba 	bne.w	8011598 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011428:	2b00      	cmp	r3, #0
 801142a:	f040 80b5 	bne.w	8011598 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2206      	movs	r2, #6
 8011432:	751a      	strb	r2, [r3, #20]
      break;
 8011434:	e0b0      	b.n	8011598 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f000 f9ca 	bl	80117d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801143c:	4b60      	ldr	r3, [pc, #384]	; (80115c0 <tcp_process+0x7d8>)
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	f003 0320 	and.w	r3, r3, #32
 8011444:	2b00      	cmp	r3, #0
 8011446:	f000 80a9 	beq.w	801159c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	8b5b      	ldrh	r3, [r3, #26]
 801144e:	f043 0302 	orr.w	r3, r3, #2
 8011452:	b29a      	uxth	r2, r3
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f7fe fd3b 	bl	800fed4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801145e:	4b59      	ldr	r3, [pc, #356]	; (80115c4 <tcp_process+0x7dc>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	429a      	cmp	r2, r3
 8011466:	d105      	bne.n	8011474 <tcp_process+0x68c>
 8011468:	4b56      	ldr	r3, [pc, #344]	; (80115c4 <tcp_process+0x7dc>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	4a55      	ldr	r2, [pc, #340]	; (80115c4 <tcp_process+0x7dc>)
 8011470:	6013      	str	r3, [r2, #0]
 8011472:	e013      	b.n	801149c <tcp_process+0x6b4>
 8011474:	4b53      	ldr	r3, [pc, #332]	; (80115c4 <tcp_process+0x7dc>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	613b      	str	r3, [r7, #16]
 801147a:	e00c      	b.n	8011496 <tcp_process+0x6ae>
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	429a      	cmp	r2, r3
 8011484:	d104      	bne.n	8011490 <tcp_process+0x6a8>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	68da      	ldr	r2, [r3, #12]
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	60da      	str	r2, [r3, #12]
 801148e:	e005      	b.n	801149c <tcp_process+0x6b4>
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	68db      	ldr	r3, [r3, #12]
 8011494:	613b      	str	r3, [r7, #16]
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d1ef      	bne.n	801147c <tcp_process+0x694>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2200      	movs	r2, #0
 80114a0:	60da      	str	r2, [r3, #12]
 80114a2:	4b43      	ldr	r3, [pc, #268]	; (80115b0 <tcp_process+0x7c8>)
 80114a4:	2201      	movs	r2, #1
 80114a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	220a      	movs	r2, #10
 80114ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80114ae:	4b41      	ldr	r3, [pc, #260]	; (80115b4 <tcp_process+0x7cc>)
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	60da      	str	r2, [r3, #12]
 80114b6:	4a3f      	ldr	r2, [pc, #252]	; (80115b4 <tcp_process+0x7cc>)
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6013      	str	r3, [r2, #0]
 80114bc:	f002 fc9e 	bl	8013dfc <tcp_timer_needed>
      }
      break;
 80114c0:	e06c      	b.n	801159c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f000 f984 	bl	80117d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80114c8:	4b3b      	ldr	r3, [pc, #236]	; (80115b8 <tcp_process+0x7d0>)
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	f003 0310 	and.w	r3, r3, #16
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d065      	beq.n	80115a0 <tcp_process+0x7b8>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114d8:	4b38      	ldr	r3, [pc, #224]	; (80115bc <tcp_process+0x7d4>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d15f      	bne.n	80115a0 <tcp_process+0x7b8>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d15b      	bne.n	80115a0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f7fe fcf3 	bl	800fed4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80114ee:	4b35      	ldr	r3, [pc, #212]	; (80115c4 <tcp_process+0x7dc>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d105      	bne.n	8011504 <tcp_process+0x71c>
 80114f8:	4b32      	ldr	r3, [pc, #200]	; (80115c4 <tcp_process+0x7dc>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	4a31      	ldr	r2, [pc, #196]	; (80115c4 <tcp_process+0x7dc>)
 8011500:	6013      	str	r3, [r2, #0]
 8011502:	e013      	b.n	801152c <tcp_process+0x744>
 8011504:	4b2f      	ldr	r3, [pc, #188]	; (80115c4 <tcp_process+0x7dc>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	60fb      	str	r3, [r7, #12]
 801150a:	e00c      	b.n	8011526 <tcp_process+0x73e>
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	687a      	ldr	r2, [r7, #4]
 8011512:	429a      	cmp	r2, r3
 8011514:	d104      	bne.n	8011520 <tcp_process+0x738>
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	68da      	ldr	r2, [r3, #12]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	60da      	str	r2, [r3, #12]
 801151e:	e005      	b.n	801152c <tcp_process+0x744>
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	60fb      	str	r3, [r7, #12]
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1ef      	bne.n	801150c <tcp_process+0x724>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2200      	movs	r2, #0
 8011530:	60da      	str	r2, [r3, #12]
 8011532:	4b1f      	ldr	r3, [pc, #124]	; (80115b0 <tcp_process+0x7c8>)
 8011534:	2201      	movs	r2, #1
 8011536:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	220a      	movs	r2, #10
 801153c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801153e:	4b1d      	ldr	r3, [pc, #116]	; (80115b4 <tcp_process+0x7cc>)
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	60da      	str	r2, [r3, #12]
 8011546:	4a1b      	ldr	r2, [pc, #108]	; (80115b4 <tcp_process+0x7cc>)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6013      	str	r3, [r2, #0]
 801154c:	f002 fc56 	bl	8013dfc <tcp_timer_needed>
      }
      break;
 8011550:	e026      	b.n	80115a0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f000 f93c 	bl	80117d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011558:	4b17      	ldr	r3, [pc, #92]	; (80115b8 <tcp_process+0x7d0>)
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	f003 0310 	and.w	r3, r3, #16
 8011560:	2b00      	cmp	r3, #0
 8011562:	d01f      	beq.n	80115a4 <tcp_process+0x7bc>
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011568:	4b14      	ldr	r3, [pc, #80]	; (80115bc <tcp_process+0x7d4>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	429a      	cmp	r2, r3
 801156e:	d119      	bne.n	80115a4 <tcp_process+0x7bc>
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011574:	2b00      	cmp	r3, #0
 8011576:	d115      	bne.n	80115a4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011578:	4b11      	ldr	r3, [pc, #68]	; (80115c0 <tcp_process+0x7d8>)
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	f043 0310 	orr.w	r3, r3, #16
 8011580:	b2da      	uxtb	r2, r3
 8011582:	4b0f      	ldr	r3, [pc, #60]	; (80115c0 <tcp_process+0x7d8>)
 8011584:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011586:	e00d      	b.n	80115a4 <tcp_process+0x7bc>
    default:
      break;
 8011588:	bf00      	nop
 801158a:	e00c      	b.n	80115a6 <tcp_process+0x7be>
      break;
 801158c:	bf00      	nop
 801158e:	e00a      	b.n	80115a6 <tcp_process+0x7be>
      break;
 8011590:	bf00      	nop
 8011592:	e008      	b.n	80115a6 <tcp_process+0x7be>
      break;
 8011594:	bf00      	nop
 8011596:	e006      	b.n	80115a6 <tcp_process+0x7be>
      break;
 8011598:	bf00      	nop
 801159a:	e004      	b.n	80115a6 <tcp_process+0x7be>
      break;
 801159c:	bf00      	nop
 801159e:	e002      	b.n	80115a6 <tcp_process+0x7be>
      break;
 80115a0:	bf00      	nop
 80115a2:	e000      	b.n	80115a6 <tcp_process+0x7be>
      break;
 80115a4:	bf00      	nop
  }
  return ERR_OK;
 80115a6:	2300      	movs	r3, #0
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3724      	adds	r7, #36	; 0x24
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd90      	pop	{r4, r7, pc}
 80115b0:	2000b4bc 	.word	0x2000b4bc
 80115b4:	2000b4d0 	.word	0x2000b4d0
 80115b8:	20004740 	.word	0x20004740
 80115bc:	20004738 	.word	0x20004738
 80115c0:	20004741 	.word	0x20004741
 80115c4:	2000b4c0 	.word	0x2000b4c0

080115c8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80115c8:	b590      	push	{r4, r7, lr}
 80115ca:	b085      	sub	sp, #20
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d106      	bne.n	80115e6 <tcp_oos_insert_segment+0x1e>
 80115d8:	4b3b      	ldr	r3, [pc, #236]	; (80116c8 <tcp_oos_insert_segment+0x100>)
 80115da:	f240 421f 	movw	r2, #1055	; 0x41f
 80115de:	493b      	ldr	r1, [pc, #236]	; (80116cc <tcp_oos_insert_segment+0x104>)
 80115e0:	483b      	ldr	r0, [pc, #236]	; (80116d0 <tcp_oos_insert_segment+0x108>)
 80115e2:	f008 fa0b 	bl	80199fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	899b      	ldrh	r3, [r3, #12]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fb fcca 	bl	800cf88 <lwip_htons>
 80115f4:	4603      	mov	r3, r0
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	f003 0301 	and.w	r3, r3, #1
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d028      	beq.n	8011652 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011600:	6838      	ldr	r0, [r7, #0]
 8011602:	f7fe fa67 	bl	800fad4 <tcp_segs_free>
    next = NULL;
 8011606:	2300      	movs	r3, #0
 8011608:	603b      	str	r3, [r7, #0]
 801160a:	e056      	b.n	80116ba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	899b      	ldrh	r3, [r3, #12]
 8011612:	b29b      	uxth	r3, r3
 8011614:	4618      	mov	r0, r3
 8011616:	f7fb fcb7 	bl	800cf88 <lwip_htons>
 801161a:	4603      	mov	r3, r0
 801161c:	b2db      	uxtb	r3, r3
 801161e:	f003 0301 	and.w	r3, r3, #1
 8011622:	2b00      	cmp	r3, #0
 8011624:	d00d      	beq.n	8011642 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	899b      	ldrh	r3, [r3, #12]
 801162c:	b29c      	uxth	r4, r3
 801162e:	2001      	movs	r0, #1
 8011630:	f7fb fcaa 	bl	800cf88 <lwip_htons>
 8011634:	4603      	mov	r3, r0
 8011636:	461a      	mov	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	68db      	ldr	r3, [r3, #12]
 801163c:	4322      	orrs	r2, r4
 801163e:	b292      	uxth	r2, r2
 8011640:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f7fe fa55 	bl	800fafc <tcp_seg_free>
    while (next &&
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d00e      	beq.n	8011676 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	891b      	ldrh	r3, [r3, #8]
 801165c:	461a      	mov	r2, r3
 801165e:	4b1d      	ldr	r3, [pc, #116]	; (80116d4 <tcp_oos_insert_segment+0x10c>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	441a      	add	r2, r3
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	68db      	ldr	r3, [r3, #12]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	8909      	ldrh	r1, [r1, #8]
 801166e:	440b      	add	r3, r1
 8011670:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011672:	2b00      	cmp	r3, #0
 8011674:	daca      	bge.n	801160c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d01e      	beq.n	80116ba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	891b      	ldrh	r3, [r3, #8]
 8011680:	461a      	mov	r2, r3
 8011682:	4b14      	ldr	r3, [pc, #80]	; (80116d4 <tcp_oos_insert_segment+0x10c>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	441a      	add	r2, r3
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	68db      	ldr	r3, [r3, #12]
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011690:	2b00      	cmp	r3, #0
 8011692:	dd12      	ble.n	80116ba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	b29a      	uxth	r2, r3
 801169c:	4b0d      	ldr	r3, [pc, #52]	; (80116d4 <tcp_oos_insert_segment+0x10c>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	685a      	ldr	r2, [r3, #4]
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	891b      	ldrh	r3, [r3, #8]
 80116b2:	4619      	mov	r1, r3
 80116b4:	4610      	mov	r0, r2
 80116b6:	f7fc fe17 	bl	800e2e8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	683a      	ldr	r2, [r7, #0]
 80116be:	601a      	str	r2, [r3, #0]
}
 80116c0:	bf00      	nop
 80116c2:	3714      	adds	r7, #20
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd90      	pop	{r4, r7, pc}
 80116c8:	0801e650 	.word	0x0801e650
 80116cc:	0801e910 	.word	0x0801e910
 80116d0:	0801e69c 	.word	0x0801e69c
 80116d4:	20004734 	.word	0x20004734

080116d8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80116d8:	b5b0      	push	{r4, r5, r7, lr}
 80116da:	b086      	sub	sp, #24
 80116dc:	af00      	add	r7, sp, #0
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	607a      	str	r2, [r7, #4]
 80116e4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80116e6:	e03e      	b.n	8011766 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fd f80a 	bl	800e710 <pbuf_clen>
 80116fc:	4603      	mov	r3, r0
 80116fe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011706:	8a7a      	ldrh	r2, [r7, #18]
 8011708:	429a      	cmp	r2, r3
 801170a:	d906      	bls.n	801171a <tcp_free_acked_segments+0x42>
 801170c:	4b2a      	ldr	r3, [pc, #168]	; (80117b8 <tcp_free_acked_segments+0xe0>)
 801170e:	f240 4257 	movw	r2, #1111	; 0x457
 8011712:	492a      	ldr	r1, [pc, #168]	; (80117bc <tcp_free_acked_segments+0xe4>)
 8011714:	482a      	ldr	r0, [pc, #168]	; (80117c0 <tcp_free_acked_segments+0xe8>)
 8011716:	f008 f971 	bl	80199fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011720:	8a7b      	ldrh	r3, [r7, #18]
 8011722:	1ad3      	subs	r3, r2, r3
 8011724:	b29a      	uxth	r2, r3
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	891a      	ldrh	r2, [r3, #8]
 8011730:	4b24      	ldr	r3, [pc, #144]	; (80117c4 <tcp_free_acked_segments+0xec>)
 8011732:	881b      	ldrh	r3, [r3, #0]
 8011734:	4413      	add	r3, r2
 8011736:	b29a      	uxth	r2, r3
 8011738:	4b22      	ldr	r3, [pc, #136]	; (80117c4 <tcp_free_acked_segments+0xec>)
 801173a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801173c:	6978      	ldr	r0, [r7, #20]
 801173e:	f7fe f9dd 	bl	800fafc <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00c      	beq.n	8011766 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d109      	bne.n	8011766 <tcp_free_acked_segments+0x8e>
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d106      	bne.n	8011766 <tcp_free_acked_segments+0x8e>
 8011758:	4b17      	ldr	r3, [pc, #92]	; (80117b8 <tcp_free_acked_segments+0xe0>)
 801175a:	f240 4262 	movw	r2, #1122	; 0x462
 801175e:	491a      	ldr	r1, [pc, #104]	; (80117c8 <tcp_free_acked_segments+0xf0>)
 8011760:	4817      	ldr	r0, [pc, #92]	; (80117c0 <tcp_free_acked_segments+0xe8>)
 8011762:	f008 f94b 	bl	80199fc <iprintf>
  while (seg_list != NULL &&
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d020      	beq.n	80117ae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	68db      	ldr	r3, [r3, #12]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	4618      	mov	r0, r3
 8011774:	f7fb fc1d 	bl	800cfb2 <lwip_htonl>
 8011778:	4604      	mov	r4, r0
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	891b      	ldrh	r3, [r3, #8]
 801177e:	461d      	mov	r5, r3
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	68db      	ldr	r3, [r3, #12]
 8011784:	899b      	ldrh	r3, [r3, #12]
 8011786:	b29b      	uxth	r3, r3
 8011788:	4618      	mov	r0, r3
 801178a:	f7fb fbfd 	bl	800cf88 <lwip_htons>
 801178e:	4603      	mov	r3, r0
 8011790:	b2db      	uxtb	r3, r3
 8011792:	f003 0303 	and.w	r3, r3, #3
 8011796:	2b00      	cmp	r3, #0
 8011798:	d001      	beq.n	801179e <tcp_free_acked_segments+0xc6>
 801179a:	2301      	movs	r3, #1
 801179c:	e000      	b.n	80117a0 <tcp_free_acked_segments+0xc8>
 801179e:	2300      	movs	r3, #0
 80117a0:	442b      	add	r3, r5
 80117a2:	18e2      	adds	r2, r4, r3
 80117a4:	4b09      	ldr	r3, [pc, #36]	; (80117cc <tcp_free_acked_segments+0xf4>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	dd9c      	ble.n	80116e8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80117ae:	68bb      	ldr	r3, [r7, #8]
}
 80117b0:	4618      	mov	r0, r3
 80117b2:	3718      	adds	r7, #24
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bdb0      	pop	{r4, r5, r7, pc}
 80117b8:	0801e650 	.word	0x0801e650
 80117bc:	0801e938 	.word	0x0801e938
 80117c0:	0801e69c 	.word	0x0801e69c
 80117c4:	2000473c 	.word	0x2000473c
 80117c8:	0801e960 	.word	0x0801e960
 80117cc:	20004738 	.word	0x20004738

080117d0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80117d0:	b5b0      	push	{r4, r5, r7, lr}
 80117d2:	b094      	sub	sp, #80	; 0x50
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80117d8:	2300      	movs	r3, #0
 80117da:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d106      	bne.n	80117f0 <tcp_receive+0x20>
 80117e2:	4ba6      	ldr	r3, [pc, #664]	; (8011a7c <tcp_receive+0x2ac>)
 80117e4:	f240 427b 	movw	r2, #1147	; 0x47b
 80117e8:	49a5      	ldr	r1, [pc, #660]	; (8011a80 <tcp_receive+0x2b0>)
 80117ea:	48a6      	ldr	r0, [pc, #664]	; (8011a84 <tcp_receive+0x2b4>)
 80117ec:	f008 f906 	bl	80199fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	7d1b      	ldrb	r3, [r3, #20]
 80117f4:	2b03      	cmp	r3, #3
 80117f6:	d806      	bhi.n	8011806 <tcp_receive+0x36>
 80117f8:	4ba0      	ldr	r3, [pc, #640]	; (8011a7c <tcp_receive+0x2ac>)
 80117fa:	f240 427c 	movw	r2, #1148	; 0x47c
 80117fe:	49a2      	ldr	r1, [pc, #648]	; (8011a88 <tcp_receive+0x2b8>)
 8011800:	48a0      	ldr	r0, [pc, #640]	; (8011a84 <tcp_receive+0x2b4>)
 8011802:	f008 f8fb 	bl	80199fc <iprintf>

  if (flags & TCP_ACK) {
 8011806:	4ba1      	ldr	r3, [pc, #644]	; (8011a8c <tcp_receive+0x2bc>)
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	f003 0310 	and.w	r3, r3, #16
 801180e:	2b00      	cmp	r3, #0
 8011810:	f000 8263 	beq.w	8011cda <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801181a:	461a      	mov	r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011820:	4413      	add	r3, r2
 8011822:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011828:	4b99      	ldr	r3, [pc, #612]	; (8011a90 <tcp_receive+0x2c0>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	2b00      	cmp	r3, #0
 8011830:	db1b      	blt.n	801186a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011836:	4b96      	ldr	r3, [pc, #600]	; (8011a90 <tcp_receive+0x2c0>)
 8011838:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801183a:	429a      	cmp	r2, r3
 801183c:	d106      	bne.n	801184c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011842:	4b94      	ldr	r3, [pc, #592]	; (8011a94 <tcp_receive+0x2c4>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	1ad3      	subs	r3, r2, r3
 8011848:	2b00      	cmp	r3, #0
 801184a:	db0e      	blt.n	801186a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011850:	4b90      	ldr	r3, [pc, #576]	; (8011a94 <tcp_receive+0x2c4>)
 8011852:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011854:	429a      	cmp	r2, r3
 8011856:	d125      	bne.n	80118a4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011858:	4b8f      	ldr	r3, [pc, #572]	; (8011a98 <tcp_receive+0x2c8>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	89db      	ldrh	r3, [r3, #14]
 801185e:	b29a      	uxth	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011866:	429a      	cmp	r2, r3
 8011868:	d91c      	bls.n	80118a4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801186a:	4b8b      	ldr	r3, [pc, #556]	; (8011a98 <tcp_receive+0x2c8>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	89db      	ldrh	r3, [r3, #14]
 8011870:	b29a      	uxth	r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011884:	429a      	cmp	r2, r3
 8011886:	d205      	bcs.n	8011894 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011894:	4b7e      	ldr	r3, [pc, #504]	; (8011a90 <tcp_receive+0x2c0>)
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801189c:	4b7d      	ldr	r3, [pc, #500]	; (8011a94 <tcp_receive+0x2c4>)
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80118a4:	4b7b      	ldr	r3, [pc, #492]	; (8011a94 <tcp_receive+0x2c4>)
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118ac:	1ad3      	subs	r3, r2, r3
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	dc58      	bgt.n	8011964 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80118b2:	4b7a      	ldr	r3, [pc, #488]	; (8011a9c <tcp_receive+0x2cc>)
 80118b4:	881b      	ldrh	r3, [r3, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d14b      	bne.n	8011952 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80118c4:	4413      	add	r3, r2
 80118c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d142      	bne.n	8011952 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	db3d      	blt.n	8011952 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118da:	4b6e      	ldr	r3, [pc, #440]	; (8011a94 <tcp_receive+0x2c4>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d137      	bne.n	8011952 <tcp_receive+0x182>
              found_dupack = 1;
 80118e2:	2301      	movs	r3, #1
 80118e4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80118ec:	2bff      	cmp	r3, #255	; 0xff
 80118ee:	d007      	beq.n	8011900 <tcp_receive+0x130>
                ++pcb->dupacks;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80118f6:	3301      	adds	r3, #1
 80118f8:	b2da      	uxtb	r2, r3
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011906:	2b03      	cmp	r3, #3
 8011908:	d91b      	bls.n	8011942 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011914:	4413      	add	r3, r2
 8011916:	b29a      	uxth	r2, r3
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801191e:	429a      	cmp	r2, r3
 8011920:	d30a      	bcc.n	8011938 <tcp_receive+0x168>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801192c:	4413      	add	r3, r2
 801192e:	b29a      	uxth	r2, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011936:	e004      	b.n	8011942 <tcp_receive+0x172>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801193e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011948:	2b02      	cmp	r3, #2
 801194a:	d902      	bls.n	8011952 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f001 feed 	bl	801372c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011954:	2b00      	cmp	r3, #0
 8011956:	f040 8160 	bne.w	8011c1a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2200      	movs	r2, #0
 801195e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011962:	e15a      	b.n	8011c1a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011964:	4b4b      	ldr	r3, [pc, #300]	; (8011a94 <tcp_receive+0x2c4>)
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801196c:	1ad3      	subs	r3, r2, r3
 801196e:	3b01      	subs	r3, #1
 8011970:	2b00      	cmp	r3, #0
 8011972:	f2c0 814d 	blt.w	8011c10 <tcp_receive+0x440>
 8011976:	4b47      	ldr	r3, [pc, #284]	; (8011a94 <tcp_receive+0x2c4>)
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	2b00      	cmp	r3, #0
 8011982:	f300 8145 	bgt.w	8011c10 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	8b5b      	ldrh	r3, [r3, #26]
 801198a:	f003 0304 	and.w	r3, r3, #4
 801198e:	2b00      	cmp	r3, #0
 8011990:	d010      	beq.n	80119b4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	8b5b      	ldrh	r3, [r3, #26]
 8011996:	f023 0304 	bic.w	r3, r3, #4
 801199a:	b29a      	uxth	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2200      	movs	r2, #0
 80119b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2200      	movs	r2, #0
 80119b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119c2:	10db      	asrs	r3, r3, #3
 80119c4:	b21b      	sxth	r3, r3
 80119c6:	b29a      	uxth	r2, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	4413      	add	r3, r2
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	b21a      	sxth	r2, r3
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80119dc:	4b2d      	ldr	r3, [pc, #180]	; (8011a94 <tcp_receive+0x2c4>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	1ad3      	subs	r3, r2, r3
 80119ea:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2200      	movs	r2, #0
 80119f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80119f4:	4b27      	ldr	r3, [pc, #156]	; (8011a94 <tcp_receive+0x2c4>)
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	7d1b      	ldrb	r3, [r3, #20]
 8011a00:	2b03      	cmp	r3, #3
 8011a02:	f240 8096 	bls.w	8011b32 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d244      	bcs.n	8011aa0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	8b5b      	ldrh	r3, [r3, #26]
 8011a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d001      	beq.n	8011a26 <tcp_receive+0x256>
 8011a22:	2301      	movs	r3, #1
 8011a24:	e000      	b.n	8011a28 <tcp_receive+0x258>
 8011a26:	2302      	movs	r3, #2
 8011a28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011a2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a30:	b29a      	uxth	r2, r3
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a36:	fb12 f303 	smulbb	r3, r2, r3
 8011a3a:	b29b      	uxth	r3, r3
 8011a3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	bf28      	it	cs
 8011a42:	4613      	movcs	r3, r2
 8011a44:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a4e:	4413      	add	r3, r2
 8011a50:	b29a      	uxth	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d309      	bcc.n	8011a70 <tcp_receive+0x2a0>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a64:	4413      	add	r3, r2
 8011a66:	b29a      	uxth	r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011a6e:	e060      	b.n	8011b32 <tcp_receive+0x362>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011a7a:	e05a      	b.n	8011b32 <tcp_receive+0x362>
 8011a7c:	0801e650 	.word	0x0801e650
 8011a80:	0801e980 	.word	0x0801e980
 8011a84:	0801e69c 	.word	0x0801e69c
 8011a88:	0801e99c 	.word	0x0801e99c
 8011a8c:	20004740 	.word	0x20004740
 8011a90:	20004734 	.word	0x20004734
 8011a94:	20004738 	.word	0x20004738
 8011a98:	20004724 	.word	0x20004724
 8011a9c:	2000473e 	.word	0x2000473e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011aa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011aa8:	4413      	add	r3, r2
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d309      	bcc.n	8011aca <tcp_receive+0x2fa>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011abc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011abe:	4413      	add	r3, r2
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011ac8:	e004      	b.n	8011ad4 <tcp_receive+0x304>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d326      	bcc.n	8011b32 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011af0:	1ad3      	subs	r3, r2, r3
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b04:	4413      	add	r3, r2
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d30a      	bcc.n	8011b28 <tcp_receive+0x358>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b1c:	4413      	add	r3, r2
 8011b1e:	b29a      	uxth	r2, r3
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011b26:	e004      	b.n	8011b32 <tcp_receive+0x362>
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b3a:	4a98      	ldr	r2, [pc, #608]	; (8011d9c <tcp_receive+0x5cc>)
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f7ff fdcb 	bl	80116d8 <tcp_free_acked_segments>
 8011b42:	4602      	mov	r2, r0
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b50:	4a93      	ldr	r2, [pc, #588]	; (8011da0 <tcp_receive+0x5d0>)
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f7ff fdc0 	bl	80116d8 <tcp_free_acked_segments>
 8011b58:	4602      	mov	r2, r0
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d104      	bne.n	8011b70 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b6c:	861a      	strh	r2, [r3, #48]	; 0x30
 8011b6e:	e002      	b.n	8011b76 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2200      	movs	r2, #0
 8011b74:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d103      	bne.n	8011b8c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2200      	movs	r2, #0
 8011b88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011b92:	4b84      	ldr	r3, [pc, #528]	; (8011da4 <tcp_receive+0x5d4>)
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	4413      	add	r3, r2
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	8b5b      	ldrh	r3, [r3, #26]
 8011ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d035      	beq.n	8011c18 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d118      	bne.n	8011be6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d00c      	beq.n	8011bd6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bc4:	68db      	ldr	r3, [r3, #12]
 8011bc6:	685b      	ldr	r3, [r3, #4]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7fb f9f2 	bl	800cfb2 <lwip_htonl>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	dc20      	bgt.n	8011c18 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	8b5b      	ldrh	r3, [r3, #26]
 8011bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011bde:	b29a      	uxth	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011be4:	e018      	b.n	8011c18 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bee:	68db      	ldr	r3, [r3, #12]
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fb f9dd 	bl	800cfb2 <lwip_htonl>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	1ae3      	subs	r3, r4, r3
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	dc0b      	bgt.n	8011c18 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	8b5b      	ldrh	r3, [r3, #26]
 8011c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c0e:	e003      	b.n	8011c18 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f001 ff83 	bl	8013b1c <tcp_send_empty_ack>
 8011c16:	e000      	b.n	8011c1a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c18:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d05b      	beq.n	8011cda <tcp_receive+0x50a>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c26:	4b60      	ldr	r3, [pc, #384]	; (8011da8 <tcp_receive+0x5d8>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	1ad3      	subs	r3, r2, r3
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	da54      	bge.n	8011cda <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011c30:	4b5e      	ldr	r3, [pc, #376]	; (8011dac <tcp_receive+0x5dc>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	b29a      	uxth	r2, r3
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	1ad3      	subs	r3, r2, r3
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011c44:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011c4e:	10db      	asrs	r3, r3, #3
 8011c50:	b21b      	sxth	r3, r3
 8011c52:	b29b      	uxth	r3, r3
 8011c54:	1ad3      	subs	r3, r2, r3
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011c62:	b29a      	uxth	r2, r3
 8011c64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011c68:	4413      	add	r3, r2
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	b21a      	sxth	r2, r3
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011c72:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	da05      	bge.n	8011c86 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011c7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011c7e:	425b      	negs	r3, r3
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011c86:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c90:	109b      	asrs	r3, r3, #2
 8011c92:	b21b      	sxth	r3, r3
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011ca4:	b29a      	uxth	r2, r3
 8011ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011caa:	4413      	add	r3, r2
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	b21a      	sxth	r2, r3
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011cba:	10db      	asrs	r3, r3, #3
 8011cbc:	b21b      	sxth	r3, r3
 8011cbe:	b29a      	uxth	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011cc6:	b29b      	uxth	r3, r3
 8011cc8:	4413      	add	r3, r2
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	b21a      	sxth	r2, r3
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011cda:	4b35      	ldr	r3, [pc, #212]	; (8011db0 <tcp_receive+0x5e0>)
 8011cdc:	881b      	ldrh	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	f000 84e1 	beq.w	80126a6 <tcp_receive+0xed6>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	7d1b      	ldrb	r3, [r3, #20]
 8011ce8:	2b06      	cmp	r3, #6
 8011cea:	f200 84dc 	bhi.w	80126a6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cf2:	4b30      	ldr	r3, [pc, #192]	; (8011db4 <tcp_receive+0x5e4>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	1ad3      	subs	r3, r2, r3
 8011cf8:	3b01      	subs	r3, #1
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	f2c0 808e 	blt.w	8011e1c <tcp_receive+0x64c>
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d04:	4b2a      	ldr	r3, [pc, #168]	; (8011db0 <tcp_receive+0x5e0>)
 8011d06:	881b      	ldrh	r3, [r3, #0]
 8011d08:	4619      	mov	r1, r3
 8011d0a:	4b2a      	ldr	r3, [pc, #168]	; (8011db4 <tcp_receive+0x5e4>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	440b      	add	r3, r1
 8011d10:	1ad3      	subs	r3, r2, r3
 8011d12:	3301      	adds	r3, #1
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f300 8081 	bgt.w	8011e1c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011d1a:	4b27      	ldr	r3, [pc, #156]	; (8011db8 <tcp_receive+0x5e8>)
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d24:	4b23      	ldr	r3, [pc, #140]	; (8011db4 <tcp_receive+0x5e4>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	1ad3      	subs	r3, r2, r3
 8011d2a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011d2c:	4b22      	ldr	r3, [pc, #136]	; (8011db8 <tcp_receive+0x5e8>)
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d106      	bne.n	8011d42 <tcp_receive+0x572>
 8011d34:	4b21      	ldr	r3, [pc, #132]	; (8011dbc <tcp_receive+0x5ec>)
 8011d36:	f240 5294 	movw	r2, #1428	; 0x594
 8011d3a:	4921      	ldr	r1, [pc, #132]	; (8011dc0 <tcp_receive+0x5f0>)
 8011d3c:	4821      	ldr	r0, [pc, #132]	; (8011dc4 <tcp_receive+0x5f4>)
 8011d3e:	f007 fe5d 	bl	80199fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011d48:	4293      	cmp	r3, r2
 8011d4a:	d906      	bls.n	8011d5a <tcp_receive+0x58a>
 8011d4c:	4b1b      	ldr	r3, [pc, #108]	; (8011dbc <tcp_receive+0x5ec>)
 8011d4e:	f240 5295 	movw	r2, #1429	; 0x595
 8011d52:	491d      	ldr	r1, [pc, #116]	; (8011dc8 <tcp_receive+0x5f8>)
 8011d54:	481b      	ldr	r0, [pc, #108]	; (8011dc4 <tcp_receive+0x5f4>)
 8011d56:	f007 fe51 	bl	80199fc <iprintf>
      off = (u16_t)off32;
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011d60:	4b15      	ldr	r3, [pc, #84]	; (8011db8 <tcp_receive+0x5e8>)
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	891b      	ldrh	r3, [r3, #8]
 8011d66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d906      	bls.n	8011d7c <tcp_receive+0x5ac>
 8011d6e:	4b13      	ldr	r3, [pc, #76]	; (8011dbc <tcp_receive+0x5ec>)
 8011d70:	f240 5297 	movw	r2, #1431	; 0x597
 8011d74:	4915      	ldr	r1, [pc, #84]	; (8011dcc <tcp_receive+0x5fc>)
 8011d76:	4813      	ldr	r0, [pc, #76]	; (8011dc4 <tcp_receive+0x5f4>)
 8011d78:	f007 fe40 	bl	80199fc <iprintf>
      inseg.len -= off;
 8011d7c:	4b0e      	ldr	r3, [pc, #56]	; (8011db8 <tcp_receive+0x5e8>)
 8011d7e:	891a      	ldrh	r2, [r3, #8]
 8011d80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d84:	1ad3      	subs	r3, r2, r3
 8011d86:	b29a      	uxth	r2, r3
 8011d88:	4b0b      	ldr	r3, [pc, #44]	; (8011db8 <tcp_receive+0x5e8>)
 8011d8a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011d8c:	4b0a      	ldr	r3, [pc, #40]	; (8011db8 <tcp_receive+0x5e8>)
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	891a      	ldrh	r2, [r3, #8]
 8011d92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d96:	1ad3      	subs	r3, r2, r3
 8011d98:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011d9a:	e029      	b.n	8011df0 <tcp_receive+0x620>
 8011d9c:	0801e9b8 	.word	0x0801e9b8
 8011da0:	0801e9c0 	.word	0x0801e9c0
 8011da4:	2000473c 	.word	0x2000473c
 8011da8:	20004738 	.word	0x20004738
 8011dac:	2000b4c4 	.word	0x2000b4c4
 8011db0:	2000473e 	.word	0x2000473e
 8011db4:	20004734 	.word	0x20004734
 8011db8:	20004714 	.word	0x20004714
 8011dbc:	0801e650 	.word	0x0801e650
 8011dc0:	0801e9c8 	.word	0x0801e9c8
 8011dc4:	0801e69c 	.word	0x0801e69c
 8011dc8:	0801e9d8 	.word	0x0801e9d8
 8011dcc:	0801e9e8 	.word	0x0801e9e8
        off -= p->len;
 8011dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dd2:	895b      	ldrh	r3, [r3, #10]
 8011dd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011dd8:	1ad3      	subs	r3, r2, r3
 8011dda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011de0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011de2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011de6:	2200      	movs	r2, #0
 8011de8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011df2:	895b      	ldrh	r3, [r3, #10]
 8011df4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d8e9      	bhi.n	8011dd0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011dfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e00:	4619      	mov	r1, r3
 8011e02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011e04:	f7fc fb70 	bl	800e4e8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e0c:	4a91      	ldr	r2, [pc, #580]	; (8012054 <tcp_receive+0x884>)
 8011e0e:	6013      	str	r3, [r2, #0]
 8011e10:	4b91      	ldr	r3, [pc, #580]	; (8012058 <tcp_receive+0x888>)
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	4a8f      	ldr	r2, [pc, #572]	; (8012054 <tcp_receive+0x884>)
 8011e16:	6812      	ldr	r2, [r2, #0]
 8011e18:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011e1a:	e00d      	b.n	8011e38 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011e1c:	4b8d      	ldr	r3, [pc, #564]	; (8012054 <tcp_receive+0x884>)
 8011e1e:	681a      	ldr	r2, [r3, #0]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e24:	1ad3      	subs	r3, r2, r3
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	da06      	bge.n	8011e38 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	8b5b      	ldrh	r3, [r3, #26]
 8011e2e:	f043 0302 	orr.w	r3, r3, #2
 8011e32:	b29a      	uxth	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e38:	4b86      	ldr	r3, [pc, #536]	; (8012054 <tcp_receive+0x884>)
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	f2c0 842a 	blt.w	801269c <tcp_receive+0xecc>
 8011e48:	4b82      	ldr	r3, [pc, #520]	; (8012054 <tcp_receive+0x884>)
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e50:	6879      	ldr	r1, [r7, #4]
 8011e52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e54:	440b      	add	r3, r1
 8011e56:	1ad3      	subs	r3, r2, r3
 8011e58:	3301      	adds	r3, #1
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	f300 841e 	bgt.w	801269c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e64:	4b7b      	ldr	r3, [pc, #492]	; (8012054 <tcp_receive+0x884>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	f040 829a 	bne.w	80123a2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011e6e:	4b7a      	ldr	r3, [pc, #488]	; (8012058 <tcp_receive+0x888>)
 8011e70:	891c      	ldrh	r4, [r3, #8]
 8011e72:	4b79      	ldr	r3, [pc, #484]	; (8012058 <tcp_receive+0x888>)
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	899b      	ldrh	r3, [r3, #12]
 8011e78:	b29b      	uxth	r3, r3
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fb f884 	bl	800cf88 <lwip_htons>
 8011e80:	4603      	mov	r3, r0
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	f003 0303 	and.w	r3, r3, #3
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d001      	beq.n	8011e90 <tcp_receive+0x6c0>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	e000      	b.n	8011e92 <tcp_receive+0x6c2>
 8011e90:	2300      	movs	r3, #0
 8011e92:	4423      	add	r3, r4
 8011e94:	b29a      	uxth	r2, r3
 8011e96:	4b71      	ldr	r3, [pc, #452]	; (801205c <tcp_receive+0x88c>)
 8011e98:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e9e:	4b6f      	ldr	r3, [pc, #444]	; (801205c <tcp_receive+0x88c>)
 8011ea0:	881b      	ldrh	r3, [r3, #0]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d275      	bcs.n	8011f92 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011ea6:	4b6c      	ldr	r3, [pc, #432]	; (8012058 <tcp_receive+0x888>)
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	899b      	ldrh	r3, [r3, #12]
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7fb f86a 	bl	800cf88 <lwip_htons>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	b2db      	uxtb	r3, r3
 8011eb8:	f003 0301 	and.w	r3, r3, #1
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d01f      	beq.n	8011f00 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011ec0:	4b65      	ldr	r3, [pc, #404]	; (8012058 <tcp_receive+0x888>)
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	899b      	ldrh	r3, [r3, #12]
 8011ec6:	b29b      	uxth	r3, r3
 8011ec8:	b21b      	sxth	r3, r3
 8011eca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011ece:	b21c      	sxth	r4, r3
 8011ed0:	4b61      	ldr	r3, [pc, #388]	; (8012058 <tcp_receive+0x888>)
 8011ed2:	68db      	ldr	r3, [r3, #12]
 8011ed4:	899b      	ldrh	r3, [r3, #12]
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7fb f855 	bl	800cf88 <lwip_htons>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	b29b      	uxth	r3, r3
 8011ee4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011ee8:	b29b      	uxth	r3, r3
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7fb f84c 	bl	800cf88 <lwip_htons>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	b21b      	sxth	r3, r3
 8011ef4:	4323      	orrs	r3, r4
 8011ef6:	b21a      	sxth	r2, r3
 8011ef8:	4b57      	ldr	r3, [pc, #348]	; (8012058 <tcp_receive+0x888>)
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	b292      	uxth	r2, r2
 8011efe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f04:	4b54      	ldr	r3, [pc, #336]	; (8012058 <tcp_receive+0x888>)
 8011f06:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011f08:	4b53      	ldr	r3, [pc, #332]	; (8012058 <tcp_receive+0x888>)
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	899b      	ldrh	r3, [r3, #12]
 8011f0e:	b29b      	uxth	r3, r3
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fb f839 	bl	800cf88 <lwip_htons>
 8011f16:	4603      	mov	r3, r0
 8011f18:	b2db      	uxtb	r3, r3
 8011f1a:	f003 0302 	and.w	r3, r3, #2
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d005      	beq.n	8011f2e <tcp_receive+0x75e>
            inseg.len -= 1;
 8011f22:	4b4d      	ldr	r3, [pc, #308]	; (8012058 <tcp_receive+0x888>)
 8011f24:	891b      	ldrh	r3, [r3, #8]
 8011f26:	3b01      	subs	r3, #1
 8011f28:	b29a      	uxth	r2, r3
 8011f2a:	4b4b      	ldr	r3, [pc, #300]	; (8012058 <tcp_receive+0x888>)
 8011f2c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011f2e:	4b4a      	ldr	r3, [pc, #296]	; (8012058 <tcp_receive+0x888>)
 8011f30:	685a      	ldr	r2, [r3, #4]
 8011f32:	4b49      	ldr	r3, [pc, #292]	; (8012058 <tcp_receive+0x888>)
 8011f34:	891b      	ldrh	r3, [r3, #8]
 8011f36:	4619      	mov	r1, r3
 8011f38:	4610      	mov	r0, r2
 8011f3a:	f7fc f9d5 	bl	800e2e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011f3e:	4b46      	ldr	r3, [pc, #280]	; (8012058 <tcp_receive+0x888>)
 8011f40:	891c      	ldrh	r4, [r3, #8]
 8011f42:	4b45      	ldr	r3, [pc, #276]	; (8012058 <tcp_receive+0x888>)
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	899b      	ldrh	r3, [r3, #12]
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fb f81c 	bl	800cf88 <lwip_htons>
 8011f50:	4603      	mov	r3, r0
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	f003 0303 	and.w	r3, r3, #3
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d001      	beq.n	8011f60 <tcp_receive+0x790>
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	e000      	b.n	8011f62 <tcp_receive+0x792>
 8011f60:	2300      	movs	r3, #0
 8011f62:	4423      	add	r3, r4
 8011f64:	b29a      	uxth	r2, r3
 8011f66:	4b3d      	ldr	r3, [pc, #244]	; (801205c <tcp_receive+0x88c>)
 8011f68:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011f6a:	4b3c      	ldr	r3, [pc, #240]	; (801205c <tcp_receive+0x88c>)
 8011f6c:	881b      	ldrh	r3, [r3, #0]
 8011f6e:	461a      	mov	r2, r3
 8011f70:	4b38      	ldr	r3, [pc, #224]	; (8012054 <tcp_receive+0x884>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	441a      	add	r2, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f7a:	6879      	ldr	r1, [r7, #4]
 8011f7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011f7e:	440b      	add	r3, r1
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d006      	beq.n	8011f92 <tcp_receive+0x7c2>
 8011f84:	4b36      	ldr	r3, [pc, #216]	; (8012060 <tcp_receive+0x890>)
 8011f86:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011f8a:	4936      	ldr	r1, [pc, #216]	; (8012064 <tcp_receive+0x894>)
 8011f8c:	4836      	ldr	r0, [pc, #216]	; (8012068 <tcp_receive+0x898>)
 8011f8e:	f007 fd35 	bl	80199fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f000 80e7 	beq.w	801216a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f9c:	4b2e      	ldr	r3, [pc, #184]	; (8012058 <tcp_receive+0x888>)
 8011f9e:	68db      	ldr	r3, [r3, #12]
 8011fa0:	899b      	ldrh	r3, [r3, #12]
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7fa ffef 	bl	800cf88 <lwip_htons>
 8011faa:	4603      	mov	r3, r0
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	f003 0301 	and.w	r3, r3, #1
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d010      	beq.n	8011fd8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011fb6:	e00a      	b.n	8011fce <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fbc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011fc8:	68f8      	ldr	r0, [r7, #12]
 8011fca:	f7fd fd97 	bl	800fafc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d1f0      	bne.n	8011fb8 <tcp_receive+0x7e8>
 8011fd6:	e0c8      	b.n	801216a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011fde:	e052      	b.n	8012086 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	899b      	ldrh	r3, [r3, #12]
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7fa ffcd 	bl	800cf88 <lwip_htons>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	f003 0301 	and.w	r3, r3, #1
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d03d      	beq.n	8012076 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011ffa:	4b17      	ldr	r3, [pc, #92]	; (8012058 <tcp_receive+0x888>)
 8011ffc:	68db      	ldr	r3, [r3, #12]
 8011ffe:	899b      	ldrh	r3, [r3, #12]
 8012000:	b29b      	uxth	r3, r3
 8012002:	4618      	mov	r0, r3
 8012004:	f7fa ffc0 	bl	800cf88 <lwip_htons>
 8012008:	4603      	mov	r3, r0
 801200a:	b2db      	uxtb	r3, r3
 801200c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012010:	2b00      	cmp	r3, #0
 8012012:	d130      	bne.n	8012076 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012014:	4b10      	ldr	r3, [pc, #64]	; (8012058 <tcp_receive+0x888>)
 8012016:	68db      	ldr	r3, [r3, #12]
 8012018:	899b      	ldrh	r3, [r3, #12]
 801201a:	b29c      	uxth	r4, r3
 801201c:	2001      	movs	r0, #1
 801201e:	f7fa ffb3 	bl	800cf88 <lwip_htons>
 8012022:	4603      	mov	r3, r0
 8012024:	461a      	mov	r2, r3
 8012026:	4b0c      	ldr	r3, [pc, #48]	; (8012058 <tcp_receive+0x888>)
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	4322      	orrs	r2, r4
 801202c:	b292      	uxth	r2, r2
 801202e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012030:	4b09      	ldr	r3, [pc, #36]	; (8012058 <tcp_receive+0x888>)
 8012032:	891c      	ldrh	r4, [r3, #8]
 8012034:	4b08      	ldr	r3, [pc, #32]	; (8012058 <tcp_receive+0x888>)
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	899b      	ldrh	r3, [r3, #12]
 801203a:	b29b      	uxth	r3, r3
 801203c:	4618      	mov	r0, r3
 801203e:	f7fa ffa3 	bl	800cf88 <lwip_htons>
 8012042:	4603      	mov	r3, r0
 8012044:	b2db      	uxtb	r3, r3
 8012046:	f003 0303 	and.w	r3, r3, #3
 801204a:	2b00      	cmp	r3, #0
 801204c:	d00e      	beq.n	801206c <tcp_receive+0x89c>
 801204e:	2301      	movs	r3, #1
 8012050:	e00d      	b.n	801206e <tcp_receive+0x89e>
 8012052:	bf00      	nop
 8012054:	20004734 	.word	0x20004734
 8012058:	20004714 	.word	0x20004714
 801205c:	2000473e 	.word	0x2000473e
 8012060:	0801e650 	.word	0x0801e650
 8012064:	0801e9f8 	.word	0x0801e9f8
 8012068:	0801e69c 	.word	0x0801e69c
 801206c:	2300      	movs	r3, #0
 801206e:	4423      	add	r3, r4
 8012070:	b29a      	uxth	r2, r3
 8012072:	4b98      	ldr	r3, [pc, #608]	; (80122d4 <tcp_receive+0xb04>)
 8012074:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012078:	613b      	str	r3, [r7, #16]
              next = next->next;
 801207a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012080:	6938      	ldr	r0, [r7, #16]
 8012082:	f7fd fd3b 	bl	800fafc <tcp_seg_free>
            while (next &&
 8012086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012088:	2b00      	cmp	r3, #0
 801208a:	d00e      	beq.n	80120aa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801208c:	4b91      	ldr	r3, [pc, #580]	; (80122d4 <tcp_receive+0xb04>)
 801208e:	881b      	ldrh	r3, [r3, #0]
 8012090:	461a      	mov	r2, r3
 8012092:	4b91      	ldr	r3, [pc, #580]	; (80122d8 <tcp_receive+0xb08>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	441a      	add	r2, r3
 8012098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120a0:	8909      	ldrh	r1, [r1, #8]
 80120a2:	440b      	add	r3, r1
 80120a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	da9a      	bge.n	8011fe0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80120aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d059      	beq.n	8012164 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80120b0:	4b88      	ldr	r3, [pc, #544]	; (80122d4 <tcp_receive+0xb04>)
 80120b2:	881b      	ldrh	r3, [r3, #0]
 80120b4:	461a      	mov	r2, r3
 80120b6:	4b88      	ldr	r3, [pc, #544]	; (80122d8 <tcp_receive+0xb08>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	441a      	add	r2, r3
 80120bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	dd4d      	ble.n	8012164 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80120c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	b29a      	uxth	r2, r3
 80120d0:	4b81      	ldr	r3, [pc, #516]	; (80122d8 <tcp_receive+0xb08>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	1ad3      	subs	r3, r2, r3
 80120d8:	b29a      	uxth	r2, r3
 80120da:	4b80      	ldr	r3, [pc, #512]	; (80122dc <tcp_receive+0xb0c>)
 80120dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80120de:	4b7f      	ldr	r3, [pc, #508]	; (80122dc <tcp_receive+0xb0c>)
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	899b      	ldrh	r3, [r3, #12]
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7fa ff4e 	bl	800cf88 <lwip_htons>
 80120ec:	4603      	mov	r3, r0
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	f003 0302 	and.w	r3, r3, #2
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d005      	beq.n	8012104 <tcp_receive+0x934>
                inseg.len -= 1;
 80120f8:	4b78      	ldr	r3, [pc, #480]	; (80122dc <tcp_receive+0xb0c>)
 80120fa:	891b      	ldrh	r3, [r3, #8]
 80120fc:	3b01      	subs	r3, #1
 80120fe:	b29a      	uxth	r2, r3
 8012100:	4b76      	ldr	r3, [pc, #472]	; (80122dc <tcp_receive+0xb0c>)
 8012102:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012104:	4b75      	ldr	r3, [pc, #468]	; (80122dc <tcp_receive+0xb0c>)
 8012106:	685a      	ldr	r2, [r3, #4]
 8012108:	4b74      	ldr	r3, [pc, #464]	; (80122dc <tcp_receive+0xb0c>)
 801210a:	891b      	ldrh	r3, [r3, #8]
 801210c:	4619      	mov	r1, r3
 801210e:	4610      	mov	r0, r2
 8012110:	f7fc f8ea 	bl	800e2e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012114:	4b71      	ldr	r3, [pc, #452]	; (80122dc <tcp_receive+0xb0c>)
 8012116:	891c      	ldrh	r4, [r3, #8]
 8012118:	4b70      	ldr	r3, [pc, #448]	; (80122dc <tcp_receive+0xb0c>)
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	899b      	ldrh	r3, [r3, #12]
 801211e:	b29b      	uxth	r3, r3
 8012120:	4618      	mov	r0, r3
 8012122:	f7fa ff31 	bl	800cf88 <lwip_htons>
 8012126:	4603      	mov	r3, r0
 8012128:	b2db      	uxtb	r3, r3
 801212a:	f003 0303 	and.w	r3, r3, #3
 801212e:	2b00      	cmp	r3, #0
 8012130:	d001      	beq.n	8012136 <tcp_receive+0x966>
 8012132:	2301      	movs	r3, #1
 8012134:	e000      	b.n	8012138 <tcp_receive+0x968>
 8012136:	2300      	movs	r3, #0
 8012138:	4423      	add	r3, r4
 801213a:	b29a      	uxth	r2, r3
 801213c:	4b65      	ldr	r3, [pc, #404]	; (80122d4 <tcp_receive+0xb04>)
 801213e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012140:	4b64      	ldr	r3, [pc, #400]	; (80122d4 <tcp_receive+0xb04>)
 8012142:	881b      	ldrh	r3, [r3, #0]
 8012144:	461a      	mov	r2, r3
 8012146:	4b64      	ldr	r3, [pc, #400]	; (80122d8 <tcp_receive+0xb08>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	441a      	add	r2, r3
 801214c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801214e:	68db      	ldr	r3, [r3, #12]
 8012150:	685b      	ldr	r3, [r3, #4]
 8012152:	429a      	cmp	r2, r3
 8012154:	d006      	beq.n	8012164 <tcp_receive+0x994>
 8012156:	4b62      	ldr	r3, [pc, #392]	; (80122e0 <tcp_receive+0xb10>)
 8012158:	f240 52fd 	movw	r2, #1533	; 0x5fd
 801215c:	4961      	ldr	r1, [pc, #388]	; (80122e4 <tcp_receive+0xb14>)
 801215e:	4862      	ldr	r0, [pc, #392]	; (80122e8 <tcp_receive+0xb18>)
 8012160:	f007 fc4c 	bl	80199fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012168:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801216a:	4b5a      	ldr	r3, [pc, #360]	; (80122d4 <tcp_receive+0xb04>)
 801216c:	881b      	ldrh	r3, [r3, #0]
 801216e:	461a      	mov	r2, r3
 8012170:	4b59      	ldr	r3, [pc, #356]	; (80122d8 <tcp_receive+0xb08>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	441a      	add	r2, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801217e:	4b55      	ldr	r3, [pc, #340]	; (80122d4 <tcp_receive+0xb04>)
 8012180:	881b      	ldrh	r3, [r3, #0]
 8012182:	429a      	cmp	r2, r3
 8012184:	d206      	bcs.n	8012194 <tcp_receive+0x9c4>
 8012186:	4b56      	ldr	r3, [pc, #344]	; (80122e0 <tcp_receive+0xb10>)
 8012188:	f240 6207 	movw	r2, #1543	; 0x607
 801218c:	4957      	ldr	r1, [pc, #348]	; (80122ec <tcp_receive+0xb1c>)
 801218e:	4856      	ldr	r0, [pc, #344]	; (80122e8 <tcp_receive+0xb18>)
 8012190:	f007 fc34 	bl	80199fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012198:	4b4e      	ldr	r3, [pc, #312]	; (80122d4 <tcp_receive+0xb04>)
 801219a:	881b      	ldrh	r3, [r3, #0]
 801219c:	1ad3      	subs	r3, r2, r3
 801219e:	b29a      	uxth	r2, r3
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f7fc ffcd 	bl	800f144 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80121aa:	4b4c      	ldr	r3, [pc, #304]	; (80122dc <tcp_receive+0xb0c>)
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	891b      	ldrh	r3, [r3, #8]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d006      	beq.n	80121c2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80121b4:	4b49      	ldr	r3, [pc, #292]	; (80122dc <tcp_receive+0xb0c>)
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	4a4d      	ldr	r2, [pc, #308]	; (80122f0 <tcp_receive+0xb20>)
 80121ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80121bc:	4b47      	ldr	r3, [pc, #284]	; (80122dc <tcp_receive+0xb0c>)
 80121be:	2200      	movs	r2, #0
 80121c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80121c2:	4b46      	ldr	r3, [pc, #280]	; (80122dc <tcp_receive+0xb0c>)
 80121c4:	68db      	ldr	r3, [r3, #12]
 80121c6:	899b      	ldrh	r3, [r3, #12]
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fa fedc 	bl	800cf88 <lwip_htons>
 80121d0:	4603      	mov	r3, r0
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	f003 0301 	and.w	r3, r3, #1
 80121d8:	2b00      	cmp	r3, #0
 80121da:	f000 80b8 	beq.w	801234e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80121de:	4b45      	ldr	r3, [pc, #276]	; (80122f4 <tcp_receive+0xb24>)
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	f043 0320 	orr.w	r3, r3, #32
 80121e6:	b2da      	uxtb	r2, r3
 80121e8:	4b42      	ldr	r3, [pc, #264]	; (80122f4 <tcp_receive+0xb24>)
 80121ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80121ec:	e0af      	b.n	801234e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	4a36      	ldr	r2, [pc, #216]	; (80122d8 <tcp_receive+0xb08>)
 80121fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	891b      	ldrh	r3, [r3, #8]
 8012204:	461c      	mov	r4, r3
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	68db      	ldr	r3, [r3, #12]
 801220a:	899b      	ldrh	r3, [r3, #12]
 801220c:	b29b      	uxth	r3, r3
 801220e:	4618      	mov	r0, r3
 8012210:	f7fa feba 	bl	800cf88 <lwip_htons>
 8012214:	4603      	mov	r3, r0
 8012216:	b2db      	uxtb	r3, r3
 8012218:	f003 0303 	and.w	r3, r3, #3
 801221c:	2b00      	cmp	r3, #0
 801221e:	d001      	beq.n	8012224 <tcp_receive+0xa54>
 8012220:	2301      	movs	r3, #1
 8012222:	e000      	b.n	8012226 <tcp_receive+0xa56>
 8012224:	2300      	movs	r3, #0
 8012226:	191a      	adds	r2, r3, r4
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801222c:	441a      	add	r2, r3
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012236:	461c      	mov	r4, r3
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	891b      	ldrh	r3, [r3, #8]
 801223c:	461d      	mov	r5, r3
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	68db      	ldr	r3, [r3, #12]
 8012242:	899b      	ldrh	r3, [r3, #12]
 8012244:	b29b      	uxth	r3, r3
 8012246:	4618      	mov	r0, r3
 8012248:	f7fa fe9e 	bl	800cf88 <lwip_htons>
 801224c:	4603      	mov	r3, r0
 801224e:	b2db      	uxtb	r3, r3
 8012250:	f003 0303 	and.w	r3, r3, #3
 8012254:	2b00      	cmp	r3, #0
 8012256:	d001      	beq.n	801225c <tcp_receive+0xa8c>
 8012258:	2301      	movs	r3, #1
 801225a:	e000      	b.n	801225e <tcp_receive+0xa8e>
 801225c:	2300      	movs	r3, #0
 801225e:	442b      	add	r3, r5
 8012260:	429c      	cmp	r4, r3
 8012262:	d206      	bcs.n	8012272 <tcp_receive+0xaa2>
 8012264:	4b1e      	ldr	r3, [pc, #120]	; (80122e0 <tcp_receive+0xb10>)
 8012266:	f240 622c 	movw	r2, #1580	; 0x62c
 801226a:	4923      	ldr	r1, [pc, #140]	; (80122f8 <tcp_receive+0xb28>)
 801226c:	481e      	ldr	r0, [pc, #120]	; (80122e8 <tcp_receive+0xb18>)
 801226e:	f007 fbc5 	bl	80199fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	891b      	ldrh	r3, [r3, #8]
 8012276:	461c      	mov	r4, r3
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	899b      	ldrh	r3, [r3, #12]
 801227e:	b29b      	uxth	r3, r3
 8012280:	4618      	mov	r0, r3
 8012282:	f7fa fe81 	bl	800cf88 <lwip_htons>
 8012286:	4603      	mov	r3, r0
 8012288:	b2db      	uxtb	r3, r3
 801228a:	f003 0303 	and.w	r3, r3, #3
 801228e:	2b00      	cmp	r3, #0
 8012290:	d001      	beq.n	8012296 <tcp_receive+0xac6>
 8012292:	2301      	movs	r3, #1
 8012294:	e000      	b.n	8012298 <tcp_receive+0xac8>
 8012296:	2300      	movs	r3, #0
 8012298:	1919      	adds	r1, r3, r4
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801229e:	b28b      	uxth	r3, r1
 80122a0:	1ad3      	subs	r3, r2, r3
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	f7fc ff4b 	bl	800f144 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	891b      	ldrh	r3, [r3, #8]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d028      	beq.n	801230a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80122b8:	4b0d      	ldr	r3, [pc, #52]	; (80122f0 <tcp_receive+0xb20>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d01d      	beq.n	80122fc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80122c0:	4b0b      	ldr	r3, [pc, #44]	; (80122f0 <tcp_receive+0xb20>)
 80122c2:	681a      	ldr	r2, [r3, #0]
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	4619      	mov	r1, r3
 80122ca:	4610      	mov	r0, r2
 80122cc:	f7fc fa60 	bl	800e790 <pbuf_cat>
 80122d0:	e018      	b.n	8012304 <tcp_receive+0xb34>
 80122d2:	bf00      	nop
 80122d4:	2000473e 	.word	0x2000473e
 80122d8:	20004734 	.word	0x20004734
 80122dc:	20004714 	.word	0x20004714
 80122e0:	0801e650 	.word	0x0801e650
 80122e4:	0801ea30 	.word	0x0801ea30
 80122e8:	0801e69c 	.word	0x0801e69c
 80122ec:	0801ea6c 	.word	0x0801ea6c
 80122f0:	20004744 	.word	0x20004744
 80122f4:	20004741 	.word	0x20004741
 80122f8:	0801ea8c 	.word	0x0801ea8c
            } else {
              recv_data = cseg->p;
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	4a70      	ldr	r2, [pc, #448]	; (80124c4 <tcp_receive+0xcf4>)
 8012302:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	2200      	movs	r2, #0
 8012308:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	899b      	ldrh	r3, [r3, #12]
 8012310:	b29b      	uxth	r3, r3
 8012312:	4618      	mov	r0, r3
 8012314:	f7fa fe38 	bl	800cf88 <lwip_htons>
 8012318:	4603      	mov	r3, r0
 801231a:	b2db      	uxtb	r3, r3
 801231c:	f003 0301 	and.w	r3, r3, #1
 8012320:	2b00      	cmp	r3, #0
 8012322:	d00d      	beq.n	8012340 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012324:	4b68      	ldr	r3, [pc, #416]	; (80124c8 <tcp_receive+0xcf8>)
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	f043 0320 	orr.w	r3, r3, #32
 801232c:	b2da      	uxtb	r2, r3
 801232e:	4b66      	ldr	r3, [pc, #408]	; (80124c8 <tcp_receive+0xcf8>)
 8012330:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	7d1b      	ldrb	r3, [r3, #20]
 8012336:	2b04      	cmp	r3, #4
 8012338:	d102      	bne.n	8012340 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2207      	movs	r2, #7
 801233e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	681a      	ldr	r2, [r3, #0]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012348:	68b8      	ldr	r0, [r7, #8]
 801234a:	f7fd fbd7 	bl	800fafc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012352:	2b00      	cmp	r3, #0
 8012354:	d008      	beq.n	8012368 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	685a      	ldr	r2, [r3, #4]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012362:	429a      	cmp	r2, r3
 8012364:	f43f af43 	beq.w	80121ee <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	8b5b      	ldrh	r3, [r3, #26]
 801236c:	f003 0301 	and.w	r3, r3, #1
 8012370:	2b00      	cmp	r3, #0
 8012372:	d00e      	beq.n	8012392 <tcp_receive+0xbc2>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	8b5b      	ldrh	r3, [r3, #26]
 8012378:	f023 0301 	bic.w	r3, r3, #1
 801237c:	b29a      	uxth	r2, r3
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	835a      	strh	r2, [r3, #26]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	8b5b      	ldrh	r3, [r3, #26]
 8012386:	f043 0302 	orr.w	r3, r3, #2
 801238a:	b29a      	uxth	r2, r3
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012390:	e188      	b.n	80126a4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	8b5b      	ldrh	r3, [r3, #26]
 8012396:	f043 0301 	orr.w	r3, r3, #1
 801239a:	b29a      	uxth	r2, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80123a0:	e180      	b.n	80126a4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d106      	bne.n	80123b8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80123aa:	4848      	ldr	r0, [pc, #288]	; (80124cc <tcp_receive+0xcfc>)
 80123ac:	f7fd fbbe 	bl	800fb2c <tcp_seg_copy>
 80123b0:	4602      	mov	r2, r0
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	675a      	str	r2, [r3, #116]	; 0x74
 80123b6:	e16d      	b.n	8012694 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80123b8:	2300      	movs	r3, #0
 80123ba:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80123c2:	e157      	b.n	8012674 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80123c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	685a      	ldr	r2, [r3, #4]
 80123ca:	4b41      	ldr	r3, [pc, #260]	; (80124d0 <tcp_receive+0xd00>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d11d      	bne.n	801240e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80123d2:	4b3e      	ldr	r3, [pc, #248]	; (80124cc <tcp_receive+0xcfc>)
 80123d4:	891a      	ldrh	r2, [r3, #8]
 80123d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d8:	891b      	ldrh	r3, [r3, #8]
 80123da:	429a      	cmp	r2, r3
 80123dc:	f240 814f 	bls.w	801267e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80123e0:	483a      	ldr	r0, [pc, #232]	; (80124cc <tcp_receive+0xcfc>)
 80123e2:	f7fd fba3 	bl	800fb2c <tcp_seg_copy>
 80123e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	f000 8149 	beq.w	8012682 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80123f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d003      	beq.n	80123fe <tcp_receive+0xc2e>
                    prev->next = cseg;
 80123f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123f8:	697a      	ldr	r2, [r7, #20]
 80123fa:	601a      	str	r2, [r3, #0]
 80123fc:	e002      	b.n	8012404 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	697a      	ldr	r2, [r7, #20]
 8012402:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012404:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012406:	6978      	ldr	r0, [r7, #20]
 8012408:	f7ff f8de 	bl	80115c8 <tcp_oos_insert_segment>
                }
                break;
 801240c:	e139      	b.n	8012682 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012410:	2b00      	cmp	r3, #0
 8012412:	d117      	bne.n	8012444 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012414:	4b2e      	ldr	r3, [pc, #184]	; (80124d0 <tcp_receive+0xd00>)
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801241a:	68db      	ldr	r3, [r3, #12]
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	1ad3      	subs	r3, r2, r3
 8012420:	2b00      	cmp	r3, #0
 8012422:	da57      	bge.n	80124d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012424:	4829      	ldr	r0, [pc, #164]	; (80124cc <tcp_receive+0xcfc>)
 8012426:	f7fd fb81 	bl	800fb2c <tcp_seg_copy>
 801242a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	2b00      	cmp	r3, #0
 8012430:	f000 8129 	beq.w	8012686 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	69ba      	ldr	r2, [r7, #24]
 8012438:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801243a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801243c:	69b8      	ldr	r0, [r7, #24]
 801243e:	f7ff f8c3 	bl	80115c8 <tcp_oos_insert_segment>
                  }
                  break;
 8012442:	e120      	b.n	8012686 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012444:	4b22      	ldr	r3, [pc, #136]	; (80124d0 <tcp_receive+0xd00>)
 8012446:	681a      	ldr	r2, [r3, #0]
 8012448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801244a:	68db      	ldr	r3, [r3, #12]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	1ad3      	subs	r3, r2, r3
 8012450:	3b01      	subs	r3, #1
 8012452:	2b00      	cmp	r3, #0
 8012454:	db3e      	blt.n	80124d4 <tcp_receive+0xd04>
 8012456:	4b1e      	ldr	r3, [pc, #120]	; (80124d0 <tcp_receive+0xd00>)
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801245c:	68db      	ldr	r3, [r3, #12]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	1ad3      	subs	r3, r2, r3
 8012462:	3301      	adds	r3, #1
 8012464:	2b00      	cmp	r3, #0
 8012466:	dc35      	bgt.n	80124d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012468:	4818      	ldr	r0, [pc, #96]	; (80124cc <tcp_receive+0xcfc>)
 801246a:	f7fd fb5f 	bl	800fb2c <tcp_seg_copy>
 801246e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	2b00      	cmp	r3, #0
 8012474:	f000 8109 	beq.w	801268a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801247a:	68db      	ldr	r3, [r3, #12]
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012480:	8912      	ldrh	r2, [r2, #8]
 8012482:	441a      	add	r2, r3
 8012484:	4b12      	ldr	r3, [pc, #72]	; (80124d0 <tcp_receive+0xd00>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	1ad3      	subs	r3, r2, r3
 801248a:	2b00      	cmp	r3, #0
 801248c:	dd12      	ble.n	80124b4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801248e:	4b10      	ldr	r3, [pc, #64]	; (80124d0 <tcp_receive+0xd00>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	b29a      	uxth	r2, r3
 8012494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	685b      	ldr	r3, [r3, #4]
 801249a:	b29b      	uxth	r3, r3
 801249c:	1ad3      	subs	r3, r2, r3
 801249e:	b29a      	uxth	r2, r3
 80124a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80124a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124a6:	685a      	ldr	r2, [r3, #4]
 80124a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124aa:	891b      	ldrh	r3, [r3, #8]
 80124ac:	4619      	mov	r1, r3
 80124ae:	4610      	mov	r0, r2
 80124b0:	f7fb ff1a 	bl	800e2e8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80124b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124b6:	69fa      	ldr	r2, [r7, #28]
 80124b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80124ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80124bc:	69f8      	ldr	r0, [r7, #28]
 80124be:	f7ff f883 	bl	80115c8 <tcp_oos_insert_segment>
                  }
                  break;
 80124c2:	e0e2      	b.n	801268a <tcp_receive+0xeba>
 80124c4:	20004744 	.word	0x20004744
 80124c8:	20004741 	.word	0x20004741
 80124cc:	20004714 	.word	0x20004714
 80124d0:	20004734 	.word	0x20004734
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80124d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80124d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f040 80c6 	bne.w	801266e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80124e2:	4b80      	ldr	r3, [pc, #512]	; (80126e4 <tcp_receive+0xf14>)
 80124e4:	681a      	ldr	r2, [r3, #0]
 80124e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e8:	68db      	ldr	r3, [r3, #12]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	f340 80bd 	ble.w	801266e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80124f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f6:	68db      	ldr	r3, [r3, #12]
 80124f8:	899b      	ldrh	r3, [r3, #12]
 80124fa:	b29b      	uxth	r3, r3
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fa fd43 	bl	800cf88 <lwip_htons>
 8012502:	4603      	mov	r3, r0
 8012504:	b2db      	uxtb	r3, r3
 8012506:	f003 0301 	and.w	r3, r3, #1
 801250a:	2b00      	cmp	r3, #0
 801250c:	f040 80bf 	bne.w	801268e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012510:	4875      	ldr	r0, [pc, #468]	; (80126e8 <tcp_receive+0xf18>)
 8012512:	f7fd fb0b 	bl	800fb2c <tcp_seg_copy>
 8012516:	4602      	mov	r2, r0
 8012518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2b00      	cmp	r3, #0
 8012522:	f000 80b6 	beq.w	8012692 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012528:	68db      	ldr	r3, [r3, #12]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801252e:	8912      	ldrh	r2, [r2, #8]
 8012530:	441a      	add	r2, r3
 8012532:	4b6c      	ldr	r3, [pc, #432]	; (80126e4 <tcp_receive+0xf14>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	1ad3      	subs	r3, r2, r3
 8012538:	2b00      	cmp	r3, #0
 801253a:	dd12      	ble.n	8012562 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801253c:	4b69      	ldr	r3, [pc, #420]	; (80126e4 <tcp_receive+0xf14>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	b29a      	uxth	r2, r3
 8012542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	b29b      	uxth	r3, r3
 801254a:	1ad3      	subs	r3, r2, r3
 801254c:	b29a      	uxth	r2, r3
 801254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012550:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012554:	685a      	ldr	r2, [r3, #4]
 8012556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012558:	891b      	ldrh	r3, [r3, #8]
 801255a:	4619      	mov	r1, r3
 801255c:	4610      	mov	r0, r2
 801255e:	f7fb fec3 	bl	800e2e8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012562:	4b62      	ldr	r3, [pc, #392]	; (80126ec <tcp_receive+0xf1c>)
 8012564:	881b      	ldrh	r3, [r3, #0]
 8012566:	461a      	mov	r2, r3
 8012568:	4b5e      	ldr	r3, [pc, #376]	; (80126e4 <tcp_receive+0xf14>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	441a      	add	r2, r3
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012572:	6879      	ldr	r1, [r7, #4]
 8012574:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012576:	440b      	add	r3, r1
 8012578:	1ad3      	subs	r3, r2, r3
 801257a:	2b00      	cmp	r3, #0
 801257c:	f340 8089 	ble.w	8012692 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	899b      	ldrh	r3, [r3, #12]
 8012588:	b29b      	uxth	r3, r3
 801258a:	4618      	mov	r0, r3
 801258c:	f7fa fcfc 	bl	800cf88 <lwip_htons>
 8012590:	4603      	mov	r3, r0
 8012592:	b2db      	uxtb	r3, r3
 8012594:	f003 0301 	and.w	r3, r3, #1
 8012598:	2b00      	cmp	r3, #0
 801259a:	d022      	beq.n	80125e2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801259c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	68db      	ldr	r3, [r3, #12]
 80125a2:	899b      	ldrh	r3, [r3, #12]
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	b21b      	sxth	r3, r3
 80125a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80125ac:	b21c      	sxth	r4, r3
 80125ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	899b      	ldrh	r3, [r3, #12]
 80125b6:	b29b      	uxth	r3, r3
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7fa fce5 	bl	800cf88 <lwip_htons>
 80125be:	4603      	mov	r3, r0
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fa fcdc 	bl	800cf88 <lwip_htons>
 80125d0:	4603      	mov	r3, r0
 80125d2:	b21b      	sxth	r3, r3
 80125d4:	4323      	orrs	r3, r4
 80125d6:	b21a      	sxth	r2, r3
 80125d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	b292      	uxth	r2, r2
 80125e0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e6:	b29a      	uxth	r2, r3
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125ec:	4413      	add	r3, r2
 80125ee:	b299      	uxth	r1, r3
 80125f0:	4b3c      	ldr	r3, [pc, #240]	; (80126e4 <tcp_receive+0xf14>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	b29a      	uxth	r2, r3
 80125f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	1a8a      	subs	r2, r1, r2
 80125fc:	b292      	uxth	r2, r2
 80125fe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	685a      	ldr	r2, [r3, #4]
 8012606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	891b      	ldrh	r3, [r3, #8]
 801260c:	4619      	mov	r1, r3
 801260e:	4610      	mov	r0, r2
 8012610:	f7fb fe6a 	bl	800e2e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	891c      	ldrh	r4, [r3, #8]
 801261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	68db      	ldr	r3, [r3, #12]
 8012620:	899b      	ldrh	r3, [r3, #12]
 8012622:	b29b      	uxth	r3, r3
 8012624:	4618      	mov	r0, r3
 8012626:	f7fa fcaf 	bl	800cf88 <lwip_htons>
 801262a:	4603      	mov	r3, r0
 801262c:	b2db      	uxtb	r3, r3
 801262e:	f003 0303 	and.w	r3, r3, #3
 8012632:	2b00      	cmp	r3, #0
 8012634:	d001      	beq.n	801263a <tcp_receive+0xe6a>
 8012636:	2301      	movs	r3, #1
 8012638:	e000      	b.n	801263c <tcp_receive+0xe6c>
 801263a:	2300      	movs	r3, #0
 801263c:	4423      	add	r3, r4
 801263e:	b29a      	uxth	r2, r3
 8012640:	4b2a      	ldr	r3, [pc, #168]	; (80126ec <tcp_receive+0xf1c>)
 8012642:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012644:	4b29      	ldr	r3, [pc, #164]	; (80126ec <tcp_receive+0xf1c>)
 8012646:	881b      	ldrh	r3, [r3, #0]
 8012648:	461a      	mov	r2, r3
 801264a:	4b26      	ldr	r3, [pc, #152]	; (80126e4 <tcp_receive+0xf14>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	441a      	add	r2, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012654:	6879      	ldr	r1, [r7, #4]
 8012656:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012658:	440b      	add	r3, r1
 801265a:	429a      	cmp	r2, r3
 801265c:	d019      	beq.n	8012692 <tcp_receive+0xec2>
 801265e:	4b24      	ldr	r3, [pc, #144]	; (80126f0 <tcp_receive+0xf20>)
 8012660:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012664:	4923      	ldr	r1, [pc, #140]	; (80126f4 <tcp_receive+0xf24>)
 8012666:	4824      	ldr	r0, [pc, #144]	; (80126f8 <tcp_receive+0xf28>)
 8012668:	f007 f9c8 	bl	80199fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801266c:	e011      	b.n	8012692 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	63bb      	str	r3, [r7, #56]	; 0x38
 8012674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012676:	2b00      	cmp	r3, #0
 8012678:	f47f aea4 	bne.w	80123c4 <tcp_receive+0xbf4>
 801267c:	e00a      	b.n	8012694 <tcp_receive+0xec4>
                break;
 801267e:	bf00      	nop
 8012680:	e008      	b.n	8012694 <tcp_receive+0xec4>
                break;
 8012682:	bf00      	nop
 8012684:	e006      	b.n	8012694 <tcp_receive+0xec4>
                  break;
 8012686:	bf00      	nop
 8012688:	e004      	b.n	8012694 <tcp_receive+0xec4>
                  break;
 801268a:	bf00      	nop
 801268c:	e002      	b.n	8012694 <tcp_receive+0xec4>
                  break;
 801268e:	bf00      	nop
 8012690:	e000      	b.n	8012694 <tcp_receive+0xec4>
                break;
 8012692:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f001 fa41 	bl	8013b1c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801269a:	e003      	b.n	80126a4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f001 fa3d 	bl	8013b1c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80126a2:	e01a      	b.n	80126da <tcp_receive+0xf0a>
 80126a4:	e019      	b.n	80126da <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80126a6:	4b0f      	ldr	r3, [pc, #60]	; (80126e4 <tcp_receive+0xf14>)
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ae:	1ad3      	subs	r3, r2, r3
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	db0a      	blt.n	80126ca <tcp_receive+0xefa>
 80126b4:	4b0b      	ldr	r3, [pc, #44]	; (80126e4 <tcp_receive+0xf14>)
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126bc:	6879      	ldr	r1, [r7, #4]
 80126be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80126c0:	440b      	add	r3, r1
 80126c2:	1ad3      	subs	r3, r2, r3
 80126c4:	3301      	adds	r3, #1
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	dd07      	ble.n	80126da <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	8b5b      	ldrh	r3, [r3, #26]
 80126ce:	f043 0302 	orr.w	r3, r3, #2
 80126d2:	b29a      	uxth	r2, r3
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80126d8:	e7ff      	b.n	80126da <tcp_receive+0xf0a>
 80126da:	bf00      	nop
 80126dc:	3750      	adds	r7, #80	; 0x50
 80126de:	46bd      	mov	sp, r7
 80126e0:	bdb0      	pop	{r4, r5, r7, pc}
 80126e2:	bf00      	nop
 80126e4:	20004734 	.word	0x20004734
 80126e8:	20004714 	.word	0x20004714
 80126ec:	2000473e 	.word	0x2000473e
 80126f0:	0801e650 	.word	0x0801e650
 80126f4:	0801e9f8 	.word	0x0801e9f8
 80126f8:	0801e69c 	.word	0x0801e69c

080126fc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012702:	4b15      	ldr	r3, [pc, #84]	; (8012758 <tcp_get_next_optbyte+0x5c>)
 8012704:	881b      	ldrh	r3, [r3, #0]
 8012706:	1c5a      	adds	r2, r3, #1
 8012708:	b291      	uxth	r1, r2
 801270a:	4a13      	ldr	r2, [pc, #76]	; (8012758 <tcp_get_next_optbyte+0x5c>)
 801270c:	8011      	strh	r1, [r2, #0]
 801270e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012710:	4b12      	ldr	r3, [pc, #72]	; (801275c <tcp_get_next_optbyte+0x60>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d004      	beq.n	8012722 <tcp_get_next_optbyte+0x26>
 8012718:	4b11      	ldr	r3, [pc, #68]	; (8012760 <tcp_get_next_optbyte+0x64>)
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	88fa      	ldrh	r2, [r7, #6]
 801271e:	429a      	cmp	r2, r3
 8012720:	d208      	bcs.n	8012734 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012722:	4b10      	ldr	r3, [pc, #64]	; (8012764 <tcp_get_next_optbyte+0x68>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	3314      	adds	r3, #20
 8012728:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801272a:	88fb      	ldrh	r3, [r7, #6]
 801272c:	683a      	ldr	r2, [r7, #0]
 801272e:	4413      	add	r3, r2
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	e00b      	b.n	801274c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012734:	88fb      	ldrh	r3, [r7, #6]
 8012736:	b2da      	uxtb	r2, r3
 8012738:	4b09      	ldr	r3, [pc, #36]	; (8012760 <tcp_get_next_optbyte+0x64>)
 801273a:	881b      	ldrh	r3, [r3, #0]
 801273c:	b2db      	uxtb	r3, r3
 801273e:	1ad3      	subs	r3, r2, r3
 8012740:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012742:	4b06      	ldr	r3, [pc, #24]	; (801275c <tcp_get_next_optbyte+0x60>)
 8012744:	681a      	ldr	r2, [r3, #0]
 8012746:	797b      	ldrb	r3, [r7, #5]
 8012748:	4413      	add	r3, r2
 801274a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801274c:	4618      	mov	r0, r3
 801274e:	370c      	adds	r7, #12
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr
 8012758:	20004730 	.word	0x20004730
 801275c:	2000472c 	.word	0x2000472c
 8012760:	2000472a 	.word	0x2000472a
 8012764:	20004724 	.word	0x20004724

08012768 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d106      	bne.n	8012784 <tcp_parseopt+0x1c>
 8012776:	4b31      	ldr	r3, [pc, #196]	; (801283c <tcp_parseopt+0xd4>)
 8012778:	f240 727d 	movw	r2, #1917	; 0x77d
 801277c:	4930      	ldr	r1, [pc, #192]	; (8012840 <tcp_parseopt+0xd8>)
 801277e:	4831      	ldr	r0, [pc, #196]	; (8012844 <tcp_parseopt+0xdc>)
 8012780:	f007 f93c 	bl	80199fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012784:	4b30      	ldr	r3, [pc, #192]	; (8012848 <tcp_parseopt+0xe0>)
 8012786:	881b      	ldrh	r3, [r3, #0]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d053      	beq.n	8012834 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801278c:	4b2f      	ldr	r3, [pc, #188]	; (801284c <tcp_parseopt+0xe4>)
 801278e:	2200      	movs	r2, #0
 8012790:	801a      	strh	r2, [r3, #0]
 8012792:	e043      	b.n	801281c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8012794:	f7ff ffb2 	bl	80126fc <tcp_get_next_optbyte>
 8012798:	4603      	mov	r3, r0
 801279a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801279c:	7bfb      	ldrb	r3, [r7, #15]
 801279e:	2b01      	cmp	r3, #1
 80127a0:	d03c      	beq.n	801281c <tcp_parseopt+0xb4>
 80127a2:	2b02      	cmp	r3, #2
 80127a4:	d002      	beq.n	80127ac <tcp_parseopt+0x44>
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d03f      	beq.n	801282a <tcp_parseopt+0xc2>
 80127aa:	e026      	b.n	80127fa <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80127ac:	f7ff ffa6 	bl	80126fc <tcp_get_next_optbyte>
 80127b0:	4603      	mov	r3, r0
 80127b2:	2b04      	cmp	r3, #4
 80127b4:	d13b      	bne.n	801282e <tcp_parseopt+0xc6>
 80127b6:	4b25      	ldr	r3, [pc, #148]	; (801284c <tcp_parseopt+0xe4>)
 80127b8:	881b      	ldrh	r3, [r3, #0]
 80127ba:	3302      	adds	r3, #2
 80127bc:	4a22      	ldr	r2, [pc, #136]	; (8012848 <tcp_parseopt+0xe0>)
 80127be:	8812      	ldrh	r2, [r2, #0]
 80127c0:	4293      	cmp	r3, r2
 80127c2:	dc34      	bgt.n	801282e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80127c4:	f7ff ff9a 	bl	80126fc <tcp_get_next_optbyte>
 80127c8:	4603      	mov	r3, r0
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	021b      	lsls	r3, r3, #8
 80127ce:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80127d0:	f7ff ff94 	bl	80126fc <tcp_get_next_optbyte>
 80127d4:	4603      	mov	r3, r0
 80127d6:	b29a      	uxth	r2, r3
 80127d8:	89bb      	ldrh	r3, [r7, #12]
 80127da:	4313      	orrs	r3, r2
 80127dc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80127de:	89bb      	ldrh	r3, [r7, #12]
 80127e0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80127e4:	d804      	bhi.n	80127f0 <tcp_parseopt+0x88>
 80127e6:	89bb      	ldrh	r3, [r7, #12]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d001      	beq.n	80127f0 <tcp_parseopt+0x88>
 80127ec:	89ba      	ldrh	r2, [r7, #12]
 80127ee:	e001      	b.n	80127f4 <tcp_parseopt+0x8c>
 80127f0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80127f8:	e010      	b.n	801281c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80127fa:	f7ff ff7f 	bl	80126fc <tcp_get_next_optbyte>
 80127fe:	4603      	mov	r3, r0
 8012800:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012802:	7afb      	ldrb	r3, [r7, #11]
 8012804:	2b01      	cmp	r3, #1
 8012806:	d914      	bls.n	8012832 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012808:	7afb      	ldrb	r3, [r7, #11]
 801280a:	b29a      	uxth	r2, r3
 801280c:	4b0f      	ldr	r3, [pc, #60]	; (801284c <tcp_parseopt+0xe4>)
 801280e:	881b      	ldrh	r3, [r3, #0]
 8012810:	4413      	add	r3, r2
 8012812:	b29b      	uxth	r3, r3
 8012814:	3b02      	subs	r3, #2
 8012816:	b29a      	uxth	r2, r3
 8012818:	4b0c      	ldr	r3, [pc, #48]	; (801284c <tcp_parseopt+0xe4>)
 801281a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801281c:	4b0b      	ldr	r3, [pc, #44]	; (801284c <tcp_parseopt+0xe4>)
 801281e:	881a      	ldrh	r2, [r3, #0]
 8012820:	4b09      	ldr	r3, [pc, #36]	; (8012848 <tcp_parseopt+0xe0>)
 8012822:	881b      	ldrh	r3, [r3, #0]
 8012824:	429a      	cmp	r2, r3
 8012826:	d3b5      	bcc.n	8012794 <tcp_parseopt+0x2c>
 8012828:	e004      	b.n	8012834 <tcp_parseopt+0xcc>
          return;
 801282a:	bf00      	nop
 801282c:	e002      	b.n	8012834 <tcp_parseopt+0xcc>
            return;
 801282e:	bf00      	nop
 8012830:	e000      	b.n	8012834 <tcp_parseopt+0xcc>
            return;
 8012832:	bf00      	nop
      }
    }
  }
}
 8012834:	3710      	adds	r7, #16
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	bf00      	nop
 801283c:	0801e650 	.word	0x0801e650
 8012840:	0801eab4 	.word	0x0801eab4
 8012844:	0801e69c 	.word	0x0801e69c
 8012848:	20004728 	.word	0x20004728
 801284c:	20004730 	.word	0x20004730

08012850 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012850:	b480      	push	{r7}
 8012852:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012854:	4b05      	ldr	r3, [pc, #20]	; (801286c <tcp_trigger_input_pcb_close+0x1c>)
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	f043 0310 	orr.w	r3, r3, #16
 801285c:	b2da      	uxtb	r2, r3
 801285e:	4b03      	ldr	r3, [pc, #12]	; (801286c <tcp_trigger_input_pcb_close+0x1c>)
 8012860:	701a      	strb	r2, [r3, #0]
}
 8012862:	bf00      	nop
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	20004741 	.word	0x20004741

08012870 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	60f8      	str	r0, [r7, #12]
 8012878:	60b9      	str	r1, [r7, #8]
 801287a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d00a      	beq.n	8012898 <tcp_route+0x28>
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	7a1b      	ldrb	r3, [r3, #8]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d006      	beq.n	8012898 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	7a1b      	ldrb	r3, [r3, #8]
 801288e:	4618      	mov	r0, r3
 8012890:	f7fb fb26 	bl	800dee0 <netif_get_by_index>
 8012894:	4603      	mov	r3, r0
 8012896:	e003      	b.n	80128a0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f005 f815 	bl	80178c8 <ip4_route>
 801289e:	4603      	mov	r3, r0
  }
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3710      	adds	r7, #16
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}

080128a8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80128a8:	b590      	push	{r4, r7, lr}
 80128aa:	b087      	sub	sp, #28
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	60f8      	str	r0, [r7, #12]
 80128b0:	60b9      	str	r1, [r7, #8]
 80128b2:	603b      	str	r3, [r7, #0]
 80128b4:	4613      	mov	r3, r2
 80128b6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d105      	bne.n	80128ca <tcp_create_segment+0x22>
 80128be:	4b44      	ldr	r3, [pc, #272]	; (80129d0 <tcp_create_segment+0x128>)
 80128c0:	22a3      	movs	r2, #163	; 0xa3
 80128c2:	4944      	ldr	r1, [pc, #272]	; (80129d4 <tcp_create_segment+0x12c>)
 80128c4:	4844      	ldr	r0, [pc, #272]	; (80129d8 <tcp_create_segment+0x130>)
 80128c6:	f007 f899 	bl	80199fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d105      	bne.n	80128dc <tcp_create_segment+0x34>
 80128d0:	4b3f      	ldr	r3, [pc, #252]	; (80129d0 <tcp_create_segment+0x128>)
 80128d2:	22a4      	movs	r2, #164	; 0xa4
 80128d4:	4941      	ldr	r1, [pc, #260]	; (80129dc <tcp_create_segment+0x134>)
 80128d6:	4840      	ldr	r0, [pc, #256]	; (80129d8 <tcp_create_segment+0x130>)
 80128d8:	f007 f890 	bl	80199fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80128dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	f003 0304 	and.w	r3, r3, #4
 80128e8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80128ea:	2003      	movs	r0, #3
 80128ec:	f7fb f802 	bl	800d8f4 <memp_malloc>
 80128f0:	6138      	str	r0, [r7, #16]
 80128f2:	693b      	ldr	r3, [r7, #16]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d104      	bne.n	8012902 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80128f8:	68b8      	ldr	r0, [r7, #8]
 80128fa:	f7fb fe7b 	bl	800e5f4 <pbuf_free>
    return NULL;
 80128fe:	2300      	movs	r3, #0
 8012900:	e061      	b.n	80129c6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012908:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	2200      	movs	r2, #0
 801290e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	68ba      	ldr	r2, [r7, #8]
 8012914:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	891a      	ldrh	r2, [r3, #8]
 801291a:	7dfb      	ldrb	r3, [r7, #23]
 801291c:	b29b      	uxth	r3, r3
 801291e:	429a      	cmp	r2, r3
 8012920:	d205      	bcs.n	801292e <tcp_create_segment+0x86>
 8012922:	4b2b      	ldr	r3, [pc, #172]	; (80129d0 <tcp_create_segment+0x128>)
 8012924:	22b0      	movs	r2, #176	; 0xb0
 8012926:	492e      	ldr	r1, [pc, #184]	; (80129e0 <tcp_create_segment+0x138>)
 8012928:	482b      	ldr	r0, [pc, #172]	; (80129d8 <tcp_create_segment+0x130>)
 801292a:	f007 f867 	bl	80199fc <iprintf>
  seg->len = p->tot_len - optlen;
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	891a      	ldrh	r2, [r3, #8]
 8012932:	7dfb      	ldrb	r3, [r7, #23]
 8012934:	b29b      	uxth	r3, r3
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	b29a      	uxth	r2, r3
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801293e:	2114      	movs	r1, #20
 8012940:	68b8      	ldr	r0, [r7, #8]
 8012942:	f7fb fdc1 	bl	800e4c8 <pbuf_add_header>
 8012946:	4603      	mov	r3, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d004      	beq.n	8012956 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801294c:	6938      	ldr	r0, [r7, #16]
 801294e:	f7fd f8d5 	bl	800fafc <tcp_seg_free>
    return NULL;
 8012952:	2300      	movs	r3, #0
 8012954:	e037      	b.n	80129c6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	685a      	ldr	r2, [r3, #4]
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	8ada      	ldrh	r2, [r3, #22]
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	68dc      	ldr	r4, [r3, #12]
 8012968:	4610      	mov	r0, r2
 801296a:	f7fa fb0d 	bl	800cf88 <lwip_htons>
 801296e:	4603      	mov	r3, r0
 8012970:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	8b1a      	ldrh	r2, [r3, #24]
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	68dc      	ldr	r4, [r3, #12]
 801297a:	4610      	mov	r0, r2
 801297c:	f7fa fb04 	bl	800cf88 <lwip_htons>
 8012980:	4603      	mov	r3, r0
 8012982:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	68dc      	ldr	r4, [r3, #12]
 8012988:	6838      	ldr	r0, [r7, #0]
 801298a:	f7fa fb12 	bl	800cfb2 <lwip_htonl>
 801298e:	4603      	mov	r3, r0
 8012990:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012992:	7dfb      	ldrb	r3, [r7, #23]
 8012994:	089b      	lsrs	r3, r3, #2
 8012996:	b2db      	uxtb	r3, r3
 8012998:	b29b      	uxth	r3, r3
 801299a:	3305      	adds	r3, #5
 801299c:	b29b      	uxth	r3, r3
 801299e:	031b      	lsls	r3, r3, #12
 80129a0:	b29a      	uxth	r2, r3
 80129a2:	79fb      	ldrb	r3, [r7, #7]
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	4313      	orrs	r3, r2
 80129a8:	b29a      	uxth	r2, r3
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	68dc      	ldr	r4, [r3, #12]
 80129ae:	4610      	mov	r0, r2
 80129b0:	f7fa faea 	bl	800cf88 <lwip_htons>
 80129b4:	4603      	mov	r3, r0
 80129b6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	2200      	movs	r2, #0
 80129be:	749a      	strb	r2, [r3, #18]
 80129c0:	2200      	movs	r2, #0
 80129c2:	74da      	strb	r2, [r3, #19]
  return seg;
 80129c4:	693b      	ldr	r3, [r7, #16]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	371c      	adds	r7, #28
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd90      	pop	{r4, r7, pc}
 80129ce:	bf00      	nop
 80129d0:	0801ead0 	.word	0x0801ead0
 80129d4:	0801eb04 	.word	0x0801eb04
 80129d8:	0801eb24 	.word	0x0801eb24
 80129dc:	0801eb4c 	.word	0x0801eb4c
 80129e0:	0801eb70 	.word	0x0801eb70

080129e4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80129e4:	b590      	push	{r4, r7, lr}
 80129e6:	b08b      	sub	sp, #44	; 0x2c
 80129e8:	af02      	add	r7, sp, #8
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	460b      	mov	r3, r1
 80129ee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80129f0:	2300      	movs	r3, #0
 80129f2:	61fb      	str	r3, [r7, #28]
 80129f4:	2300      	movs	r3, #0
 80129f6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80129f8:	2300      	movs	r3, #0
 80129fa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d106      	bne.n	8012a10 <tcp_split_unsent_seg+0x2c>
 8012a02:	4b95      	ldr	r3, [pc, #596]	; (8012c58 <tcp_split_unsent_seg+0x274>)
 8012a04:	f240 324b 	movw	r2, #843	; 0x34b
 8012a08:	4994      	ldr	r1, [pc, #592]	; (8012c5c <tcp_split_unsent_seg+0x278>)
 8012a0a:	4895      	ldr	r0, [pc, #596]	; (8012c60 <tcp_split_unsent_seg+0x27c>)
 8012a0c:	f006 fff6 	bl	80199fc <iprintf>

  useg = pcb->unsent;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a14:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d102      	bne.n	8012a22 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a20:	e116      	b.n	8012c50 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012a22:	887b      	ldrh	r3, [r7, #2]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d109      	bne.n	8012a3c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012a28:	4b8b      	ldr	r3, [pc, #556]	; (8012c58 <tcp_split_unsent_seg+0x274>)
 8012a2a:	f240 3253 	movw	r2, #851	; 0x353
 8012a2e:	498d      	ldr	r1, [pc, #564]	; (8012c64 <tcp_split_unsent_seg+0x280>)
 8012a30:	488b      	ldr	r0, [pc, #556]	; (8012c60 <tcp_split_unsent_seg+0x27c>)
 8012a32:	f006 ffe3 	bl	80199fc <iprintf>
    return ERR_VAL;
 8012a36:	f06f 0305 	mvn.w	r3, #5
 8012a3a:	e109      	b.n	8012c50 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	891b      	ldrh	r3, [r3, #8]
 8012a40:	887a      	ldrh	r2, [r7, #2]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d301      	bcc.n	8012a4a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	e102      	b.n	8012c50 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a4e:	887a      	ldrh	r2, [r7, #2]
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d906      	bls.n	8012a62 <tcp_split_unsent_seg+0x7e>
 8012a54:	4b80      	ldr	r3, [pc, #512]	; (8012c58 <tcp_split_unsent_seg+0x274>)
 8012a56:	f240 325b 	movw	r2, #859	; 0x35b
 8012a5a:	4983      	ldr	r1, [pc, #524]	; (8012c68 <tcp_split_unsent_seg+0x284>)
 8012a5c:	4880      	ldr	r0, [pc, #512]	; (8012c60 <tcp_split_unsent_seg+0x27c>)
 8012a5e:	f006 ffcd 	bl	80199fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	891b      	ldrh	r3, [r3, #8]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d106      	bne.n	8012a78 <tcp_split_unsent_seg+0x94>
 8012a6a:	4b7b      	ldr	r3, [pc, #492]	; (8012c58 <tcp_split_unsent_seg+0x274>)
 8012a6c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012a70:	497e      	ldr	r1, [pc, #504]	; (8012c6c <tcp_split_unsent_seg+0x288>)
 8012a72:	487b      	ldr	r0, [pc, #492]	; (8012c60 <tcp_split_unsent_seg+0x27c>)
 8012a74:	f006 ffc2 	bl	80199fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	7a9b      	ldrb	r3, [r3, #10]
 8012a7c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012a7e:	7bfb      	ldrb	r3, [r7, #15]
 8012a80:	009b      	lsls	r3, r3, #2
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	f003 0304 	and.w	r3, r3, #4
 8012a88:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	891a      	ldrh	r2, [r3, #8]
 8012a8e:	887b      	ldrh	r3, [r7, #2]
 8012a90:	1ad3      	subs	r3, r2, r3
 8012a92:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012a94:	7bbb      	ldrb	r3, [r7, #14]
 8012a96:	b29a      	uxth	r2, r3
 8012a98:	89bb      	ldrh	r3, [r7, #12]
 8012a9a:	4413      	add	r3, r2
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	2036      	movs	r0, #54	; 0x36
 8012aa6:	f7fb fac5 	bl	800e034 <pbuf_alloc>
 8012aaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	f000 80b7 	beq.w	8012c22 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	891a      	ldrh	r2, [r3, #8]
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	891b      	ldrh	r3, [r3, #8]
 8012abe:	1ad3      	subs	r3, r2, r3
 8012ac0:	b29a      	uxth	r2, r3
 8012ac2:	887b      	ldrh	r3, [r7, #2]
 8012ac4:	4413      	add	r3, r2
 8012ac6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	6858      	ldr	r0, [r3, #4]
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	685a      	ldr	r2, [r3, #4]
 8012ad0:	7bbb      	ldrb	r3, [r7, #14]
 8012ad2:	18d1      	adds	r1, r2, r3
 8012ad4:	897b      	ldrh	r3, [r7, #10]
 8012ad6:	89ba      	ldrh	r2, [r7, #12]
 8012ad8:	f7fb ff92 	bl	800ea00 <pbuf_copy_partial>
 8012adc:	4603      	mov	r3, r0
 8012ade:	461a      	mov	r2, r3
 8012ae0:	89bb      	ldrh	r3, [r7, #12]
 8012ae2:	4293      	cmp	r3, r2
 8012ae4:	f040 809f 	bne.w	8012c26 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	899b      	ldrh	r3, [r3, #12]
 8012aee:	b29b      	uxth	r3, r3
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7fa fa49 	bl	800cf88 <lwip_htons>
 8012af6:	4603      	mov	r3, r0
 8012af8:	b2db      	uxtb	r3, r3
 8012afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012afe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012b00:	2300      	movs	r3, #0
 8012b02:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012b04:	7efb      	ldrb	r3, [r7, #27]
 8012b06:	f003 0308 	and.w	r3, r3, #8
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d007      	beq.n	8012b1e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012b0e:	7efb      	ldrb	r3, [r7, #27]
 8012b10:	f023 0308 	bic.w	r3, r3, #8
 8012b14:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012b16:	7ebb      	ldrb	r3, [r7, #26]
 8012b18:	f043 0308 	orr.w	r3, r3, #8
 8012b1c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012b1e:	7efb      	ldrb	r3, [r7, #27]
 8012b20:	f003 0301 	and.w	r3, r3, #1
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d007      	beq.n	8012b38 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012b28:	7efb      	ldrb	r3, [r7, #27]
 8012b2a:	f023 0301 	bic.w	r3, r3, #1
 8012b2e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012b30:	7ebb      	ldrb	r3, [r7, #26]
 8012b32:	f043 0301 	orr.w	r3, r3, #1
 8012b36:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	685b      	ldr	r3, [r3, #4]
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7fa fa37 	bl	800cfb2 <lwip_htonl>
 8012b44:	4602      	mov	r2, r0
 8012b46:	887b      	ldrh	r3, [r7, #2]
 8012b48:	18d1      	adds	r1, r2, r3
 8012b4a:	7eba      	ldrb	r2, [r7, #26]
 8012b4c:	7bfb      	ldrb	r3, [r7, #15]
 8012b4e:	9300      	str	r3, [sp, #0]
 8012b50:	460b      	mov	r3, r1
 8012b52:	6939      	ldr	r1, [r7, #16]
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7ff fea7 	bl	80128a8 <tcp_create_segment>
 8012b5a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d063      	beq.n	8012c2a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fb fdd2 	bl	800e710 <pbuf_clen>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	461a      	mov	r2, r3
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b76:	1a9b      	subs	r3, r3, r2
 8012b78:	b29a      	uxth	r2, r3
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	6858      	ldr	r0, [r3, #4]
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	891a      	ldrh	r2, [r3, #8]
 8012b8a:	89bb      	ldrh	r3, [r7, #12]
 8012b8c:	1ad3      	subs	r3, r2, r3
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	4619      	mov	r1, r3
 8012b92:	f7fb fba9 	bl	800e2e8 <pbuf_realloc>
  useg->len -= remainder;
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	891a      	ldrh	r2, [r3, #8]
 8012b9a:	89bb      	ldrh	r3, [r7, #12]
 8012b9c:	1ad3      	subs	r3, r2, r3
 8012b9e:	b29a      	uxth	r2, r3
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012ba4:	697b      	ldr	r3, [r7, #20]
 8012ba6:	68db      	ldr	r3, [r3, #12]
 8012ba8:	899b      	ldrh	r3, [r3, #12]
 8012baa:	b29c      	uxth	r4, r3
 8012bac:	7efb      	ldrb	r3, [r7, #27]
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7fa f9e9 	bl	800cf88 <lwip_htons>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	461a      	mov	r2, r3
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	68db      	ldr	r3, [r3, #12]
 8012bbe:	4322      	orrs	r2, r4
 8012bc0:	b292      	uxth	r2, r2
 8012bc2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fb fda1 	bl	800e710 <pbuf_clen>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bd8:	4413      	add	r3, r2
 8012bda:	b29a      	uxth	r2, r3
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7fb fd92 	bl	800e710 <pbuf_clen>
 8012bec:	4603      	mov	r3, r0
 8012bee:	461a      	mov	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bf6:	4413      	add	r3, r2
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	69fb      	ldr	r3, [r7, #28]
 8012c06:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	69fa      	ldr	r2, [r7, #28]
 8012c0c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012c0e:	69fb      	ldr	r3, [r7, #28]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d103      	bne.n	8012c1e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2200      	movs	r2, #0
 8012c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	e016      	b.n	8012c50 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012c22:	bf00      	nop
 8012c24:	e002      	b.n	8012c2c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c26:	bf00      	nop
 8012c28:	e000      	b.n	8012c2c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c2a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d006      	beq.n	8012c40 <tcp_split_unsent_seg+0x25c>
 8012c32:	4b09      	ldr	r3, [pc, #36]	; (8012c58 <tcp_split_unsent_seg+0x274>)
 8012c34:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012c38:	490d      	ldr	r1, [pc, #52]	; (8012c70 <tcp_split_unsent_seg+0x28c>)
 8012c3a:	4809      	ldr	r0, [pc, #36]	; (8012c60 <tcp_split_unsent_seg+0x27c>)
 8012c3c:	f006 fede 	bl	80199fc <iprintf>
  if (p != NULL) {
 8012c40:	693b      	ldr	r3, [r7, #16]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d002      	beq.n	8012c4c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012c46:	6938      	ldr	r0, [r7, #16]
 8012c48:	f7fb fcd4 	bl	800e5f4 <pbuf_free>
  }

  return ERR_MEM;
 8012c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3724      	adds	r7, #36	; 0x24
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd90      	pop	{r4, r7, pc}
 8012c58:	0801ead0 	.word	0x0801ead0
 8012c5c:	0801ee64 	.word	0x0801ee64
 8012c60:	0801eb24 	.word	0x0801eb24
 8012c64:	0801ee88 	.word	0x0801ee88
 8012c68:	0801eeac 	.word	0x0801eeac
 8012c6c:	0801eebc 	.word	0x0801eebc
 8012c70:	0801eecc 	.word	0x0801eecc

08012c74 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012c74:	b590      	push	{r4, r7, lr}
 8012c76:	b085      	sub	sp, #20
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d106      	bne.n	8012c90 <tcp_send_fin+0x1c>
 8012c82:	4b21      	ldr	r3, [pc, #132]	; (8012d08 <tcp_send_fin+0x94>)
 8012c84:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012c88:	4920      	ldr	r1, [pc, #128]	; (8012d0c <tcp_send_fin+0x98>)
 8012c8a:	4821      	ldr	r0, [pc, #132]	; (8012d10 <tcp_send_fin+0x9c>)
 8012c8c:	f006 feb6 	bl	80199fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d02e      	beq.n	8012cf6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c9c:	60fb      	str	r3, [r7, #12]
 8012c9e:	e002      	b.n	8012ca6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d1f8      	bne.n	8012ca0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	899b      	ldrh	r3, [r3, #12]
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7fa f966 	bl	800cf88 <lwip_htons>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	b2db      	uxtb	r3, r3
 8012cc0:	f003 0307 	and.w	r3, r3, #7
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d116      	bne.n	8012cf6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	68db      	ldr	r3, [r3, #12]
 8012ccc:	899b      	ldrh	r3, [r3, #12]
 8012cce:	b29c      	uxth	r4, r3
 8012cd0:	2001      	movs	r0, #1
 8012cd2:	f7fa f959 	bl	800cf88 <lwip_htons>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	461a      	mov	r2, r3
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	4322      	orrs	r2, r4
 8012ce0:	b292      	uxth	r2, r2
 8012ce2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	8b5b      	ldrh	r3, [r3, #26]
 8012ce8:	f043 0320 	orr.w	r3, r3, #32
 8012cec:	b29a      	uxth	r2, r3
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	e004      	b.n	8012d00 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012cf6:	2101      	movs	r1, #1
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f000 f80b 	bl	8012d14 <tcp_enqueue_flags>
 8012cfe:	4603      	mov	r3, r0
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3714      	adds	r7, #20
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd90      	pop	{r4, r7, pc}
 8012d08:	0801ead0 	.word	0x0801ead0
 8012d0c:	0801eed8 	.word	0x0801eed8
 8012d10:	0801eb24 	.word	0x0801eb24

08012d14 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b08a      	sub	sp, #40	; 0x28
 8012d18:	af02      	add	r7, sp, #8
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	460b      	mov	r3, r1
 8012d1e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012d20:	2300      	movs	r3, #0
 8012d22:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012d24:	2300      	movs	r3, #0
 8012d26:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012d28:	78fb      	ldrb	r3, [r7, #3]
 8012d2a:	f003 0303 	and.w	r3, r3, #3
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d106      	bne.n	8012d40 <tcp_enqueue_flags+0x2c>
 8012d32:	4b67      	ldr	r3, [pc, #412]	; (8012ed0 <tcp_enqueue_flags+0x1bc>)
 8012d34:	f240 4212 	movw	r2, #1042	; 0x412
 8012d38:	4966      	ldr	r1, [pc, #408]	; (8012ed4 <tcp_enqueue_flags+0x1c0>)
 8012d3a:	4867      	ldr	r0, [pc, #412]	; (8012ed8 <tcp_enqueue_flags+0x1c4>)
 8012d3c:	f006 fe5e 	bl	80199fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d106      	bne.n	8012d54 <tcp_enqueue_flags+0x40>
 8012d46:	4b62      	ldr	r3, [pc, #392]	; (8012ed0 <tcp_enqueue_flags+0x1bc>)
 8012d48:	f240 4213 	movw	r2, #1043	; 0x413
 8012d4c:	4963      	ldr	r1, [pc, #396]	; (8012edc <tcp_enqueue_flags+0x1c8>)
 8012d4e:	4862      	ldr	r0, [pc, #392]	; (8012ed8 <tcp_enqueue_flags+0x1c4>)
 8012d50:	f006 fe54 	bl	80199fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012d54:	78fb      	ldrb	r3, [r7, #3]
 8012d56:	f003 0302 	and.w	r3, r3, #2
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d001      	beq.n	8012d62 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012d5e:	2301      	movs	r3, #1
 8012d60:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012d62:	7ffb      	ldrb	r3, [r7, #31]
 8012d64:	009b      	lsls	r3, r3, #2
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	f003 0304 	and.w	r3, r3, #4
 8012d6c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d6e:	7dfb      	ldrb	r3, [r7, #23]
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d76:	4619      	mov	r1, r3
 8012d78:	2036      	movs	r0, #54	; 0x36
 8012d7a:	f7fb f95b 	bl	800e034 <pbuf_alloc>
 8012d7e:	6138      	str	r0, [r7, #16]
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d109      	bne.n	8012d9a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	8b5b      	ldrh	r3, [r3, #26]
 8012d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d8e:	b29a      	uxth	r2, r3
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012d94:	f04f 33ff 	mov.w	r3, #4294967295
 8012d98:	e095      	b.n	8012ec6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	895a      	ldrh	r2, [r3, #10]
 8012d9e:	7dfb      	ldrb	r3, [r7, #23]
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d206      	bcs.n	8012db4 <tcp_enqueue_flags+0xa0>
 8012da6:	4b4a      	ldr	r3, [pc, #296]	; (8012ed0 <tcp_enqueue_flags+0x1bc>)
 8012da8:	f240 423a 	movw	r2, #1082	; 0x43a
 8012dac:	494c      	ldr	r1, [pc, #304]	; (8012ee0 <tcp_enqueue_flags+0x1cc>)
 8012dae:	484a      	ldr	r0, [pc, #296]	; (8012ed8 <tcp_enqueue_flags+0x1c4>)
 8012db0:	f006 fe24 	bl	80199fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012db8:	78fa      	ldrb	r2, [r7, #3]
 8012dba:	7ffb      	ldrb	r3, [r7, #31]
 8012dbc:	9300      	str	r3, [sp, #0]
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	6939      	ldr	r1, [r7, #16]
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f7ff fd70 	bl	80128a8 <tcp_create_segment>
 8012dc8:	60f8      	str	r0, [r7, #12]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d109      	bne.n	8012de4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	8b5b      	ldrh	r3, [r3, #26]
 8012dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dd8:	b29a      	uxth	r2, r3
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012dde:	f04f 33ff 	mov.w	r3, #4294967295
 8012de2:	e070      	b.n	8012ec6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	68db      	ldr	r3, [r3, #12]
 8012de8:	f003 0303 	and.w	r3, r3, #3
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d006      	beq.n	8012dfe <tcp_enqueue_flags+0xea>
 8012df0:	4b37      	ldr	r3, [pc, #220]	; (8012ed0 <tcp_enqueue_flags+0x1bc>)
 8012df2:	f240 4242 	movw	r2, #1090	; 0x442
 8012df6:	493b      	ldr	r1, [pc, #236]	; (8012ee4 <tcp_enqueue_flags+0x1d0>)
 8012df8:	4837      	ldr	r0, [pc, #220]	; (8012ed8 <tcp_enqueue_flags+0x1c4>)
 8012dfa:	f006 fdff 	bl	80199fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	891b      	ldrh	r3, [r3, #8]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d006      	beq.n	8012e14 <tcp_enqueue_flags+0x100>
 8012e06:	4b32      	ldr	r3, [pc, #200]	; (8012ed0 <tcp_enqueue_flags+0x1bc>)
 8012e08:	f240 4243 	movw	r2, #1091	; 0x443
 8012e0c:	4936      	ldr	r1, [pc, #216]	; (8012ee8 <tcp_enqueue_flags+0x1d4>)
 8012e0e:	4832      	ldr	r0, [pc, #200]	; (8012ed8 <tcp_enqueue_flags+0x1c4>)
 8012e10:	f006 fdf4 	bl	80199fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d103      	bne.n	8012e24 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	68fa      	ldr	r2, [r7, #12]
 8012e20:	66da      	str	r2, [r3, #108]	; 0x6c
 8012e22:	e00d      	b.n	8012e40 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e28:	61bb      	str	r3, [r7, #24]
 8012e2a:	e002      	b.n	8012e32 <tcp_enqueue_flags+0x11e>
 8012e2c:	69bb      	ldr	r3, [r7, #24]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	61bb      	str	r3, [r7, #24]
 8012e32:	69bb      	ldr	r3, [r7, #24]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d1f8      	bne.n	8012e2c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012e3a:	69bb      	ldr	r3, [r7, #24]
 8012e3c:	68fa      	ldr	r2, [r7, #12]
 8012e3e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2200      	movs	r2, #0
 8012e44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012e48:	78fb      	ldrb	r3, [r7, #3]
 8012e4a:	f003 0302 	and.w	r3, r3, #2
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d104      	bne.n	8012e5c <tcp_enqueue_flags+0x148>
 8012e52:	78fb      	ldrb	r3, [r7, #3]
 8012e54:	f003 0301 	and.w	r3, r3, #1
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d004      	beq.n	8012e66 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e60:	1c5a      	adds	r2, r3, #1
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012e66:	78fb      	ldrb	r3, [r7, #3]
 8012e68:	f003 0301 	and.w	r3, r3, #1
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d006      	beq.n	8012e7e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	8b5b      	ldrh	r3, [r3, #26]
 8012e74:	f043 0320 	orr.w	r3, r3, #32
 8012e78:	b29a      	uxth	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	685b      	ldr	r3, [r3, #4]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fb fc44 	bl	800e710 <pbuf_clen>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e92:	4413      	add	r3, r2
 8012e94:	b29a      	uxth	r2, r3
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d00e      	beq.n	8012ec4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d10a      	bne.n	8012ec4 <tcp_enqueue_flags+0x1b0>
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d106      	bne.n	8012ec4 <tcp_enqueue_flags+0x1b0>
 8012eb6:	4b06      	ldr	r3, [pc, #24]	; (8012ed0 <tcp_enqueue_flags+0x1bc>)
 8012eb8:	f240 4266 	movw	r2, #1126	; 0x466
 8012ebc:	490b      	ldr	r1, [pc, #44]	; (8012eec <tcp_enqueue_flags+0x1d8>)
 8012ebe:	4806      	ldr	r0, [pc, #24]	; (8012ed8 <tcp_enqueue_flags+0x1c4>)
 8012ec0:	f006 fd9c 	bl	80199fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012ec4:	2300      	movs	r3, #0
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3720      	adds	r7, #32
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	0801ead0 	.word	0x0801ead0
 8012ed4:	0801eef4 	.word	0x0801eef4
 8012ed8:	0801eb24 	.word	0x0801eb24
 8012edc:	0801ef4c 	.word	0x0801ef4c
 8012ee0:	0801ef6c 	.word	0x0801ef6c
 8012ee4:	0801efa8 	.word	0x0801efa8
 8012ee8:	0801efc0 	.word	0x0801efc0
 8012eec:	0801efec 	.word	0x0801efec

08012ef0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012ef0:	b5b0      	push	{r4, r5, r7, lr}
 8012ef2:	b08a      	sub	sp, #40	; 0x28
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d106      	bne.n	8012f0c <tcp_output+0x1c>
 8012efe:	4ba0      	ldr	r3, [pc, #640]	; (8013180 <tcp_output+0x290>)
 8012f00:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012f04:	499f      	ldr	r1, [pc, #636]	; (8013184 <tcp_output+0x294>)
 8012f06:	48a0      	ldr	r0, [pc, #640]	; (8013188 <tcp_output+0x298>)
 8012f08:	f006 fd78 	bl	80199fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	7d1b      	ldrb	r3, [r3, #20]
 8012f10:	2b01      	cmp	r3, #1
 8012f12:	d106      	bne.n	8012f22 <tcp_output+0x32>
 8012f14:	4b9a      	ldr	r3, [pc, #616]	; (8013180 <tcp_output+0x290>)
 8012f16:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8012f1a:	499c      	ldr	r1, [pc, #624]	; (801318c <tcp_output+0x29c>)
 8012f1c:	489a      	ldr	r0, [pc, #616]	; (8013188 <tcp_output+0x298>)
 8012f1e:	f006 fd6d 	bl	80199fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012f22:	4b9b      	ldr	r3, [pc, #620]	; (8013190 <tcp_output+0x2a0>)
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d101      	bne.n	8012f30 <tcp_output+0x40>
    return ERR_OK;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	e1d2      	b.n	80132d6 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d203      	bcs.n	8012f48 <tcp_output+0x58>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f46:	e002      	b.n	8012f4e <tcp_output+0x5e>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f4e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f54:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d10b      	bne.n	8012f74 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	8b5b      	ldrh	r3, [r3, #26]
 8012f60:	f003 0302 	and.w	r3, r3, #2
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	f000 81a9 	beq.w	80132bc <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 fdd6 	bl	8013b1c <tcp_send_empty_ack>
 8012f70:	4603      	mov	r3, r0
 8012f72:	e1b0      	b.n	80132d6 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012f74:	6879      	ldr	r1, [r7, #4]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	3304      	adds	r3, #4
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f7ff fc77 	bl	8012870 <tcp_route>
 8012f82:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d102      	bne.n	8012f90 <tcp_output+0xa0>
    return ERR_RTE;
 8012f8a:	f06f 0303 	mvn.w	r3, #3
 8012f8e:	e1a2      	b.n	80132d6 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d003      	beq.n	8012f9e <tcp_output+0xae>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d111      	bne.n	8012fc2 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d002      	beq.n	8012faa <tcp_output+0xba>
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	3304      	adds	r3, #4
 8012fa8:	e000      	b.n	8012fac <tcp_output+0xbc>
 8012faa:	2300      	movs	r3, #0
 8012fac:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d102      	bne.n	8012fba <tcp_output+0xca>
      return ERR_RTE;
 8012fb4:	f06f 0303 	mvn.w	r3, #3
 8012fb8:	e18d      	b.n	80132d6 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7f9 fff2 	bl	800cfb2 <lwip_htonl>
 8012fce:	4602      	mov	r2, r0
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fd4:	1ad3      	subs	r3, r2, r3
 8012fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fd8:	8912      	ldrh	r2, [r2, #8]
 8012fda:	4413      	add	r3, r2
 8012fdc:	69ba      	ldr	r2, [r7, #24]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d227      	bcs.n	8013032 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012fe8:	461a      	mov	r2, r3
 8012fea:	69bb      	ldr	r3, [r7, #24]
 8012fec:	4293      	cmp	r3, r2
 8012fee:	d114      	bne.n	801301a <tcp_output+0x12a>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d110      	bne.n	801301a <tcp_output+0x12a>
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d10b      	bne.n	801301a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2200      	movs	r2, #0
 8013006:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2201      	movs	r2, #1
 801300e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2200      	movs	r2, #0
 8013016:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	8b5b      	ldrh	r3, [r3, #26]
 801301e:	f003 0302 	and.w	r3, r3, #2
 8013022:	2b00      	cmp	r3, #0
 8013024:	f000 814c 	beq.w	80132c0 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f000 fd77 	bl	8013b1c <tcp_send_empty_ack>
 801302e:	4603      	mov	r3, r0
 8013030:	e151      	b.n	80132d6 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2200      	movs	r2, #0
 8013036:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801303e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013040:	6a3b      	ldr	r3, [r7, #32]
 8013042:	2b00      	cmp	r3, #0
 8013044:	f000 811b 	beq.w	801327e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8013048:	e002      	b.n	8013050 <tcp_output+0x160>
 801304a:	6a3b      	ldr	r3, [r7, #32]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	623b      	str	r3, [r7, #32]
 8013050:	6a3b      	ldr	r3, [r7, #32]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d1f8      	bne.n	801304a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013058:	e111      	b.n	801327e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801305c:	68db      	ldr	r3, [r3, #12]
 801305e:	899b      	ldrh	r3, [r3, #12]
 8013060:	b29b      	uxth	r3, r3
 8013062:	4618      	mov	r0, r3
 8013064:	f7f9 ff90 	bl	800cf88 <lwip_htons>
 8013068:	4603      	mov	r3, r0
 801306a:	b2db      	uxtb	r3, r3
 801306c:	f003 0304 	and.w	r3, r3, #4
 8013070:	2b00      	cmp	r3, #0
 8013072:	d006      	beq.n	8013082 <tcp_output+0x192>
 8013074:	4b42      	ldr	r3, [pc, #264]	; (8013180 <tcp_output+0x290>)
 8013076:	f240 5237 	movw	r2, #1335	; 0x537
 801307a:	4946      	ldr	r1, [pc, #280]	; (8013194 <tcp_output+0x2a4>)
 801307c:	4842      	ldr	r0, [pc, #264]	; (8013188 <tcp_output+0x298>)
 801307e:	f006 fcbd 	bl	80199fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013086:	2b00      	cmp	r3, #0
 8013088:	d01f      	beq.n	80130ca <tcp_output+0x1da>
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	8b5b      	ldrh	r3, [r3, #26]
 801308e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013092:	2b00      	cmp	r3, #0
 8013094:	d119      	bne.n	80130ca <tcp_output+0x1da>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801309a:	2b00      	cmp	r3, #0
 801309c:	d00b      	beq.n	80130b6 <tcp_output+0x1c6>
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d110      	bne.n	80130ca <tcp_output+0x1da>
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130ac:	891a      	ldrh	r2, [r3, #8]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d209      	bcs.n	80130ca <tcp_output+0x1da>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d004      	beq.n	80130ca <tcp_output+0x1da>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130c6:	2b08      	cmp	r3, #8
 80130c8:	d901      	bls.n	80130ce <tcp_output+0x1de>
 80130ca:	2301      	movs	r3, #1
 80130cc:	e000      	b.n	80130d0 <tcp_output+0x1e0>
 80130ce:	2300      	movs	r3, #0
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d106      	bne.n	80130e2 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	8b5b      	ldrh	r3, [r3, #26]
 80130d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80130dc:	2b00      	cmp	r3, #0
 80130de:	f000 80e3 	beq.w	80132a8 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	7d1b      	ldrb	r3, [r3, #20]
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	d00d      	beq.n	8013106 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	68db      	ldr	r3, [r3, #12]
 80130ee:	899b      	ldrh	r3, [r3, #12]
 80130f0:	b29c      	uxth	r4, r3
 80130f2:	2010      	movs	r0, #16
 80130f4:	f7f9 ff48 	bl	800cf88 <lwip_htons>
 80130f8:	4603      	mov	r3, r0
 80130fa:	461a      	mov	r2, r3
 80130fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fe:	68db      	ldr	r3, [r3, #12]
 8013100:	4322      	orrs	r2, r4
 8013102:	b292      	uxth	r2, r2
 8013104:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013106:	697a      	ldr	r2, [r7, #20]
 8013108:	6879      	ldr	r1, [r7, #4]
 801310a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801310c:	f000 f908 	bl	8013320 <tcp_output_segment>
 8013110:	4603      	mov	r3, r0
 8013112:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d009      	beq.n	8013130 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	8b5b      	ldrh	r3, [r3, #26]
 8013120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013124:	b29a      	uxth	r2, r3
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	835a      	strh	r2, [r3, #26]
      return err;
 801312a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801312e:	e0d2      	b.n	80132d6 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	681a      	ldr	r2, [r3, #0]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	7d1b      	ldrb	r3, [r3, #20]
 801313c:	2b02      	cmp	r3, #2
 801313e:	d006      	beq.n	801314e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	8b5b      	ldrh	r3, [r3, #26]
 8013144:	f023 0303 	bic.w	r3, r3, #3
 8013148:	b29a      	uxth	r2, r3
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	685b      	ldr	r3, [r3, #4]
 8013154:	4618      	mov	r0, r3
 8013156:	f7f9 ff2c 	bl	800cfb2 <lwip_htonl>
 801315a:	4604      	mov	r4, r0
 801315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315e:	891b      	ldrh	r3, [r3, #8]
 8013160:	461d      	mov	r5, r3
 8013162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013164:	68db      	ldr	r3, [r3, #12]
 8013166:	899b      	ldrh	r3, [r3, #12]
 8013168:	b29b      	uxth	r3, r3
 801316a:	4618      	mov	r0, r3
 801316c:	f7f9 ff0c 	bl	800cf88 <lwip_htons>
 8013170:	4603      	mov	r3, r0
 8013172:	b2db      	uxtb	r3, r3
 8013174:	f003 0303 	and.w	r3, r3, #3
 8013178:	2b00      	cmp	r3, #0
 801317a:	d00d      	beq.n	8013198 <tcp_output+0x2a8>
 801317c:	2301      	movs	r3, #1
 801317e:	e00c      	b.n	801319a <tcp_output+0x2aa>
 8013180:	0801ead0 	.word	0x0801ead0
 8013184:	0801f014 	.word	0x0801f014
 8013188:	0801eb24 	.word	0x0801eb24
 801318c:	0801f02c 	.word	0x0801f02c
 8013190:	2000b4d4 	.word	0x2000b4d4
 8013194:	0801f054 	.word	0x0801f054
 8013198:	2300      	movs	r3, #0
 801319a:	442b      	add	r3, r5
 801319c:	4423      	add	r3, r4
 801319e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	1ad3      	subs	r3, r2, r3
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	da02      	bge.n	80131b2 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	68ba      	ldr	r2, [r7, #8]
 80131b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80131b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b4:	891b      	ldrh	r3, [r3, #8]
 80131b6:	461c      	mov	r4, r3
 80131b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	899b      	ldrh	r3, [r3, #12]
 80131be:	b29b      	uxth	r3, r3
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7f9 fee1 	bl	800cf88 <lwip_htons>
 80131c6:	4603      	mov	r3, r0
 80131c8:	b2db      	uxtb	r3, r3
 80131ca:	f003 0303 	and.w	r3, r3, #3
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d001      	beq.n	80131d6 <tcp_output+0x2e6>
 80131d2:	2301      	movs	r3, #1
 80131d4:	e000      	b.n	80131d8 <tcp_output+0x2e8>
 80131d6:	2300      	movs	r3, #0
 80131d8:	4423      	add	r3, r4
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d049      	beq.n	8013272 <tcp_output+0x382>
      seg->next = NULL;
 80131de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e0:	2200      	movs	r2, #0
 80131e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d105      	bne.n	80131f8 <tcp_output+0x308>
        pcb->unacked = seg;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80131f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f4:	623b      	str	r3, [r7, #32]
 80131f6:	e03f      	b.n	8013278 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80131f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	685b      	ldr	r3, [r3, #4]
 80131fe:	4618      	mov	r0, r3
 8013200:	f7f9 fed7 	bl	800cfb2 <lwip_htonl>
 8013204:	4604      	mov	r4, r0
 8013206:	6a3b      	ldr	r3, [r7, #32]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	4618      	mov	r0, r3
 801320e:	f7f9 fed0 	bl	800cfb2 <lwip_htonl>
 8013212:	4603      	mov	r3, r0
 8013214:	1ae3      	subs	r3, r4, r3
 8013216:	2b00      	cmp	r3, #0
 8013218:	da24      	bge.n	8013264 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	3370      	adds	r3, #112	; 0x70
 801321e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013220:	e002      	b.n	8013228 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d011      	beq.n	8013254 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	685b      	ldr	r3, [r3, #4]
 8013238:	4618      	mov	r0, r3
 801323a:	f7f9 feba 	bl	800cfb2 <lwip_htonl>
 801323e:	4604      	mov	r4, r0
 8013240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013242:	68db      	ldr	r3, [r3, #12]
 8013244:	685b      	ldr	r3, [r3, #4]
 8013246:	4618      	mov	r0, r3
 8013248:	f7f9 feb3 	bl	800cfb2 <lwip_htonl>
 801324c:	4603      	mov	r3, r0
 801324e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013250:	2b00      	cmp	r3, #0
 8013252:	dbe6      	blt.n	8013222 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8013254:	69fb      	ldr	r3, [r7, #28]
 8013256:	681a      	ldr	r2, [r3, #0]
 8013258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801325c:	69fb      	ldr	r3, [r7, #28]
 801325e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013260:	601a      	str	r2, [r3, #0]
 8013262:	e009      	b.n	8013278 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013264:	6a3b      	ldr	r3, [r7, #32]
 8013266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013268:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801326a:	6a3b      	ldr	r3, [r7, #32]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	623b      	str	r3, [r7, #32]
 8013270:	e002      	b.n	8013278 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013274:	f7fc fc42 	bl	800fafc <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801327c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013280:	2b00      	cmp	r3, #0
 8013282:	d012      	beq.n	80132aa <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013286:	68db      	ldr	r3, [r3, #12]
 8013288:	685b      	ldr	r3, [r3, #4]
 801328a:	4618      	mov	r0, r3
 801328c:	f7f9 fe91 	bl	800cfb2 <lwip_htonl>
 8013290:	4602      	mov	r2, r0
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013296:	1ad3      	subs	r3, r2, r3
 8013298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801329a:	8912      	ldrh	r2, [r2, #8]
 801329c:	4413      	add	r3, r2
  while (seg != NULL &&
 801329e:	69ba      	ldr	r2, [r7, #24]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	f4bf aeda 	bcs.w	801305a <tcp_output+0x16a>
 80132a6:	e000      	b.n	80132aa <tcp_output+0x3ba>
      break;
 80132a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d108      	bne.n	80132c4 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2200      	movs	r2, #0
 80132b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80132ba:	e004      	b.n	80132c6 <tcp_output+0x3d6>
    goto output_done;
 80132bc:	bf00      	nop
 80132be:	e002      	b.n	80132c6 <tcp_output+0x3d6>
    goto output_done;
 80132c0:	bf00      	nop
 80132c2:	e000      	b.n	80132c6 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80132c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	8b5b      	ldrh	r3, [r3, #26]
 80132ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80132ce:	b29a      	uxth	r2, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80132d4:	2300      	movs	r3, #0
}
 80132d6:	4618      	mov	r0, r3
 80132d8:	3728      	adds	r7, #40	; 0x28
 80132da:	46bd      	mov	sp, r7
 80132dc:	bdb0      	pop	{r4, r5, r7, pc}
 80132de:	bf00      	nop

080132e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d106      	bne.n	80132fc <tcp_output_segment_busy+0x1c>
 80132ee:	4b09      	ldr	r3, [pc, #36]	; (8013314 <tcp_output_segment_busy+0x34>)
 80132f0:	f240 529a 	movw	r2, #1434	; 0x59a
 80132f4:	4908      	ldr	r1, [pc, #32]	; (8013318 <tcp_output_segment_busy+0x38>)
 80132f6:	4809      	ldr	r0, [pc, #36]	; (801331c <tcp_output_segment_busy+0x3c>)
 80132f8:	f006 fb80 	bl	80199fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	7b9b      	ldrb	r3, [r3, #14]
 8013302:	2b01      	cmp	r3, #1
 8013304:	d001      	beq.n	801330a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013306:	2301      	movs	r3, #1
 8013308:	e000      	b.n	801330c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801330a:	2300      	movs	r3, #0
}
 801330c:	4618      	mov	r0, r3
 801330e:	3708      	adds	r7, #8
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	0801ead0 	.word	0x0801ead0
 8013318:	0801f06c 	.word	0x0801f06c
 801331c:	0801eb24 	.word	0x0801eb24

08013320 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013320:	b5b0      	push	{r4, r5, r7, lr}
 8013322:	b08c      	sub	sp, #48	; 0x30
 8013324:	af04      	add	r7, sp, #16
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d106      	bne.n	8013340 <tcp_output_segment+0x20>
 8013332:	4b64      	ldr	r3, [pc, #400]	; (80134c4 <tcp_output_segment+0x1a4>)
 8013334:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013338:	4963      	ldr	r1, [pc, #396]	; (80134c8 <tcp_output_segment+0x1a8>)
 801333a:	4864      	ldr	r0, [pc, #400]	; (80134cc <tcp_output_segment+0x1ac>)
 801333c:	f006 fb5e 	bl	80199fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d106      	bne.n	8013354 <tcp_output_segment+0x34>
 8013346:	4b5f      	ldr	r3, [pc, #380]	; (80134c4 <tcp_output_segment+0x1a4>)
 8013348:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801334c:	4960      	ldr	r1, [pc, #384]	; (80134d0 <tcp_output_segment+0x1b0>)
 801334e:	485f      	ldr	r0, [pc, #380]	; (80134cc <tcp_output_segment+0x1ac>)
 8013350:	f006 fb54 	bl	80199fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d106      	bne.n	8013368 <tcp_output_segment+0x48>
 801335a:	4b5a      	ldr	r3, [pc, #360]	; (80134c4 <tcp_output_segment+0x1a4>)
 801335c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013360:	495c      	ldr	r1, [pc, #368]	; (80134d4 <tcp_output_segment+0x1b4>)
 8013362:	485a      	ldr	r0, [pc, #360]	; (80134cc <tcp_output_segment+0x1ac>)
 8013364:	f006 fb4a 	bl	80199fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013368:	68f8      	ldr	r0, [r7, #12]
 801336a:	f7ff ffb9 	bl	80132e0 <tcp_output_segment_busy>
 801336e:	4603      	mov	r3, r0
 8013370:	2b00      	cmp	r3, #0
 8013372:	d001      	beq.n	8013378 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013374:	2300      	movs	r3, #0
 8013376:	e0a0      	b.n	80134ba <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	68dc      	ldr	r4, [r3, #12]
 8013380:	4610      	mov	r0, r2
 8013382:	f7f9 fe16 	bl	800cfb2 <lwip_htonl>
 8013386:	4603      	mov	r3, r0
 8013388:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	68dc      	ldr	r4, [r3, #12]
 8013392:	4610      	mov	r0, r2
 8013394:	f7f9 fdf8 	bl	800cf88 <lwip_htons>
 8013398:	4603      	mov	r3, r0
 801339a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133a0:	68ba      	ldr	r2, [r7, #8]
 80133a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80133a4:	441a      	add	r2, r3
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	3314      	adds	r3, #20
 80133b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	7a9b      	ldrb	r3, [r3, #10]
 80133b6:	f003 0301 	and.w	r3, r3, #1
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d015      	beq.n	80133ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	3304      	adds	r3, #4
 80133c2:	461a      	mov	r2, r3
 80133c4:	6879      	ldr	r1, [r7, #4]
 80133c6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80133ca:	f7fc fe8d 	bl	80100e8 <tcp_eff_send_mss_netif>
 80133ce:	4603      	mov	r3, r0
 80133d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80133d2:	8b7b      	ldrh	r3, [r7, #26]
 80133d4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80133d8:	4618      	mov	r0, r3
 80133da:	f7f9 fdea 	bl	800cfb2 <lwip_htonl>
 80133de:	4602      	mov	r2, r0
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	3304      	adds	r3, #4
 80133e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	da02      	bge.n	80133fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	2200      	movs	r2, #0
 80133f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d10c      	bne.n	801341c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013402:	4b35      	ldr	r3, [pc, #212]	; (80134d8 <tcp_output_segment+0x1b8>)
 8013404:	681a      	ldr	r2, [r3, #0]
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	685b      	ldr	r3, [r3, #4]
 8013410:	4618      	mov	r0, r3
 8013412:	f7f9 fdce 	bl	800cfb2 <lwip_htonl>
 8013416:	4602      	mov	r2, r0
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	461a      	mov	r2, r3
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	1ad3      	subs	r3, r2, r3
 801342a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	8959      	ldrh	r1, [r3, #10]
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	8b3a      	ldrh	r2, [r7, #24]
 8013438:	1a8a      	subs	r2, r1, r2
 801343a:	b292      	uxth	r2, r2
 801343c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	685b      	ldr	r3, [r3, #4]
 8013442:	8919      	ldrh	r1, [r3, #8]
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	8b3a      	ldrh	r2, [r7, #24]
 801344a:	1a8a      	subs	r2, r1, r2
 801344c:	b292      	uxth	r2, r2
 801344e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	68fa      	ldr	r2, [r7, #12]
 8013456:	68d2      	ldr	r2, [r2, #12]
 8013458:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	68db      	ldr	r3, [r3, #12]
 801345e:	2200      	movs	r2, #0
 8013460:	741a      	strb	r2, [r3, #16]
 8013462:	2200      	movs	r2, #0
 8013464:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	f103 0214 	add.w	r2, r3, #20
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	7a9b      	ldrb	r3, [r3, #10]
 8013472:	009b      	lsls	r3, r3, #2
 8013474:	f003 0304 	and.w	r3, r3, #4
 8013478:	4413      	add	r3, r2
 801347a:	69fa      	ldr	r2, [r7, #28]
 801347c:	429a      	cmp	r2, r3
 801347e:	d006      	beq.n	801348e <tcp_output_segment+0x16e>
 8013480:	4b10      	ldr	r3, [pc, #64]	; (80134c4 <tcp_output_segment+0x1a4>)
 8013482:	f240 621c 	movw	r2, #1564	; 0x61c
 8013486:	4915      	ldr	r1, [pc, #84]	; (80134dc <tcp_output_segment+0x1bc>)
 8013488:	4810      	ldr	r0, [pc, #64]	; (80134cc <tcp_output_segment+0x1ac>)
 801348a:	f006 fab7 	bl	80199fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6858      	ldr	r0, [r3, #4]
 8013492:	68b9      	ldr	r1, [r7, #8]
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	1d1c      	adds	r4, r3, #4
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	7add      	ldrb	r5, [r3, #11]
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	7a9b      	ldrb	r3, [r3, #10]
 80134a0:	687a      	ldr	r2, [r7, #4]
 80134a2:	9202      	str	r2, [sp, #8]
 80134a4:	2206      	movs	r2, #6
 80134a6:	9201      	str	r2, [sp, #4]
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	462b      	mov	r3, r5
 80134ac:	4622      	mov	r2, r4
 80134ae:	f004 fbe5 	bl	8017c7c <ip4_output_if>
 80134b2:	4603      	mov	r3, r0
 80134b4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80134b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	3720      	adds	r7, #32
 80134be:	46bd      	mov	sp, r7
 80134c0:	bdb0      	pop	{r4, r5, r7, pc}
 80134c2:	bf00      	nop
 80134c4:	0801ead0 	.word	0x0801ead0
 80134c8:	0801f094 	.word	0x0801f094
 80134cc:	0801eb24 	.word	0x0801eb24
 80134d0:	0801f0b4 	.word	0x0801f0b4
 80134d4:	0801f0d4 	.word	0x0801f0d4
 80134d8:	2000b4c4 	.word	0x2000b4c4
 80134dc:	0801f0f8 	.word	0x0801f0f8

080134e0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80134e0:	b5b0      	push	{r4, r5, r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d106      	bne.n	80134fc <tcp_rexmit_rto_prepare+0x1c>
 80134ee:	4b31      	ldr	r3, [pc, #196]	; (80135b4 <tcp_rexmit_rto_prepare+0xd4>)
 80134f0:	f240 6263 	movw	r2, #1635	; 0x663
 80134f4:	4930      	ldr	r1, [pc, #192]	; (80135b8 <tcp_rexmit_rto_prepare+0xd8>)
 80134f6:	4831      	ldr	r0, [pc, #196]	; (80135bc <tcp_rexmit_rto_prepare+0xdc>)
 80134f8:	f006 fa80 	bl	80199fc <iprintf>

  if (pcb->unacked == NULL) {
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013500:	2b00      	cmp	r3, #0
 8013502:	d102      	bne.n	801350a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013504:	f06f 0305 	mvn.w	r3, #5
 8013508:	e050      	b.n	80135ac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801350e:	60fb      	str	r3, [r7, #12]
 8013510:	e00b      	b.n	801352a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f7ff fee4 	bl	80132e0 <tcp_output_segment_busy>
 8013518:	4603      	mov	r3, r0
 801351a:	2b00      	cmp	r3, #0
 801351c:	d002      	beq.n	8013524 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801351e:	f06f 0305 	mvn.w	r3, #5
 8013522:	e043      	b.n	80135ac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	60fb      	str	r3, [r7, #12]
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d1ef      	bne.n	8013512 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013532:	68f8      	ldr	r0, [r7, #12]
 8013534:	f7ff fed4 	bl	80132e0 <tcp_output_segment_busy>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d002      	beq.n	8013544 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801353e:	f06f 0305 	mvn.w	r3, #5
 8013542:	e033      	b.n	80135ac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2200      	movs	r2, #0
 8013558:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	8b5b      	ldrh	r3, [r3, #26]
 801355e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013562:	b29a      	uxth	r2, r3
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	68db      	ldr	r3, [r3, #12]
 801356c:	685b      	ldr	r3, [r3, #4]
 801356e:	4618      	mov	r0, r3
 8013570:	f7f9 fd1f 	bl	800cfb2 <lwip_htonl>
 8013574:	4604      	mov	r4, r0
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	891b      	ldrh	r3, [r3, #8]
 801357a:	461d      	mov	r5, r3
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	68db      	ldr	r3, [r3, #12]
 8013580:	899b      	ldrh	r3, [r3, #12]
 8013582:	b29b      	uxth	r3, r3
 8013584:	4618      	mov	r0, r3
 8013586:	f7f9 fcff 	bl	800cf88 <lwip_htons>
 801358a:	4603      	mov	r3, r0
 801358c:	b2db      	uxtb	r3, r3
 801358e:	f003 0303 	and.w	r3, r3, #3
 8013592:	2b00      	cmp	r3, #0
 8013594:	d001      	beq.n	801359a <tcp_rexmit_rto_prepare+0xba>
 8013596:	2301      	movs	r3, #1
 8013598:	e000      	b.n	801359c <tcp_rexmit_rto_prepare+0xbc>
 801359a:	2300      	movs	r3, #0
 801359c:	442b      	add	r3, r5
 801359e:	18e2      	adds	r2, r4, r3
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2200      	movs	r2, #0
 80135a8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80135aa:	2300      	movs	r3, #0
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3710      	adds	r7, #16
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bdb0      	pop	{r4, r5, r7, pc}
 80135b4:	0801ead0 	.word	0x0801ead0
 80135b8:	0801f10c 	.word	0x0801f10c
 80135bc:	0801eb24 	.word	0x0801eb24

080135c0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d106      	bne.n	80135dc <tcp_rexmit_rto_commit+0x1c>
 80135ce:	4b0d      	ldr	r3, [pc, #52]	; (8013604 <tcp_rexmit_rto_commit+0x44>)
 80135d0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80135d4:	490c      	ldr	r1, [pc, #48]	; (8013608 <tcp_rexmit_rto_commit+0x48>)
 80135d6:	480d      	ldr	r0, [pc, #52]	; (801360c <tcp_rexmit_rto_commit+0x4c>)
 80135d8:	f006 fa10 	bl	80199fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80135e2:	2bff      	cmp	r3, #255	; 0xff
 80135e4:	d007      	beq.n	80135f6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80135ec:	3301      	adds	r3, #1
 80135ee:	b2da      	uxtb	r2, r3
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f7ff fc7a 	bl	8012ef0 <tcp_output>
}
 80135fc:	bf00      	nop
 80135fe:	3708      	adds	r7, #8
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}
 8013604:	0801ead0 	.word	0x0801ead0
 8013608:	0801f130 	.word	0x0801f130
 801360c:	0801eb24 	.word	0x0801eb24

08013610 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d106      	bne.n	801362c <tcp_rexmit_rto+0x1c>
 801361e:	4b0a      	ldr	r3, [pc, #40]	; (8013648 <tcp_rexmit_rto+0x38>)
 8013620:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013624:	4909      	ldr	r1, [pc, #36]	; (801364c <tcp_rexmit_rto+0x3c>)
 8013626:	480a      	ldr	r0, [pc, #40]	; (8013650 <tcp_rexmit_rto+0x40>)
 8013628:	f006 f9e8 	bl	80199fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f7ff ff57 	bl	80134e0 <tcp_rexmit_rto_prepare>
 8013632:	4603      	mov	r3, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d102      	bne.n	801363e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f7ff ffc1 	bl	80135c0 <tcp_rexmit_rto_commit>
  }
}
 801363e:	bf00      	nop
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	0801ead0 	.word	0x0801ead0
 801364c:	0801f154 	.word	0x0801f154
 8013650:	0801eb24 	.word	0x0801eb24

08013654 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013654:	b590      	push	{r4, r7, lr}
 8013656:	b085      	sub	sp, #20
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d106      	bne.n	8013670 <tcp_rexmit+0x1c>
 8013662:	4b2f      	ldr	r3, [pc, #188]	; (8013720 <tcp_rexmit+0xcc>)
 8013664:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013668:	492e      	ldr	r1, [pc, #184]	; (8013724 <tcp_rexmit+0xd0>)
 801366a:	482f      	ldr	r0, [pc, #188]	; (8013728 <tcp_rexmit+0xd4>)
 801366c:	f006 f9c6 	bl	80199fc <iprintf>

  if (pcb->unacked == NULL) {
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013674:	2b00      	cmp	r3, #0
 8013676:	d102      	bne.n	801367e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013678:	f06f 0305 	mvn.w	r3, #5
 801367c:	e04c      	b.n	8013718 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013682:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013684:	68b8      	ldr	r0, [r7, #8]
 8013686:	f7ff fe2b 	bl	80132e0 <tcp_output_segment_busy>
 801368a:	4603      	mov	r3, r0
 801368c:	2b00      	cmp	r3, #0
 801368e:	d002      	beq.n	8013696 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013690:	f06f 0305 	mvn.w	r3, #5
 8013694:	e040      	b.n	8013718 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	681a      	ldr	r2, [r3, #0]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	336c      	adds	r3, #108	; 0x6c
 80136a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80136a4:	e002      	b.n	80136ac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d011      	beq.n	80136d8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	68db      	ldr	r3, [r3, #12]
 80136ba:	685b      	ldr	r3, [r3, #4]
 80136bc:	4618      	mov	r0, r3
 80136be:	f7f9 fc78 	bl	800cfb2 <lwip_htonl>
 80136c2:	4604      	mov	r4, r0
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7f9 fc71 	bl	800cfb2 <lwip_htonl>
 80136d0:	4603      	mov	r3, r0
 80136d2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	dbe6      	blt.n	80136a6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	68ba      	ldr	r2, [r7, #8]
 80136e4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d103      	bne.n	80136f6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2200      	movs	r2, #0
 80136f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136fc:	2bff      	cmp	r3, #255	; 0xff
 80136fe:	d007      	beq.n	8013710 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013706:	3301      	adds	r3, #1
 8013708:	b2da      	uxtb	r2, r3
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2200      	movs	r2, #0
 8013714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013716:	2300      	movs	r3, #0
}
 8013718:	4618      	mov	r0, r3
 801371a:	3714      	adds	r7, #20
 801371c:	46bd      	mov	sp, r7
 801371e:	bd90      	pop	{r4, r7, pc}
 8013720:	0801ead0 	.word	0x0801ead0
 8013724:	0801f170 	.word	0x0801f170
 8013728:	0801eb24 	.word	0x0801eb24

0801372c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d106      	bne.n	8013748 <tcp_rexmit_fast+0x1c>
 801373a:	4b2e      	ldr	r3, [pc, #184]	; (80137f4 <tcp_rexmit_fast+0xc8>)
 801373c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013740:	492d      	ldr	r1, [pc, #180]	; (80137f8 <tcp_rexmit_fast+0xcc>)
 8013742:	482e      	ldr	r0, [pc, #184]	; (80137fc <tcp_rexmit_fast+0xd0>)
 8013744:	f006 f95a 	bl	80199fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801374c:	2b00      	cmp	r3, #0
 801374e:	d04d      	beq.n	80137ec <tcp_rexmit_fast+0xc0>
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	8b5b      	ldrh	r3, [r3, #26]
 8013754:	f003 0304 	and.w	r3, r3, #4
 8013758:	2b00      	cmp	r3, #0
 801375a:	d147      	bne.n	80137ec <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f7ff ff79 	bl	8013654 <tcp_rexmit>
 8013762:	4603      	mov	r3, r0
 8013764:	2b00      	cmp	r3, #0
 8013766:	d141      	bne.n	80137ec <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013774:	429a      	cmp	r2, r3
 8013776:	d207      	bcs.n	8013788 <tcp_rexmit_fast+0x5c>
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801377e:	0fda      	lsrs	r2, r3, #31
 8013780:	4413      	add	r3, r2
 8013782:	105b      	asrs	r3, r3, #1
 8013784:	b29b      	uxth	r3, r3
 8013786:	e006      	b.n	8013796 <tcp_rexmit_fast+0x6a>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801378e:	0fda      	lsrs	r2, r3, #31
 8013790:	4413      	add	r3, r2
 8013792:	105b      	asrs	r3, r3, #1
 8013794:	b29b      	uxth	r3, r3
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80137a2:	461a      	mov	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137a8:	005b      	lsls	r3, r3, #1
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d206      	bcs.n	80137bc <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137b2:	005b      	lsls	r3, r3, #1
 80137b4:	b29a      	uxth	r2, r3
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137c6:	4619      	mov	r1, r3
 80137c8:	0049      	lsls	r1, r1, #1
 80137ca:	440b      	add	r3, r1
 80137cc:	b29b      	uxth	r3, r3
 80137ce:	4413      	add	r3, r2
 80137d0:	b29a      	uxth	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	8b5b      	ldrh	r3, [r3, #26]
 80137dc:	f043 0304 	orr.w	r3, r3, #4
 80137e0:	b29a      	uxth	r2, r3
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2200      	movs	r2, #0
 80137ea:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80137ec:	bf00      	nop
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	0801ead0 	.word	0x0801ead0
 80137f8:	0801f188 	.word	0x0801f188
 80137fc:	0801eb24 	.word	0x0801eb24

08013800 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b086      	sub	sp, #24
 8013804:	af00      	add	r7, sp, #0
 8013806:	60f8      	str	r0, [r7, #12]
 8013808:	607b      	str	r3, [r7, #4]
 801380a:	460b      	mov	r3, r1
 801380c:	817b      	strh	r3, [r7, #10]
 801380e:	4613      	mov	r3, r2
 8013810:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013812:	897a      	ldrh	r2, [r7, #10]
 8013814:	893b      	ldrh	r3, [r7, #8]
 8013816:	4413      	add	r3, r2
 8013818:	b29b      	uxth	r3, r3
 801381a:	3314      	adds	r3, #20
 801381c:	b29b      	uxth	r3, r3
 801381e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013822:	4619      	mov	r1, r3
 8013824:	2022      	movs	r0, #34	; 0x22
 8013826:	f7fa fc05 	bl	800e034 <pbuf_alloc>
 801382a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d04e      	beq.n	80138d0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	895b      	ldrh	r3, [r3, #10]
 8013836:	461a      	mov	r2, r3
 8013838:	897b      	ldrh	r3, [r7, #10]
 801383a:	3314      	adds	r3, #20
 801383c:	429a      	cmp	r2, r3
 801383e:	da06      	bge.n	801384e <tcp_output_alloc_header_common+0x4e>
 8013840:	4b26      	ldr	r3, [pc, #152]	; (80138dc <tcp_output_alloc_header_common+0xdc>)
 8013842:	f240 7224 	movw	r2, #1828	; 0x724
 8013846:	4926      	ldr	r1, [pc, #152]	; (80138e0 <tcp_output_alloc_header_common+0xe0>)
 8013848:	4826      	ldr	r0, [pc, #152]	; (80138e4 <tcp_output_alloc_header_common+0xe4>)
 801384a:	f006 f8d7 	bl	80199fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013854:	8c3b      	ldrh	r3, [r7, #32]
 8013856:	4618      	mov	r0, r3
 8013858:	f7f9 fb96 	bl	800cf88 <lwip_htons>
 801385c:	4603      	mov	r3, r0
 801385e:	461a      	mov	r2, r3
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013866:	4618      	mov	r0, r3
 8013868:	f7f9 fb8e 	bl	800cf88 <lwip_htons>
 801386c:	4603      	mov	r3, r0
 801386e:	461a      	mov	r2, r3
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013874:	693b      	ldr	r3, [r7, #16]
 8013876:	687a      	ldr	r2, [r7, #4]
 8013878:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801387a:	68f8      	ldr	r0, [r7, #12]
 801387c:	f7f9 fb99 	bl	800cfb2 <lwip_htonl>
 8013880:	4602      	mov	r2, r0
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013886:	897b      	ldrh	r3, [r7, #10]
 8013888:	089b      	lsrs	r3, r3, #2
 801388a:	b29b      	uxth	r3, r3
 801388c:	3305      	adds	r3, #5
 801388e:	b29b      	uxth	r3, r3
 8013890:	031b      	lsls	r3, r3, #12
 8013892:	b29a      	uxth	r2, r3
 8013894:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013898:	b29b      	uxth	r3, r3
 801389a:	4313      	orrs	r3, r2
 801389c:	b29b      	uxth	r3, r3
 801389e:	4618      	mov	r0, r3
 80138a0:	f7f9 fb72 	bl	800cf88 <lwip_htons>
 80138a4:	4603      	mov	r3, r0
 80138a6:	461a      	mov	r2, r3
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80138ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7f9 fb6a 	bl	800cf88 <lwip_htons>
 80138b4:	4603      	mov	r3, r0
 80138b6:	461a      	mov	r2, r3
 80138b8:	693b      	ldr	r3, [r7, #16]
 80138ba:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	2200      	movs	r2, #0
 80138c0:	741a      	strb	r2, [r3, #16]
 80138c2:	2200      	movs	r2, #0
 80138c4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	2200      	movs	r2, #0
 80138ca:	749a      	strb	r2, [r3, #18]
 80138cc:	2200      	movs	r2, #0
 80138ce:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80138d0:	697b      	ldr	r3, [r7, #20]
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3718      	adds	r7, #24
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}
 80138da:	bf00      	nop
 80138dc:	0801ead0 	.word	0x0801ead0
 80138e0:	0801f1a8 	.word	0x0801f1a8
 80138e4:	0801eb24 	.word	0x0801eb24

080138e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80138e8:	b5b0      	push	{r4, r5, r7, lr}
 80138ea:	b08a      	sub	sp, #40	; 0x28
 80138ec:	af04      	add	r7, sp, #16
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	607b      	str	r3, [r7, #4]
 80138f2:	460b      	mov	r3, r1
 80138f4:	817b      	strh	r3, [r7, #10]
 80138f6:	4613      	mov	r3, r2
 80138f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d106      	bne.n	801390e <tcp_output_alloc_header+0x26>
 8013900:	4b15      	ldr	r3, [pc, #84]	; (8013958 <tcp_output_alloc_header+0x70>)
 8013902:	f240 7242 	movw	r2, #1858	; 0x742
 8013906:	4915      	ldr	r1, [pc, #84]	; (801395c <tcp_output_alloc_header+0x74>)
 8013908:	4815      	ldr	r0, [pc, #84]	; (8013960 <tcp_output_alloc_header+0x78>)
 801390a:	f006 f877 	bl	80199fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	8adb      	ldrh	r3, [r3, #22]
 8013916:	68fa      	ldr	r2, [r7, #12]
 8013918:	8b12      	ldrh	r2, [r2, #24]
 801391a:	68f9      	ldr	r1, [r7, #12]
 801391c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801391e:	893d      	ldrh	r5, [r7, #8]
 8013920:	897c      	ldrh	r4, [r7, #10]
 8013922:	9103      	str	r1, [sp, #12]
 8013924:	2110      	movs	r1, #16
 8013926:	9102      	str	r1, [sp, #8]
 8013928:	9201      	str	r2, [sp, #4]
 801392a:	9300      	str	r3, [sp, #0]
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	462a      	mov	r2, r5
 8013930:	4621      	mov	r1, r4
 8013932:	f7ff ff65 	bl	8013800 <tcp_output_alloc_header_common>
 8013936:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d006      	beq.n	801394c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013942:	68fa      	ldr	r2, [r7, #12]
 8013944:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013946:	441a      	add	r2, r3
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801394c:	697b      	ldr	r3, [r7, #20]
}
 801394e:	4618      	mov	r0, r3
 8013950:	3718      	adds	r7, #24
 8013952:	46bd      	mov	sp, r7
 8013954:	bdb0      	pop	{r4, r5, r7, pc}
 8013956:	bf00      	nop
 8013958:	0801ead0 	.word	0x0801ead0
 801395c:	0801f1d8 	.word	0x0801f1d8
 8013960:	0801eb24 	.word	0x0801eb24

08013964 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b088      	sub	sp, #32
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	4611      	mov	r1, r2
 8013970:	461a      	mov	r2, r3
 8013972:	460b      	mov	r3, r1
 8013974:	71fb      	strb	r3, [r7, #7]
 8013976:	4613      	mov	r3, r2
 8013978:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801397a:	2300      	movs	r3, #0
 801397c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d106      	bne.n	8013992 <tcp_output_fill_options+0x2e>
 8013984:	4b13      	ldr	r3, [pc, #76]	; (80139d4 <tcp_output_fill_options+0x70>)
 8013986:	f240 7256 	movw	r2, #1878	; 0x756
 801398a:	4913      	ldr	r1, [pc, #76]	; (80139d8 <tcp_output_fill_options+0x74>)
 801398c:	4813      	ldr	r0, [pc, #76]	; (80139dc <tcp_output_fill_options+0x78>)
 801398e:	f006 f835 	bl	80199fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013998:	69bb      	ldr	r3, [r7, #24]
 801399a:	3314      	adds	r3, #20
 801399c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801399e:	69bb      	ldr	r3, [r7, #24]
 80139a0:	f103 0214 	add.w	r2, r3, #20
 80139a4:	8bfb      	ldrh	r3, [r7, #30]
 80139a6:	009b      	lsls	r3, r3, #2
 80139a8:	4619      	mov	r1, r3
 80139aa:	79fb      	ldrb	r3, [r7, #7]
 80139ac:	009b      	lsls	r3, r3, #2
 80139ae:	f003 0304 	and.w	r3, r3, #4
 80139b2:	440b      	add	r3, r1
 80139b4:	4413      	add	r3, r2
 80139b6:	697a      	ldr	r2, [r7, #20]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d006      	beq.n	80139ca <tcp_output_fill_options+0x66>
 80139bc:	4b05      	ldr	r3, [pc, #20]	; (80139d4 <tcp_output_fill_options+0x70>)
 80139be:	f240 7275 	movw	r2, #1909	; 0x775
 80139c2:	4907      	ldr	r1, [pc, #28]	; (80139e0 <tcp_output_fill_options+0x7c>)
 80139c4:	4805      	ldr	r0, [pc, #20]	; (80139dc <tcp_output_fill_options+0x78>)
 80139c6:	f006 f819 	bl	80199fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80139ca:	bf00      	nop
 80139cc:	3720      	adds	r7, #32
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop
 80139d4:	0801ead0 	.word	0x0801ead0
 80139d8:	0801f200 	.word	0x0801f200
 80139dc:	0801eb24 	.word	0x0801eb24
 80139e0:	0801f0f8 	.word	0x0801f0f8

080139e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b08a      	sub	sp, #40	; 0x28
 80139e8:	af04      	add	r7, sp, #16
 80139ea:	60f8      	str	r0, [r7, #12]
 80139ec:	60b9      	str	r1, [r7, #8]
 80139ee:	607a      	str	r2, [r7, #4]
 80139f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d106      	bne.n	8013a06 <tcp_output_control_segment+0x22>
 80139f8:	4b1c      	ldr	r3, [pc, #112]	; (8013a6c <tcp_output_control_segment+0x88>)
 80139fa:	f240 7287 	movw	r2, #1927	; 0x787
 80139fe:	491c      	ldr	r1, [pc, #112]	; (8013a70 <tcp_output_control_segment+0x8c>)
 8013a00:	481c      	ldr	r0, [pc, #112]	; (8013a74 <tcp_output_control_segment+0x90>)
 8013a02:	f005 fffb 	bl	80199fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013a06:	683a      	ldr	r2, [r7, #0]
 8013a08:	6879      	ldr	r1, [r7, #4]
 8013a0a:	68f8      	ldr	r0, [r7, #12]
 8013a0c:	f7fe ff30 	bl	8012870 <tcp_route>
 8013a10:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d102      	bne.n	8013a1e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013a18:	23fc      	movs	r3, #252	; 0xfc
 8013a1a:	75fb      	strb	r3, [r7, #23]
 8013a1c:	e01c      	b.n	8013a58 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d006      	beq.n	8013a32 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	7adb      	ldrb	r3, [r3, #11]
 8013a28:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	7a9b      	ldrb	r3, [r3, #10]
 8013a2e:	757b      	strb	r3, [r7, #21]
 8013a30:	e003      	b.n	8013a3a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013a32:	23ff      	movs	r3, #255	; 0xff
 8013a34:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013a36:	2300      	movs	r3, #0
 8013a38:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013a3a:	7dba      	ldrb	r2, [r7, #22]
 8013a3c:	693b      	ldr	r3, [r7, #16]
 8013a3e:	9302      	str	r3, [sp, #8]
 8013a40:	2306      	movs	r3, #6
 8013a42:	9301      	str	r3, [sp, #4]
 8013a44:	7d7b      	ldrb	r3, [r7, #21]
 8013a46:	9300      	str	r3, [sp, #0]
 8013a48:	4613      	mov	r3, r2
 8013a4a:	683a      	ldr	r2, [r7, #0]
 8013a4c:	6879      	ldr	r1, [r7, #4]
 8013a4e:	68b8      	ldr	r0, [r7, #8]
 8013a50:	f004 f914 	bl	8017c7c <ip4_output_if>
 8013a54:	4603      	mov	r3, r0
 8013a56:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013a58:	68b8      	ldr	r0, [r7, #8]
 8013a5a:	f7fa fdcb 	bl	800e5f4 <pbuf_free>
  return err;
 8013a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3718      	adds	r7, #24
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	0801ead0 	.word	0x0801ead0
 8013a70:	0801f228 	.word	0x0801f228
 8013a74:	0801eb24 	.word	0x0801eb24

08013a78 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013a78:	b590      	push	{r4, r7, lr}
 8013a7a:	b08b      	sub	sp, #44	; 0x2c
 8013a7c:	af04      	add	r7, sp, #16
 8013a7e:	60f8      	str	r0, [r7, #12]
 8013a80:	60b9      	str	r1, [r7, #8]
 8013a82:	607a      	str	r2, [r7, #4]
 8013a84:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d106      	bne.n	8013a9a <tcp_rst+0x22>
 8013a8c:	4b1f      	ldr	r3, [pc, #124]	; (8013b0c <tcp_rst+0x94>)
 8013a8e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013a92:	491f      	ldr	r1, [pc, #124]	; (8013b10 <tcp_rst+0x98>)
 8013a94:	481f      	ldr	r0, [pc, #124]	; (8013b14 <tcp_rst+0x9c>)
 8013a96:	f005 ffb1 	bl	80199fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d106      	bne.n	8013aae <tcp_rst+0x36>
 8013aa0:	4b1a      	ldr	r3, [pc, #104]	; (8013b0c <tcp_rst+0x94>)
 8013aa2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013aa6:	491c      	ldr	r1, [pc, #112]	; (8013b18 <tcp_rst+0xa0>)
 8013aa8:	481a      	ldr	r0, [pc, #104]	; (8013b14 <tcp_rst+0x9c>)
 8013aaa:	f005 ffa7 	bl	80199fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013aae:	2300      	movs	r3, #0
 8013ab0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013ab2:	f246 0308 	movw	r3, #24584	; 0x6008
 8013ab6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013ab8:	7dfb      	ldrb	r3, [r7, #23]
 8013aba:	b29c      	uxth	r4, r3
 8013abc:	68b8      	ldr	r0, [r7, #8]
 8013abe:	f7f9 fa78 	bl	800cfb2 <lwip_htonl>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	8abb      	ldrh	r3, [r7, #20]
 8013ac6:	9303      	str	r3, [sp, #12]
 8013ac8:	2314      	movs	r3, #20
 8013aca:	9302      	str	r3, [sp, #8]
 8013acc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013ace:	9301      	str	r3, [sp, #4]
 8013ad0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013ad2:	9300      	str	r3, [sp, #0]
 8013ad4:	4613      	mov	r3, r2
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	4621      	mov	r1, r4
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f7ff fe90 	bl	8013800 <tcp_output_alloc_header_common>
 8013ae0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013ae2:	693b      	ldr	r3, [r7, #16]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d00c      	beq.n	8013b02 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013ae8:	7dfb      	ldrb	r3, [r7, #23]
 8013aea:	2200      	movs	r2, #0
 8013aec:	6939      	ldr	r1, [r7, #16]
 8013aee:	68f8      	ldr	r0, [r7, #12]
 8013af0:	f7ff ff38 	bl	8013964 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af6:	683a      	ldr	r2, [r7, #0]
 8013af8:	6939      	ldr	r1, [r7, #16]
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	f7ff ff72 	bl	80139e4 <tcp_output_control_segment>
 8013b00:	e000      	b.n	8013b04 <tcp_rst+0x8c>
    return;
 8013b02:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013b04:	371c      	adds	r7, #28
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd90      	pop	{r4, r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	0801ead0 	.word	0x0801ead0
 8013b10:	0801f254 	.word	0x0801f254
 8013b14:	0801eb24 	.word	0x0801eb24
 8013b18:	0801f270 	.word	0x0801f270

08013b1c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013b1c:	b590      	push	{r4, r7, lr}
 8013b1e:	b087      	sub	sp, #28
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013b24:	2300      	movs	r3, #0
 8013b26:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d106      	bne.n	8013b40 <tcp_send_empty_ack+0x24>
 8013b32:	4b28      	ldr	r3, [pc, #160]	; (8013bd4 <tcp_send_empty_ack+0xb8>)
 8013b34:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013b38:	4927      	ldr	r1, [pc, #156]	; (8013bd8 <tcp_send_empty_ack+0xbc>)
 8013b3a:	4828      	ldr	r0, [pc, #160]	; (8013bdc <tcp_send_empty_ack+0xc0>)
 8013b3c:	f005 ff5e 	bl	80199fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b40:	7dfb      	ldrb	r3, [r7, #23]
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	b2db      	uxtb	r3, r3
 8013b46:	f003 0304 	and.w	r3, r3, #4
 8013b4a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013b4c:	7d7b      	ldrb	r3, [r7, #21]
 8013b4e:	b29c      	uxth	r4, r3
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7f9 fa2c 	bl	800cfb2 <lwip_htonl>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	4621      	mov	r1, r4
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f7ff fec1 	bl	80138e8 <tcp_output_alloc_header>
 8013b66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d109      	bne.n	8013b82 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	8b5b      	ldrh	r3, [r3, #26]
 8013b72:	f043 0303 	orr.w	r3, r3, #3
 8013b76:	b29a      	uxth	r2, r3
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013b7c:	f06f 0301 	mvn.w	r3, #1
 8013b80:	e023      	b.n	8013bca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013b82:	7dbb      	ldrb	r3, [r7, #22]
 8013b84:	7dfa      	ldrb	r2, [r7, #23]
 8013b86:	6939      	ldr	r1, [r7, #16]
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f7ff feeb 	bl	8013964 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013b8e:	687a      	ldr	r2, [r7, #4]
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	3304      	adds	r3, #4
 8013b94:	6939      	ldr	r1, [r7, #16]
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f7ff ff24 	bl	80139e4 <tcp_output_control_segment>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d007      	beq.n	8013bb8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	8b5b      	ldrh	r3, [r3, #26]
 8013bac:	f043 0303 	orr.w	r3, r3, #3
 8013bb0:	b29a      	uxth	r2, r3
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	835a      	strh	r2, [r3, #26]
 8013bb6:	e006      	b.n	8013bc6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	8b5b      	ldrh	r3, [r3, #26]
 8013bbc:	f023 0303 	bic.w	r3, r3, #3
 8013bc0:	b29a      	uxth	r2, r3
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	371c      	adds	r7, #28
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd90      	pop	{r4, r7, pc}
 8013bd2:	bf00      	nop
 8013bd4:	0801ead0 	.word	0x0801ead0
 8013bd8:	0801f28c 	.word	0x0801f28c
 8013bdc:	0801eb24 	.word	0x0801eb24

08013be0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013be0:	b590      	push	{r4, r7, lr}
 8013be2:	b087      	sub	sp, #28
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013be8:	2300      	movs	r3, #0
 8013bea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d106      	bne.n	8013c00 <tcp_keepalive+0x20>
 8013bf2:	4b18      	ldr	r3, [pc, #96]	; (8013c54 <tcp_keepalive+0x74>)
 8013bf4:	f640 0224 	movw	r2, #2084	; 0x824
 8013bf8:	4917      	ldr	r1, [pc, #92]	; (8013c58 <tcp_keepalive+0x78>)
 8013bfa:	4818      	ldr	r0, [pc, #96]	; (8013c5c <tcp_keepalive+0x7c>)
 8013bfc:	f005 fefe 	bl	80199fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013c00:	7dfb      	ldrb	r3, [r7, #23]
 8013c02:	b29c      	uxth	r4, r3
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c08:	3b01      	subs	r3, #1
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7f9 f9d1 	bl	800cfb2 <lwip_htonl>
 8013c10:	4603      	mov	r3, r0
 8013c12:	2200      	movs	r2, #0
 8013c14:	4621      	mov	r1, r4
 8013c16:	6878      	ldr	r0, [r7, #4]
 8013c18:	f7ff fe66 	bl	80138e8 <tcp_output_alloc_header>
 8013c1c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d102      	bne.n	8013c2a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013c24:	f04f 33ff 	mov.w	r3, #4294967295
 8013c28:	e010      	b.n	8013c4c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013c2a:	7dfb      	ldrb	r3, [r7, #23]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	6939      	ldr	r1, [r7, #16]
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f7ff fe97 	bl	8013964 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013c36:	687a      	ldr	r2, [r7, #4]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	3304      	adds	r3, #4
 8013c3c:	6939      	ldr	r1, [r7, #16]
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f7ff fed0 	bl	80139e4 <tcp_output_control_segment>
 8013c44:	4603      	mov	r3, r0
 8013c46:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	371c      	adds	r7, #28
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd90      	pop	{r4, r7, pc}
 8013c54:	0801ead0 	.word	0x0801ead0
 8013c58:	0801f2ac 	.word	0x0801f2ac
 8013c5c:	0801eb24 	.word	0x0801eb24

08013c60 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013c60:	b590      	push	{r4, r7, lr}
 8013c62:	b08b      	sub	sp, #44	; 0x2c
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c68:	2300      	movs	r3, #0
 8013c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d106      	bne.n	8013c82 <tcp_zero_window_probe+0x22>
 8013c74:	4b4c      	ldr	r3, [pc, #304]	; (8013da8 <tcp_zero_window_probe+0x148>)
 8013c76:	f640 024f 	movw	r2, #2127	; 0x84f
 8013c7a:	494c      	ldr	r1, [pc, #304]	; (8013dac <tcp_zero_window_probe+0x14c>)
 8013c7c:	484c      	ldr	r0, [pc, #304]	; (8013db0 <tcp_zero_window_probe+0x150>)
 8013c7e:	f005 febd 	bl	80199fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c86:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013c88:	6a3b      	ldr	r3, [r7, #32]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d101      	bne.n	8013c92 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	e086      	b.n	8013da0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013c98:	2bff      	cmp	r3, #255	; 0xff
 8013c9a:	d007      	beq.n	8013cac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	b2da      	uxtb	r2, r3
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013cac:	6a3b      	ldr	r3, [r7, #32]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	899b      	ldrh	r3, [r3, #12]
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7f9 f967 	bl	800cf88 <lwip_htons>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	f003 0301 	and.w	r3, r3, #1
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d005      	beq.n	8013cd2 <tcp_zero_window_probe+0x72>
 8013cc6:	6a3b      	ldr	r3, [r7, #32]
 8013cc8:	891b      	ldrh	r3, [r3, #8]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d101      	bne.n	8013cd2 <tcp_zero_window_probe+0x72>
 8013cce:	2301      	movs	r3, #1
 8013cd0:	e000      	b.n	8013cd4 <tcp_zero_window_probe+0x74>
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013cd6:	7ffb      	ldrb	r3, [r7, #31]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	bf0c      	ite	eq
 8013cdc:	2301      	moveq	r3, #1
 8013cde:	2300      	movne	r3, #0
 8013ce0:	b2db      	uxtb	r3, r3
 8013ce2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ce8:	b299      	uxth	r1, r3
 8013cea:	6a3b      	ldr	r3, [r7, #32]
 8013cec:	68db      	ldr	r3, [r3, #12]
 8013cee:	685b      	ldr	r3, [r3, #4]
 8013cf0:	8bba      	ldrh	r2, [r7, #28]
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f7ff fdf8 	bl	80138e8 <tcp_output_alloc_header>
 8013cf8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d102      	bne.n	8013d06 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013d00:	f04f 33ff 	mov.w	r3, #4294967295
 8013d04:	e04c      	b.n	8013da0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013d06:	69bb      	ldr	r3, [r7, #24]
 8013d08:	685b      	ldr	r3, [r3, #4]
 8013d0a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013d0c:	7ffb      	ldrb	r3, [r7, #31]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d011      	beq.n	8013d36 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	899b      	ldrh	r3, [r3, #12]
 8013d16:	b29b      	uxth	r3, r3
 8013d18:	b21b      	sxth	r3, r3
 8013d1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013d1e:	b21c      	sxth	r4, r3
 8013d20:	2011      	movs	r0, #17
 8013d22:	f7f9 f931 	bl	800cf88 <lwip_htons>
 8013d26:	4603      	mov	r3, r0
 8013d28:	b21b      	sxth	r3, r3
 8013d2a:	4323      	orrs	r3, r4
 8013d2c:	b21b      	sxth	r3, r3
 8013d2e:	b29a      	uxth	r2, r3
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	819a      	strh	r2, [r3, #12]
 8013d34:	e010      	b.n	8013d58 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013d36:	69bb      	ldr	r3, [r7, #24]
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	3314      	adds	r3, #20
 8013d3c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013d3e:	6a3b      	ldr	r3, [r7, #32]
 8013d40:	6858      	ldr	r0, [r3, #4]
 8013d42:	6a3b      	ldr	r3, [r7, #32]
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	891a      	ldrh	r2, [r3, #8]
 8013d48:	6a3b      	ldr	r3, [r7, #32]
 8013d4a:	891b      	ldrh	r3, [r3, #8]
 8013d4c:	1ad3      	subs	r3, r2, r3
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	2201      	movs	r2, #1
 8013d52:	6939      	ldr	r1, [r7, #16]
 8013d54:	f7fa fe54 	bl	800ea00 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013d58:	6a3b      	ldr	r3, [r7, #32]
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7f9 f927 	bl	800cfb2 <lwip_htonl>
 8013d64:	4603      	mov	r3, r0
 8013d66:	3301      	adds	r3, #1
 8013d68:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	1ad3      	subs	r3, r2, r3
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	da02      	bge.n	8013d7c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	68fa      	ldr	r2, [r7, #12]
 8013d7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d80:	2200      	movs	r2, #0
 8013d82:	69b9      	ldr	r1, [r7, #24]
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f7ff fded 	bl	8013964 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	3304      	adds	r3, #4
 8013d90:	69b9      	ldr	r1, [r7, #24]
 8013d92:	6878      	ldr	r0, [r7, #4]
 8013d94:	f7ff fe26 	bl	80139e4 <tcp_output_control_segment>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013d9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	372c      	adds	r7, #44	; 0x2c
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd90      	pop	{r4, r7, pc}
 8013da8:	0801ead0 	.word	0x0801ead0
 8013dac:	0801f2c8 	.word	0x0801f2c8
 8013db0:	0801eb24 	.word	0x0801eb24

08013db4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b082      	sub	sp, #8
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013dbc:	f7fa ff0e 	bl	800ebdc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013dc0:	4b0a      	ldr	r3, [pc, #40]	; (8013dec <tcpip_tcp_timer+0x38>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d103      	bne.n	8013dd0 <tcpip_tcp_timer+0x1c>
 8013dc8:	4b09      	ldr	r3, [pc, #36]	; (8013df0 <tcpip_tcp_timer+0x3c>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d005      	beq.n	8013ddc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	4908      	ldr	r1, [pc, #32]	; (8013df4 <tcpip_tcp_timer+0x40>)
 8013dd4:	20fa      	movs	r0, #250	; 0xfa
 8013dd6:	f000 f8f1 	bl	8013fbc <sys_timeout>
 8013dda:	e002      	b.n	8013de2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013ddc:	4b06      	ldr	r3, [pc, #24]	; (8013df8 <tcpip_tcp_timer+0x44>)
 8013dde:	2200      	movs	r2, #0
 8013de0:	601a      	str	r2, [r3, #0]
  }
}
 8013de2:	bf00      	nop
 8013de4:	3708      	adds	r7, #8
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	2000b4c0 	.word	0x2000b4c0
 8013df0:	2000b4d0 	.word	0x2000b4d0
 8013df4:	08013db5 	.word	0x08013db5
 8013df8:	20004750 	.word	0x20004750

08013dfc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013e00:	4b0a      	ldr	r3, [pc, #40]	; (8013e2c <tcp_timer_needed+0x30>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d10f      	bne.n	8013e28 <tcp_timer_needed+0x2c>
 8013e08:	4b09      	ldr	r3, [pc, #36]	; (8013e30 <tcp_timer_needed+0x34>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d103      	bne.n	8013e18 <tcp_timer_needed+0x1c>
 8013e10:	4b08      	ldr	r3, [pc, #32]	; (8013e34 <tcp_timer_needed+0x38>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d007      	beq.n	8013e28 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013e18:	4b04      	ldr	r3, [pc, #16]	; (8013e2c <tcp_timer_needed+0x30>)
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013e1e:	2200      	movs	r2, #0
 8013e20:	4905      	ldr	r1, [pc, #20]	; (8013e38 <tcp_timer_needed+0x3c>)
 8013e22:	20fa      	movs	r0, #250	; 0xfa
 8013e24:	f000 f8ca 	bl	8013fbc <sys_timeout>
  }
}
 8013e28:	bf00      	nop
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	20004750 	.word	0x20004750
 8013e30:	2000b4c0 	.word	0x2000b4c0
 8013e34:	2000b4d0 	.word	0x2000b4d0
 8013e38:	08013db5 	.word	0x08013db5

08013e3c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b086      	sub	sp, #24
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	60f8      	str	r0, [r7, #12]
 8013e44:	60b9      	str	r1, [r7, #8]
 8013e46:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013e48:	200a      	movs	r0, #10
 8013e4a:	f7f9 fd53 	bl	800d8f4 <memp_malloc>
 8013e4e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013e50:	693b      	ldr	r3, [r7, #16]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d109      	bne.n	8013e6a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d151      	bne.n	8013f00 <sys_timeout_abs+0xc4>
 8013e5c:	4b2a      	ldr	r3, [pc, #168]	; (8013f08 <sys_timeout_abs+0xcc>)
 8013e5e:	22be      	movs	r2, #190	; 0xbe
 8013e60:	492a      	ldr	r1, [pc, #168]	; (8013f0c <sys_timeout_abs+0xd0>)
 8013e62:	482b      	ldr	r0, [pc, #172]	; (8013f10 <sys_timeout_abs+0xd4>)
 8013e64:	f005 fdca 	bl	80199fc <iprintf>
    return;
 8013e68:	e04a      	b.n	8013f00 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013e6a:	693b      	ldr	r3, [r7, #16]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	68ba      	ldr	r2, [r7, #8]
 8013e74:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	68fa      	ldr	r2, [r7, #12]
 8013e80:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013e82:	4b24      	ldr	r3, [pc, #144]	; (8013f14 <sys_timeout_abs+0xd8>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d103      	bne.n	8013e92 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013e8a:	4a22      	ldr	r2, [pc, #136]	; (8013f14 <sys_timeout_abs+0xd8>)
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	6013      	str	r3, [r2, #0]
    return;
 8013e90:	e037      	b.n	8013f02 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	685a      	ldr	r2, [r3, #4]
 8013e96:	4b1f      	ldr	r3, [pc, #124]	; (8013f14 <sys_timeout_abs+0xd8>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	685b      	ldr	r3, [r3, #4]
 8013e9c:	1ad3      	subs	r3, r2, r3
 8013e9e:	0fdb      	lsrs	r3, r3, #31
 8013ea0:	f003 0301 	and.w	r3, r3, #1
 8013ea4:	b2db      	uxtb	r3, r3
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d007      	beq.n	8013eba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013eaa:	4b1a      	ldr	r3, [pc, #104]	; (8013f14 <sys_timeout_abs+0xd8>)
 8013eac:	681a      	ldr	r2, [r3, #0]
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013eb2:	4a18      	ldr	r2, [pc, #96]	; (8013f14 <sys_timeout_abs+0xd8>)
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	6013      	str	r3, [r2, #0]
 8013eb8:	e023      	b.n	8013f02 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013eba:	4b16      	ldr	r3, [pc, #88]	; (8013f14 <sys_timeout_abs+0xd8>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	617b      	str	r3, [r7, #20]
 8013ec0:	e01a      	b.n	8013ef8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d00b      	beq.n	8013ee2 <sys_timeout_abs+0xa6>
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	685a      	ldr	r2, [r3, #4]
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	685b      	ldr	r3, [r3, #4]
 8013ed4:	1ad3      	subs	r3, r2, r3
 8013ed6:	0fdb      	lsrs	r3, r3, #31
 8013ed8:	f003 0301 	and.w	r3, r3, #1
 8013edc:	b2db      	uxtb	r3, r3
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d007      	beq.n	8013ef2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	693a      	ldr	r2, [r7, #16]
 8013eee:	601a      	str	r2, [r3, #0]
        break;
 8013ef0:	e007      	b.n	8013f02 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	617b      	str	r3, [r7, #20]
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d1e1      	bne.n	8013ec2 <sys_timeout_abs+0x86>
 8013efe:	e000      	b.n	8013f02 <sys_timeout_abs+0xc6>
    return;
 8013f00:	bf00      	nop
      }
    }
  }
}
 8013f02:	3718      	adds	r7, #24
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}
 8013f08:	0801f2ec 	.word	0x0801f2ec
 8013f0c:	0801f320 	.word	0x0801f320
 8013f10:	0801f360 	.word	0x0801f360
 8013f14:	20004748 	.word	0x20004748

08013f18 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b086      	sub	sp, #24
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	4798      	blx	r3

  now = sys_now();
 8013f2a:	f7f5 ffef 	bl	8009f0c <sys_now>
 8013f2e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	4b0f      	ldr	r3, [pc, #60]	; (8013f74 <lwip_cyclic_timer+0x5c>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4413      	add	r3, r2
 8013f3a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013f3c:	68fa      	ldr	r2, [r7, #12]
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	1ad3      	subs	r3, r2, r3
 8013f42:	0fdb      	lsrs	r3, r3, #31
 8013f44:	f003 0301 	and.w	r3, r3, #1
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d009      	beq.n	8013f62 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	681a      	ldr	r2, [r3, #0]
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	4413      	add	r3, r2
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	4907      	ldr	r1, [pc, #28]	; (8013f78 <lwip_cyclic_timer+0x60>)
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7ff ff6e 	bl	8013e3c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013f60:	e004      	b.n	8013f6c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	4904      	ldr	r1, [pc, #16]	; (8013f78 <lwip_cyclic_timer+0x60>)
 8013f66:	68f8      	ldr	r0, [r7, #12]
 8013f68:	f7ff ff68 	bl	8013e3c <sys_timeout_abs>
}
 8013f6c:	bf00      	nop
 8013f6e:	3718      	adds	r7, #24
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}
 8013f74:	2000474c 	.word	0x2000474c
 8013f78:	08013f19 	.word	0x08013f19

08013f7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b082      	sub	sp, #8
 8013f80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013f82:	2301      	movs	r3, #1
 8013f84:	607b      	str	r3, [r7, #4]
 8013f86:	e00e      	b.n	8013fa6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013f88:	4a0a      	ldr	r2, [pc, #40]	; (8013fb4 <sys_timeouts_init+0x38>)
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	00db      	lsls	r3, r3, #3
 8013f94:	4a07      	ldr	r2, [pc, #28]	; (8013fb4 <sys_timeouts_init+0x38>)
 8013f96:	4413      	add	r3, r2
 8013f98:	461a      	mov	r2, r3
 8013f9a:	4907      	ldr	r1, [pc, #28]	; (8013fb8 <sys_timeouts_init+0x3c>)
 8013f9c:	f000 f80e 	bl	8013fbc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	607b      	str	r3, [r7, #4]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	2b04      	cmp	r3, #4
 8013faa:	d9ed      	bls.n	8013f88 <sys_timeouts_init+0xc>
  }
}
 8013fac:	bf00      	nop
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}
 8013fb4:	08021008 	.word	0x08021008
 8013fb8:	08013f19 	.word	0x08013f19

08013fbc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b086      	sub	sp, #24
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60f8      	str	r0, [r7, #12]
 8013fc4:	60b9      	str	r1, [r7, #8]
 8013fc6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013fce:	d306      	bcc.n	8013fde <sys_timeout+0x22>
 8013fd0:	4b0a      	ldr	r3, [pc, #40]	; (8013ffc <sys_timeout+0x40>)
 8013fd2:	f240 1229 	movw	r2, #297	; 0x129
 8013fd6:	490a      	ldr	r1, [pc, #40]	; (8014000 <sys_timeout+0x44>)
 8013fd8:	480a      	ldr	r0, [pc, #40]	; (8014004 <sys_timeout+0x48>)
 8013fda:	f005 fd0f 	bl	80199fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013fde:	f7f5 ff95 	bl	8009f0c <sys_now>
 8013fe2:	4602      	mov	r2, r0
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	4413      	add	r3, r2
 8013fe8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013fea:	687a      	ldr	r2, [r7, #4]
 8013fec:	68b9      	ldr	r1, [r7, #8]
 8013fee:	6978      	ldr	r0, [r7, #20]
 8013ff0:	f7ff ff24 	bl	8013e3c <sys_timeout_abs>
#endif
}
 8013ff4:	bf00      	nop
 8013ff6:	3718      	adds	r7, #24
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}
 8013ffc:	0801f2ec 	.word	0x0801f2ec
 8014000:	0801f388 	.word	0x0801f388
 8014004:	0801f360 	.word	0x0801f360

08014008 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b084      	sub	sp, #16
 801400c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801400e:	f7f5 ff7d 	bl	8009f0c <sys_now>
 8014012:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014014:	4b17      	ldr	r3, [pc, #92]	; (8014074 <sys_check_timeouts+0x6c>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d022      	beq.n	8014066 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	685b      	ldr	r3, [r3, #4]
 8014024:	68fa      	ldr	r2, [r7, #12]
 8014026:	1ad3      	subs	r3, r2, r3
 8014028:	0fdb      	lsrs	r3, r3, #31
 801402a:	f003 0301 	and.w	r3, r3, #1
 801402e:	b2db      	uxtb	r3, r3
 8014030:	2b00      	cmp	r3, #0
 8014032:	d11a      	bne.n	801406a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	4a0e      	ldr	r2, [pc, #56]	; (8014074 <sys_check_timeouts+0x6c>)
 801403a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	689b      	ldr	r3, [r3, #8]
 8014040:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014042:	68bb      	ldr	r3, [r7, #8]
 8014044:	68db      	ldr	r3, [r3, #12]
 8014046:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	4a0a      	ldr	r2, [pc, #40]	; (8014078 <sys_check_timeouts+0x70>)
 801404e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014050:	68b9      	ldr	r1, [r7, #8]
 8014052:	200a      	movs	r0, #10
 8014054:	f7f9 fca0 	bl	800d998 <memp_free>
    if (handler != NULL) {
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d0da      	beq.n	8014014 <sys_check_timeouts+0xc>
      handler(arg);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6838      	ldr	r0, [r7, #0]
 8014062:	4798      	blx	r3
  do {
 8014064:	e7d6      	b.n	8014014 <sys_check_timeouts+0xc>
      return;
 8014066:	bf00      	nop
 8014068:	e000      	b.n	801406c <sys_check_timeouts+0x64>
      return;
 801406a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801406c:	3710      	adds	r7, #16
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	20004748 	.word	0x20004748
 8014078:	2000474c 	.word	0x2000474c

0801407c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014082:	4b16      	ldr	r3, [pc, #88]	; (80140dc <sys_timeouts_sleeptime+0x60>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d102      	bne.n	8014090 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801408a:	f04f 33ff 	mov.w	r3, #4294967295
 801408e:	e020      	b.n	80140d2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014090:	f7f5 ff3c 	bl	8009f0c <sys_now>
 8014094:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014096:	4b11      	ldr	r3, [pc, #68]	; (80140dc <sys_timeouts_sleeptime+0x60>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	685a      	ldr	r2, [r3, #4]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	1ad3      	subs	r3, r2, r3
 80140a0:	0fdb      	lsrs	r3, r3, #31
 80140a2:	f003 0301 	and.w	r3, r3, #1
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d001      	beq.n	80140b0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80140ac:	2300      	movs	r3, #0
 80140ae:	e010      	b.n	80140d2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80140b0:	4b0a      	ldr	r3, [pc, #40]	; (80140dc <sys_timeouts_sleeptime+0x60>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	685a      	ldr	r2, [r3, #4]
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	1ad3      	subs	r3, r2, r3
 80140ba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	da06      	bge.n	80140d0 <sys_timeouts_sleeptime+0x54>
 80140c2:	4b07      	ldr	r3, [pc, #28]	; (80140e0 <sys_timeouts_sleeptime+0x64>)
 80140c4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80140c8:	4906      	ldr	r1, [pc, #24]	; (80140e4 <sys_timeouts_sleeptime+0x68>)
 80140ca:	4807      	ldr	r0, [pc, #28]	; (80140e8 <sys_timeouts_sleeptime+0x6c>)
 80140cc:	f005 fc96 	bl	80199fc <iprintf>
    return ret;
 80140d0:	683b      	ldr	r3, [r7, #0]
  }
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3708      	adds	r7, #8
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	bf00      	nop
 80140dc:	20004748 	.word	0x20004748
 80140e0:	0801f2ec 	.word	0x0801f2ec
 80140e4:	0801f3c0 	.word	0x0801f3c0
 80140e8:	0801f360 	.word	0x0801f360

080140ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80140f0:	f005 fc9c 	bl	8019a2c <rand>
 80140f4:	4603      	mov	r3, r0
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80140fc:	b29b      	uxth	r3, r3
 80140fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014102:	b29a      	uxth	r2, r3
 8014104:	4b01      	ldr	r3, [pc, #4]	; (801410c <udp_init+0x20>)
 8014106:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014108:	bf00      	nop
 801410a:	bd80      	pop	{r7, pc}
 801410c:	200000b8 	.word	0x200000b8

08014110 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014110:	b480      	push	{r7}
 8014112:	b083      	sub	sp, #12
 8014114:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014116:	2300      	movs	r3, #0
 8014118:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801411a:	4b17      	ldr	r3, [pc, #92]	; (8014178 <udp_new_port+0x68>)
 801411c:	881b      	ldrh	r3, [r3, #0]
 801411e:	1c5a      	adds	r2, r3, #1
 8014120:	b291      	uxth	r1, r2
 8014122:	4a15      	ldr	r2, [pc, #84]	; (8014178 <udp_new_port+0x68>)
 8014124:	8011      	strh	r1, [r2, #0]
 8014126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801412a:	4293      	cmp	r3, r2
 801412c:	d103      	bne.n	8014136 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801412e:	4b12      	ldr	r3, [pc, #72]	; (8014178 <udp_new_port+0x68>)
 8014130:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014134:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014136:	4b11      	ldr	r3, [pc, #68]	; (801417c <udp_new_port+0x6c>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	603b      	str	r3, [r7, #0]
 801413c:	e011      	b.n	8014162 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	8a5a      	ldrh	r2, [r3, #18]
 8014142:	4b0d      	ldr	r3, [pc, #52]	; (8014178 <udp_new_port+0x68>)
 8014144:	881b      	ldrh	r3, [r3, #0]
 8014146:	429a      	cmp	r2, r3
 8014148:	d108      	bne.n	801415c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801414a:	88fb      	ldrh	r3, [r7, #6]
 801414c:	3301      	adds	r3, #1
 801414e:	80fb      	strh	r3, [r7, #6]
 8014150:	88fb      	ldrh	r3, [r7, #6]
 8014152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014156:	d3e0      	bcc.n	801411a <udp_new_port+0xa>
        return 0;
 8014158:	2300      	movs	r3, #0
 801415a:	e007      	b.n	801416c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	68db      	ldr	r3, [r3, #12]
 8014160:	603b      	str	r3, [r7, #0]
 8014162:	683b      	ldr	r3, [r7, #0]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d1ea      	bne.n	801413e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014168:	4b03      	ldr	r3, [pc, #12]	; (8014178 <udp_new_port+0x68>)
 801416a:	881b      	ldrh	r3, [r3, #0]
}
 801416c:	4618      	mov	r0, r3
 801416e:	370c      	adds	r7, #12
 8014170:	46bd      	mov	sp, r7
 8014172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014176:	4770      	bx	lr
 8014178:	200000b8 	.word	0x200000b8
 801417c:	2000b4d8 	.word	0x2000b4d8

08014180 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b084      	sub	sp, #16
 8014184:	af00      	add	r7, sp, #0
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	4613      	mov	r3, r2
 801418c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d105      	bne.n	80141a0 <udp_input_local_match+0x20>
 8014194:	4b27      	ldr	r3, [pc, #156]	; (8014234 <udp_input_local_match+0xb4>)
 8014196:	2287      	movs	r2, #135	; 0x87
 8014198:	4927      	ldr	r1, [pc, #156]	; (8014238 <udp_input_local_match+0xb8>)
 801419a:	4828      	ldr	r0, [pc, #160]	; (801423c <udp_input_local_match+0xbc>)
 801419c:	f005 fc2e 	bl	80199fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80141a0:	68bb      	ldr	r3, [r7, #8]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d105      	bne.n	80141b2 <udp_input_local_match+0x32>
 80141a6:	4b23      	ldr	r3, [pc, #140]	; (8014234 <udp_input_local_match+0xb4>)
 80141a8:	2288      	movs	r2, #136	; 0x88
 80141aa:	4925      	ldr	r1, [pc, #148]	; (8014240 <udp_input_local_match+0xc0>)
 80141ac:	4823      	ldr	r0, [pc, #140]	; (801423c <udp_input_local_match+0xbc>)
 80141ae:	f005 fc25 	bl	80199fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	7a1b      	ldrb	r3, [r3, #8]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d00b      	beq.n	80141d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	7a1a      	ldrb	r2, [r3, #8]
 80141be:	4b21      	ldr	r3, [pc, #132]	; (8014244 <udp_input_local_match+0xc4>)
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80141c6:	3301      	adds	r3, #1
 80141c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d001      	beq.n	80141d2 <udp_input_local_match+0x52>
    return 0;
 80141ce:	2300      	movs	r3, #0
 80141d0:	e02b      	b.n	801422a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80141d2:	79fb      	ldrb	r3, [r7, #7]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d018      	beq.n	801420a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d013      	beq.n	8014206 <udp_input_local_match+0x86>
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d00f      	beq.n	8014206 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80141e6:	4b17      	ldr	r3, [pc, #92]	; (8014244 <udp_input_local_match+0xc4>)
 80141e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ee:	d00a      	beq.n	8014206 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	681a      	ldr	r2, [r3, #0]
 80141f4:	4b13      	ldr	r3, [pc, #76]	; (8014244 <udp_input_local_match+0xc4>)
 80141f6:	695b      	ldr	r3, [r3, #20]
 80141f8:	405a      	eors	r2, r3
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	3308      	adds	r3, #8
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014202:	2b00      	cmp	r3, #0
 8014204:	d110      	bne.n	8014228 <udp_input_local_match+0xa8>
          return 1;
 8014206:	2301      	movs	r3, #1
 8014208:	e00f      	b.n	801422a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d009      	beq.n	8014224 <udp_input_local_match+0xa4>
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d005      	beq.n	8014224 <udp_input_local_match+0xa4>
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	4b09      	ldr	r3, [pc, #36]	; (8014244 <udp_input_local_match+0xc4>)
 801421e:	695b      	ldr	r3, [r3, #20]
 8014220:	429a      	cmp	r2, r3
 8014222:	d101      	bne.n	8014228 <udp_input_local_match+0xa8>
        return 1;
 8014224:	2301      	movs	r3, #1
 8014226:	e000      	b.n	801422a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014228:	2300      	movs	r3, #0
}
 801422a:	4618      	mov	r0, r3
 801422c:	3710      	adds	r7, #16
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
 8014232:	bf00      	nop
 8014234:	0801f3d4 	.word	0x0801f3d4
 8014238:	0801f404 	.word	0x0801f404
 801423c:	0801f428 	.word	0x0801f428
 8014240:	0801f450 	.word	0x0801f450
 8014244:	20007d8c 	.word	0x20007d8c

08014248 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014248:	b590      	push	{r4, r7, lr}
 801424a:	b08d      	sub	sp, #52	; 0x34
 801424c:	af02      	add	r7, sp, #8
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014252:	2300      	movs	r3, #0
 8014254:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d105      	bne.n	8014268 <udp_input+0x20>
 801425c:	4b7c      	ldr	r3, [pc, #496]	; (8014450 <udp_input+0x208>)
 801425e:	22cf      	movs	r2, #207	; 0xcf
 8014260:	497c      	ldr	r1, [pc, #496]	; (8014454 <udp_input+0x20c>)
 8014262:	487d      	ldr	r0, [pc, #500]	; (8014458 <udp_input+0x210>)
 8014264:	f005 fbca 	bl	80199fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d105      	bne.n	801427a <udp_input+0x32>
 801426e:	4b78      	ldr	r3, [pc, #480]	; (8014450 <udp_input+0x208>)
 8014270:	22d0      	movs	r2, #208	; 0xd0
 8014272:	497a      	ldr	r1, [pc, #488]	; (801445c <udp_input+0x214>)
 8014274:	4878      	ldr	r0, [pc, #480]	; (8014458 <udp_input+0x210>)
 8014276:	f005 fbc1 	bl	80199fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	895b      	ldrh	r3, [r3, #10]
 801427e:	2b07      	cmp	r3, #7
 8014280:	d803      	bhi.n	801428a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f7fa f9b6 	bl	800e5f4 <pbuf_free>
    goto end;
 8014288:	e0de      	b.n	8014448 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014290:	4b73      	ldr	r3, [pc, #460]	; (8014460 <udp_input+0x218>)
 8014292:	695a      	ldr	r2, [r3, #20]
 8014294:	4b72      	ldr	r3, [pc, #456]	; (8014460 <udp_input+0x218>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	4619      	mov	r1, r3
 801429a:	4610      	mov	r0, r2
 801429c:	f003 fdc6 	bl	8017e2c <ip4_addr_isbroadcast_u32>
 80142a0:	4603      	mov	r3, r0
 80142a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80142a4:	697b      	ldr	r3, [r7, #20]
 80142a6:	881b      	ldrh	r3, [r3, #0]
 80142a8:	b29b      	uxth	r3, r3
 80142aa:	4618      	mov	r0, r3
 80142ac:	f7f8 fe6c 	bl	800cf88 <lwip_htons>
 80142b0:	4603      	mov	r3, r0
 80142b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	885b      	ldrh	r3, [r3, #2]
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7f8 fe64 	bl	800cf88 <lwip_htons>
 80142c0:	4603      	mov	r3, r0
 80142c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80142c4:	2300      	movs	r3, #0
 80142c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80142c8:	2300      	movs	r3, #0
 80142ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80142cc:	2300      	movs	r3, #0
 80142ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80142d0:	4b64      	ldr	r3, [pc, #400]	; (8014464 <udp_input+0x21c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	627b      	str	r3, [r7, #36]	; 0x24
 80142d6:	e054      	b.n	8014382 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80142d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142da:	8a5b      	ldrh	r3, [r3, #18]
 80142dc:	89fa      	ldrh	r2, [r7, #14]
 80142de:	429a      	cmp	r2, r3
 80142e0:	d14a      	bne.n	8014378 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80142e2:	7cfb      	ldrb	r3, [r7, #19]
 80142e4:	461a      	mov	r2, r3
 80142e6:	6839      	ldr	r1, [r7, #0]
 80142e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142ea:	f7ff ff49 	bl	8014180 <udp_input_local_match>
 80142ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d041      	beq.n	8014378 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80142f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f6:	7c1b      	ldrb	r3, [r3, #16]
 80142f8:	f003 0304 	and.w	r3, r3, #4
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d11d      	bne.n	801433c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d102      	bne.n	801430c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014308:	61fb      	str	r3, [r7, #28]
 801430a:	e017      	b.n	801433c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801430c:	7cfb      	ldrb	r3, [r7, #19]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d014      	beq.n	801433c <udp_input+0xf4>
 8014312:	4b53      	ldr	r3, [pc, #332]	; (8014460 <udp_input+0x218>)
 8014314:	695b      	ldr	r3, [r3, #20]
 8014316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801431a:	d10f      	bne.n	801433c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801431c:	69fb      	ldr	r3, [r7, #28]
 801431e:	681a      	ldr	r2, [r3, #0]
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	3304      	adds	r3, #4
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	429a      	cmp	r2, r3
 8014328:	d008      	beq.n	801433c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432c:	681a      	ldr	r2, [r3, #0]
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	3304      	adds	r3, #4
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	429a      	cmp	r2, r3
 8014336:	d101      	bne.n	801433c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433e:	8a9b      	ldrh	r3, [r3, #20]
 8014340:	8a3a      	ldrh	r2, [r7, #16]
 8014342:	429a      	cmp	r2, r3
 8014344:	d118      	bne.n	8014378 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014348:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801434a:	2b00      	cmp	r3, #0
 801434c:	d005      	beq.n	801435a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014350:	685a      	ldr	r2, [r3, #4]
 8014352:	4b43      	ldr	r3, [pc, #268]	; (8014460 <udp_input+0x218>)
 8014354:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014356:	429a      	cmp	r2, r3
 8014358:	d10e      	bne.n	8014378 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801435a:	6a3b      	ldr	r3, [r7, #32]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d014      	beq.n	801438a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014362:	68da      	ldr	r2, [r3, #12]
 8014364:	6a3b      	ldr	r3, [r7, #32]
 8014366:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014368:	4b3e      	ldr	r3, [pc, #248]	; (8014464 <udp_input+0x21c>)
 801436a:	681a      	ldr	r2, [r3, #0]
 801436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014370:	4a3c      	ldr	r2, [pc, #240]	; (8014464 <udp_input+0x21c>)
 8014372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014374:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014376:	e008      	b.n	801438a <udp_input+0x142>
      }
    }

    prev = pcb;
 8014378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437e:	68db      	ldr	r3, [r3, #12]
 8014380:	627b      	str	r3, [r7, #36]	; 0x24
 8014382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014384:	2b00      	cmp	r3, #0
 8014386:	d1a7      	bne.n	80142d8 <udp_input+0x90>
 8014388:	e000      	b.n	801438c <udp_input+0x144>
        break;
 801438a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438e:	2b00      	cmp	r3, #0
 8014390:	d101      	bne.n	8014396 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014392:	69fb      	ldr	r3, [r7, #28]
 8014394:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014398:	2b00      	cmp	r3, #0
 801439a:	d002      	beq.n	80143a2 <udp_input+0x15a>
    for_us = 1;
 801439c:	2301      	movs	r3, #1
 801439e:	76fb      	strb	r3, [r7, #27]
 80143a0:	e00a      	b.n	80143b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	3304      	adds	r3, #4
 80143a6:	681a      	ldr	r2, [r3, #0]
 80143a8:	4b2d      	ldr	r3, [pc, #180]	; (8014460 <udp_input+0x218>)
 80143aa:	695b      	ldr	r3, [r3, #20]
 80143ac:	429a      	cmp	r2, r3
 80143ae:	bf0c      	ite	eq
 80143b0:	2301      	moveq	r3, #1
 80143b2:	2300      	movne	r3, #0
 80143b4:	b2db      	uxtb	r3, r3
 80143b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80143b8:	7efb      	ldrb	r3, [r7, #27]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d041      	beq.n	8014442 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80143be:	2108      	movs	r1, #8
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f7fa f891 	bl	800e4e8 <pbuf_remove_header>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d00a      	beq.n	80143e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80143cc:	4b20      	ldr	r3, [pc, #128]	; (8014450 <udp_input+0x208>)
 80143ce:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80143d2:	4925      	ldr	r1, [pc, #148]	; (8014468 <udp_input+0x220>)
 80143d4:	4820      	ldr	r0, [pc, #128]	; (8014458 <udp_input+0x210>)
 80143d6:	f005 fb11 	bl	80199fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f7fa f90a 	bl	800e5f4 <pbuf_free>
      goto end;
 80143e0:	e032      	b.n	8014448 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80143e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d012      	beq.n	801440e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80143e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ea:	699b      	ldr	r3, [r3, #24]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d00a      	beq.n	8014406 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80143f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f2:	699c      	ldr	r4, [r3, #24]
 80143f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f6:	69d8      	ldr	r0, [r3, #28]
 80143f8:	8a3b      	ldrh	r3, [r7, #16]
 80143fa:	9300      	str	r3, [sp, #0]
 80143fc:	4b1b      	ldr	r3, [pc, #108]	; (801446c <udp_input+0x224>)
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014402:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014404:	e021      	b.n	801444a <udp_input+0x202>
        pbuf_free(p);
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f7fa f8f4 	bl	800e5f4 <pbuf_free>
        goto end;
 801440c:	e01c      	b.n	8014448 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801440e:	7cfb      	ldrb	r3, [r7, #19]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d112      	bne.n	801443a <udp_input+0x1f2>
 8014414:	4b12      	ldr	r3, [pc, #72]	; (8014460 <udp_input+0x218>)
 8014416:	695b      	ldr	r3, [r3, #20]
 8014418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801441c:	2be0      	cmp	r3, #224	; 0xe0
 801441e:	d00c      	beq.n	801443a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014420:	4b0f      	ldr	r3, [pc, #60]	; (8014460 <udp_input+0x218>)
 8014422:	899b      	ldrh	r3, [r3, #12]
 8014424:	3308      	adds	r3, #8
 8014426:	b29b      	uxth	r3, r3
 8014428:	b21b      	sxth	r3, r3
 801442a:	4619      	mov	r1, r3
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f7fa f8ce 	bl	800e5ce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014432:	2103      	movs	r1, #3
 8014434:	6878      	ldr	r0, [r7, #4]
 8014436:	f003 f9bd 	bl	80177b4 <icmp_dest_unreach>
      pbuf_free(p);
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f7fa f8da 	bl	800e5f4 <pbuf_free>
  return;
 8014440:	e003      	b.n	801444a <udp_input+0x202>
    pbuf_free(p);
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f7fa f8d6 	bl	800e5f4 <pbuf_free>
  return;
 8014448:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801444a:	372c      	adds	r7, #44	; 0x2c
 801444c:	46bd      	mov	sp, r7
 801444e:	bd90      	pop	{r4, r7, pc}
 8014450:	0801f3d4 	.word	0x0801f3d4
 8014454:	0801f478 	.word	0x0801f478
 8014458:	0801f428 	.word	0x0801f428
 801445c:	0801f490 	.word	0x0801f490
 8014460:	20007d8c 	.word	0x20007d8c
 8014464:	2000b4d8 	.word	0x2000b4d8
 8014468:	0801f4ac 	.word	0x0801f4ac
 801446c:	20007d9c 	.word	0x20007d9c

08014470 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b088      	sub	sp, #32
 8014474:	af02      	add	r7, sp, #8
 8014476:	60f8      	str	r0, [r7, #12]
 8014478:	60b9      	str	r1, [r7, #8]
 801447a:	607a      	str	r2, [r7, #4]
 801447c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d109      	bne.n	8014498 <udp_sendto_if+0x28>
 8014484:	4b2e      	ldr	r3, [pc, #184]	; (8014540 <udp_sendto_if+0xd0>)
 8014486:	f44f 7220 	mov.w	r2, #640	; 0x280
 801448a:	492e      	ldr	r1, [pc, #184]	; (8014544 <udp_sendto_if+0xd4>)
 801448c:	482e      	ldr	r0, [pc, #184]	; (8014548 <udp_sendto_if+0xd8>)
 801448e:	f005 fab5 	bl	80199fc <iprintf>
 8014492:	f06f 030f 	mvn.w	r3, #15
 8014496:	e04f      	b.n	8014538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d109      	bne.n	80144b2 <udp_sendto_if+0x42>
 801449e:	4b28      	ldr	r3, [pc, #160]	; (8014540 <udp_sendto_if+0xd0>)
 80144a0:	f240 2281 	movw	r2, #641	; 0x281
 80144a4:	4929      	ldr	r1, [pc, #164]	; (801454c <udp_sendto_if+0xdc>)
 80144a6:	4828      	ldr	r0, [pc, #160]	; (8014548 <udp_sendto_if+0xd8>)
 80144a8:	f005 faa8 	bl	80199fc <iprintf>
 80144ac:	f06f 030f 	mvn.w	r3, #15
 80144b0:	e042      	b.n	8014538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d109      	bne.n	80144cc <udp_sendto_if+0x5c>
 80144b8:	4b21      	ldr	r3, [pc, #132]	; (8014540 <udp_sendto_if+0xd0>)
 80144ba:	f240 2282 	movw	r2, #642	; 0x282
 80144be:	4924      	ldr	r1, [pc, #144]	; (8014550 <udp_sendto_if+0xe0>)
 80144c0:	4821      	ldr	r0, [pc, #132]	; (8014548 <udp_sendto_if+0xd8>)
 80144c2:	f005 fa9b 	bl	80199fc <iprintf>
 80144c6:	f06f 030f 	mvn.w	r3, #15
 80144ca:	e035      	b.n	8014538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80144cc:	6a3b      	ldr	r3, [r7, #32]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d109      	bne.n	80144e6 <udp_sendto_if+0x76>
 80144d2:	4b1b      	ldr	r3, [pc, #108]	; (8014540 <udp_sendto_if+0xd0>)
 80144d4:	f240 2283 	movw	r2, #643	; 0x283
 80144d8:	491e      	ldr	r1, [pc, #120]	; (8014554 <udp_sendto_if+0xe4>)
 80144da:	481b      	ldr	r0, [pc, #108]	; (8014548 <udp_sendto_if+0xd8>)
 80144dc:	f005 fa8e 	bl	80199fc <iprintf>
 80144e0:	f06f 030f 	mvn.w	r3, #15
 80144e4:	e028      	b.n	8014538 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d009      	beq.n	8014500 <udp_sendto_if+0x90>
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d005      	beq.n	8014500 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80144fc:	2be0      	cmp	r3, #224	; 0xe0
 80144fe:	d103      	bne.n	8014508 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014500:	6a3b      	ldr	r3, [r7, #32]
 8014502:	3304      	adds	r3, #4
 8014504:	617b      	str	r3, [r7, #20]
 8014506:	e00b      	b.n	8014520 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	681a      	ldr	r2, [r3, #0]
 801450c:	6a3b      	ldr	r3, [r7, #32]
 801450e:	3304      	adds	r3, #4
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	429a      	cmp	r2, r3
 8014514:	d002      	beq.n	801451c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014516:	f06f 0303 	mvn.w	r3, #3
 801451a:	e00d      	b.n	8014538 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014520:	887a      	ldrh	r2, [r7, #2]
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	9301      	str	r3, [sp, #4]
 8014526:	6a3b      	ldr	r3, [r7, #32]
 8014528:	9300      	str	r3, [sp, #0]
 801452a:	4613      	mov	r3, r2
 801452c:	687a      	ldr	r2, [r7, #4]
 801452e:	68b9      	ldr	r1, [r7, #8]
 8014530:	68f8      	ldr	r0, [r7, #12]
 8014532:	f000 f811 	bl	8014558 <udp_sendto_if_src>
 8014536:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014538:	4618      	mov	r0, r3
 801453a:	3718      	adds	r7, #24
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}
 8014540:	0801f3d4 	.word	0x0801f3d4
 8014544:	0801f548 	.word	0x0801f548
 8014548:	0801f428 	.word	0x0801f428
 801454c:	0801f564 	.word	0x0801f564
 8014550:	0801f580 	.word	0x0801f580
 8014554:	0801f5a0 	.word	0x0801f5a0

08014558 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b08c      	sub	sp, #48	; 0x30
 801455c:	af04      	add	r7, sp, #16
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	60b9      	str	r1, [r7, #8]
 8014562:	607a      	str	r2, [r7, #4]
 8014564:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d109      	bne.n	8014580 <udp_sendto_if_src+0x28>
 801456c:	4b65      	ldr	r3, [pc, #404]	; (8014704 <udp_sendto_if_src+0x1ac>)
 801456e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014572:	4965      	ldr	r1, [pc, #404]	; (8014708 <udp_sendto_if_src+0x1b0>)
 8014574:	4865      	ldr	r0, [pc, #404]	; (801470c <udp_sendto_if_src+0x1b4>)
 8014576:	f005 fa41 	bl	80199fc <iprintf>
 801457a:	f06f 030f 	mvn.w	r3, #15
 801457e:	e0bc      	b.n	80146fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d109      	bne.n	801459a <udp_sendto_if_src+0x42>
 8014586:	4b5f      	ldr	r3, [pc, #380]	; (8014704 <udp_sendto_if_src+0x1ac>)
 8014588:	f240 22d2 	movw	r2, #722	; 0x2d2
 801458c:	4960      	ldr	r1, [pc, #384]	; (8014710 <udp_sendto_if_src+0x1b8>)
 801458e:	485f      	ldr	r0, [pc, #380]	; (801470c <udp_sendto_if_src+0x1b4>)
 8014590:	f005 fa34 	bl	80199fc <iprintf>
 8014594:	f06f 030f 	mvn.w	r3, #15
 8014598:	e0af      	b.n	80146fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d109      	bne.n	80145b4 <udp_sendto_if_src+0x5c>
 80145a0:	4b58      	ldr	r3, [pc, #352]	; (8014704 <udp_sendto_if_src+0x1ac>)
 80145a2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80145a6:	495b      	ldr	r1, [pc, #364]	; (8014714 <udp_sendto_if_src+0x1bc>)
 80145a8:	4858      	ldr	r0, [pc, #352]	; (801470c <udp_sendto_if_src+0x1b4>)
 80145aa:	f005 fa27 	bl	80199fc <iprintf>
 80145ae:	f06f 030f 	mvn.w	r3, #15
 80145b2:	e0a2      	b.n	80146fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80145b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d109      	bne.n	80145ce <udp_sendto_if_src+0x76>
 80145ba:	4b52      	ldr	r3, [pc, #328]	; (8014704 <udp_sendto_if_src+0x1ac>)
 80145bc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80145c0:	4955      	ldr	r1, [pc, #340]	; (8014718 <udp_sendto_if_src+0x1c0>)
 80145c2:	4852      	ldr	r0, [pc, #328]	; (801470c <udp_sendto_if_src+0x1b4>)
 80145c4:	f005 fa1a 	bl	80199fc <iprintf>
 80145c8:	f06f 030f 	mvn.w	r3, #15
 80145cc:	e095      	b.n	80146fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80145ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d109      	bne.n	80145e8 <udp_sendto_if_src+0x90>
 80145d4:	4b4b      	ldr	r3, [pc, #300]	; (8014704 <udp_sendto_if_src+0x1ac>)
 80145d6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80145da:	4950      	ldr	r1, [pc, #320]	; (801471c <udp_sendto_if_src+0x1c4>)
 80145dc:	484b      	ldr	r0, [pc, #300]	; (801470c <udp_sendto_if_src+0x1b4>)
 80145de:	f005 fa0d 	bl	80199fc <iprintf>
 80145e2:	f06f 030f 	mvn.w	r3, #15
 80145e6:	e088      	b.n	80146fa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	8a5b      	ldrh	r3, [r3, #18]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d10f      	bne.n	8014610 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80145f0:	68f9      	ldr	r1, [r7, #12]
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	8a5b      	ldrh	r3, [r3, #18]
 80145f6:	461a      	mov	r2, r3
 80145f8:	68f8      	ldr	r0, [r7, #12]
 80145fa:	f000 f893 	bl	8014724 <udp_bind>
 80145fe:	4603      	mov	r3, r0
 8014600:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014602:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d002      	beq.n	8014610 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801460a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801460e:	e074      	b.n	80146fa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	891b      	ldrh	r3, [r3, #8]
 8014614:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014618:	4293      	cmp	r3, r2
 801461a:	d902      	bls.n	8014622 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801461c:	f04f 33ff 	mov.w	r3, #4294967295
 8014620:	e06b      	b.n	80146fa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014622:	2108      	movs	r1, #8
 8014624:	68b8      	ldr	r0, [r7, #8]
 8014626:	f7f9 ff4f 	bl	800e4c8 <pbuf_add_header>
 801462a:	4603      	mov	r3, r0
 801462c:	2b00      	cmp	r3, #0
 801462e:	d015      	beq.n	801465c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014630:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014634:	2108      	movs	r1, #8
 8014636:	2022      	movs	r0, #34	; 0x22
 8014638:	f7f9 fcfc 	bl	800e034 <pbuf_alloc>
 801463c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801463e:	69fb      	ldr	r3, [r7, #28]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d102      	bne.n	801464a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014644:	f04f 33ff 	mov.w	r3, #4294967295
 8014648:	e057      	b.n	80146fa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	891b      	ldrh	r3, [r3, #8]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d006      	beq.n	8014660 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014652:	68b9      	ldr	r1, [r7, #8]
 8014654:	69f8      	ldr	r0, [r7, #28]
 8014656:	f7fa f8f1 	bl	800e83c <pbuf_chain>
 801465a:	e001      	b.n	8014660 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014660:	69fb      	ldr	r3, [r7, #28]
 8014662:	895b      	ldrh	r3, [r3, #10]
 8014664:	2b07      	cmp	r3, #7
 8014666:	d806      	bhi.n	8014676 <udp_sendto_if_src+0x11e>
 8014668:	4b26      	ldr	r3, [pc, #152]	; (8014704 <udp_sendto_if_src+0x1ac>)
 801466a:	f240 320e 	movw	r2, #782	; 0x30e
 801466e:	492c      	ldr	r1, [pc, #176]	; (8014720 <udp_sendto_if_src+0x1c8>)
 8014670:	4826      	ldr	r0, [pc, #152]	; (801470c <udp_sendto_if_src+0x1b4>)
 8014672:	f005 f9c3 	bl	80199fc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014676:	69fb      	ldr	r3, [r7, #28]
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	8a5b      	ldrh	r3, [r3, #18]
 8014680:	4618      	mov	r0, r3
 8014682:	f7f8 fc81 	bl	800cf88 <lwip_htons>
 8014686:	4603      	mov	r3, r0
 8014688:	461a      	mov	r2, r3
 801468a:	697b      	ldr	r3, [r7, #20]
 801468c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801468e:	887b      	ldrh	r3, [r7, #2]
 8014690:	4618      	mov	r0, r3
 8014692:	f7f8 fc79 	bl	800cf88 <lwip_htons>
 8014696:	4603      	mov	r3, r0
 8014698:	461a      	mov	r2, r3
 801469a:	697b      	ldr	r3, [r7, #20]
 801469c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801469e:	697b      	ldr	r3, [r7, #20]
 80146a0:	2200      	movs	r2, #0
 80146a2:	719a      	strb	r2, [r3, #6]
 80146a4:	2200      	movs	r2, #0
 80146a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80146a8:	69fb      	ldr	r3, [r7, #28]
 80146aa:	891b      	ldrh	r3, [r3, #8]
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7f8 fc6b 	bl	800cf88 <lwip_htons>
 80146b2:	4603      	mov	r3, r0
 80146b4:	461a      	mov	r2, r3
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80146ba:	2311      	movs	r3, #17
 80146bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	7adb      	ldrb	r3, [r3, #11]
 80146c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	7a9b      	ldrb	r3, [r3, #10]
 80146c8:	7cb9      	ldrb	r1, [r7, #18]
 80146ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146cc:	9202      	str	r2, [sp, #8]
 80146ce:	7cfa      	ldrb	r2, [r7, #19]
 80146d0:	9201      	str	r2, [sp, #4]
 80146d2:	9300      	str	r3, [sp, #0]
 80146d4:	460b      	mov	r3, r1
 80146d6:	687a      	ldr	r2, [r7, #4]
 80146d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80146da:	69f8      	ldr	r0, [r7, #28]
 80146dc:	f003 faf8 	bl	8017cd0 <ip4_output_if_src>
 80146e0:	4603      	mov	r3, r0
 80146e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80146e4:	69fa      	ldr	r2, [r7, #28]
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	429a      	cmp	r2, r3
 80146ea:	d004      	beq.n	80146f6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80146ec:	69f8      	ldr	r0, [r7, #28]
 80146ee:	f7f9 ff81 	bl	800e5f4 <pbuf_free>
    q = NULL;
 80146f2:	2300      	movs	r3, #0
 80146f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80146f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3720      	adds	r7, #32
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}
 8014702:	bf00      	nop
 8014704:	0801f3d4 	.word	0x0801f3d4
 8014708:	0801f5c0 	.word	0x0801f5c0
 801470c:	0801f428 	.word	0x0801f428
 8014710:	0801f5e0 	.word	0x0801f5e0
 8014714:	0801f600 	.word	0x0801f600
 8014718:	0801f624 	.word	0x0801f624
 801471c:	0801f648 	.word	0x0801f648
 8014720:	0801f66c 	.word	0x0801f66c

08014724 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b086      	sub	sp, #24
 8014728:	af00      	add	r7, sp, #0
 801472a:	60f8      	str	r0, [r7, #12]
 801472c:	60b9      	str	r1, [r7, #8]
 801472e:	4613      	mov	r3, r2
 8014730:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d101      	bne.n	801473c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014738:	4b39      	ldr	r3, [pc, #228]	; (8014820 <udp_bind+0xfc>)
 801473a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d109      	bne.n	8014756 <udp_bind+0x32>
 8014742:	4b38      	ldr	r3, [pc, #224]	; (8014824 <udp_bind+0x100>)
 8014744:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014748:	4937      	ldr	r1, [pc, #220]	; (8014828 <udp_bind+0x104>)
 801474a:	4838      	ldr	r0, [pc, #224]	; (801482c <udp_bind+0x108>)
 801474c:	f005 f956 	bl	80199fc <iprintf>
 8014750:	f06f 030f 	mvn.w	r3, #15
 8014754:	e060      	b.n	8014818 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014756:	2300      	movs	r3, #0
 8014758:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801475a:	4b35      	ldr	r3, [pc, #212]	; (8014830 <udp_bind+0x10c>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	617b      	str	r3, [r7, #20]
 8014760:	e009      	b.n	8014776 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014762:	68fa      	ldr	r2, [r7, #12]
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	429a      	cmp	r2, r3
 8014768:	d102      	bne.n	8014770 <udp_bind+0x4c>
      rebind = 1;
 801476a:	2301      	movs	r3, #1
 801476c:	74fb      	strb	r3, [r7, #19]
      break;
 801476e:	e005      	b.n	801477c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	68db      	ldr	r3, [r3, #12]
 8014774:	617b      	str	r3, [r7, #20]
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d1f2      	bne.n	8014762 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801477c:	88fb      	ldrh	r3, [r7, #6]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d109      	bne.n	8014796 <udp_bind+0x72>
    port = udp_new_port();
 8014782:	f7ff fcc5 	bl	8014110 <udp_new_port>
 8014786:	4603      	mov	r3, r0
 8014788:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801478a:	88fb      	ldrh	r3, [r7, #6]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d12c      	bne.n	80147ea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014790:	f06f 0307 	mvn.w	r3, #7
 8014794:	e040      	b.n	8014818 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014796:	4b26      	ldr	r3, [pc, #152]	; (8014830 <udp_bind+0x10c>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	617b      	str	r3, [r7, #20]
 801479c:	e022      	b.n	80147e4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801479e:	68fa      	ldr	r2, [r7, #12]
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	429a      	cmp	r2, r3
 80147a4:	d01b      	beq.n	80147de <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	8a5b      	ldrh	r3, [r3, #18]
 80147aa:	88fa      	ldrh	r2, [r7, #6]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d116      	bne.n	80147de <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80147b8:	429a      	cmp	r2, r3
 80147ba:	d00d      	beq.n	80147d8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d00a      	beq.n	80147d8 <udp_bind+0xb4>
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d006      	beq.n	80147d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80147ca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d003      	beq.n	80147d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d102      	bne.n	80147de <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80147d8:	f06f 0307 	mvn.w	r3, #7
 80147dc:	e01c      	b.n	8014818 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	68db      	ldr	r3, [r3, #12]
 80147e2:	617b      	str	r3, [r7, #20]
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d1d9      	bne.n	801479e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d002      	beq.n	80147f6 <udp_bind+0xd2>
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	e000      	b.n	80147f8 <udp_bind+0xd4>
 80147f6:	2300      	movs	r3, #0
 80147f8:	68fa      	ldr	r2, [r7, #12]
 80147fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	88fa      	ldrh	r2, [r7, #6]
 8014800:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014802:	7cfb      	ldrb	r3, [r7, #19]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d106      	bne.n	8014816 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014808:	4b09      	ldr	r3, [pc, #36]	; (8014830 <udp_bind+0x10c>)
 801480a:	681a      	ldr	r2, [r3, #0]
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014810:	4a07      	ldr	r2, [pc, #28]	; (8014830 <udp_bind+0x10c>)
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014816:	2300      	movs	r3, #0
}
 8014818:	4618      	mov	r0, r3
 801481a:	3718      	adds	r7, #24
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	08021030 	.word	0x08021030
 8014824:	0801f3d4 	.word	0x0801f3d4
 8014828:	0801f69c 	.word	0x0801f69c
 801482c:	0801f428 	.word	0x0801f428
 8014830:	2000b4d8 	.word	0x2000b4d8

08014834 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b086      	sub	sp, #24
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	4613      	mov	r3, r2
 8014840:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d109      	bne.n	801485c <udp_connect+0x28>
 8014848:	4b2c      	ldr	r3, [pc, #176]	; (80148fc <udp_connect+0xc8>)
 801484a:	f240 4235 	movw	r2, #1077	; 0x435
 801484e:	492c      	ldr	r1, [pc, #176]	; (8014900 <udp_connect+0xcc>)
 8014850:	482c      	ldr	r0, [pc, #176]	; (8014904 <udp_connect+0xd0>)
 8014852:	f005 f8d3 	bl	80199fc <iprintf>
 8014856:	f06f 030f 	mvn.w	r3, #15
 801485a:	e04b      	b.n	80148f4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801485c:	68bb      	ldr	r3, [r7, #8]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d109      	bne.n	8014876 <udp_connect+0x42>
 8014862:	4b26      	ldr	r3, [pc, #152]	; (80148fc <udp_connect+0xc8>)
 8014864:	f240 4236 	movw	r2, #1078	; 0x436
 8014868:	4927      	ldr	r1, [pc, #156]	; (8014908 <udp_connect+0xd4>)
 801486a:	4826      	ldr	r0, [pc, #152]	; (8014904 <udp_connect+0xd0>)
 801486c:	f005 f8c6 	bl	80199fc <iprintf>
 8014870:	f06f 030f 	mvn.w	r3, #15
 8014874:	e03e      	b.n	80148f4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	8a5b      	ldrh	r3, [r3, #18]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d10f      	bne.n	801489e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801487e:	68f9      	ldr	r1, [r7, #12]
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	8a5b      	ldrh	r3, [r3, #18]
 8014884:	461a      	mov	r2, r3
 8014886:	68f8      	ldr	r0, [r7, #12]
 8014888:	f7ff ff4c 	bl	8014724 <udp_bind>
 801488c:	4603      	mov	r3, r0
 801488e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014890:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d002      	beq.n	801489e <udp_connect+0x6a>
      return err;
 8014898:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801489c:	e02a      	b.n	80148f4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d002      	beq.n	80148aa <udp_connect+0x76>
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	e000      	b.n	80148ac <udp_connect+0x78>
 80148aa:	2300      	movs	r3, #0
 80148ac:	68fa      	ldr	r2, [r7, #12]
 80148ae:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	88fa      	ldrh	r2, [r7, #6]
 80148b4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	7c1b      	ldrb	r3, [r3, #16]
 80148ba:	f043 0304 	orr.w	r3, r3, #4
 80148be:	b2da      	uxtb	r2, r3
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148c4:	4b11      	ldr	r3, [pc, #68]	; (801490c <udp_connect+0xd8>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	617b      	str	r3, [r7, #20]
 80148ca:	e008      	b.n	80148de <udp_connect+0xaa>
    if (pcb == ipcb) {
 80148cc:	68fa      	ldr	r2, [r7, #12]
 80148ce:	697b      	ldr	r3, [r7, #20]
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d101      	bne.n	80148d8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80148d4:	2300      	movs	r3, #0
 80148d6:	e00d      	b.n	80148f4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148d8:	697b      	ldr	r3, [r7, #20]
 80148da:	68db      	ldr	r3, [r3, #12]
 80148dc:	617b      	str	r3, [r7, #20]
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d1f3      	bne.n	80148cc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80148e4:	4b09      	ldr	r3, [pc, #36]	; (801490c <udp_connect+0xd8>)
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80148ec:	4a07      	ldr	r2, [pc, #28]	; (801490c <udp_connect+0xd8>)
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80148f2:	2300      	movs	r3, #0
}
 80148f4:	4618      	mov	r0, r3
 80148f6:	3718      	adds	r7, #24
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}
 80148fc:	0801f3d4 	.word	0x0801f3d4
 8014900:	0801f6b4 	.word	0x0801f6b4
 8014904:	0801f428 	.word	0x0801f428
 8014908:	0801f6d0 	.word	0x0801f6d0
 801490c:	2000b4d8 	.word	0x2000b4d8

08014910 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b084      	sub	sp, #16
 8014914:	af00      	add	r7, sp, #0
 8014916:	60f8      	str	r0, [r7, #12]
 8014918:	60b9      	str	r1, [r7, #8]
 801491a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d107      	bne.n	8014932 <udp_recv+0x22>
 8014922:	4b08      	ldr	r3, [pc, #32]	; (8014944 <udp_recv+0x34>)
 8014924:	f240 428a 	movw	r2, #1162	; 0x48a
 8014928:	4907      	ldr	r1, [pc, #28]	; (8014948 <udp_recv+0x38>)
 801492a:	4808      	ldr	r0, [pc, #32]	; (801494c <udp_recv+0x3c>)
 801492c:	f005 f866 	bl	80199fc <iprintf>
 8014930:	e005      	b.n	801493e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	687a      	ldr	r2, [r7, #4]
 801493c:	61da      	str	r2, [r3, #28]
}
 801493e:	3710      	adds	r7, #16
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}
 8014944:	0801f3d4 	.word	0x0801f3d4
 8014948:	0801f708 	.word	0x0801f708
 801494c:	0801f428 	.word	0x0801f428

08014950 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b084      	sub	sp, #16
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d107      	bne.n	801496e <udp_remove+0x1e>
 801495e:	4b19      	ldr	r3, [pc, #100]	; (80149c4 <udp_remove+0x74>)
 8014960:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014964:	4918      	ldr	r1, [pc, #96]	; (80149c8 <udp_remove+0x78>)
 8014966:	4819      	ldr	r0, [pc, #100]	; (80149cc <udp_remove+0x7c>)
 8014968:	f005 f848 	bl	80199fc <iprintf>
 801496c:	e026      	b.n	80149bc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801496e:	4b18      	ldr	r3, [pc, #96]	; (80149d0 <udp_remove+0x80>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	687a      	ldr	r2, [r7, #4]
 8014974:	429a      	cmp	r2, r3
 8014976:	d105      	bne.n	8014984 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014978:	4b15      	ldr	r3, [pc, #84]	; (80149d0 <udp_remove+0x80>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	68db      	ldr	r3, [r3, #12]
 801497e:	4a14      	ldr	r2, [pc, #80]	; (80149d0 <udp_remove+0x80>)
 8014980:	6013      	str	r3, [r2, #0]
 8014982:	e017      	b.n	80149b4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014984:	4b12      	ldr	r3, [pc, #72]	; (80149d0 <udp_remove+0x80>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	60fb      	str	r3, [r7, #12]
 801498a:	e010      	b.n	80149ae <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	68db      	ldr	r3, [r3, #12]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d009      	beq.n	80149a8 <udp_remove+0x58>
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	68db      	ldr	r3, [r3, #12]
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	429a      	cmp	r2, r3
 801499c:	d104      	bne.n	80149a8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	68da      	ldr	r2, [r3, #12]
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	60da      	str	r2, [r3, #12]
        break;
 80149a6:	e005      	b.n	80149b4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	68db      	ldr	r3, [r3, #12]
 80149ac:	60fb      	str	r3, [r7, #12]
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d1eb      	bne.n	801498c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80149b4:	6879      	ldr	r1, [r7, #4]
 80149b6:	2000      	movs	r0, #0
 80149b8:	f7f8 ffee 	bl	800d998 <memp_free>
}
 80149bc:	3710      	adds	r7, #16
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}
 80149c2:	bf00      	nop
 80149c4:	0801f3d4 	.word	0x0801f3d4
 80149c8:	0801f720 	.word	0x0801f720
 80149cc:	0801f428 	.word	0x0801f428
 80149d0:	2000b4d8 	.word	0x2000b4d8

080149d4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80149da:	2000      	movs	r0, #0
 80149dc:	f7f8 ff8a 	bl	800d8f4 <memp_malloc>
 80149e0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d007      	beq.n	80149f8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80149e8:	2220      	movs	r2, #32
 80149ea:	2100      	movs	r1, #0
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f004 faf8 	bl	8018fe2 <memset>
    pcb->ttl = UDP_TTL;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	22ff      	movs	r2, #255	; 0xff
 80149f6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80149f8:	687b      	ldr	r3, [r7, #4]
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3708      	adds	r7, #8
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
	...

08014a04 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014a04:	b480      	push	{r7}
 8014a06:	b085      	sub	sp, #20
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d01e      	beq.n	8014a52 <udp_netif_ip_addr_changed+0x4e>
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d01a      	beq.n	8014a52 <udp_netif_ip_addr_changed+0x4e>
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d017      	beq.n	8014a52 <udp_netif_ip_addr_changed+0x4e>
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d013      	beq.n	8014a52 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a2a:	4b0d      	ldr	r3, [pc, #52]	; (8014a60 <udp_netif_ip_addr_changed+0x5c>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	60fb      	str	r3, [r7, #12]
 8014a30:	e00c      	b.n	8014a4c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d103      	bne.n	8014a46 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	681a      	ldr	r2, [r3, #0]
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	68db      	ldr	r3, [r3, #12]
 8014a4a:	60fb      	str	r3, [r7, #12]
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d1ef      	bne.n	8014a32 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014a52:	bf00      	nop
 8014a54:	3714      	adds	r7, #20
 8014a56:	46bd      	mov	sp, r7
 8014a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5c:	4770      	bx	lr
 8014a5e:	bf00      	nop
 8014a60:	2000b4d8 	.word	0x2000b4d8

08014a64 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014a68:	4b20      	ldr	r3, [pc, #128]	; (8014aec <dhcp_inc_pcb_refcount+0x88>)
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d133      	bne.n	8014ad8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014a70:	4b1f      	ldr	r3, [pc, #124]	; (8014af0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d005      	beq.n	8014a84 <dhcp_inc_pcb_refcount+0x20>
 8014a78:	4b1e      	ldr	r3, [pc, #120]	; (8014af4 <dhcp_inc_pcb_refcount+0x90>)
 8014a7a:	22e5      	movs	r2, #229	; 0xe5
 8014a7c:	491e      	ldr	r1, [pc, #120]	; (8014af8 <dhcp_inc_pcb_refcount+0x94>)
 8014a7e:	481f      	ldr	r0, [pc, #124]	; (8014afc <dhcp_inc_pcb_refcount+0x98>)
 8014a80:	f004 ffbc 	bl	80199fc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014a84:	f7ff ffa6 	bl	80149d4 <udp_new>
 8014a88:	4602      	mov	r2, r0
 8014a8a:	4b19      	ldr	r3, [pc, #100]	; (8014af0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a8c:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8014a8e:	4b18      	ldr	r3, [pc, #96]	; (8014af0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d102      	bne.n	8014a9c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014a96:	f04f 33ff 	mov.w	r3, #4294967295
 8014a9a:	e024      	b.n	8014ae6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014a9c:	4b14      	ldr	r3, [pc, #80]	; (8014af0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	7a5a      	ldrb	r2, [r3, #9]
 8014aa2:	4b13      	ldr	r3, [pc, #76]	; (8014af0 <dhcp_inc_pcb_refcount+0x8c>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	f042 0220 	orr.w	r2, r2, #32
 8014aaa:	b2d2      	uxtb	r2, r2
 8014aac:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014aae:	4b10      	ldr	r3, [pc, #64]	; (8014af0 <dhcp_inc_pcb_refcount+0x8c>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2244      	movs	r2, #68	; 0x44
 8014ab4:	4912      	ldr	r1, [pc, #72]	; (8014b00 <dhcp_inc_pcb_refcount+0x9c>)
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7ff fe34 	bl	8014724 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014abc:	4b0c      	ldr	r3, [pc, #48]	; (8014af0 <dhcp_inc_pcb_refcount+0x8c>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2243      	movs	r2, #67	; 0x43
 8014ac2:	490f      	ldr	r1, [pc, #60]	; (8014b00 <dhcp_inc_pcb_refcount+0x9c>)
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7ff feb5 	bl	8014834 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014aca:	4b09      	ldr	r3, [pc, #36]	; (8014af0 <dhcp_inc_pcb_refcount+0x8c>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	2200      	movs	r2, #0
 8014ad0:	490c      	ldr	r1, [pc, #48]	; (8014b04 <dhcp_inc_pcb_refcount+0xa0>)
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7ff ff1c 	bl	8014910 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014ad8:	4b04      	ldr	r3, [pc, #16]	; (8014aec <dhcp_inc_pcb_refcount+0x88>)
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	3301      	adds	r3, #1
 8014ade:	b2da      	uxtb	r2, r3
 8014ae0:	4b02      	ldr	r3, [pc, #8]	; (8014aec <dhcp_inc_pcb_refcount+0x88>)
 8014ae2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014ae4:	2300      	movs	r3, #0
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	20004758 	.word	0x20004758
 8014af0:	20004754 	.word	0x20004754
 8014af4:	0801f738 	.word	0x0801f738
 8014af8:	0801f770 	.word	0x0801f770
 8014afc:	0801f798 	.word	0x0801f798
 8014b00:	08021030 	.word	0x08021030
 8014b04:	08016321 	.word	0x08016321

08014b08 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014b0c:	4b0e      	ldr	r3, [pc, #56]	; (8014b48 <dhcp_dec_pcb_refcount+0x40>)
 8014b0e:	781b      	ldrb	r3, [r3, #0]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d105      	bne.n	8014b20 <dhcp_dec_pcb_refcount+0x18>
 8014b14:	4b0d      	ldr	r3, [pc, #52]	; (8014b4c <dhcp_dec_pcb_refcount+0x44>)
 8014b16:	22ff      	movs	r2, #255	; 0xff
 8014b18:	490d      	ldr	r1, [pc, #52]	; (8014b50 <dhcp_dec_pcb_refcount+0x48>)
 8014b1a:	480e      	ldr	r0, [pc, #56]	; (8014b54 <dhcp_dec_pcb_refcount+0x4c>)
 8014b1c:	f004 ff6e 	bl	80199fc <iprintf>
  dhcp_pcb_refcount--;
 8014b20:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <dhcp_dec_pcb_refcount+0x40>)
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	3b01      	subs	r3, #1
 8014b26:	b2da      	uxtb	r2, r3
 8014b28:	4b07      	ldr	r3, [pc, #28]	; (8014b48 <dhcp_dec_pcb_refcount+0x40>)
 8014b2a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014b2c:	4b06      	ldr	r3, [pc, #24]	; (8014b48 <dhcp_dec_pcb_refcount+0x40>)
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d107      	bne.n	8014b44 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014b34:	4b08      	ldr	r3, [pc, #32]	; (8014b58 <dhcp_dec_pcb_refcount+0x50>)
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7ff ff09 	bl	8014950 <udp_remove>
    dhcp_pcb = NULL;
 8014b3e:	4b06      	ldr	r3, [pc, #24]	; (8014b58 <dhcp_dec_pcb_refcount+0x50>)
 8014b40:	2200      	movs	r2, #0
 8014b42:	601a      	str	r2, [r3, #0]
  }
}
 8014b44:	bf00      	nop
 8014b46:	bd80      	pop	{r7, pc}
 8014b48:	20004758 	.word	0x20004758
 8014b4c:	0801f738 	.word	0x0801f738
 8014b50:	0801f7c0 	.word	0x0801f7c0
 8014b54:	0801f798 	.word	0x0801f798
 8014b58:	20004754 	.word	0x20004754

08014b5c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b084      	sub	sp, #16
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	6a1b      	ldr	r3, [r3, #32]
 8014b68:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014b6a:	210c      	movs	r1, #12
 8014b6c:	68f8      	ldr	r0, [r7, #12]
 8014b6e:	f001 f819 	bl	8015ba4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014b72:	4b06      	ldr	r3, [pc, #24]	; (8014b8c <dhcp_handle_nak+0x30>)
 8014b74:	4a05      	ldr	r2, [pc, #20]	; (8014b8c <dhcp_handle_nak+0x30>)
 8014b76:	4905      	ldr	r1, [pc, #20]	; (8014b8c <dhcp_handle_nak+0x30>)
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f7f9 f8ab 	bl	800dcd4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 fc0c 	bl	801539c <dhcp_discover>
}
 8014b84:	bf00      	nop
 8014b86:	3710      	adds	r7, #16
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}
 8014b8c:	08021030 	.word	0x08021030

08014b90 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b084      	sub	sp, #16
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6a1b      	ldr	r3, [r3, #32]
 8014b9c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014b9e:	2108      	movs	r1, #8
 8014ba0:	68f8      	ldr	r0, [r7, #12]
 8014ba2:	f000 ffff 	bl	8015ba4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	331c      	adds	r3, #28
 8014baa:	2200      	movs	r2, #0
 8014bac:	4619      	mov	r1, r3
 8014bae:	6878      	ldr	r0, [r7, #4]
 8014bb0:	f002 fafe 	bl	80171b0 <etharp_query>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	799b      	ldrb	r3, [r3, #6]
 8014bbc:	2bff      	cmp	r3, #255	; 0xff
 8014bbe:	d005      	beq.n	8014bcc <dhcp_check+0x3c>
    dhcp->tries++;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	799b      	ldrb	r3, [r3, #6]
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	b2da      	uxtb	r2, r3
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014bcc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014bd0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014bd2:	893b      	ldrh	r3, [r7, #8]
 8014bd4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014bd8:	4a06      	ldr	r2, [pc, #24]	; (8014bf4 <dhcp_check+0x64>)
 8014bda:	fb82 1203 	smull	r1, r2, r2, r3
 8014bde:	1152      	asrs	r2, r2, #5
 8014be0:	17db      	asrs	r3, r3, #31
 8014be2:	1ad3      	subs	r3, r2, r3
 8014be4:	b29a      	uxth	r2, r3
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014bea:	bf00      	nop
 8014bec:	3710      	adds	r7, #16
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	10624dd3 	.word	0x10624dd3

08014bf8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	6a1b      	ldr	r3, [r3, #32]
 8014c06:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014c08:	4b0c      	ldr	r3, [pc, #48]	; (8014c3c <dhcp_handle_offer+0x44>)
 8014c0a:	789b      	ldrb	r3, [r3, #2]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d011      	beq.n	8014c34 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	2200      	movs	r2, #0
 8014c14:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014c16:	4b0a      	ldr	r3, [pc, #40]	; (8014c40 <dhcp_handle_offer+0x48>)
 8014c18:	689b      	ldr	r3, [r3, #8]
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7f8 f9c9 	bl	800cfb2 <lwip_htonl>
 8014c20:	4602      	mov	r2, r0
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	691a      	ldr	r2, [r3, #16]
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f000 f808 	bl	8014c44 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014c34:	bf00      	nop
 8014c36:	3710      	adds	r7, #16
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	2000b4dc 	.word	0x2000b4dc
 8014c40:	2000b4e4 	.word	0x2000b4e4

08014c44 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014c44:	b5b0      	push	{r4, r5, r7, lr}
 8014c46:	b08a      	sub	sp, #40	; 0x28
 8014c48:	af02      	add	r7, sp, #8
 8014c4a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d109      	bne.n	8014c66 <dhcp_select+0x22>
 8014c52:	4b71      	ldr	r3, [pc, #452]	; (8014e18 <dhcp_select+0x1d4>)
 8014c54:	f240 1277 	movw	r2, #375	; 0x177
 8014c58:	4970      	ldr	r1, [pc, #448]	; (8014e1c <dhcp_select+0x1d8>)
 8014c5a:	4871      	ldr	r0, [pc, #452]	; (8014e20 <dhcp_select+0x1dc>)
 8014c5c:	f004 fece 	bl	80199fc <iprintf>
 8014c60:	f06f 030f 	mvn.w	r3, #15
 8014c64:	e0d3      	b.n	8014e0e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6a1b      	ldr	r3, [r3, #32]
 8014c6a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014c6c:	69bb      	ldr	r3, [r7, #24]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d109      	bne.n	8014c86 <dhcp_select+0x42>
 8014c72:	4b69      	ldr	r3, [pc, #420]	; (8014e18 <dhcp_select+0x1d4>)
 8014c74:	f240 1279 	movw	r2, #377	; 0x179
 8014c78:	496a      	ldr	r1, [pc, #424]	; (8014e24 <dhcp_select+0x1e0>)
 8014c7a:	4869      	ldr	r0, [pc, #420]	; (8014e20 <dhcp_select+0x1dc>)
 8014c7c:	f004 febe 	bl	80199fc <iprintf>
 8014c80:	f06f 0305 	mvn.w	r3, #5
 8014c84:	e0c3      	b.n	8014e0e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014c86:	2101      	movs	r1, #1
 8014c88:	69b8      	ldr	r0, [r7, #24]
 8014c8a:	f000 ff8b 	bl	8015ba4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014c8e:	f107 030c 	add.w	r3, r7, #12
 8014c92:	2203      	movs	r2, #3
 8014c94:	69b9      	ldr	r1, [r7, #24]
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f001 fc0e 	bl	80164b8 <dhcp_create_msg>
 8014c9c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	f000 8085 	beq.w	8014db0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	685b      	ldr	r3, [r3, #4]
 8014caa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014cac:	89b8      	ldrh	r0, [r7, #12]
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cb4:	2302      	movs	r3, #2
 8014cb6:	2239      	movs	r2, #57	; 0x39
 8014cb8:	f000 ff8e 	bl	8015bd8 <dhcp_option>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014cc0:	89b8      	ldrh	r0, [r7, #12]
 8014cc2:	693b      	ldr	r3, [r7, #16]
 8014cc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014ccc:	461a      	mov	r2, r3
 8014cce:	f000 ffdd 	bl	8015c8c <dhcp_option_short>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014cd6:	89b8      	ldrh	r0, [r7, #12]
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cde:	2304      	movs	r3, #4
 8014ce0:	2232      	movs	r2, #50	; 0x32
 8014ce2:	f000 ff79 	bl	8015bd8 <dhcp_option>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014cea:	89bc      	ldrh	r4, [r7, #12]
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014cf2:	69bb      	ldr	r3, [r7, #24]
 8014cf4:	69db      	ldr	r3, [r3, #28]
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7f8 f95b 	bl	800cfb2 <lwip_htonl>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	461a      	mov	r2, r3
 8014d00:	4629      	mov	r1, r5
 8014d02:	4620      	mov	r0, r4
 8014d04:	f000 fff4 	bl	8015cf0 <dhcp_option_long>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014d0c:	89b8      	ldrh	r0, [r7, #12]
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d14:	2304      	movs	r3, #4
 8014d16:	2236      	movs	r2, #54	; 0x36
 8014d18:	f000 ff5e 	bl	8015bd8 <dhcp_option>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014d20:	89bc      	ldrh	r4, [r7, #12]
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014d28:	69bb      	ldr	r3, [r7, #24]
 8014d2a:	699b      	ldr	r3, [r3, #24]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7f8 f940 	bl	800cfb2 <lwip_htonl>
 8014d32:	4603      	mov	r3, r0
 8014d34:	461a      	mov	r2, r3
 8014d36:	4629      	mov	r1, r5
 8014d38:	4620      	mov	r0, r4
 8014d3a:	f000 ffd9 	bl	8015cf0 <dhcp_option_long>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014d42:	89b8      	ldrh	r0, [r7, #12]
 8014d44:	693b      	ldr	r3, [r7, #16]
 8014d46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d4a:	2303      	movs	r3, #3
 8014d4c:	2237      	movs	r2, #55	; 0x37
 8014d4e:	f000 ff43 	bl	8015bd8 <dhcp_option>
 8014d52:	4603      	mov	r3, r0
 8014d54:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d56:	2300      	movs	r3, #0
 8014d58:	77bb      	strb	r3, [r7, #30]
 8014d5a:	e00e      	b.n	8014d7a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014d5c:	89b8      	ldrh	r0, [r7, #12]
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d64:	7fbb      	ldrb	r3, [r7, #30]
 8014d66:	4a30      	ldr	r2, [pc, #192]	; (8014e28 <dhcp_select+0x1e4>)
 8014d68:	5cd3      	ldrb	r3, [r2, r3]
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	f000 ff68 	bl	8015c40 <dhcp_option_byte>
 8014d70:	4603      	mov	r3, r0
 8014d72:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d74:	7fbb      	ldrb	r3, [r7, #30]
 8014d76:	3301      	adds	r3, #1
 8014d78:	77bb      	strb	r3, [r7, #30]
 8014d7a:	7fbb      	ldrb	r3, [r7, #30]
 8014d7c:	2b02      	cmp	r3, #2
 8014d7e:	d9ed      	bls.n	8014d5c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014d80:	89b8      	ldrh	r0, [r7, #12]
 8014d82:	693b      	ldr	r3, [r7, #16]
 8014d84:	33f0      	adds	r3, #240	; 0xf0
 8014d86:	697a      	ldr	r2, [r7, #20]
 8014d88:	4619      	mov	r1, r3
 8014d8a:	f001 fc6b 	bl	8016664 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014d8e:	4b27      	ldr	r3, [pc, #156]	; (8014e2c <dhcp_select+0x1e8>)
 8014d90:	6818      	ldr	r0, [r3, #0]
 8014d92:	4b27      	ldr	r3, [pc, #156]	; (8014e30 <dhcp_select+0x1ec>)
 8014d94:	9301      	str	r3, [sp, #4]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	9300      	str	r3, [sp, #0]
 8014d9a:	2343      	movs	r3, #67	; 0x43
 8014d9c:	4a25      	ldr	r2, [pc, #148]	; (8014e34 <dhcp_select+0x1f0>)
 8014d9e:	6979      	ldr	r1, [r7, #20]
 8014da0:	f7ff fbda 	bl	8014558 <udp_sendto_if_src>
 8014da4:	4603      	mov	r3, r0
 8014da6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014da8:	6978      	ldr	r0, [r7, #20]
 8014daa:	f7f9 fc23 	bl	800e5f4 <pbuf_free>
 8014dae:	e001      	b.n	8014db4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014db0:	23ff      	movs	r3, #255	; 0xff
 8014db2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014db4:	69bb      	ldr	r3, [r7, #24]
 8014db6:	799b      	ldrb	r3, [r3, #6]
 8014db8:	2bff      	cmp	r3, #255	; 0xff
 8014dba:	d005      	beq.n	8014dc8 <dhcp_select+0x184>
    dhcp->tries++;
 8014dbc:	69bb      	ldr	r3, [r7, #24]
 8014dbe:	799b      	ldrb	r3, [r3, #6]
 8014dc0:	3301      	adds	r3, #1
 8014dc2:	b2da      	uxtb	r2, r3
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014dc8:	69bb      	ldr	r3, [r7, #24]
 8014dca:	799b      	ldrb	r3, [r3, #6]
 8014dcc:	2b05      	cmp	r3, #5
 8014dce:	d80d      	bhi.n	8014dec <dhcp_select+0x1a8>
 8014dd0:	69bb      	ldr	r3, [r7, #24]
 8014dd2:	799b      	ldrb	r3, [r3, #6]
 8014dd4:	461a      	mov	r2, r3
 8014dd6:	2301      	movs	r3, #1
 8014dd8:	4093      	lsls	r3, r2
 8014dda:	b29b      	uxth	r3, r3
 8014ddc:	461a      	mov	r2, r3
 8014dde:	0152      	lsls	r2, r2, #5
 8014de0:	1ad2      	subs	r2, r2, r3
 8014de2:	0092      	lsls	r2, r2, #2
 8014de4:	4413      	add	r3, r2
 8014de6:	00db      	lsls	r3, r3, #3
 8014de8:	b29b      	uxth	r3, r3
 8014dea:	e001      	b.n	8014df0 <dhcp_select+0x1ac>
 8014dec:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014df0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014df2:	89fb      	ldrh	r3, [r7, #14]
 8014df4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014df8:	4a0f      	ldr	r2, [pc, #60]	; (8014e38 <dhcp_select+0x1f4>)
 8014dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8014dfe:	1152      	asrs	r2, r2, #5
 8014e00:	17db      	asrs	r3, r3, #31
 8014e02:	1ad3      	subs	r3, r2, r3
 8014e04:	b29a      	uxth	r2, r3
 8014e06:	69bb      	ldr	r3, [r7, #24]
 8014e08:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014e0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e0e:	4618      	mov	r0, r3
 8014e10:	3720      	adds	r7, #32
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bdb0      	pop	{r4, r5, r7, pc}
 8014e16:	bf00      	nop
 8014e18:	0801f738 	.word	0x0801f738
 8014e1c:	0801f7e4 	.word	0x0801f7e4
 8014e20:	0801f798 	.word	0x0801f798
 8014e24:	0801f800 	.word	0x0801f800
 8014e28:	200000bc 	.word	0x200000bc
 8014e2c:	20004754 	.word	0x20004754
 8014e30:	08021030 	.word	0x08021030
 8014e34:	08021034 	.word	0x08021034
 8014e38:	10624dd3 	.word	0x10624dd3

08014e3c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b082      	sub	sp, #8
 8014e40:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014e42:	4b27      	ldr	r3, [pc, #156]	; (8014ee0 <dhcp_coarse_tmr+0xa4>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	607b      	str	r3, [r7, #4]
 8014e48:	e042      	b.n	8014ed0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	6a1b      	ldr	r3, [r3, #32]
 8014e4e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d039      	beq.n	8014eca <dhcp_coarse_tmr+0x8e>
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	795b      	ldrb	r3, [r3, #5]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d035      	beq.n	8014eca <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	8a9b      	ldrh	r3, [r3, #20]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d012      	beq.n	8014e8c <dhcp_coarse_tmr+0x50>
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	8a5b      	ldrh	r3, [r3, #18]
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	b29a      	uxth	r2, r3
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	825a      	strh	r2, [r3, #18]
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	8a5a      	ldrh	r2, [r3, #18]
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	8a9b      	ldrh	r3, [r3, #20]
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d106      	bne.n	8014e8c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f000 fdf6 	bl	8015a70 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f000 f969 	bl	801515c <dhcp_start>
 8014e8a:	e01e      	b.n	8014eca <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	8a1b      	ldrh	r3, [r3, #16]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d00b      	beq.n	8014eac <dhcp_coarse_tmr+0x70>
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	8a1b      	ldrh	r3, [r3, #16]
 8014e98:	1e5a      	subs	r2, r3, #1
 8014e9a:	b291      	uxth	r1, r2
 8014e9c:	683a      	ldr	r2, [r7, #0]
 8014e9e:	8211      	strh	r1, [r2, #16]
 8014ea0:	2b01      	cmp	r3, #1
 8014ea2:	d103      	bne.n	8014eac <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014ea4:	6878      	ldr	r0, [r7, #4]
 8014ea6:	f000 f8c6 	bl	8015036 <dhcp_t2_timeout>
 8014eaa:	e00e      	b.n	8014eca <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014eac:	683b      	ldr	r3, [r7, #0]
 8014eae:	89db      	ldrh	r3, [r3, #14]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d00a      	beq.n	8014eca <dhcp_coarse_tmr+0x8e>
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	89db      	ldrh	r3, [r3, #14]
 8014eb8:	1e5a      	subs	r2, r3, #1
 8014eba:	b291      	uxth	r1, r2
 8014ebc:	683a      	ldr	r2, [r7, #0]
 8014ebe:	81d1      	strh	r1, [r2, #14]
 8014ec0:	2b01      	cmp	r3, #1
 8014ec2:	d102      	bne.n	8014eca <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f000 f888 	bl	8014fda <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	607b      	str	r3, [r7, #4]
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d1b9      	bne.n	8014e4a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014ed6:	bf00      	nop
 8014ed8:	3708      	adds	r7, #8
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop
 8014ee0:	2000b4b0 	.word	0x2000b4b0

08014ee4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014eea:	4b16      	ldr	r3, [pc, #88]	; (8014f44 <dhcp_fine_tmr+0x60>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	607b      	str	r3, [r7, #4]
 8014ef0:	e020      	b.n	8014f34 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	6a1b      	ldr	r3, [r3, #32]
 8014ef6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d017      	beq.n	8014f2e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	891b      	ldrh	r3, [r3, #8]
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d906      	bls.n	8014f14 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	891b      	ldrh	r3, [r3, #8]
 8014f0a:	3b01      	subs	r3, #1
 8014f0c:	b29a      	uxth	r2, r3
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	811a      	strh	r2, [r3, #8]
 8014f12:	e00c      	b.n	8014f2e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	891b      	ldrh	r3, [r3, #8]
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d108      	bne.n	8014f2e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	891b      	ldrh	r3, [r3, #8]
 8014f20:	3b01      	subs	r3, #1
 8014f22:	b29a      	uxth	r2, r3
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f000 f80d 	bl	8014f48 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	607b      	str	r3, [r7, #4]
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d1db      	bne.n	8014ef2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014f3a:	bf00      	nop
 8014f3c:	3708      	adds	r7, #8
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	2000b4b0 	.word	0x2000b4b0

08014f48 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b084      	sub	sp, #16
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	6a1b      	ldr	r3, [r3, #32]
 8014f54:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	795b      	ldrb	r3, [r3, #5]
 8014f5a:	2b0c      	cmp	r3, #12
 8014f5c:	d003      	beq.n	8014f66 <dhcp_timeout+0x1e>
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	795b      	ldrb	r3, [r3, #5]
 8014f62:	2b06      	cmp	r3, #6
 8014f64:	d103      	bne.n	8014f6e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f000 fa18 	bl	801539c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014f6c:	e031      	b.n	8014fd2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	795b      	ldrb	r3, [r3, #5]
 8014f72:	2b01      	cmp	r3, #1
 8014f74:	d10e      	bne.n	8014f94 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	799b      	ldrb	r3, [r3, #6]
 8014f7a:	2b05      	cmp	r3, #5
 8014f7c:	d803      	bhi.n	8014f86 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014f7e:	6878      	ldr	r0, [r7, #4]
 8014f80:	f7ff fe60 	bl	8014c44 <dhcp_select>
}
 8014f84:	e025      	b.n	8014fd2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014f86:	6878      	ldr	r0, [r7, #4]
 8014f88:	f000 fd72 	bl	8015a70 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	f000 f8e5 	bl	801515c <dhcp_start>
}
 8014f92:	e01e      	b.n	8014fd2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	795b      	ldrb	r3, [r3, #5]
 8014f98:	2b08      	cmp	r3, #8
 8014f9a:	d10b      	bne.n	8014fb4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	799b      	ldrb	r3, [r3, #6]
 8014fa0:	2b01      	cmp	r3, #1
 8014fa2:	d803      	bhi.n	8014fac <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f7ff fdf3 	bl	8014b90 <dhcp_check>
}
 8014faa:	e012      	b.n	8014fd2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014fac:	6878      	ldr	r0, [r7, #4]
 8014fae:	f000 fa97 	bl	80154e0 <dhcp_bind>
}
 8014fb2:	e00e      	b.n	8014fd2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	795b      	ldrb	r3, [r3, #5]
 8014fb8:	2b03      	cmp	r3, #3
 8014fba:	d10a      	bne.n	8014fd2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	799b      	ldrb	r3, [r3, #6]
 8014fc0:	2b01      	cmp	r3, #1
 8014fc2:	d803      	bhi.n	8014fcc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f000 fc9d 	bl	8015904 <dhcp_reboot>
}
 8014fca:	e002      	b.n	8014fd2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f000 f9e5 	bl	801539c <dhcp_discover>
}
 8014fd2:	bf00      	nop
 8014fd4:	3710      	adds	r7, #16
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}

08014fda <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014fda:	b580      	push	{r7, lr}
 8014fdc:	b084      	sub	sp, #16
 8014fde:	af00      	add	r7, sp, #0
 8014fe0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6a1b      	ldr	r3, [r3, #32]
 8014fe6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	795b      	ldrb	r3, [r3, #5]
 8014fec:	2b01      	cmp	r3, #1
 8014fee:	d007      	beq.n	8015000 <dhcp_t1_timeout+0x26>
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	795b      	ldrb	r3, [r3, #5]
 8014ff4:	2b0a      	cmp	r3, #10
 8014ff6:	d003      	beq.n	8015000 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014ffc:	2b05      	cmp	r3, #5
 8014ffe:	d116      	bne.n	801502e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f000 fb47 	bl	8015694 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	899b      	ldrh	r3, [r3, #12]
 801500a:	461a      	mov	r2, r3
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	8a5b      	ldrh	r3, [r3, #18]
 8015010:	1ad3      	subs	r3, r2, r3
 8015012:	2b01      	cmp	r3, #1
 8015014:	dd0b      	ble.n	801502e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	899b      	ldrh	r3, [r3, #12]
 801501a:	461a      	mov	r2, r3
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	8a5b      	ldrh	r3, [r3, #18]
 8015020:	1ad3      	subs	r3, r2, r3
 8015022:	0fda      	lsrs	r2, r3, #31
 8015024:	4413      	add	r3, r2
 8015026:	105b      	asrs	r3, r3, #1
 8015028:	b29a      	uxth	r2, r3
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801502e:	bf00      	nop
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}

08015036 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015036:	b580      	push	{r7, lr}
 8015038:	b084      	sub	sp, #16
 801503a:	af00      	add	r7, sp, #0
 801503c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	6a1b      	ldr	r3, [r3, #32]
 8015042:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	795b      	ldrb	r3, [r3, #5]
 8015048:	2b01      	cmp	r3, #1
 801504a:	d00b      	beq.n	8015064 <dhcp_t2_timeout+0x2e>
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	795b      	ldrb	r3, [r3, #5]
 8015050:	2b0a      	cmp	r3, #10
 8015052:	d007      	beq.n	8015064 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015058:	2b05      	cmp	r3, #5
 801505a:	d003      	beq.n	8015064 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	795b      	ldrb	r3, [r3, #5]
 8015060:	2b04      	cmp	r3, #4
 8015062:	d116      	bne.n	8015092 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f000 fbb1 	bl	80157cc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	8a9b      	ldrh	r3, [r3, #20]
 801506e:	461a      	mov	r2, r3
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	8a5b      	ldrh	r3, [r3, #18]
 8015074:	1ad3      	subs	r3, r2, r3
 8015076:	2b01      	cmp	r3, #1
 8015078:	dd0b      	ble.n	8015092 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	8a9b      	ldrh	r3, [r3, #20]
 801507e:	461a      	mov	r2, r3
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	8a5b      	ldrh	r3, [r3, #18]
 8015084:	1ad3      	subs	r3, r2, r3
 8015086:	0fda      	lsrs	r2, r3, #31
 8015088:	4413      	add	r3, r2
 801508a:	105b      	asrs	r3, r3, #1
 801508c:	b29a      	uxth	r2, r3
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8015092:	bf00      	nop
 8015094:	3710      	adds	r7, #16
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}
	...

0801509c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6a1b      	ldr	r3, [r3, #32]
 80150aa:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	2200      	movs	r2, #0
 80150b0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	2200      	movs	r2, #0
 80150b6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80150b8:	4b26      	ldr	r3, [pc, #152]	; (8015154 <dhcp_handle_ack+0xb8>)
 80150ba:	78db      	ldrb	r3, [r3, #3]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d003      	beq.n	80150c8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80150c0:	4b25      	ldr	r3, [pc, #148]	; (8015158 <dhcp_handle_ack+0xbc>)
 80150c2:	68da      	ldr	r2, [r3, #12]
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80150c8:	4b22      	ldr	r3, [pc, #136]	; (8015154 <dhcp_handle_ack+0xb8>)
 80150ca:	791b      	ldrb	r3, [r3, #4]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d004      	beq.n	80150da <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80150d0:	4b21      	ldr	r3, [pc, #132]	; (8015158 <dhcp_handle_ack+0xbc>)
 80150d2:	691a      	ldr	r2, [r3, #16]
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80150d8:	e004      	b.n	80150e4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150de:	085a      	lsrs	r2, r3, #1
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80150e4:	4b1b      	ldr	r3, [pc, #108]	; (8015154 <dhcp_handle_ack+0xb8>)
 80150e6:	795b      	ldrb	r3, [r3, #5]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d004      	beq.n	80150f6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80150ec:	4b1a      	ldr	r3, [pc, #104]	; (8015158 <dhcp_handle_ack+0xbc>)
 80150ee:	695a      	ldr	r2, [r3, #20]
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	631a      	str	r2, [r3, #48]	; 0x30
 80150f4:	e007      	b.n	8015106 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80150fa:	4613      	mov	r3, r2
 80150fc:	00db      	lsls	r3, r3, #3
 80150fe:	1a9b      	subs	r3, r3, r2
 8015100:	08da      	lsrs	r2, r3, #3
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	691a      	ldr	r2, [r3, #16]
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801510e:	4b11      	ldr	r3, [pc, #68]	; (8015154 <dhcp_handle_ack+0xb8>)
 8015110:	799b      	ldrb	r3, [r3, #6]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d00b      	beq.n	801512e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015116:	4b10      	ldr	r3, [pc, #64]	; (8015158 <dhcp_handle_ack+0xbc>)
 8015118:	699b      	ldr	r3, [r3, #24]
 801511a:	4618      	mov	r0, r3
 801511c:	f7f7 ff49 	bl	800cfb2 <lwip_htonl>
 8015120:	4602      	mov	r2, r0
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	2201      	movs	r2, #1
 801512a:	71da      	strb	r2, [r3, #7]
 801512c:	e002      	b.n	8015134 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	2200      	movs	r2, #0
 8015132:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015134:	4b07      	ldr	r3, [pc, #28]	; (8015154 <dhcp_handle_ack+0xb8>)
 8015136:	79db      	ldrb	r3, [r3, #7]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d007      	beq.n	801514c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801513c:	4b06      	ldr	r3, [pc, #24]	; (8015158 <dhcp_handle_ack+0xbc>)
 801513e:	69db      	ldr	r3, [r3, #28]
 8015140:	4618      	mov	r0, r3
 8015142:	f7f7 ff36 	bl	800cfb2 <lwip_htonl>
 8015146:	4602      	mov	r2, r0
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801514c:	bf00      	nop
 801514e:	3710      	adds	r7, #16
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}
 8015154:	2000b4dc 	.word	0x2000b4dc
 8015158:	2000b4e4 	.word	0x2000b4e4

0801515c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b084      	sub	sp, #16
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d109      	bne.n	801517e <dhcp_start+0x22>
 801516a:	4b37      	ldr	r3, [pc, #220]	; (8015248 <dhcp_start+0xec>)
 801516c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015170:	4936      	ldr	r1, [pc, #216]	; (801524c <dhcp_start+0xf0>)
 8015172:	4837      	ldr	r0, [pc, #220]	; (8015250 <dhcp_start+0xf4>)
 8015174:	f004 fc42 	bl	80199fc <iprintf>
 8015178:	f06f 030f 	mvn.w	r3, #15
 801517c:	e060      	b.n	8015240 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015184:	f003 0301 	and.w	r3, r3, #1
 8015188:	2b00      	cmp	r3, #0
 801518a:	d109      	bne.n	80151a0 <dhcp_start+0x44>
 801518c:	4b2e      	ldr	r3, [pc, #184]	; (8015248 <dhcp_start+0xec>)
 801518e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8015192:	4930      	ldr	r1, [pc, #192]	; (8015254 <dhcp_start+0xf8>)
 8015194:	482e      	ldr	r0, [pc, #184]	; (8015250 <dhcp_start+0xf4>)
 8015196:	f004 fc31 	bl	80199fc <iprintf>
 801519a:	f06f 030f 	mvn.w	r3, #15
 801519e:	e04f      	b.n	8015240 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	6a1b      	ldr	r3, [r3, #32]
 80151a4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80151aa:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80151ae:	d202      	bcs.n	80151b6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80151b0:	f04f 33ff 	mov.w	r3, #4294967295
 80151b4:	e044      	b.n	8015240 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d10d      	bne.n	80151d8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80151bc:	2034      	movs	r0, #52	; 0x34
 80151be:	f7f8 fa17 	bl	800d5f0 <mem_malloc>
 80151c2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d102      	bne.n	80151d0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80151ca:	f04f 33ff 	mov.w	r3, #4294967295
 80151ce:	e037      	b.n	8015240 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	68fa      	ldr	r2, [r7, #12]
 80151d4:	621a      	str	r2, [r3, #32]
 80151d6:	e005      	b.n	80151e4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	791b      	ldrb	r3, [r3, #4]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d001      	beq.n	80151e4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80151e0:	f7ff fc92 	bl	8014b08 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80151e4:	2234      	movs	r2, #52	; 0x34
 80151e6:	2100      	movs	r1, #0
 80151e8:	68f8      	ldr	r0, [r7, #12]
 80151ea:	f003 fefa 	bl	8018fe2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80151ee:	f7ff fc39 	bl	8014a64 <dhcp_inc_pcb_refcount>
 80151f2:	4603      	mov	r3, r0
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d002      	beq.n	80151fe <dhcp_start+0xa2>
    return ERR_MEM;
 80151f8:	f04f 33ff 	mov.w	r3, #4294967295
 80151fc:	e020      	b.n	8015240 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2201      	movs	r2, #1
 8015202:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801520a:	f003 0304 	and.w	r3, r3, #4
 801520e:	2b00      	cmp	r3, #0
 8015210:	d105      	bne.n	801521e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8015212:	2102      	movs	r1, #2
 8015214:	68f8      	ldr	r0, [r7, #12]
 8015216:	f000 fcc5 	bl	8015ba4 <dhcp_set_state>
    return ERR_OK;
 801521a:	2300      	movs	r3, #0
 801521c:	e010      	b.n	8015240 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f000 f8bc 	bl	801539c <dhcp_discover>
 8015224:	4603      	mov	r3, r0
 8015226:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015228:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d005      	beq.n	801523c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f000 fc1d 	bl	8015a70 <dhcp_release_and_stop>
    return ERR_MEM;
 8015236:	f04f 33ff 	mov.w	r3, #4294967295
 801523a:	e001      	b.n	8015240 <dhcp_start+0xe4>
  }
  return result;
 801523c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015240:	4618      	mov	r0, r3
 8015242:	3710      	adds	r7, #16
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}
 8015248:	0801f738 	.word	0x0801f738
 801524c:	0801f81c 	.word	0x0801f81c
 8015250:	0801f798 	.word	0x0801f798
 8015254:	0801f860 	.word	0x0801f860

08015258 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b084      	sub	sp, #16
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d107      	bne.n	8015278 <dhcp_arp_reply+0x20>
 8015268:	4b0e      	ldr	r3, [pc, #56]	; (80152a4 <dhcp_arp_reply+0x4c>)
 801526a:	f240 328b 	movw	r2, #907	; 0x38b
 801526e:	490e      	ldr	r1, [pc, #56]	; (80152a8 <dhcp_arp_reply+0x50>)
 8015270:	480e      	ldr	r0, [pc, #56]	; (80152ac <dhcp_arp_reply+0x54>)
 8015272:	f004 fbc3 	bl	80199fc <iprintf>
 8015276:	e012      	b.n	801529e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6a1b      	ldr	r3, [r3, #32]
 801527c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d00c      	beq.n	801529e <dhcp_arp_reply+0x46>
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	795b      	ldrb	r3, [r3, #5]
 8015288:	2b08      	cmp	r3, #8
 801528a:	d108      	bne.n	801529e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	681a      	ldr	r2, [r3, #0]
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	69db      	ldr	r3, [r3, #28]
 8015294:	429a      	cmp	r2, r3
 8015296:	d102      	bne.n	801529e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	f000 f809 	bl	80152b0 <dhcp_decline>
    }
  }
}
 801529e:	3710      	adds	r7, #16
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}
 80152a4:	0801f738 	.word	0x0801f738
 80152a8:	0801f81c 	.word	0x0801f81c
 80152ac:	0801f798 	.word	0x0801f798

080152b0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80152b0:	b5b0      	push	{r4, r5, r7, lr}
 80152b2:	b08a      	sub	sp, #40	; 0x28
 80152b4:	af02      	add	r7, sp, #8
 80152b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6a1b      	ldr	r3, [r3, #32]
 80152bc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80152be:	210c      	movs	r1, #12
 80152c0:	69b8      	ldr	r0, [r7, #24]
 80152c2:	f000 fc6f 	bl	8015ba4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80152c6:	f107 030c 	add.w	r3, r7, #12
 80152ca:	2204      	movs	r2, #4
 80152cc:	69b9      	ldr	r1, [r7, #24]
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f001 f8f2 	bl	80164b8 <dhcp_create_msg>
 80152d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d035      	beq.n	8015348 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80152e2:	89b8      	ldrh	r0, [r7, #12]
 80152e4:	693b      	ldr	r3, [r7, #16]
 80152e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152ea:	2304      	movs	r3, #4
 80152ec:	2232      	movs	r2, #50	; 0x32
 80152ee:	f000 fc73 	bl	8015bd8 <dhcp_option>
 80152f2:	4603      	mov	r3, r0
 80152f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80152f6:	89bc      	ldrh	r4, [r7, #12]
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80152fe:	69bb      	ldr	r3, [r7, #24]
 8015300:	69db      	ldr	r3, [r3, #28]
 8015302:	4618      	mov	r0, r3
 8015304:	f7f7 fe55 	bl	800cfb2 <lwip_htonl>
 8015308:	4603      	mov	r3, r0
 801530a:	461a      	mov	r2, r3
 801530c:	4629      	mov	r1, r5
 801530e:	4620      	mov	r0, r4
 8015310:	f000 fcee 	bl	8015cf0 <dhcp_option_long>
 8015314:	4603      	mov	r3, r0
 8015316:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015318:	89b8      	ldrh	r0, [r7, #12]
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	33f0      	adds	r3, #240	; 0xf0
 801531e:	697a      	ldr	r2, [r7, #20]
 8015320:	4619      	mov	r1, r3
 8015322:	f001 f99f 	bl	8016664 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015326:	4b19      	ldr	r3, [pc, #100]	; (801538c <dhcp_decline+0xdc>)
 8015328:	6818      	ldr	r0, [r3, #0]
 801532a:	4b19      	ldr	r3, [pc, #100]	; (8015390 <dhcp_decline+0xe0>)
 801532c:	9301      	str	r3, [sp, #4]
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	9300      	str	r3, [sp, #0]
 8015332:	2343      	movs	r3, #67	; 0x43
 8015334:	4a17      	ldr	r2, [pc, #92]	; (8015394 <dhcp_decline+0xe4>)
 8015336:	6979      	ldr	r1, [r7, #20]
 8015338:	f7ff f90e 	bl	8014558 <udp_sendto_if_src>
 801533c:	4603      	mov	r3, r0
 801533e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015340:	6978      	ldr	r0, [r7, #20]
 8015342:	f7f9 f957 	bl	800e5f4 <pbuf_free>
 8015346:	e001      	b.n	801534c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015348:	23ff      	movs	r3, #255	; 0xff
 801534a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801534c:	69bb      	ldr	r3, [r7, #24]
 801534e:	799b      	ldrb	r3, [r3, #6]
 8015350:	2bff      	cmp	r3, #255	; 0xff
 8015352:	d005      	beq.n	8015360 <dhcp_decline+0xb0>
    dhcp->tries++;
 8015354:	69bb      	ldr	r3, [r7, #24]
 8015356:	799b      	ldrb	r3, [r3, #6]
 8015358:	3301      	adds	r3, #1
 801535a:	b2da      	uxtb	r2, r3
 801535c:	69bb      	ldr	r3, [r7, #24]
 801535e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015360:	f242 7310 	movw	r3, #10000	; 0x2710
 8015364:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015366:	89fb      	ldrh	r3, [r7, #14]
 8015368:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801536c:	4a0a      	ldr	r2, [pc, #40]	; (8015398 <dhcp_decline+0xe8>)
 801536e:	fb82 1203 	smull	r1, r2, r2, r3
 8015372:	1152      	asrs	r2, r2, #5
 8015374:	17db      	asrs	r3, r3, #31
 8015376:	1ad3      	subs	r3, r2, r3
 8015378:	b29a      	uxth	r2, r3
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801537e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015382:	4618      	mov	r0, r3
 8015384:	3720      	adds	r7, #32
 8015386:	46bd      	mov	sp, r7
 8015388:	bdb0      	pop	{r4, r5, r7, pc}
 801538a:	bf00      	nop
 801538c:	20004754 	.word	0x20004754
 8015390:	08021030 	.word	0x08021030
 8015394:	08021034 	.word	0x08021034
 8015398:	10624dd3 	.word	0x10624dd3

0801539c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b08a      	sub	sp, #40	; 0x28
 80153a0:	af02      	add	r7, sp, #8
 80153a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6a1b      	ldr	r3, [r3, #32]
 80153a8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80153aa:	2300      	movs	r3, #0
 80153ac:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80153ae:	69bb      	ldr	r3, [r7, #24]
 80153b0:	2200      	movs	r2, #0
 80153b2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80153b4:	2106      	movs	r1, #6
 80153b6:	69b8      	ldr	r0, [r7, #24]
 80153b8:	f000 fbf4 	bl	8015ba4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80153bc:	f107 0308 	add.w	r3, r7, #8
 80153c0:	2201      	movs	r2, #1
 80153c2:	69b9      	ldr	r1, [r7, #24]
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f001 f877 	bl	80164b8 <dhcp_create_msg>
 80153ca:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d04b      	beq.n	801546a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	685b      	ldr	r3, [r3, #4]
 80153d6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80153d8:	8938      	ldrh	r0, [r7, #8]
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153e0:	2302      	movs	r3, #2
 80153e2:	2239      	movs	r2, #57	; 0x39
 80153e4:	f000 fbf8 	bl	8015bd8 <dhcp_option>
 80153e8:	4603      	mov	r3, r0
 80153ea:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80153ec:	8938      	ldrh	r0, [r7, #8]
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80153f8:	461a      	mov	r2, r3
 80153fa:	f000 fc47 	bl	8015c8c <dhcp_option_short>
 80153fe:	4603      	mov	r3, r0
 8015400:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015402:	8938      	ldrh	r0, [r7, #8]
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801540a:	2303      	movs	r3, #3
 801540c:	2237      	movs	r2, #55	; 0x37
 801540e:	f000 fbe3 	bl	8015bd8 <dhcp_option>
 8015412:	4603      	mov	r3, r0
 8015414:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015416:	2300      	movs	r3, #0
 8015418:	77fb      	strb	r3, [r7, #31]
 801541a:	e00e      	b.n	801543a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801541c:	8938      	ldrh	r0, [r7, #8]
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015424:	7ffb      	ldrb	r3, [r7, #31]
 8015426:	4a29      	ldr	r2, [pc, #164]	; (80154cc <dhcp_discover+0x130>)
 8015428:	5cd3      	ldrb	r3, [r2, r3]
 801542a:	461a      	mov	r2, r3
 801542c:	f000 fc08 	bl	8015c40 <dhcp_option_byte>
 8015430:	4603      	mov	r3, r0
 8015432:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015434:	7ffb      	ldrb	r3, [r7, #31]
 8015436:	3301      	adds	r3, #1
 8015438:	77fb      	strb	r3, [r7, #31]
 801543a:	7ffb      	ldrb	r3, [r7, #31]
 801543c:	2b02      	cmp	r3, #2
 801543e:	d9ed      	bls.n	801541c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015440:	8938      	ldrh	r0, [r7, #8]
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	33f0      	adds	r3, #240	; 0xf0
 8015446:	693a      	ldr	r2, [r7, #16]
 8015448:	4619      	mov	r1, r3
 801544a:	f001 f90b 	bl	8016664 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801544e:	4b20      	ldr	r3, [pc, #128]	; (80154d0 <dhcp_discover+0x134>)
 8015450:	6818      	ldr	r0, [r3, #0]
 8015452:	4b20      	ldr	r3, [pc, #128]	; (80154d4 <dhcp_discover+0x138>)
 8015454:	9301      	str	r3, [sp, #4]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	9300      	str	r3, [sp, #0]
 801545a:	2343      	movs	r3, #67	; 0x43
 801545c:	4a1e      	ldr	r2, [pc, #120]	; (80154d8 <dhcp_discover+0x13c>)
 801545e:	6939      	ldr	r1, [r7, #16]
 8015460:	f7ff f87a 	bl	8014558 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015464:	6938      	ldr	r0, [r7, #16]
 8015466:	f7f9 f8c5 	bl	800e5f4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801546a:	69bb      	ldr	r3, [r7, #24]
 801546c:	799b      	ldrb	r3, [r3, #6]
 801546e:	2bff      	cmp	r3, #255	; 0xff
 8015470:	d005      	beq.n	801547e <dhcp_discover+0xe2>
    dhcp->tries++;
 8015472:	69bb      	ldr	r3, [r7, #24]
 8015474:	799b      	ldrb	r3, [r3, #6]
 8015476:	3301      	adds	r3, #1
 8015478:	b2da      	uxtb	r2, r3
 801547a:	69bb      	ldr	r3, [r7, #24]
 801547c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	799b      	ldrb	r3, [r3, #6]
 8015482:	2b05      	cmp	r3, #5
 8015484:	d80d      	bhi.n	80154a2 <dhcp_discover+0x106>
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	799b      	ldrb	r3, [r3, #6]
 801548a:	461a      	mov	r2, r3
 801548c:	2301      	movs	r3, #1
 801548e:	4093      	lsls	r3, r2
 8015490:	b29b      	uxth	r3, r3
 8015492:	461a      	mov	r2, r3
 8015494:	0152      	lsls	r2, r2, #5
 8015496:	1ad2      	subs	r2, r2, r3
 8015498:	0092      	lsls	r2, r2, #2
 801549a:	4413      	add	r3, r2
 801549c:	00db      	lsls	r3, r3, #3
 801549e:	b29b      	uxth	r3, r3
 80154a0:	e001      	b.n	80154a6 <dhcp_discover+0x10a>
 80154a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80154a6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80154a8:	897b      	ldrh	r3, [r7, #10]
 80154aa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80154ae:	4a0b      	ldr	r2, [pc, #44]	; (80154dc <dhcp_discover+0x140>)
 80154b0:	fb82 1203 	smull	r1, r2, r2, r3
 80154b4:	1152      	asrs	r2, r2, #5
 80154b6:	17db      	asrs	r3, r3, #31
 80154b8:	1ad3      	subs	r3, r2, r3
 80154ba:	b29a      	uxth	r2, r3
 80154bc:	69bb      	ldr	r3, [r7, #24]
 80154be:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80154c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154c4:	4618      	mov	r0, r3
 80154c6:	3720      	adds	r7, #32
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}
 80154cc:	200000bc 	.word	0x200000bc
 80154d0:	20004754 	.word	0x20004754
 80154d4:	08021030 	.word	0x08021030
 80154d8:	08021034 	.word	0x08021034
 80154dc:	10624dd3 	.word	0x10624dd3

080154e0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b088      	sub	sp, #32
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d107      	bne.n	80154fe <dhcp_bind+0x1e>
 80154ee:	4b64      	ldr	r3, [pc, #400]	; (8015680 <dhcp_bind+0x1a0>)
 80154f0:	f240 4215 	movw	r2, #1045	; 0x415
 80154f4:	4963      	ldr	r1, [pc, #396]	; (8015684 <dhcp_bind+0x1a4>)
 80154f6:	4864      	ldr	r0, [pc, #400]	; (8015688 <dhcp_bind+0x1a8>)
 80154f8:	f004 fa80 	bl	80199fc <iprintf>
 80154fc:	e0bc      	b.n	8015678 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	6a1b      	ldr	r3, [r3, #32]
 8015502:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015504:	69bb      	ldr	r3, [r7, #24]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d107      	bne.n	801551a <dhcp_bind+0x3a>
 801550a:	4b5d      	ldr	r3, [pc, #372]	; (8015680 <dhcp_bind+0x1a0>)
 801550c:	f240 4217 	movw	r2, #1047	; 0x417
 8015510:	495e      	ldr	r1, [pc, #376]	; (801568c <dhcp_bind+0x1ac>)
 8015512:	485d      	ldr	r0, [pc, #372]	; (8015688 <dhcp_bind+0x1a8>)
 8015514:	f004 fa72 	bl	80199fc <iprintf>
 8015518:	e0ae      	b.n	8015678 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801551a:	69bb      	ldr	r3, [r7, #24]
 801551c:	2200      	movs	r2, #0
 801551e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015520:	69bb      	ldr	r3, [r7, #24]
 8015522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015528:	d019      	beq.n	801555e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801552a:	69bb      	ldr	r3, [r7, #24]
 801552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801552e:	331e      	adds	r3, #30
 8015530:	4a57      	ldr	r2, [pc, #348]	; (8015690 <dhcp_bind+0x1b0>)
 8015532:	fba2 2303 	umull	r2, r3, r2, r3
 8015536:	095b      	lsrs	r3, r3, #5
 8015538:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801553a:	69fb      	ldr	r3, [r7, #28]
 801553c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015540:	d302      	bcc.n	8015548 <dhcp_bind+0x68>
      timeout = 0xffff;
 8015542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015546:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015548:	69fb      	ldr	r3, [r7, #28]
 801554a:	b29a      	uxth	r2, r3
 801554c:	69bb      	ldr	r3, [r7, #24]
 801554e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015550:	69bb      	ldr	r3, [r7, #24]
 8015552:	8a9b      	ldrh	r3, [r3, #20]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d102      	bne.n	801555e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015558:	69bb      	ldr	r3, [r7, #24]
 801555a:	2201      	movs	r2, #1
 801555c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801555e:	69bb      	ldr	r3, [r7, #24]
 8015560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015566:	d01d      	beq.n	80155a4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015568:	69bb      	ldr	r3, [r7, #24]
 801556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801556c:	331e      	adds	r3, #30
 801556e:	4a48      	ldr	r2, [pc, #288]	; (8015690 <dhcp_bind+0x1b0>)
 8015570:	fba2 2303 	umull	r2, r3, r2, r3
 8015574:	095b      	lsrs	r3, r3, #5
 8015576:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015578:	69fb      	ldr	r3, [r7, #28]
 801557a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801557e:	d302      	bcc.n	8015586 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015584:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015586:	69fb      	ldr	r3, [r7, #28]
 8015588:	b29a      	uxth	r2, r3
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801558e:	69bb      	ldr	r3, [r7, #24]
 8015590:	895b      	ldrh	r3, [r3, #10]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d102      	bne.n	801559c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015596:	69bb      	ldr	r3, [r7, #24]
 8015598:	2201      	movs	r2, #1
 801559a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801559c:	69bb      	ldr	r3, [r7, #24]
 801559e:	895a      	ldrh	r2, [r3, #10]
 80155a0:	69bb      	ldr	r3, [r7, #24]
 80155a2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80155a4:	69bb      	ldr	r3, [r7, #24]
 80155a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ac:	d01d      	beq.n	80155ea <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80155ae:	69bb      	ldr	r3, [r7, #24]
 80155b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155b2:	331e      	adds	r3, #30
 80155b4:	4a36      	ldr	r2, [pc, #216]	; (8015690 <dhcp_bind+0x1b0>)
 80155b6:	fba2 2303 	umull	r2, r3, r2, r3
 80155ba:	095b      	lsrs	r3, r3, #5
 80155bc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80155be:	69fb      	ldr	r3, [r7, #28]
 80155c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155c4:	d302      	bcc.n	80155cc <dhcp_bind+0xec>
      timeout = 0xffff;
 80155c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155ca:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80155cc:	69fb      	ldr	r3, [r7, #28]
 80155ce:	b29a      	uxth	r2, r3
 80155d0:	69bb      	ldr	r3, [r7, #24]
 80155d2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80155d4:	69bb      	ldr	r3, [r7, #24]
 80155d6:	899b      	ldrh	r3, [r3, #12]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d102      	bne.n	80155e2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80155dc:	69bb      	ldr	r3, [r7, #24]
 80155de:	2201      	movs	r2, #1
 80155e0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80155e2:	69bb      	ldr	r3, [r7, #24]
 80155e4:	899a      	ldrh	r2, [r3, #12]
 80155e6:	69bb      	ldr	r3, [r7, #24]
 80155e8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80155ea:	69bb      	ldr	r3, [r7, #24]
 80155ec:	895a      	ldrh	r2, [r3, #10]
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	899b      	ldrh	r3, [r3, #12]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d306      	bcc.n	8015604 <dhcp_bind+0x124>
 80155f6:	69bb      	ldr	r3, [r7, #24]
 80155f8:	899b      	ldrh	r3, [r3, #12]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d002      	beq.n	8015604 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80155fe:	69bb      	ldr	r3, [r7, #24]
 8015600:	2200      	movs	r2, #0
 8015602:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015604:	69bb      	ldr	r3, [r7, #24]
 8015606:	79db      	ldrb	r3, [r3, #7]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d003      	beq.n	8015614 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	6a1b      	ldr	r3, [r3, #32]
 8015610:	613b      	str	r3, [r7, #16]
 8015612:	e014      	b.n	801563e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015614:	69bb      	ldr	r3, [r7, #24]
 8015616:	331c      	adds	r3, #28
 8015618:	781b      	ldrb	r3, [r3, #0]
 801561a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801561c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015620:	2b00      	cmp	r3, #0
 8015622:	db02      	blt.n	801562a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015624:	23ff      	movs	r3, #255	; 0xff
 8015626:	613b      	str	r3, [r7, #16]
 8015628:	e009      	b.n	801563e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801562a:	7dfb      	ldrb	r3, [r7, #23]
 801562c:	2bbf      	cmp	r3, #191	; 0xbf
 801562e:	d903      	bls.n	8015638 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015630:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015634:	613b      	str	r3, [r7, #16]
 8015636:	e002      	b.n	801563e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801563c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015642:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d108      	bne.n	801565c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801564a:	69bb      	ldr	r3, [r7, #24]
 801564c:	69da      	ldr	r2, [r3, #28]
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	4013      	ands	r3, r2
 8015652:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801565a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801565c:	210a      	movs	r1, #10
 801565e:	69b8      	ldr	r0, [r7, #24]
 8015660:	f000 faa0 	bl	8015ba4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015664:	69bb      	ldr	r3, [r7, #24]
 8015666:	f103 011c 	add.w	r1, r3, #28
 801566a:	f107 030c 	add.w	r3, r7, #12
 801566e:	f107 0210 	add.w	r2, r7, #16
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	f7f8 fb2e 	bl	800dcd4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015678:	3720      	adds	r7, #32
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}
 801567e:	bf00      	nop
 8015680:	0801f738 	.word	0x0801f738
 8015684:	0801f898 	.word	0x0801f898
 8015688:	0801f798 	.word	0x0801f798
 801568c:	0801f8b4 	.word	0x0801f8b4
 8015690:	88888889 	.word	0x88888889

08015694 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b08a      	sub	sp, #40	; 0x28
 8015698:	af02      	add	r7, sp, #8
 801569a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	6a1b      	ldr	r3, [r3, #32]
 80156a0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80156a2:	2105      	movs	r1, #5
 80156a4:	69b8      	ldr	r0, [r7, #24]
 80156a6:	f000 fa7d 	bl	8015ba4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80156aa:	f107 030c 	add.w	r3, r7, #12
 80156ae:	2203      	movs	r2, #3
 80156b0:	69b9      	ldr	r1, [r7, #24]
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f000 ff00 	bl	80164b8 <dhcp_create_msg>
 80156b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d04e      	beq.n	801575e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80156c6:	89b8      	ldrh	r0, [r7, #12]
 80156c8:	693b      	ldr	r3, [r7, #16]
 80156ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80156ce:	2302      	movs	r3, #2
 80156d0:	2239      	movs	r2, #57	; 0x39
 80156d2:	f000 fa81 	bl	8015bd8 <dhcp_option>
 80156d6:	4603      	mov	r3, r0
 80156d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80156da:	89b8      	ldrh	r0, [r7, #12]
 80156dc:	693b      	ldr	r3, [r7, #16]
 80156de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80156e6:	461a      	mov	r2, r3
 80156e8:	f000 fad0 	bl	8015c8c <dhcp_option_short>
 80156ec:	4603      	mov	r3, r0
 80156ee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80156f0:	89b8      	ldrh	r0, [r7, #12]
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80156f8:	2303      	movs	r3, #3
 80156fa:	2237      	movs	r2, #55	; 0x37
 80156fc:	f000 fa6c 	bl	8015bd8 <dhcp_option>
 8015700:	4603      	mov	r3, r0
 8015702:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015704:	2300      	movs	r3, #0
 8015706:	77bb      	strb	r3, [r7, #30]
 8015708:	e00e      	b.n	8015728 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801570a:	89b8      	ldrh	r0, [r7, #12]
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015712:	7fbb      	ldrb	r3, [r7, #30]
 8015714:	4a2a      	ldr	r2, [pc, #168]	; (80157c0 <dhcp_renew+0x12c>)
 8015716:	5cd3      	ldrb	r3, [r2, r3]
 8015718:	461a      	mov	r2, r3
 801571a:	f000 fa91 	bl	8015c40 <dhcp_option_byte>
 801571e:	4603      	mov	r3, r0
 8015720:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015722:	7fbb      	ldrb	r3, [r7, #30]
 8015724:	3301      	adds	r3, #1
 8015726:	77bb      	strb	r3, [r7, #30]
 8015728:	7fbb      	ldrb	r3, [r7, #30]
 801572a:	2b02      	cmp	r3, #2
 801572c:	d9ed      	bls.n	801570a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801572e:	89b8      	ldrh	r0, [r7, #12]
 8015730:	693b      	ldr	r3, [r7, #16]
 8015732:	33f0      	adds	r3, #240	; 0xf0
 8015734:	697a      	ldr	r2, [r7, #20]
 8015736:	4619      	mov	r1, r3
 8015738:	f000 ff94 	bl	8016664 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801573c:	4b21      	ldr	r3, [pc, #132]	; (80157c4 <dhcp_renew+0x130>)
 801573e:	6818      	ldr	r0, [r3, #0]
 8015740:	69bb      	ldr	r3, [r7, #24]
 8015742:	f103 0218 	add.w	r2, r3, #24
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	9300      	str	r3, [sp, #0]
 801574a:	2343      	movs	r3, #67	; 0x43
 801574c:	6979      	ldr	r1, [r7, #20]
 801574e:	f7fe fe8f 	bl	8014470 <udp_sendto_if>
 8015752:	4603      	mov	r3, r0
 8015754:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015756:	6978      	ldr	r0, [r7, #20]
 8015758:	f7f8 ff4c 	bl	800e5f4 <pbuf_free>
 801575c:	e001      	b.n	8015762 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801575e:	23ff      	movs	r3, #255	; 0xff
 8015760:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015762:	69bb      	ldr	r3, [r7, #24]
 8015764:	799b      	ldrb	r3, [r3, #6]
 8015766:	2bff      	cmp	r3, #255	; 0xff
 8015768:	d005      	beq.n	8015776 <dhcp_renew+0xe2>
    dhcp->tries++;
 801576a:	69bb      	ldr	r3, [r7, #24]
 801576c:	799b      	ldrb	r3, [r3, #6]
 801576e:	3301      	adds	r3, #1
 8015770:	b2da      	uxtb	r2, r3
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015776:	69bb      	ldr	r3, [r7, #24]
 8015778:	799b      	ldrb	r3, [r3, #6]
 801577a:	2b09      	cmp	r3, #9
 801577c:	d80a      	bhi.n	8015794 <dhcp_renew+0x100>
 801577e:	69bb      	ldr	r3, [r7, #24]
 8015780:	799b      	ldrb	r3, [r3, #6]
 8015782:	b29b      	uxth	r3, r3
 8015784:	461a      	mov	r2, r3
 8015786:	0152      	lsls	r2, r2, #5
 8015788:	1ad2      	subs	r2, r2, r3
 801578a:	0092      	lsls	r2, r2, #2
 801578c:	4413      	add	r3, r2
 801578e:	011b      	lsls	r3, r3, #4
 8015790:	b29b      	uxth	r3, r3
 8015792:	e001      	b.n	8015798 <dhcp_renew+0x104>
 8015794:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015798:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801579a:	89fb      	ldrh	r3, [r7, #14]
 801579c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80157a0:	4a09      	ldr	r2, [pc, #36]	; (80157c8 <dhcp_renew+0x134>)
 80157a2:	fb82 1203 	smull	r1, r2, r2, r3
 80157a6:	1152      	asrs	r2, r2, #5
 80157a8:	17db      	asrs	r3, r3, #31
 80157aa:	1ad3      	subs	r3, r2, r3
 80157ac:	b29a      	uxth	r2, r3
 80157ae:	69bb      	ldr	r3, [r7, #24]
 80157b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80157b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3720      	adds	r7, #32
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}
 80157be:	bf00      	nop
 80157c0:	200000bc 	.word	0x200000bc
 80157c4:	20004754 	.word	0x20004754
 80157c8:	10624dd3 	.word	0x10624dd3

080157cc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b08a      	sub	sp, #40	; 0x28
 80157d0:	af02      	add	r7, sp, #8
 80157d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6a1b      	ldr	r3, [r3, #32]
 80157d8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80157da:	2104      	movs	r1, #4
 80157dc:	69b8      	ldr	r0, [r7, #24]
 80157de:	f000 f9e1 	bl	8015ba4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80157e2:	f107 030c 	add.w	r3, r7, #12
 80157e6:	2203      	movs	r2, #3
 80157e8:	69b9      	ldr	r1, [r7, #24]
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f000 fe64 	bl	80164b8 <dhcp_create_msg>
 80157f0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d04c      	beq.n	8015892 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	685b      	ldr	r3, [r3, #4]
 80157fc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80157fe:	89b8      	ldrh	r0, [r7, #12]
 8015800:	693b      	ldr	r3, [r7, #16]
 8015802:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015806:	2302      	movs	r3, #2
 8015808:	2239      	movs	r2, #57	; 0x39
 801580a:	f000 f9e5 	bl	8015bd8 <dhcp_option>
 801580e:	4603      	mov	r3, r0
 8015810:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015812:	89b8      	ldrh	r0, [r7, #12]
 8015814:	693b      	ldr	r3, [r7, #16]
 8015816:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801581e:	461a      	mov	r2, r3
 8015820:	f000 fa34 	bl	8015c8c <dhcp_option_short>
 8015824:	4603      	mov	r3, r0
 8015826:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015828:	89b8      	ldrh	r0, [r7, #12]
 801582a:	693b      	ldr	r3, [r7, #16]
 801582c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015830:	2303      	movs	r3, #3
 8015832:	2237      	movs	r2, #55	; 0x37
 8015834:	f000 f9d0 	bl	8015bd8 <dhcp_option>
 8015838:	4603      	mov	r3, r0
 801583a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801583c:	2300      	movs	r3, #0
 801583e:	77bb      	strb	r3, [r7, #30]
 8015840:	e00e      	b.n	8015860 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015842:	89b8      	ldrh	r0, [r7, #12]
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801584a:	7fbb      	ldrb	r3, [r7, #30]
 801584c:	4a29      	ldr	r2, [pc, #164]	; (80158f4 <dhcp_rebind+0x128>)
 801584e:	5cd3      	ldrb	r3, [r2, r3]
 8015850:	461a      	mov	r2, r3
 8015852:	f000 f9f5 	bl	8015c40 <dhcp_option_byte>
 8015856:	4603      	mov	r3, r0
 8015858:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801585a:	7fbb      	ldrb	r3, [r7, #30]
 801585c:	3301      	adds	r3, #1
 801585e:	77bb      	strb	r3, [r7, #30]
 8015860:	7fbb      	ldrb	r3, [r7, #30]
 8015862:	2b02      	cmp	r3, #2
 8015864:	d9ed      	bls.n	8015842 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015866:	89b8      	ldrh	r0, [r7, #12]
 8015868:	693b      	ldr	r3, [r7, #16]
 801586a:	33f0      	adds	r3, #240	; 0xf0
 801586c:	697a      	ldr	r2, [r7, #20]
 801586e:	4619      	mov	r1, r3
 8015870:	f000 fef8 	bl	8016664 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015874:	4b20      	ldr	r3, [pc, #128]	; (80158f8 <dhcp_rebind+0x12c>)
 8015876:	6818      	ldr	r0, [r3, #0]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	9300      	str	r3, [sp, #0]
 801587c:	2343      	movs	r3, #67	; 0x43
 801587e:	4a1f      	ldr	r2, [pc, #124]	; (80158fc <dhcp_rebind+0x130>)
 8015880:	6979      	ldr	r1, [r7, #20]
 8015882:	f7fe fdf5 	bl	8014470 <udp_sendto_if>
 8015886:	4603      	mov	r3, r0
 8015888:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801588a:	6978      	ldr	r0, [r7, #20]
 801588c:	f7f8 feb2 	bl	800e5f4 <pbuf_free>
 8015890:	e001      	b.n	8015896 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015892:	23ff      	movs	r3, #255	; 0xff
 8015894:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015896:	69bb      	ldr	r3, [r7, #24]
 8015898:	799b      	ldrb	r3, [r3, #6]
 801589a:	2bff      	cmp	r3, #255	; 0xff
 801589c:	d005      	beq.n	80158aa <dhcp_rebind+0xde>
    dhcp->tries++;
 801589e:	69bb      	ldr	r3, [r7, #24]
 80158a0:	799b      	ldrb	r3, [r3, #6]
 80158a2:	3301      	adds	r3, #1
 80158a4:	b2da      	uxtb	r2, r3
 80158a6:	69bb      	ldr	r3, [r7, #24]
 80158a8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80158aa:	69bb      	ldr	r3, [r7, #24]
 80158ac:	799b      	ldrb	r3, [r3, #6]
 80158ae:	2b09      	cmp	r3, #9
 80158b0:	d80a      	bhi.n	80158c8 <dhcp_rebind+0xfc>
 80158b2:	69bb      	ldr	r3, [r7, #24]
 80158b4:	799b      	ldrb	r3, [r3, #6]
 80158b6:	b29b      	uxth	r3, r3
 80158b8:	461a      	mov	r2, r3
 80158ba:	0152      	lsls	r2, r2, #5
 80158bc:	1ad2      	subs	r2, r2, r3
 80158be:	0092      	lsls	r2, r2, #2
 80158c0:	4413      	add	r3, r2
 80158c2:	00db      	lsls	r3, r3, #3
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	e001      	b.n	80158cc <dhcp_rebind+0x100>
 80158c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80158cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80158ce:	89fb      	ldrh	r3, [r7, #14]
 80158d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80158d4:	4a0a      	ldr	r2, [pc, #40]	; (8015900 <dhcp_rebind+0x134>)
 80158d6:	fb82 1203 	smull	r1, r2, r2, r3
 80158da:	1152      	asrs	r2, r2, #5
 80158dc:	17db      	asrs	r3, r3, #31
 80158de:	1ad3      	subs	r3, r2, r3
 80158e0:	b29a      	uxth	r2, r3
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80158e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3720      	adds	r7, #32
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop
 80158f4:	200000bc 	.word	0x200000bc
 80158f8:	20004754 	.word	0x20004754
 80158fc:	08021034 	.word	0x08021034
 8015900:	10624dd3 	.word	0x10624dd3

08015904 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015904:	b5b0      	push	{r4, r5, r7, lr}
 8015906:	b08a      	sub	sp, #40	; 0x28
 8015908:	af02      	add	r7, sp, #8
 801590a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	6a1b      	ldr	r3, [r3, #32]
 8015910:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015912:	2103      	movs	r1, #3
 8015914:	69b8      	ldr	r0, [r7, #24]
 8015916:	f000 f945 	bl	8015ba4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801591a:	f107 030c 	add.w	r3, r7, #12
 801591e:	2203      	movs	r2, #3
 8015920:	69b9      	ldr	r1, [r7, #24]
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f000 fdc8 	bl	80164b8 <dhcp_create_msg>
 8015928:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d066      	beq.n	80159fe <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015930:	697b      	ldr	r3, [r7, #20]
 8015932:	685b      	ldr	r3, [r3, #4]
 8015934:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015936:	89b8      	ldrh	r0, [r7, #12]
 8015938:	693b      	ldr	r3, [r7, #16]
 801593a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801593e:	2302      	movs	r3, #2
 8015940:	2239      	movs	r2, #57	; 0x39
 8015942:	f000 f949 	bl	8015bd8 <dhcp_option>
 8015946:	4603      	mov	r3, r0
 8015948:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801594a:	89b8      	ldrh	r0, [r7, #12]
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	33f0      	adds	r3, #240	; 0xf0
 8015950:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015954:	4619      	mov	r1, r3
 8015956:	f000 f999 	bl	8015c8c <dhcp_option_short>
 801595a:	4603      	mov	r3, r0
 801595c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801595e:	89b8      	ldrh	r0, [r7, #12]
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015966:	2304      	movs	r3, #4
 8015968:	2232      	movs	r2, #50	; 0x32
 801596a:	f000 f935 	bl	8015bd8 <dhcp_option>
 801596e:	4603      	mov	r3, r0
 8015970:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015972:	89bc      	ldrh	r4, [r7, #12]
 8015974:	693b      	ldr	r3, [r7, #16]
 8015976:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801597a:	69bb      	ldr	r3, [r7, #24]
 801597c:	69db      	ldr	r3, [r3, #28]
 801597e:	4618      	mov	r0, r3
 8015980:	f7f7 fb17 	bl	800cfb2 <lwip_htonl>
 8015984:	4603      	mov	r3, r0
 8015986:	461a      	mov	r2, r3
 8015988:	4629      	mov	r1, r5
 801598a:	4620      	mov	r0, r4
 801598c:	f000 f9b0 	bl	8015cf0 <dhcp_option_long>
 8015990:	4603      	mov	r3, r0
 8015992:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015994:	89b8      	ldrh	r0, [r7, #12]
 8015996:	693b      	ldr	r3, [r7, #16]
 8015998:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801599c:	2303      	movs	r3, #3
 801599e:	2237      	movs	r2, #55	; 0x37
 80159a0:	f000 f91a 	bl	8015bd8 <dhcp_option>
 80159a4:	4603      	mov	r3, r0
 80159a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80159a8:	2300      	movs	r3, #0
 80159aa:	77bb      	strb	r3, [r7, #30]
 80159ac:	e00e      	b.n	80159cc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80159ae:	89b8      	ldrh	r0, [r7, #12]
 80159b0:	693b      	ldr	r3, [r7, #16]
 80159b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159b6:	7fbb      	ldrb	r3, [r7, #30]
 80159b8:	4a29      	ldr	r2, [pc, #164]	; (8015a60 <dhcp_reboot+0x15c>)
 80159ba:	5cd3      	ldrb	r3, [r2, r3]
 80159bc:	461a      	mov	r2, r3
 80159be:	f000 f93f 	bl	8015c40 <dhcp_option_byte>
 80159c2:	4603      	mov	r3, r0
 80159c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80159c6:	7fbb      	ldrb	r3, [r7, #30]
 80159c8:	3301      	adds	r3, #1
 80159ca:	77bb      	strb	r3, [r7, #30]
 80159cc:	7fbb      	ldrb	r3, [r7, #30]
 80159ce:	2b02      	cmp	r3, #2
 80159d0:	d9ed      	bls.n	80159ae <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80159d2:	89b8      	ldrh	r0, [r7, #12]
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	33f0      	adds	r3, #240	; 0xf0
 80159d8:	697a      	ldr	r2, [r7, #20]
 80159da:	4619      	mov	r1, r3
 80159dc:	f000 fe42 	bl	8016664 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80159e0:	4b20      	ldr	r3, [pc, #128]	; (8015a64 <dhcp_reboot+0x160>)
 80159e2:	6818      	ldr	r0, [r3, #0]
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	9300      	str	r3, [sp, #0]
 80159e8:	2343      	movs	r3, #67	; 0x43
 80159ea:	4a1f      	ldr	r2, [pc, #124]	; (8015a68 <dhcp_reboot+0x164>)
 80159ec:	6979      	ldr	r1, [r7, #20]
 80159ee:	f7fe fd3f 	bl	8014470 <udp_sendto_if>
 80159f2:	4603      	mov	r3, r0
 80159f4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80159f6:	6978      	ldr	r0, [r7, #20]
 80159f8:	f7f8 fdfc 	bl	800e5f4 <pbuf_free>
 80159fc:	e001      	b.n	8015a02 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80159fe:	23ff      	movs	r3, #255	; 0xff
 8015a00:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015a02:	69bb      	ldr	r3, [r7, #24]
 8015a04:	799b      	ldrb	r3, [r3, #6]
 8015a06:	2bff      	cmp	r3, #255	; 0xff
 8015a08:	d005      	beq.n	8015a16 <dhcp_reboot+0x112>
    dhcp->tries++;
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	799b      	ldrb	r3, [r3, #6]
 8015a0e:	3301      	adds	r3, #1
 8015a10:	b2da      	uxtb	r2, r3
 8015a12:	69bb      	ldr	r3, [r7, #24]
 8015a14:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	799b      	ldrb	r3, [r3, #6]
 8015a1a:	2b09      	cmp	r3, #9
 8015a1c:	d80a      	bhi.n	8015a34 <dhcp_reboot+0x130>
 8015a1e:	69bb      	ldr	r3, [r7, #24]
 8015a20:	799b      	ldrb	r3, [r3, #6]
 8015a22:	b29b      	uxth	r3, r3
 8015a24:	461a      	mov	r2, r3
 8015a26:	0152      	lsls	r2, r2, #5
 8015a28:	1ad2      	subs	r2, r2, r3
 8015a2a:	0092      	lsls	r2, r2, #2
 8015a2c:	4413      	add	r3, r2
 8015a2e:	00db      	lsls	r3, r3, #3
 8015a30:	b29b      	uxth	r3, r3
 8015a32:	e001      	b.n	8015a38 <dhcp_reboot+0x134>
 8015a34:	f242 7310 	movw	r3, #10000	; 0x2710
 8015a38:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015a3a:	89fb      	ldrh	r3, [r7, #14]
 8015a3c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015a40:	4a0a      	ldr	r2, [pc, #40]	; (8015a6c <dhcp_reboot+0x168>)
 8015a42:	fb82 1203 	smull	r1, r2, r2, r3
 8015a46:	1152      	asrs	r2, r2, #5
 8015a48:	17db      	asrs	r3, r3, #31
 8015a4a:	1ad3      	subs	r3, r2, r3
 8015a4c:	b29a      	uxth	r2, r3
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015a52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3720      	adds	r7, #32
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	200000bc 	.word	0x200000bc
 8015a64:	20004754 	.word	0x20004754
 8015a68:	08021034 	.word	0x08021034
 8015a6c:	10624dd3 	.word	0x10624dd3

08015a70 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015a70:	b5b0      	push	{r4, r5, r7, lr}
 8015a72:	b08a      	sub	sp, #40	; 0x28
 8015a74:	af02      	add	r7, sp, #8
 8015a76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6a1b      	ldr	r3, [r3, #32]
 8015a7c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	f000 8084 	beq.w	8015b8e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015a86:	69fb      	ldr	r3, [r7, #28]
 8015a88:	795b      	ldrb	r3, [r3, #5]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	f000 8081 	beq.w	8015b92 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015a90:	69fb      	ldr	r3, [r7, #28]
 8015a92:	699b      	ldr	r3, [r3, #24]
 8015a94:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015a96:	69fb      	ldr	r3, [r7, #28]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015a9c:	69fb      	ldr	r3, [r7, #28]
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015aa2:	69fb      	ldr	r3, [r7, #28]
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015aa8:	69fb      	ldr	r3, [r7, #28]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015aae:	69fb      	ldr	r3, [r7, #28]
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	631a      	str	r2, [r3, #48]	; 0x30
 8015ab4:	69fb      	ldr	r3, [r7, #28]
 8015ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015ab8:	69fb      	ldr	r3, [r7, #28]
 8015aba:	62da      	str	r2, [r3, #44]	; 0x2c
 8015abc:	69fb      	ldr	r3, [r7, #28]
 8015abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ac0:	69fb      	ldr	r3, [r7, #28]
 8015ac2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015ac4:	69fb      	ldr	r3, [r7, #28]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	829a      	strh	r2, [r3, #20]
 8015aca:	69fb      	ldr	r3, [r7, #28]
 8015acc:	8a9a      	ldrh	r2, [r3, #20]
 8015ace:	69fb      	ldr	r3, [r7, #28]
 8015ad0:	825a      	strh	r2, [r3, #18]
 8015ad2:	69fb      	ldr	r3, [r7, #28]
 8015ad4:	8a5a      	ldrh	r2, [r3, #18]
 8015ad6:	69fb      	ldr	r3, [r7, #28]
 8015ad8:	821a      	strh	r2, [r3, #16]
 8015ada:	69fb      	ldr	r3, [r7, #28]
 8015adc:	8a1a      	ldrh	r2, [r3, #16]
 8015ade:	69fb      	ldr	r3, [r7, #28]
 8015ae0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f000 fdec 	bl	80166c0 <dhcp_supplied_address>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d03b      	beq.n	8015b66 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015aee:	f107 030e 	add.w	r3, r7, #14
 8015af2:	2207      	movs	r2, #7
 8015af4:	69f9      	ldr	r1, [r7, #28]
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f000 fcde 	bl	80164b8 <dhcp_create_msg>
 8015afc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015afe:	69bb      	ldr	r3, [r7, #24]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d030      	beq.n	8015b66 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015b04:	69bb      	ldr	r3, [r7, #24]
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015b0a:	89f8      	ldrh	r0, [r7, #14]
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b12:	2304      	movs	r3, #4
 8015b14:	2236      	movs	r2, #54	; 0x36
 8015b16:	f000 f85f 	bl	8015bd8 <dhcp_option>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015b1e:	89fc      	ldrh	r4, [r7, #14]
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7f7 fa42 	bl	800cfb2 <lwip_htonl>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	461a      	mov	r2, r3
 8015b32:	4629      	mov	r1, r5
 8015b34:	4620      	mov	r0, r4
 8015b36:	f000 f8db 	bl	8015cf0 <dhcp_option_long>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015b3e:	89f8      	ldrh	r0, [r7, #14]
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	33f0      	adds	r3, #240	; 0xf0
 8015b44:	69ba      	ldr	r2, [r7, #24]
 8015b46:	4619      	mov	r1, r3
 8015b48:	f000 fd8c 	bl	8016664 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015b4c:	4b13      	ldr	r3, [pc, #76]	; (8015b9c <dhcp_release_and_stop+0x12c>)
 8015b4e:	6818      	ldr	r0, [r3, #0]
 8015b50:	f107 0210 	add.w	r2, r7, #16
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	9300      	str	r3, [sp, #0]
 8015b58:	2343      	movs	r3, #67	; 0x43
 8015b5a:	69b9      	ldr	r1, [r7, #24]
 8015b5c:	f7fe fc88 	bl	8014470 <udp_sendto_if>
      pbuf_free(p_out);
 8015b60:	69b8      	ldr	r0, [r7, #24]
 8015b62:	f7f8 fd47 	bl	800e5f4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015b66:	4b0e      	ldr	r3, [pc, #56]	; (8015ba0 <dhcp_release_and_stop+0x130>)
 8015b68:	4a0d      	ldr	r2, [pc, #52]	; (8015ba0 <dhcp_release_and_stop+0x130>)
 8015b6a:	490d      	ldr	r1, [pc, #52]	; (8015ba0 <dhcp_release_and_stop+0x130>)
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	f7f8 f8b1 	bl	800dcd4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015b72:	2100      	movs	r1, #0
 8015b74:	69f8      	ldr	r0, [r7, #28]
 8015b76:	f000 f815 	bl	8015ba4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015b7a:	69fb      	ldr	r3, [r7, #28]
 8015b7c:	791b      	ldrb	r3, [r3, #4]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d008      	beq.n	8015b94 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015b82:	f7fe ffc1 	bl	8014b08 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015b86:	69fb      	ldr	r3, [r7, #28]
 8015b88:	2200      	movs	r2, #0
 8015b8a:	711a      	strb	r2, [r3, #4]
 8015b8c:	e002      	b.n	8015b94 <dhcp_release_and_stop+0x124>
    return;
 8015b8e:	bf00      	nop
 8015b90:	e000      	b.n	8015b94 <dhcp_release_and_stop+0x124>
    return;
 8015b92:	bf00      	nop
  }
}
 8015b94:	3720      	adds	r7, #32
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bdb0      	pop	{r4, r5, r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	20004754 	.word	0x20004754
 8015ba0:	08021030 	.word	0x08021030

08015ba4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015ba4:	b480      	push	{r7}
 8015ba6:	b083      	sub	sp, #12
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	460b      	mov	r3, r1
 8015bae:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	795b      	ldrb	r3, [r3, #5]
 8015bb4:	78fa      	ldrb	r2, [r7, #3]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d008      	beq.n	8015bcc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	78fa      	ldrb	r2, [r7, #3]
 8015bbe:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	2200      	movs	r2, #0
 8015bca:	811a      	strh	r2, [r3, #8]
  }
}
 8015bcc:	bf00      	nop
 8015bce:	370c      	adds	r7, #12
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd6:	4770      	bx	lr

08015bd8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b082      	sub	sp, #8
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6039      	str	r1, [r7, #0]
 8015be0:	4611      	mov	r1, r2
 8015be2:	461a      	mov	r2, r3
 8015be4:	4603      	mov	r3, r0
 8015be6:	80fb      	strh	r3, [r7, #6]
 8015be8:	460b      	mov	r3, r1
 8015bea:	717b      	strb	r3, [r7, #5]
 8015bec:	4613      	mov	r3, r2
 8015bee:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015bf0:	88fa      	ldrh	r2, [r7, #6]
 8015bf2:	793b      	ldrb	r3, [r7, #4]
 8015bf4:	4413      	add	r3, r2
 8015bf6:	3302      	adds	r3, #2
 8015bf8:	2b44      	cmp	r3, #68	; 0x44
 8015bfa:	d906      	bls.n	8015c0a <dhcp_option+0x32>
 8015bfc:	4b0d      	ldr	r3, [pc, #52]	; (8015c34 <dhcp_option+0x5c>)
 8015bfe:	f240 529a 	movw	r2, #1434	; 0x59a
 8015c02:	490d      	ldr	r1, [pc, #52]	; (8015c38 <dhcp_option+0x60>)
 8015c04:	480d      	ldr	r0, [pc, #52]	; (8015c3c <dhcp_option+0x64>)
 8015c06:	f003 fef9 	bl	80199fc <iprintf>
  options[options_out_len++] = option_type;
 8015c0a:	88fb      	ldrh	r3, [r7, #6]
 8015c0c:	1c5a      	adds	r2, r3, #1
 8015c0e:	80fa      	strh	r2, [r7, #6]
 8015c10:	461a      	mov	r2, r3
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	4413      	add	r3, r2
 8015c16:	797a      	ldrb	r2, [r7, #5]
 8015c18:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015c1a:	88fb      	ldrh	r3, [r7, #6]
 8015c1c:	1c5a      	adds	r2, r3, #1
 8015c1e:	80fa      	strh	r2, [r7, #6]
 8015c20:	461a      	mov	r2, r3
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	4413      	add	r3, r2
 8015c26:	793a      	ldrb	r2, [r7, #4]
 8015c28:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015c2a:	88fb      	ldrh	r3, [r7, #6]
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3708      	adds	r7, #8
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}
 8015c34:	0801f738 	.word	0x0801f738
 8015c38:	0801f8cc 	.word	0x0801f8cc
 8015c3c:	0801f798 	.word	0x0801f798

08015c40 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b082      	sub	sp, #8
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	4603      	mov	r3, r0
 8015c48:	6039      	str	r1, [r7, #0]
 8015c4a:	80fb      	strh	r3, [r7, #6]
 8015c4c:	4613      	mov	r3, r2
 8015c4e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015c50:	88fb      	ldrh	r3, [r7, #6]
 8015c52:	2b43      	cmp	r3, #67	; 0x43
 8015c54:	d906      	bls.n	8015c64 <dhcp_option_byte+0x24>
 8015c56:	4b0a      	ldr	r3, [pc, #40]	; (8015c80 <dhcp_option_byte+0x40>)
 8015c58:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015c5c:	4909      	ldr	r1, [pc, #36]	; (8015c84 <dhcp_option_byte+0x44>)
 8015c5e:	480a      	ldr	r0, [pc, #40]	; (8015c88 <dhcp_option_byte+0x48>)
 8015c60:	f003 fecc 	bl	80199fc <iprintf>
  options[options_out_len++] = value;
 8015c64:	88fb      	ldrh	r3, [r7, #6]
 8015c66:	1c5a      	adds	r2, r3, #1
 8015c68:	80fa      	strh	r2, [r7, #6]
 8015c6a:	461a      	mov	r2, r3
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	4413      	add	r3, r2
 8015c70:	797a      	ldrb	r2, [r7, #5]
 8015c72:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015c74:	88fb      	ldrh	r3, [r7, #6]
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3708      	adds	r7, #8
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}
 8015c7e:	bf00      	nop
 8015c80:	0801f738 	.word	0x0801f738
 8015c84:	0801f910 	.word	0x0801f910
 8015c88:	0801f798 	.word	0x0801f798

08015c8c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b082      	sub	sp, #8
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	4603      	mov	r3, r0
 8015c94:	6039      	str	r1, [r7, #0]
 8015c96:	80fb      	strh	r3, [r7, #6]
 8015c98:	4613      	mov	r3, r2
 8015c9a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015c9c:	88fb      	ldrh	r3, [r7, #6]
 8015c9e:	3302      	adds	r3, #2
 8015ca0:	2b44      	cmp	r3, #68	; 0x44
 8015ca2:	d906      	bls.n	8015cb2 <dhcp_option_short+0x26>
 8015ca4:	4b0f      	ldr	r3, [pc, #60]	; (8015ce4 <dhcp_option_short+0x58>)
 8015ca6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015caa:	490f      	ldr	r1, [pc, #60]	; (8015ce8 <dhcp_option_short+0x5c>)
 8015cac:	480f      	ldr	r0, [pc, #60]	; (8015cec <dhcp_option_short+0x60>)
 8015cae:	f003 fea5 	bl	80199fc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015cb2:	88bb      	ldrh	r3, [r7, #4]
 8015cb4:	0a1b      	lsrs	r3, r3, #8
 8015cb6:	b29a      	uxth	r2, r3
 8015cb8:	88fb      	ldrh	r3, [r7, #6]
 8015cba:	1c59      	adds	r1, r3, #1
 8015cbc:	80f9      	strh	r1, [r7, #6]
 8015cbe:	4619      	mov	r1, r3
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	440b      	add	r3, r1
 8015cc4:	b2d2      	uxtb	r2, r2
 8015cc6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015cc8:	88fb      	ldrh	r3, [r7, #6]
 8015cca:	1c5a      	adds	r2, r3, #1
 8015ccc:	80fa      	strh	r2, [r7, #6]
 8015cce:	461a      	mov	r2, r3
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	4413      	add	r3, r2
 8015cd4:	88ba      	ldrh	r2, [r7, #4]
 8015cd6:	b2d2      	uxtb	r2, r2
 8015cd8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015cda:	88fb      	ldrh	r3, [r7, #6]
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3708      	adds	r7, #8
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}
 8015ce4:	0801f738 	.word	0x0801f738
 8015ce8:	0801f948 	.word	0x0801f948
 8015cec:	0801f798 	.word	0x0801f798

08015cf0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	60b9      	str	r1, [r7, #8]
 8015cfa:	607a      	str	r2, [r7, #4]
 8015cfc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015cfe:	89fb      	ldrh	r3, [r7, #14]
 8015d00:	3304      	adds	r3, #4
 8015d02:	2b44      	cmp	r3, #68	; 0x44
 8015d04:	d906      	bls.n	8015d14 <dhcp_option_long+0x24>
 8015d06:	4b19      	ldr	r3, [pc, #100]	; (8015d6c <dhcp_option_long+0x7c>)
 8015d08:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015d0c:	4918      	ldr	r1, [pc, #96]	; (8015d70 <dhcp_option_long+0x80>)
 8015d0e:	4819      	ldr	r0, [pc, #100]	; (8015d74 <dhcp_option_long+0x84>)
 8015d10:	f003 fe74 	bl	80199fc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	0e1a      	lsrs	r2, r3, #24
 8015d18:	89fb      	ldrh	r3, [r7, #14]
 8015d1a:	1c59      	adds	r1, r3, #1
 8015d1c:	81f9      	strh	r1, [r7, #14]
 8015d1e:	4619      	mov	r1, r3
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	440b      	add	r3, r1
 8015d24:	b2d2      	uxtb	r2, r2
 8015d26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	0c1a      	lsrs	r2, r3, #16
 8015d2c:	89fb      	ldrh	r3, [r7, #14]
 8015d2e:	1c59      	adds	r1, r3, #1
 8015d30:	81f9      	strh	r1, [r7, #14]
 8015d32:	4619      	mov	r1, r3
 8015d34:	68bb      	ldr	r3, [r7, #8]
 8015d36:	440b      	add	r3, r1
 8015d38:	b2d2      	uxtb	r2, r2
 8015d3a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	0a1a      	lsrs	r2, r3, #8
 8015d40:	89fb      	ldrh	r3, [r7, #14]
 8015d42:	1c59      	adds	r1, r3, #1
 8015d44:	81f9      	strh	r1, [r7, #14]
 8015d46:	4619      	mov	r1, r3
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	440b      	add	r3, r1
 8015d4c:	b2d2      	uxtb	r2, r2
 8015d4e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015d50:	89fb      	ldrh	r3, [r7, #14]
 8015d52:	1c5a      	adds	r2, r3, #1
 8015d54:	81fa      	strh	r2, [r7, #14]
 8015d56:	461a      	mov	r2, r3
 8015d58:	68bb      	ldr	r3, [r7, #8]
 8015d5a:	4413      	add	r3, r2
 8015d5c:	687a      	ldr	r2, [r7, #4]
 8015d5e:	b2d2      	uxtb	r2, r2
 8015d60:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015d62:	89fb      	ldrh	r3, [r7, #14]
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3710      	adds	r7, #16
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	0801f738 	.word	0x0801f738
 8015d70:	0801f984 	.word	0x0801f984
 8015d74:	0801f798 	.word	0x0801f798

08015d78 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b090      	sub	sp, #64	; 0x40
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015d82:	2300      	movs	r3, #0
 8015d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015d86:	2300      	movs	r3, #0
 8015d88:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015d8a:	2208      	movs	r2, #8
 8015d8c:	2100      	movs	r1, #0
 8015d8e:	48be      	ldr	r0, [pc, #760]	; (8016088 <dhcp_parse_reply+0x310>)
 8015d90:	f003 f927 	bl	8018fe2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	895b      	ldrh	r3, [r3, #10]
 8015d98:	2b2b      	cmp	r3, #43	; 0x2b
 8015d9a:	d802      	bhi.n	8015da2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015d9c:	f06f 0301 	mvn.w	r3, #1
 8015da0:	e2a8      	b.n	80162f4 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	685b      	ldr	r3, [r3, #4]
 8015da6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015da8:	23f0      	movs	r3, #240	; 0xf0
 8015daa:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	891b      	ldrh	r3, [r3, #8]
 8015db0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015db6:	e00c      	b.n	8015dd2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dba:	895b      	ldrh	r3, [r3, #10]
 8015dbc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015dbe:	1ad3      	subs	r3, r2, r3
 8015dc0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc4:	895b      	ldrh	r3, [r3, #10]
 8015dc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015dc8:	1ad3      	subs	r3, r2, r3
 8015dca:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d004      	beq.n	8015de2 <dhcp_parse_reply+0x6a>
 8015dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dda:	895b      	ldrh	r3, [r3, #10]
 8015ddc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015dde:	429a      	cmp	r2, r3
 8015de0:	d2ea      	bcs.n	8015db8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d102      	bne.n	8015dee <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015de8:	f06f 0301 	mvn.w	r3, #1
 8015dec:	e282      	b.n	80162f4 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8015dee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015df0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015df2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015df4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df8:	685b      	ldr	r3, [r3, #4]
 8015dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015dfc:	e23a      	b.n	8016274 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8015dfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e02:	4413      	add	r3, r2
 8015e04:	781b      	ldrb	r3, [r3, #0]
 8015e06:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8015e12:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015e14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e16:	3302      	adds	r3, #2
 8015e18:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015e1a:	8bfa      	ldrh	r2, [r7, #30]
 8015e1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d202      	bcs.n	8015e28 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015e22:	f06f 0301 	mvn.w	r3, #1
 8015e26:	e265      	b.n	80162f4 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015e28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e2e:	8952      	ldrh	r2, [r2, #10]
 8015e30:	4293      	cmp	r3, r2
 8015e32:	da07      	bge.n	8015e44 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015e34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e36:	3301      	adds	r3, #1
 8015e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e3a:	4413      	add	r3, r2
 8015e3c:	781b      	ldrb	r3, [r3, #0]
 8015e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e42:	e00b      	b.n	8015e5c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d004      	beq.n	8015e56 <dhcp_parse_reply+0xde>
 8015e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	685b      	ldr	r3, [r3, #4]
 8015e52:	781b      	ldrb	r3, [r3, #0]
 8015e54:	e000      	b.n	8015e58 <dhcp_parse_reply+0xe0>
 8015e56:	2300      	movs	r3, #0
 8015e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015e64:	7dfb      	ldrb	r3, [r7, #23]
 8015e66:	2b3b      	cmp	r3, #59	; 0x3b
 8015e68:	f200 812d 	bhi.w	80160c6 <dhcp_parse_reply+0x34e>
 8015e6c:	a201      	add	r2, pc, #4	; (adr r2, 8015e74 <dhcp_parse_reply+0xfc>)
 8015e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e72:	bf00      	nop
 8015e74:	08015f65 	.word	0x08015f65
 8015e78:	08015f75 	.word	0x08015f75
 8015e7c:	080160c7 	.word	0x080160c7
 8015e80:	08015f97 	.word	0x08015f97
 8015e84:	080160c7 	.word	0x080160c7
 8015e88:	080160c7 	.word	0x080160c7
 8015e8c:	080160c7 	.word	0x080160c7
 8015e90:	080160c7 	.word	0x080160c7
 8015e94:	080160c7 	.word	0x080160c7
 8015e98:	080160c7 	.word	0x080160c7
 8015e9c:	080160c7 	.word	0x080160c7
 8015ea0:	080160c7 	.word	0x080160c7
 8015ea4:	080160c7 	.word	0x080160c7
 8015ea8:	080160c7 	.word	0x080160c7
 8015eac:	080160c7 	.word	0x080160c7
 8015eb0:	080160c7 	.word	0x080160c7
 8015eb4:	080160c7 	.word	0x080160c7
 8015eb8:	080160c7 	.word	0x080160c7
 8015ebc:	080160c7 	.word	0x080160c7
 8015ec0:	080160c7 	.word	0x080160c7
 8015ec4:	080160c7 	.word	0x080160c7
 8015ec8:	080160c7 	.word	0x080160c7
 8015ecc:	080160c7 	.word	0x080160c7
 8015ed0:	080160c7 	.word	0x080160c7
 8015ed4:	080160c7 	.word	0x080160c7
 8015ed8:	080160c7 	.word	0x080160c7
 8015edc:	080160c7 	.word	0x080160c7
 8015ee0:	080160c7 	.word	0x080160c7
 8015ee4:	080160c7 	.word	0x080160c7
 8015ee8:	080160c7 	.word	0x080160c7
 8015eec:	080160c7 	.word	0x080160c7
 8015ef0:	080160c7 	.word	0x080160c7
 8015ef4:	080160c7 	.word	0x080160c7
 8015ef8:	080160c7 	.word	0x080160c7
 8015efc:	080160c7 	.word	0x080160c7
 8015f00:	080160c7 	.word	0x080160c7
 8015f04:	080160c7 	.word	0x080160c7
 8015f08:	080160c7 	.word	0x080160c7
 8015f0c:	080160c7 	.word	0x080160c7
 8015f10:	080160c7 	.word	0x080160c7
 8015f14:	080160c7 	.word	0x080160c7
 8015f18:	080160c7 	.word	0x080160c7
 8015f1c:	080160c7 	.word	0x080160c7
 8015f20:	080160c7 	.word	0x080160c7
 8015f24:	080160c7 	.word	0x080160c7
 8015f28:	080160c7 	.word	0x080160c7
 8015f2c:	080160c7 	.word	0x080160c7
 8015f30:	080160c7 	.word	0x080160c7
 8015f34:	080160c7 	.word	0x080160c7
 8015f38:	080160c7 	.word	0x080160c7
 8015f3c:	080160c7 	.word	0x080160c7
 8015f40:	08015fc3 	.word	0x08015fc3
 8015f44:	08015fe5 	.word	0x08015fe5
 8015f48:	08016021 	.word	0x08016021
 8015f4c:	08016043 	.word	0x08016043
 8015f50:	080160c7 	.word	0x080160c7
 8015f54:	080160c7 	.word	0x080160c7
 8015f58:	080160c7 	.word	0x080160c7
 8015f5c:	08016065 	.word	0x08016065
 8015f60:	080160a5 	.word	0x080160a5
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015f64:	2300      	movs	r3, #0
 8015f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015f72:	e0ac      	b.n	80160ce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f78:	2b04      	cmp	r3, #4
 8015f7a:	d009      	beq.n	8015f90 <dhcp_parse_reply+0x218>
 8015f7c:	4b43      	ldr	r3, [pc, #268]	; (801608c <dhcp_parse_reply+0x314>)
 8015f7e:	f240 622e 	movw	r2, #1582	; 0x62e
 8015f82:	4943      	ldr	r1, [pc, #268]	; (8016090 <dhcp_parse_reply+0x318>)
 8015f84:	4843      	ldr	r0, [pc, #268]	; (8016094 <dhcp_parse_reply+0x31c>)
 8015f86:	f003 fd39 	bl	80199fc <iprintf>
 8015f8a:	f06f 0305 	mvn.w	r3, #5
 8015f8e:	e1b1      	b.n	80162f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015f90:	2306      	movs	r3, #6
 8015f92:	623b      	str	r3, [r7, #32]
        break;
 8015f94:	e09b      	b.n	80160ce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015f96:	2304      	movs	r3, #4
 8015f98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015f9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015fa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015fa4:	429a      	cmp	r2, r3
 8015fa6:	d209      	bcs.n	8015fbc <dhcp_parse_reply+0x244>
 8015fa8:	4b38      	ldr	r3, [pc, #224]	; (801608c <dhcp_parse_reply+0x314>)
 8015faa:	f240 6233 	movw	r2, #1587	; 0x633
 8015fae:	493a      	ldr	r1, [pc, #232]	; (8016098 <dhcp_parse_reply+0x320>)
 8015fb0:	4838      	ldr	r0, [pc, #224]	; (8016094 <dhcp_parse_reply+0x31c>)
 8015fb2:	f003 fd23 	bl	80199fc <iprintf>
 8015fb6:	f06f 0305 	mvn.w	r3, #5
 8015fba:	e19b      	b.n	80162f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015fbc:	2307      	movs	r3, #7
 8015fbe:	623b      	str	r3, [r7, #32]
        break;
 8015fc0:	e085      	b.n	80160ce <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fc6:	2b04      	cmp	r3, #4
 8015fc8:	d009      	beq.n	8015fde <dhcp_parse_reply+0x266>
 8015fca:	4b30      	ldr	r3, [pc, #192]	; (801608c <dhcp_parse_reply+0x314>)
 8015fcc:	f240 6241 	movw	r2, #1601	; 0x641
 8015fd0:	492f      	ldr	r1, [pc, #188]	; (8016090 <dhcp_parse_reply+0x318>)
 8015fd2:	4830      	ldr	r0, [pc, #192]	; (8016094 <dhcp_parse_reply+0x31c>)
 8015fd4:	f003 fd12 	bl	80199fc <iprintf>
 8015fd8:	f06f 0305 	mvn.w	r3, #5
 8015fdc:	e18a      	b.n	80162f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015fde:	2303      	movs	r3, #3
 8015fe0:	623b      	str	r3, [r7, #32]
        break;
 8015fe2:	e074      	b.n	80160ce <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fe8:	2b01      	cmp	r3, #1
 8015fea:	d009      	beq.n	8016000 <dhcp_parse_reply+0x288>
 8015fec:	4b27      	ldr	r3, [pc, #156]	; (801608c <dhcp_parse_reply+0x314>)
 8015fee:	f240 624f 	movw	r2, #1615	; 0x64f
 8015ff2:	492a      	ldr	r1, [pc, #168]	; (801609c <dhcp_parse_reply+0x324>)
 8015ff4:	4827      	ldr	r0, [pc, #156]	; (8016094 <dhcp_parse_reply+0x31c>)
 8015ff6:	f003 fd01 	bl	80199fc <iprintf>
 8015ffa:	f06f 0305 	mvn.w	r3, #5
 8015ffe:	e179      	b.n	80162f4 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016000:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016002:	2bf0      	cmp	r3, #240	; 0xf0
 8016004:	d009      	beq.n	801601a <dhcp_parse_reply+0x2a2>
 8016006:	4b21      	ldr	r3, [pc, #132]	; (801608c <dhcp_parse_reply+0x314>)
 8016008:	f240 6251 	movw	r2, #1617	; 0x651
 801600c:	4924      	ldr	r1, [pc, #144]	; (80160a0 <dhcp_parse_reply+0x328>)
 801600e:	4821      	ldr	r0, [pc, #132]	; (8016094 <dhcp_parse_reply+0x31c>)
 8016010:	f003 fcf4 	bl	80199fc <iprintf>
 8016014:	f06f 0305 	mvn.w	r3, #5
 8016018:	e16c      	b.n	80162f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801601a:	2300      	movs	r3, #0
 801601c:	623b      	str	r3, [r7, #32]
        break;
 801601e:	e056      	b.n	80160ce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016024:	2b01      	cmp	r3, #1
 8016026:	d009      	beq.n	801603c <dhcp_parse_reply+0x2c4>
 8016028:	4b18      	ldr	r3, [pc, #96]	; (801608c <dhcp_parse_reply+0x314>)
 801602a:	f240 6255 	movw	r2, #1621	; 0x655
 801602e:	491b      	ldr	r1, [pc, #108]	; (801609c <dhcp_parse_reply+0x324>)
 8016030:	4818      	ldr	r0, [pc, #96]	; (8016094 <dhcp_parse_reply+0x31c>)
 8016032:	f003 fce3 	bl	80199fc <iprintf>
 8016036:	f06f 0305 	mvn.w	r3, #5
 801603a:	e15b      	b.n	80162f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801603c:	2301      	movs	r3, #1
 801603e:	623b      	str	r3, [r7, #32]
        break;
 8016040:	e045      	b.n	80160ce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016046:	2b04      	cmp	r3, #4
 8016048:	d009      	beq.n	801605e <dhcp_parse_reply+0x2e6>
 801604a:	4b10      	ldr	r3, [pc, #64]	; (801608c <dhcp_parse_reply+0x314>)
 801604c:	f240 6259 	movw	r2, #1625	; 0x659
 8016050:	490f      	ldr	r1, [pc, #60]	; (8016090 <dhcp_parse_reply+0x318>)
 8016052:	4810      	ldr	r0, [pc, #64]	; (8016094 <dhcp_parse_reply+0x31c>)
 8016054:	f003 fcd2 	bl	80199fc <iprintf>
 8016058:	f06f 0305 	mvn.w	r3, #5
 801605c:	e14a      	b.n	80162f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801605e:	2302      	movs	r3, #2
 8016060:	623b      	str	r3, [r7, #32]
        break;
 8016062:	e034      	b.n	80160ce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016068:	2b04      	cmp	r3, #4
 801606a:	d009      	beq.n	8016080 <dhcp_parse_reply+0x308>
 801606c:	4b07      	ldr	r3, [pc, #28]	; (801608c <dhcp_parse_reply+0x314>)
 801606e:	f240 625d 	movw	r2, #1629	; 0x65d
 8016072:	4907      	ldr	r1, [pc, #28]	; (8016090 <dhcp_parse_reply+0x318>)
 8016074:	4807      	ldr	r0, [pc, #28]	; (8016094 <dhcp_parse_reply+0x31c>)
 8016076:	f003 fcc1 	bl	80199fc <iprintf>
 801607a:	f06f 0305 	mvn.w	r3, #5
 801607e:	e139      	b.n	80162f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016080:	2304      	movs	r3, #4
 8016082:	623b      	str	r3, [r7, #32]
        break;
 8016084:	e023      	b.n	80160ce <dhcp_parse_reply+0x356>
 8016086:	bf00      	nop
 8016088:	2000b4dc 	.word	0x2000b4dc
 801608c:	0801f738 	.word	0x0801f738
 8016090:	0801f9c0 	.word	0x0801f9c0
 8016094:	0801f798 	.word	0x0801f798
 8016098:	0801f9cc 	.word	0x0801f9cc
 801609c:	0801f9e0 	.word	0x0801f9e0
 80160a0:	0801f9ec 	.word	0x0801f9ec
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80160a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160a8:	2b04      	cmp	r3, #4
 80160aa:	d009      	beq.n	80160c0 <dhcp_parse_reply+0x348>
 80160ac:	4b93      	ldr	r3, [pc, #588]	; (80162fc <dhcp_parse_reply+0x584>)
 80160ae:	f240 6261 	movw	r2, #1633	; 0x661
 80160b2:	4993      	ldr	r1, [pc, #588]	; (8016300 <dhcp_parse_reply+0x588>)
 80160b4:	4893      	ldr	r0, [pc, #588]	; (8016304 <dhcp_parse_reply+0x58c>)
 80160b6:	f003 fca1 	bl	80199fc <iprintf>
 80160ba:	f06f 0305 	mvn.w	r3, #5
 80160be:	e119      	b.n	80162f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80160c0:	2305      	movs	r3, #5
 80160c2:	623b      	str	r3, [r7, #32]
        break;
 80160c4:	e003      	b.n	80160ce <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80160c6:	2300      	movs	r3, #0
 80160c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80160cc:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80160ce:	7dfb      	ldrb	r3, [r7, #23]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d103      	bne.n	80160dc <dhcp_parse_reply+0x364>
      offset++;
 80160d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160d6:	3301      	adds	r3, #1
 80160d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80160da:	e0a1      	b.n	8016220 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80160dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80160de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160e2:	4413      	add	r3, r2
 80160e4:	3302      	adds	r3, #2
 80160e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80160ea:	db02      	blt.n	80160f2 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80160ec:	f06f 0301 	mvn.w	r3, #1
 80160f0:	e100      	b.n	80162f4 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80160f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160f6:	b29a      	uxth	r2, r3
 80160f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160fa:	4413      	add	r3, r2
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	3302      	adds	r3, #2
 8016100:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8016102:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016106:	2b00      	cmp	r3, #0
 8016108:	f000 808a 	beq.w	8016220 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801610c:	2300      	movs	r3, #0
 801610e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016110:	6a3b      	ldr	r3, [r7, #32]
 8016112:	2b00      	cmp	r3, #0
 8016114:	db02      	blt.n	801611c <dhcp_parse_reply+0x3a4>
 8016116:	6a3b      	ldr	r3, [r7, #32]
 8016118:	2b07      	cmp	r3, #7
 801611a:	dd06      	ble.n	801612a <dhcp_parse_reply+0x3b2>
 801611c:	4b77      	ldr	r3, [pc, #476]	; (80162fc <dhcp_parse_reply+0x584>)
 801611e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8016122:	4979      	ldr	r1, [pc, #484]	; (8016308 <dhcp_parse_reply+0x590>)
 8016124:	4877      	ldr	r0, [pc, #476]	; (8016304 <dhcp_parse_reply+0x58c>)
 8016126:	f003 fc69 	bl	80199fc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801612a:	4a78      	ldr	r2, [pc, #480]	; (801630c <dhcp_parse_reply+0x594>)
 801612c:	6a3b      	ldr	r3, [r7, #32]
 801612e:	4413      	add	r3, r2
 8016130:	781b      	ldrb	r3, [r3, #0]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d174      	bne.n	8016220 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8016136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801613a:	2b04      	cmp	r3, #4
 801613c:	bf28      	it	cs
 801613e:	2304      	movcs	r3, #4
 8016140:	b2db      	uxtb	r3, r3
 8016142:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016144:	8bfb      	ldrh	r3, [r7, #30]
 8016146:	8aba      	ldrh	r2, [r7, #20]
 8016148:	f107 0108 	add.w	r1, r7, #8
 801614c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801614e:	f7f8 fc57 	bl	800ea00 <pbuf_copy_partial>
 8016152:	4603      	mov	r3, r0
 8016154:	461a      	mov	r2, r3
 8016156:	8abb      	ldrh	r3, [r7, #20]
 8016158:	4293      	cmp	r3, r2
 801615a:	d002      	beq.n	8016162 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 801615c:	f06f 0301 	mvn.w	r3, #1
 8016160:	e0c8      	b.n	80162f4 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8016162:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016166:	2b04      	cmp	r3, #4
 8016168:	d933      	bls.n	80161d2 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801616a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801616e:	f003 0303 	and.w	r3, r3, #3
 8016172:	b2db      	uxtb	r3, r3
 8016174:	2b00      	cmp	r3, #0
 8016176:	d009      	beq.n	801618c <dhcp_parse_reply+0x414>
 8016178:	4b60      	ldr	r3, [pc, #384]	; (80162fc <dhcp_parse_reply+0x584>)
 801617a:	f240 6281 	movw	r2, #1665	; 0x681
 801617e:	4964      	ldr	r1, [pc, #400]	; (8016310 <dhcp_parse_reply+0x598>)
 8016180:	4860      	ldr	r0, [pc, #384]	; (8016304 <dhcp_parse_reply+0x58c>)
 8016182:	f003 fc3b 	bl	80199fc <iprintf>
 8016186:	f06f 0305 	mvn.w	r3, #5
 801618a:	e0b3      	b.n	80162f4 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 801618c:	4a5f      	ldr	r2, [pc, #380]	; (801630c <dhcp_parse_reply+0x594>)
 801618e:	6a3b      	ldr	r3, [r7, #32]
 8016190:	4413      	add	r3, r2
 8016192:	2201      	movs	r2, #1
 8016194:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	4618      	mov	r0, r3
 801619a:	f7f6 ff0a 	bl	800cfb2 <lwip_htonl>
 801619e:	4601      	mov	r1, r0
 80161a0:	4a5c      	ldr	r2, [pc, #368]	; (8016314 <dhcp_parse_reply+0x59c>)
 80161a2:	6a3b      	ldr	r3, [r7, #32]
 80161a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80161a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161ac:	3b04      	subs	r3, #4
 80161ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80161b2:	8bfb      	ldrh	r3, [r7, #30]
 80161b4:	3304      	adds	r3, #4
 80161b6:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80161b8:	8a7a      	ldrh	r2, [r7, #18]
 80161ba:	8bfb      	ldrh	r3, [r7, #30]
 80161bc:	429a      	cmp	r2, r3
 80161be:	d202      	bcs.n	80161c6 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80161c0:	f06f 0301 	mvn.w	r3, #1
 80161c4:	e096      	b.n	80162f4 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80161c6:	8a7b      	ldrh	r3, [r7, #18]
 80161c8:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80161ca:	6a3b      	ldr	r3, [r7, #32]
 80161cc:	3301      	adds	r3, #1
 80161ce:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80161d0:	e79e      	b.n	8016110 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80161d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161d6:	2b04      	cmp	r3, #4
 80161d8:	d106      	bne.n	80161e8 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	4618      	mov	r0, r3
 80161de:	f7f6 fee8 	bl	800cfb2 <lwip_htonl>
 80161e2:	4603      	mov	r3, r0
 80161e4:	60bb      	str	r3, [r7, #8]
 80161e6:	e011      	b.n	801620c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80161e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161ec:	2b01      	cmp	r3, #1
 80161ee:	d009      	beq.n	8016204 <dhcp_parse_reply+0x48c>
 80161f0:	4b42      	ldr	r3, [pc, #264]	; (80162fc <dhcp_parse_reply+0x584>)
 80161f2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80161f6:	4948      	ldr	r1, [pc, #288]	; (8016318 <dhcp_parse_reply+0x5a0>)
 80161f8:	4842      	ldr	r0, [pc, #264]	; (8016304 <dhcp_parse_reply+0x58c>)
 80161fa:	f003 fbff 	bl	80199fc <iprintf>
 80161fe:	f06f 0305 	mvn.w	r3, #5
 8016202:	e077      	b.n	80162f4 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8016204:	f107 0308 	add.w	r3, r7, #8
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801620c:	4a3f      	ldr	r2, [pc, #252]	; (801630c <dhcp_parse_reply+0x594>)
 801620e:	6a3b      	ldr	r3, [r7, #32]
 8016210:	4413      	add	r3, r2
 8016212:	2201      	movs	r2, #1
 8016214:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8016216:	68ba      	ldr	r2, [r7, #8]
 8016218:	493e      	ldr	r1, [pc, #248]	; (8016314 <dhcp_parse_reply+0x59c>)
 801621a:	6a3b      	ldr	r3, [r7, #32]
 801621c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016222:	895b      	ldrh	r3, [r3, #10]
 8016224:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016226:	429a      	cmp	r2, r3
 8016228:	d324      	bcc.n	8016274 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801622c:	895b      	ldrh	r3, [r3, #10]
 801622e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016230:	1ad3      	subs	r3, r2, r3
 8016232:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8016234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016236:	895b      	ldrh	r3, [r3, #10]
 8016238:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801623a:	1ad3      	subs	r3, r2, r3
 801623c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801623e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016240:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016242:	429a      	cmp	r2, r3
 8016244:	d213      	bcs.n	801626e <dhcp_parse_reply+0x4f6>
        q = q->next;
 8016246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801624e:	2b00      	cmp	r3, #0
 8016250:	d109      	bne.n	8016266 <dhcp_parse_reply+0x4ee>
 8016252:	4b2a      	ldr	r3, [pc, #168]	; (80162fc <dhcp_parse_reply+0x584>)
 8016254:	f240 629d 	movw	r2, #1693	; 0x69d
 8016258:	4930      	ldr	r1, [pc, #192]	; (801631c <dhcp_parse_reply+0x5a4>)
 801625a:	482a      	ldr	r0, [pc, #168]	; (8016304 <dhcp_parse_reply+0x58c>)
 801625c:	f003 fbce 	bl	80199fc <iprintf>
 8016260:	f06f 0305 	mvn.w	r3, #5
 8016264:	e046      	b.n	80162f4 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8016266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016268:	685b      	ldr	r3, [r3, #4]
 801626a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801626c:	e002      	b.n	8016274 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801626e:	f06f 0301 	mvn.w	r3, #1
 8016272:	e03f      	b.n	80162f4 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016276:	2b00      	cmp	r3, #0
 8016278:	d00a      	beq.n	8016290 <dhcp_parse_reply+0x518>
 801627a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801627c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801627e:	429a      	cmp	r2, r3
 8016280:	d206      	bcs.n	8016290 <dhcp_parse_reply+0x518>
 8016282:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016286:	4413      	add	r3, r2
 8016288:	781b      	ldrb	r3, [r3, #0]
 801628a:	2bff      	cmp	r3, #255	; 0xff
 801628c:	f47f adb7 	bne.w	8015dfe <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016290:	4b1e      	ldr	r3, [pc, #120]	; (801630c <dhcp_parse_reply+0x594>)
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d018      	beq.n	80162ca <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016298:	4b1e      	ldr	r3, [pc, #120]	; (8016314 <dhcp_parse_reply+0x59c>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801629e:	4b1b      	ldr	r3, [pc, #108]	; (801630c <dhcp_parse_reply+0x594>)
 80162a0:	2200      	movs	r2, #0
 80162a2:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	2b01      	cmp	r3, #1
 80162a8:	d102      	bne.n	80162b0 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80162aa:	2301      	movs	r3, #1
 80162ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162ae:	e00c      	b.n	80162ca <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	2b02      	cmp	r3, #2
 80162b4:	d102      	bne.n	80162bc <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80162b6:	2301      	movs	r3, #1
 80162b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80162ba:	e006      	b.n	80162ca <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	2b03      	cmp	r3, #3
 80162c0:	d103      	bne.n	80162ca <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80162c2:	2301      	movs	r3, #1
 80162c4:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80162c6:	2301      	movs	r3, #1
 80162c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80162ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d006      	beq.n	80162de <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80162d0:	2300      	movs	r3, #0
 80162d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80162d4:	236c      	movs	r3, #108	; 0x6c
 80162d6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80162d8:	23ec      	movs	r3, #236	; 0xec
 80162da:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80162dc:	e569      	b.n	8015db2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80162de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d006      	beq.n	80162f2 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80162e4:	2300      	movs	r3, #0
 80162e6:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80162e8:	232c      	movs	r3, #44	; 0x2c
 80162ea:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80162ec:	236c      	movs	r3, #108	; 0x6c
 80162ee:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80162f0:	e55f      	b.n	8015db2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80162f2:	2300      	movs	r3, #0
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	3740      	adds	r7, #64	; 0x40
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}
 80162fc:	0801f738 	.word	0x0801f738
 8016300:	0801f9c0 	.word	0x0801f9c0
 8016304:	0801f798 	.word	0x0801f798
 8016308:	0801fa04 	.word	0x0801fa04
 801630c:	2000b4dc 	.word	0x2000b4dc
 8016310:	0801fa18 	.word	0x0801fa18
 8016314:	2000b4e4 	.word	0x2000b4e4
 8016318:	0801fa30 	.word	0x0801fa30
 801631c:	0801fa44 	.word	0x0801fa44

08016320 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b08a      	sub	sp, #40	; 0x28
 8016324:	af00      	add	r7, sp, #0
 8016326:	60f8      	str	r0, [r7, #12]
 8016328:	60b9      	str	r1, [r7, #8]
 801632a:	607a      	str	r2, [r7, #4]
 801632c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801632e:	4b5f      	ldr	r3, [pc, #380]	; (80164ac <dhcp_recv+0x18c>)
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016334:	6a3b      	ldr	r3, [r7, #32]
 8016336:	6a1b      	ldr	r3, [r3, #32]
 8016338:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	685b      	ldr	r3, [r3, #4]
 801633e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016340:	69fb      	ldr	r3, [r7, #28]
 8016342:	2b00      	cmp	r3, #0
 8016344:	f000 809d 	beq.w	8016482 <dhcp_recv+0x162>
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	791b      	ldrb	r3, [r3, #4]
 801634c:	2b00      	cmp	r3, #0
 801634e:	f000 8098 	beq.w	8016482 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	895b      	ldrh	r3, [r3, #10]
 8016356:	2b2b      	cmp	r3, #43	; 0x2b
 8016358:	f240 8095 	bls.w	8016486 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801635c:	69bb      	ldr	r3, [r7, #24]
 801635e:	781b      	ldrb	r3, [r3, #0]
 8016360:	2b02      	cmp	r3, #2
 8016362:	f040 8092 	bne.w	801648a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016366:	2300      	movs	r3, #0
 8016368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801636c:	e012      	b.n	8016394 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801636e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016372:	6a3a      	ldr	r2, [r7, #32]
 8016374:	4413      	add	r3, r2
 8016376:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801637a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801637e:	69b9      	ldr	r1, [r7, #24]
 8016380:	440b      	add	r3, r1
 8016382:	7f1b      	ldrb	r3, [r3, #28]
 8016384:	429a      	cmp	r2, r3
 8016386:	f040 8082 	bne.w	801648e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801638a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801638e:	3301      	adds	r3, #1
 8016390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016394:	6a3b      	ldr	r3, [r7, #32]
 8016396:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801639a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801639e:	429a      	cmp	r2, r3
 80163a0:	d203      	bcs.n	80163aa <dhcp_recv+0x8a>
 80163a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163a6:	2b05      	cmp	r3, #5
 80163a8:	d9e1      	bls.n	801636e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80163aa:	69bb      	ldr	r3, [r7, #24]
 80163ac:	685b      	ldr	r3, [r3, #4]
 80163ae:	4618      	mov	r0, r3
 80163b0:	f7f6 fdff 	bl	800cfb2 <lwip_htonl>
 80163b4:	4602      	mov	r2, r0
 80163b6:	69fb      	ldr	r3, [r7, #28]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	429a      	cmp	r2, r3
 80163bc:	d169      	bne.n	8016492 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80163be:	69f9      	ldr	r1, [r7, #28]
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f7ff fcd9 	bl	8015d78 <dhcp_parse_reply>
 80163c6:	4603      	mov	r3, r0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d164      	bne.n	8016496 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80163cc:	4b38      	ldr	r3, [pc, #224]	; (80164b0 <dhcp_recv+0x190>)
 80163ce:	785b      	ldrb	r3, [r3, #1]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d062      	beq.n	801649a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	685b      	ldr	r3, [r3, #4]
 80163d8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80163da:	4b36      	ldr	r3, [pc, #216]	; (80164b4 <dhcp_recv+0x194>)
 80163dc:	685b      	ldr	r3, [r3, #4]
 80163de:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80163e0:	7cfb      	ldrb	r3, [r7, #19]
 80163e2:	2b05      	cmp	r3, #5
 80163e4:	d12a      	bne.n	801643c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80163e6:	69fb      	ldr	r3, [r7, #28]
 80163e8:	795b      	ldrb	r3, [r3, #5]
 80163ea:	2b01      	cmp	r3, #1
 80163ec:	d112      	bne.n	8016414 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80163ee:	6979      	ldr	r1, [r7, #20]
 80163f0:	6a38      	ldr	r0, [r7, #32]
 80163f2:	f7fe fe53 	bl	801509c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80163f6:	6a3b      	ldr	r3, [r7, #32]
 80163f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163fc:	f003 0308 	and.w	r3, r3, #8
 8016400:	2b00      	cmp	r3, #0
 8016402:	d003      	beq.n	801640c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016404:	6a38      	ldr	r0, [r7, #32]
 8016406:	f7fe fbc3 	bl	8014b90 <dhcp_check>
 801640a:	e047      	b.n	801649c <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801640c:	6a38      	ldr	r0, [r7, #32]
 801640e:	f7ff f867 	bl	80154e0 <dhcp_bind>
 8016412:	e043      	b.n	801649c <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016414:	69fb      	ldr	r3, [r7, #28]
 8016416:	795b      	ldrb	r3, [r3, #5]
 8016418:	2b03      	cmp	r3, #3
 801641a:	d007      	beq.n	801642c <dhcp_recv+0x10c>
 801641c:	69fb      	ldr	r3, [r7, #28]
 801641e:	795b      	ldrb	r3, [r3, #5]
 8016420:	2b04      	cmp	r3, #4
 8016422:	d003      	beq.n	801642c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016424:	69fb      	ldr	r3, [r7, #28]
 8016426:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016428:	2b05      	cmp	r3, #5
 801642a:	d137      	bne.n	801649c <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 801642c:	6979      	ldr	r1, [r7, #20]
 801642e:	6a38      	ldr	r0, [r7, #32]
 8016430:	f7fe fe34 	bl	801509c <dhcp_handle_ack>
      dhcp_bind(netif);
 8016434:	6a38      	ldr	r0, [r7, #32]
 8016436:	f7ff f853 	bl	80154e0 <dhcp_bind>
 801643a:	e02f      	b.n	801649c <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801643c:	7cfb      	ldrb	r3, [r7, #19]
 801643e:	2b06      	cmp	r3, #6
 8016440:	d113      	bne.n	801646a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016442:	69fb      	ldr	r3, [r7, #28]
 8016444:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016446:	2b03      	cmp	r3, #3
 8016448:	d00b      	beq.n	8016462 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801644a:	69fb      	ldr	r3, [r7, #28]
 801644c:	795b      	ldrb	r3, [r3, #5]
 801644e:	2b01      	cmp	r3, #1
 8016450:	d007      	beq.n	8016462 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016452:	69fb      	ldr	r3, [r7, #28]
 8016454:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016456:	2b04      	cmp	r3, #4
 8016458:	d003      	beq.n	8016462 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801645a:	69fb      	ldr	r3, [r7, #28]
 801645c:	795b      	ldrb	r3, [r3, #5]
 801645e:	2b05      	cmp	r3, #5
 8016460:	d103      	bne.n	801646a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016462:	6a38      	ldr	r0, [r7, #32]
 8016464:	f7fe fb7a 	bl	8014b5c <dhcp_handle_nak>
 8016468:	e018      	b.n	801649c <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801646a:	7cfb      	ldrb	r3, [r7, #19]
 801646c:	2b02      	cmp	r3, #2
 801646e:	d108      	bne.n	8016482 <dhcp_recv+0x162>
 8016470:	69fb      	ldr	r3, [r7, #28]
 8016472:	795b      	ldrb	r3, [r3, #5]
 8016474:	2b06      	cmp	r3, #6
 8016476:	d104      	bne.n	8016482 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8016478:	6979      	ldr	r1, [r7, #20]
 801647a:	6a38      	ldr	r0, [r7, #32]
 801647c:	f7fe fbbc 	bl	8014bf8 <dhcp_handle_offer>
 8016480:	e00c      	b.n	801649c <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8016482:	bf00      	nop
 8016484:	e00a      	b.n	801649c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016486:	bf00      	nop
 8016488:	e008      	b.n	801649c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801648a:	bf00      	nop
 801648c:	e006      	b.n	801649c <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 801648e:	bf00      	nop
 8016490:	e004      	b.n	801649c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016492:	bf00      	nop
 8016494:	e002      	b.n	801649c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016496:	bf00      	nop
 8016498:	e000      	b.n	801649c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801649a:	bf00      	nop
  pbuf_free(p);
 801649c:	6878      	ldr	r0, [r7, #4]
 801649e:	f7f8 f8a9 	bl	800e5f4 <pbuf_free>
}
 80164a2:	bf00      	nop
 80164a4:	3728      	adds	r7, #40	; 0x28
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bd80      	pop	{r7, pc}
 80164aa:	bf00      	nop
 80164ac:	20007d8c 	.word	0x20007d8c
 80164b0:	2000b4dc 	.word	0x2000b4dc
 80164b4:	2000b4e4 	.word	0x2000b4e4

080164b8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b088      	sub	sp, #32
 80164bc:	af00      	add	r7, sp, #0
 80164be:	60f8      	str	r0, [r7, #12]
 80164c0:	60b9      	str	r1, [r7, #8]
 80164c2:	603b      	str	r3, [r7, #0]
 80164c4:	4613      	mov	r3, r2
 80164c6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d108      	bne.n	80164e0 <dhcp_create_msg+0x28>
 80164ce:	4b5f      	ldr	r3, [pc, #380]	; (801664c <dhcp_create_msg+0x194>)
 80164d0:	f240 7269 	movw	r2, #1897	; 0x769
 80164d4:	495e      	ldr	r1, [pc, #376]	; (8016650 <dhcp_create_msg+0x198>)
 80164d6:	485f      	ldr	r0, [pc, #380]	; (8016654 <dhcp_create_msg+0x19c>)
 80164d8:	f003 fa90 	bl	80199fc <iprintf>
 80164dc:	2300      	movs	r3, #0
 80164de:	e0b1      	b.n	8016644 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d108      	bne.n	80164f8 <dhcp_create_msg+0x40>
 80164e6:	4b59      	ldr	r3, [pc, #356]	; (801664c <dhcp_create_msg+0x194>)
 80164e8:	f240 726a 	movw	r2, #1898	; 0x76a
 80164ec:	495a      	ldr	r1, [pc, #360]	; (8016658 <dhcp_create_msg+0x1a0>)
 80164ee:	4859      	ldr	r0, [pc, #356]	; (8016654 <dhcp_create_msg+0x19c>)
 80164f0:	f003 fa84 	bl	80199fc <iprintf>
 80164f4:	2300      	movs	r3, #0
 80164f6:	e0a5      	b.n	8016644 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80164f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80164fc:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016500:	2036      	movs	r0, #54	; 0x36
 8016502:	f7f7 fd97 	bl	800e034 <pbuf_alloc>
 8016506:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016508:	69bb      	ldr	r3, [r7, #24]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d101      	bne.n	8016512 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801650e:	2300      	movs	r3, #0
 8016510:	e098      	b.n	8016644 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016512:	69bb      	ldr	r3, [r7, #24]
 8016514:	895b      	ldrh	r3, [r3, #10]
 8016516:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801651a:	d206      	bcs.n	801652a <dhcp_create_msg+0x72>
 801651c:	4b4b      	ldr	r3, [pc, #300]	; (801664c <dhcp_create_msg+0x194>)
 801651e:	f240 7272 	movw	r2, #1906	; 0x772
 8016522:	494e      	ldr	r1, [pc, #312]	; (801665c <dhcp_create_msg+0x1a4>)
 8016524:	484b      	ldr	r0, [pc, #300]	; (8016654 <dhcp_create_msg+0x19c>)
 8016526:	f003 fa69 	bl	80199fc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801652a:	79fb      	ldrb	r3, [r7, #7]
 801652c:	2b03      	cmp	r3, #3
 801652e:	d103      	bne.n	8016538 <dhcp_create_msg+0x80>
 8016530:	68bb      	ldr	r3, [r7, #8]
 8016532:	795b      	ldrb	r3, [r3, #5]
 8016534:	2b03      	cmp	r3, #3
 8016536:	d10d      	bne.n	8016554 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	799b      	ldrb	r3, [r3, #6]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d105      	bne.n	801654c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016540:	f003 fa74 	bl	8019a2c <rand>
 8016544:	4603      	mov	r3, r0
 8016546:	461a      	mov	r2, r3
 8016548:	4b45      	ldr	r3, [pc, #276]	; (8016660 <dhcp_create_msg+0x1a8>)
 801654a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801654c:	4b44      	ldr	r3, [pc, #272]	; (8016660 <dhcp_create_msg+0x1a8>)
 801654e:	681a      	ldr	r2, [r3, #0]
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016554:	69bb      	ldr	r3, [r7, #24]
 8016556:	685b      	ldr	r3, [r3, #4]
 8016558:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801655a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801655e:	2100      	movs	r1, #0
 8016560:	6978      	ldr	r0, [r7, #20]
 8016562:	f002 fd3e 	bl	8018fe2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016566:	697b      	ldr	r3, [r7, #20]
 8016568:	2201      	movs	r2, #1
 801656a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801656c:	697b      	ldr	r3, [r7, #20]
 801656e:	2201      	movs	r2, #1
 8016570:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8016578:	697b      	ldr	r3, [r7, #20]
 801657a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	4618      	mov	r0, r3
 8016582:	f7f6 fd16 	bl	800cfb2 <lwip_htonl>
 8016586:	4602      	mov	r2, r0
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801658c:	79fb      	ldrb	r3, [r7, #7]
 801658e:	2b08      	cmp	r3, #8
 8016590:	d010      	beq.n	80165b4 <dhcp_create_msg+0xfc>
 8016592:	79fb      	ldrb	r3, [r7, #7]
 8016594:	2b04      	cmp	r3, #4
 8016596:	d00d      	beq.n	80165b4 <dhcp_create_msg+0xfc>
 8016598:	79fb      	ldrb	r3, [r7, #7]
 801659a:	2b07      	cmp	r3, #7
 801659c:	d00a      	beq.n	80165b4 <dhcp_create_msg+0xfc>
 801659e:	79fb      	ldrb	r3, [r7, #7]
 80165a0:	2b03      	cmp	r3, #3
 80165a2:	d10c      	bne.n	80165be <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80165a4:	68bb      	ldr	r3, [r7, #8]
 80165a6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80165a8:	2b05      	cmp	r3, #5
 80165aa:	d003      	beq.n	80165b4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80165ac:	68bb      	ldr	r3, [r7, #8]
 80165ae:	795b      	ldrb	r3, [r3, #5]
 80165b0:	2b04      	cmp	r3, #4
 80165b2:	d104      	bne.n	80165be <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	3304      	adds	r3, #4
 80165b8:	681a      	ldr	r2, [r3, #0]
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80165be:	2300      	movs	r3, #0
 80165c0:	83fb      	strh	r3, [r7, #30]
 80165c2:	e00c      	b.n	80165de <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80165c4:	8bfa      	ldrh	r2, [r7, #30]
 80165c6:	8bfb      	ldrh	r3, [r7, #30]
 80165c8:	68f9      	ldr	r1, [r7, #12]
 80165ca:	440a      	add	r2, r1
 80165cc:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 80165d0:	697a      	ldr	r2, [r7, #20]
 80165d2:	4413      	add	r3, r2
 80165d4:	460a      	mov	r2, r1
 80165d6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80165d8:	8bfb      	ldrh	r3, [r7, #30]
 80165da:	3301      	adds	r3, #1
 80165dc:	83fb      	strh	r3, [r7, #30]
 80165de:	8bfb      	ldrh	r3, [r7, #30]
 80165e0:	2b05      	cmp	r3, #5
 80165e2:	d9ef      	bls.n	80165c4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	2200      	movs	r2, #0
 80165e8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80165ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80165f0:	2200      	movs	r2, #0
 80165f2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80165f6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80165fa:	2200      	movs	r2, #0
 80165fc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016600:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016604:	2200      	movs	r2, #0
 8016606:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801660a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801660e:	697b      	ldr	r3, [r7, #20]
 8016610:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016614:	2301      	movs	r3, #1
 8016616:	2235      	movs	r2, #53	; 0x35
 8016618:	2000      	movs	r0, #0
 801661a:	f7ff fadd 	bl	8015bd8 <dhcp_option>
 801661e:	4603      	mov	r3, r0
 8016620:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016628:	79fa      	ldrb	r2, [r7, #7]
 801662a:	8a7b      	ldrh	r3, [r7, #18]
 801662c:	4618      	mov	r0, r3
 801662e:	f7ff fb07 	bl	8015c40 <dhcp_option_byte>
 8016632:	4603      	mov	r3, r0
 8016634:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016636:	683b      	ldr	r3, [r7, #0]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d002      	beq.n	8016642 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801663c:	683b      	ldr	r3, [r7, #0]
 801663e:	8a7a      	ldrh	r2, [r7, #18]
 8016640:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016642:	69bb      	ldr	r3, [r7, #24]
}
 8016644:	4618      	mov	r0, r3
 8016646:	3720      	adds	r7, #32
 8016648:	46bd      	mov	sp, r7
 801664a:	bd80      	pop	{r7, pc}
 801664c:	0801f738 	.word	0x0801f738
 8016650:	0801fa58 	.word	0x0801fa58
 8016654:	0801f798 	.word	0x0801f798
 8016658:	0801fa78 	.word	0x0801fa78
 801665c:	0801fa98 	.word	0x0801fa98
 8016660:	2000475c 	.word	0x2000475c

08016664 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b084      	sub	sp, #16
 8016668:	af00      	add	r7, sp, #0
 801666a:	4603      	mov	r3, r0
 801666c:	60b9      	str	r1, [r7, #8]
 801666e:	607a      	str	r2, [r7, #4]
 8016670:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016672:	89fb      	ldrh	r3, [r7, #14]
 8016674:	1c5a      	adds	r2, r3, #1
 8016676:	81fa      	strh	r2, [r7, #14]
 8016678:	461a      	mov	r2, r3
 801667a:	68bb      	ldr	r3, [r7, #8]
 801667c:	4413      	add	r3, r2
 801667e:	22ff      	movs	r2, #255	; 0xff
 8016680:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016682:	e007      	b.n	8016694 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016684:	89fb      	ldrh	r3, [r7, #14]
 8016686:	1c5a      	adds	r2, r3, #1
 8016688:	81fa      	strh	r2, [r7, #14]
 801668a:	461a      	mov	r2, r3
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	4413      	add	r3, r2
 8016690:	2200      	movs	r2, #0
 8016692:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016694:	89fb      	ldrh	r3, [r7, #14]
 8016696:	2b43      	cmp	r3, #67	; 0x43
 8016698:	d904      	bls.n	80166a4 <dhcp_option_trailer+0x40>
 801669a:	89fb      	ldrh	r3, [r7, #14]
 801669c:	f003 0303 	and.w	r3, r3, #3
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d002      	beq.n	80166aa <dhcp_option_trailer+0x46>
 80166a4:	89fb      	ldrh	r3, [r7, #14]
 80166a6:	2b43      	cmp	r3, #67	; 0x43
 80166a8:	d9ec      	bls.n	8016684 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80166aa:	89fb      	ldrh	r3, [r7, #14]
 80166ac:	33f0      	adds	r3, #240	; 0xf0
 80166ae:	b29b      	uxth	r3, r3
 80166b0:	4619      	mov	r1, r3
 80166b2:	6878      	ldr	r0, [r7, #4]
 80166b4:	f7f7 fe18 	bl	800e2e8 <pbuf_realloc>
}
 80166b8:	bf00      	nop
 80166ba:	3710      	adds	r7, #16
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}

080166c0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80166c0:	b480      	push	{r7}
 80166c2:	b085      	sub	sp, #20
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d017      	beq.n	80166fe <dhcp_supplied_address+0x3e>
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	6a1b      	ldr	r3, [r3, #32]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d013      	beq.n	80166fe <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	6a1b      	ldr	r3, [r3, #32]
 80166da:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	795b      	ldrb	r3, [r3, #5]
 80166e0:	2b0a      	cmp	r3, #10
 80166e2:	d007      	beq.n	80166f4 <dhcp_supplied_address+0x34>
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	795b      	ldrb	r3, [r3, #5]
 80166e8:	2b05      	cmp	r3, #5
 80166ea:	d003      	beq.n	80166f4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80166f0:	2b04      	cmp	r3, #4
 80166f2:	d101      	bne.n	80166f8 <dhcp_supplied_address+0x38>
 80166f4:	2301      	movs	r3, #1
 80166f6:	e000      	b.n	80166fa <dhcp_supplied_address+0x3a>
 80166f8:	2300      	movs	r3, #0
 80166fa:	b2db      	uxtb	r3, r3
 80166fc:	e000      	b.n	8016700 <dhcp_supplied_address+0x40>
  }
  return 0;
 80166fe:	2300      	movs	r3, #0
}
 8016700:	4618      	mov	r0, r3
 8016702:	3714      	adds	r7, #20
 8016704:	46bd      	mov	sp, r7
 8016706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670a:	4770      	bx	lr

0801670c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b082      	sub	sp, #8
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016714:	4915      	ldr	r1, [pc, #84]	; (801676c <etharp_free_entry+0x60>)
 8016716:	687a      	ldr	r2, [r7, #4]
 8016718:	4613      	mov	r3, r2
 801671a:	005b      	lsls	r3, r3, #1
 801671c:	4413      	add	r3, r2
 801671e:	00db      	lsls	r3, r3, #3
 8016720:	440b      	add	r3, r1
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d013      	beq.n	8016750 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016728:	4910      	ldr	r1, [pc, #64]	; (801676c <etharp_free_entry+0x60>)
 801672a:	687a      	ldr	r2, [r7, #4]
 801672c:	4613      	mov	r3, r2
 801672e:	005b      	lsls	r3, r3, #1
 8016730:	4413      	add	r3, r2
 8016732:	00db      	lsls	r3, r3, #3
 8016734:	440b      	add	r3, r1
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	4618      	mov	r0, r3
 801673a:	f7f7 ff5b 	bl	800e5f4 <pbuf_free>
    arp_table[i].q = NULL;
 801673e:	490b      	ldr	r1, [pc, #44]	; (801676c <etharp_free_entry+0x60>)
 8016740:	687a      	ldr	r2, [r7, #4]
 8016742:	4613      	mov	r3, r2
 8016744:	005b      	lsls	r3, r3, #1
 8016746:	4413      	add	r3, r2
 8016748:	00db      	lsls	r3, r3, #3
 801674a:	440b      	add	r3, r1
 801674c:	2200      	movs	r2, #0
 801674e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016750:	4906      	ldr	r1, [pc, #24]	; (801676c <etharp_free_entry+0x60>)
 8016752:	687a      	ldr	r2, [r7, #4]
 8016754:	4613      	mov	r3, r2
 8016756:	005b      	lsls	r3, r3, #1
 8016758:	4413      	add	r3, r2
 801675a:	00db      	lsls	r3, r3, #3
 801675c:	440b      	add	r3, r1
 801675e:	3314      	adds	r3, #20
 8016760:	2200      	movs	r2, #0
 8016762:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016764:	bf00      	nop
 8016766:	3708      	adds	r7, #8
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}
 801676c:	20004760 	.word	0x20004760

08016770 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b082      	sub	sp, #8
 8016774:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016776:	2300      	movs	r3, #0
 8016778:	607b      	str	r3, [r7, #4]
 801677a:	e096      	b.n	80168aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801677c:	494f      	ldr	r1, [pc, #316]	; (80168bc <etharp_tmr+0x14c>)
 801677e:	687a      	ldr	r2, [r7, #4]
 8016780:	4613      	mov	r3, r2
 8016782:	005b      	lsls	r3, r3, #1
 8016784:	4413      	add	r3, r2
 8016786:	00db      	lsls	r3, r3, #3
 8016788:	440b      	add	r3, r1
 801678a:	3314      	adds	r3, #20
 801678c:	781b      	ldrb	r3, [r3, #0]
 801678e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016790:	78fb      	ldrb	r3, [r7, #3]
 8016792:	2b00      	cmp	r3, #0
 8016794:	f000 8086 	beq.w	80168a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016798:	4948      	ldr	r1, [pc, #288]	; (80168bc <etharp_tmr+0x14c>)
 801679a:	687a      	ldr	r2, [r7, #4]
 801679c:	4613      	mov	r3, r2
 801679e:	005b      	lsls	r3, r3, #1
 80167a0:	4413      	add	r3, r2
 80167a2:	00db      	lsls	r3, r3, #3
 80167a4:	440b      	add	r3, r1
 80167a6:	3312      	adds	r3, #18
 80167a8:	881b      	ldrh	r3, [r3, #0]
 80167aa:	3301      	adds	r3, #1
 80167ac:	b298      	uxth	r0, r3
 80167ae:	4943      	ldr	r1, [pc, #268]	; (80168bc <etharp_tmr+0x14c>)
 80167b0:	687a      	ldr	r2, [r7, #4]
 80167b2:	4613      	mov	r3, r2
 80167b4:	005b      	lsls	r3, r3, #1
 80167b6:	4413      	add	r3, r2
 80167b8:	00db      	lsls	r3, r3, #3
 80167ba:	440b      	add	r3, r1
 80167bc:	3312      	adds	r3, #18
 80167be:	4602      	mov	r2, r0
 80167c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80167c2:	493e      	ldr	r1, [pc, #248]	; (80168bc <etharp_tmr+0x14c>)
 80167c4:	687a      	ldr	r2, [r7, #4]
 80167c6:	4613      	mov	r3, r2
 80167c8:	005b      	lsls	r3, r3, #1
 80167ca:	4413      	add	r3, r2
 80167cc:	00db      	lsls	r3, r3, #3
 80167ce:	440b      	add	r3, r1
 80167d0:	3312      	adds	r3, #18
 80167d2:	881b      	ldrh	r3, [r3, #0]
 80167d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80167d8:	d215      	bcs.n	8016806 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80167da:	4938      	ldr	r1, [pc, #224]	; (80168bc <etharp_tmr+0x14c>)
 80167dc:	687a      	ldr	r2, [r7, #4]
 80167de:	4613      	mov	r3, r2
 80167e0:	005b      	lsls	r3, r3, #1
 80167e2:	4413      	add	r3, r2
 80167e4:	00db      	lsls	r3, r3, #3
 80167e6:	440b      	add	r3, r1
 80167e8:	3314      	adds	r3, #20
 80167ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80167ec:	2b01      	cmp	r3, #1
 80167ee:	d10e      	bne.n	801680e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80167f0:	4932      	ldr	r1, [pc, #200]	; (80168bc <etharp_tmr+0x14c>)
 80167f2:	687a      	ldr	r2, [r7, #4]
 80167f4:	4613      	mov	r3, r2
 80167f6:	005b      	lsls	r3, r3, #1
 80167f8:	4413      	add	r3, r2
 80167fa:	00db      	lsls	r3, r3, #3
 80167fc:	440b      	add	r3, r1
 80167fe:	3312      	adds	r3, #18
 8016800:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016802:	2b04      	cmp	r3, #4
 8016804:	d903      	bls.n	801680e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016806:	6878      	ldr	r0, [r7, #4]
 8016808:	f7ff ff80 	bl	801670c <etharp_free_entry>
 801680c:	e04a      	b.n	80168a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801680e:	492b      	ldr	r1, [pc, #172]	; (80168bc <etharp_tmr+0x14c>)
 8016810:	687a      	ldr	r2, [r7, #4]
 8016812:	4613      	mov	r3, r2
 8016814:	005b      	lsls	r3, r3, #1
 8016816:	4413      	add	r3, r2
 8016818:	00db      	lsls	r3, r3, #3
 801681a:	440b      	add	r3, r1
 801681c:	3314      	adds	r3, #20
 801681e:	781b      	ldrb	r3, [r3, #0]
 8016820:	2b03      	cmp	r3, #3
 8016822:	d10a      	bne.n	801683a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016824:	4925      	ldr	r1, [pc, #148]	; (80168bc <etharp_tmr+0x14c>)
 8016826:	687a      	ldr	r2, [r7, #4]
 8016828:	4613      	mov	r3, r2
 801682a:	005b      	lsls	r3, r3, #1
 801682c:	4413      	add	r3, r2
 801682e:	00db      	lsls	r3, r3, #3
 8016830:	440b      	add	r3, r1
 8016832:	3314      	adds	r3, #20
 8016834:	2204      	movs	r2, #4
 8016836:	701a      	strb	r2, [r3, #0]
 8016838:	e034      	b.n	80168a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801683a:	4920      	ldr	r1, [pc, #128]	; (80168bc <etharp_tmr+0x14c>)
 801683c:	687a      	ldr	r2, [r7, #4]
 801683e:	4613      	mov	r3, r2
 8016840:	005b      	lsls	r3, r3, #1
 8016842:	4413      	add	r3, r2
 8016844:	00db      	lsls	r3, r3, #3
 8016846:	440b      	add	r3, r1
 8016848:	3314      	adds	r3, #20
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	2b04      	cmp	r3, #4
 801684e:	d10a      	bne.n	8016866 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016850:	491a      	ldr	r1, [pc, #104]	; (80168bc <etharp_tmr+0x14c>)
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	4613      	mov	r3, r2
 8016856:	005b      	lsls	r3, r3, #1
 8016858:	4413      	add	r3, r2
 801685a:	00db      	lsls	r3, r3, #3
 801685c:	440b      	add	r3, r1
 801685e:	3314      	adds	r3, #20
 8016860:	2202      	movs	r2, #2
 8016862:	701a      	strb	r2, [r3, #0]
 8016864:	e01e      	b.n	80168a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016866:	4915      	ldr	r1, [pc, #84]	; (80168bc <etharp_tmr+0x14c>)
 8016868:	687a      	ldr	r2, [r7, #4]
 801686a:	4613      	mov	r3, r2
 801686c:	005b      	lsls	r3, r3, #1
 801686e:	4413      	add	r3, r2
 8016870:	00db      	lsls	r3, r3, #3
 8016872:	440b      	add	r3, r1
 8016874:	3314      	adds	r3, #20
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	2b01      	cmp	r3, #1
 801687a:	d113      	bne.n	80168a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801687c:	490f      	ldr	r1, [pc, #60]	; (80168bc <etharp_tmr+0x14c>)
 801687e:	687a      	ldr	r2, [r7, #4]
 8016880:	4613      	mov	r3, r2
 8016882:	005b      	lsls	r3, r3, #1
 8016884:	4413      	add	r3, r2
 8016886:	00db      	lsls	r3, r3, #3
 8016888:	440b      	add	r3, r1
 801688a:	3308      	adds	r3, #8
 801688c:	6818      	ldr	r0, [r3, #0]
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	4613      	mov	r3, r2
 8016892:	005b      	lsls	r3, r3, #1
 8016894:	4413      	add	r3, r2
 8016896:	00db      	lsls	r3, r3, #3
 8016898:	4a08      	ldr	r2, [pc, #32]	; (80168bc <etharp_tmr+0x14c>)
 801689a:	4413      	add	r3, r2
 801689c:	3304      	adds	r3, #4
 801689e:	4619      	mov	r1, r3
 80168a0:	f000 fe72 	bl	8017588 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	3301      	adds	r3, #1
 80168a8:	607b      	str	r3, [r7, #4]
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2b09      	cmp	r3, #9
 80168ae:	f77f af65 	ble.w	801677c <etharp_tmr+0xc>
      }
    }
  }
}
 80168b2:	bf00      	nop
 80168b4:	3708      	adds	r7, #8
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
 80168ba:	bf00      	nop
 80168bc:	20004760 	.word	0x20004760

080168c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b08a      	sub	sp, #40	; 0x28
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	60f8      	str	r0, [r7, #12]
 80168c8:	460b      	mov	r3, r1
 80168ca:	607a      	str	r2, [r7, #4]
 80168cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80168ce:	230a      	movs	r3, #10
 80168d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80168d2:	230a      	movs	r3, #10
 80168d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80168d6:	230a      	movs	r3, #10
 80168d8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80168da:	2300      	movs	r3, #0
 80168dc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80168de:	230a      	movs	r3, #10
 80168e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80168e2:	2300      	movs	r3, #0
 80168e4:	83bb      	strh	r3, [r7, #28]
 80168e6:	2300      	movs	r3, #0
 80168e8:	837b      	strh	r3, [r7, #26]
 80168ea:	2300      	movs	r3, #0
 80168ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168ee:	2300      	movs	r3, #0
 80168f0:	843b      	strh	r3, [r7, #32]
 80168f2:	e0ae      	b.n	8016a52 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80168f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168f8:	49a6      	ldr	r1, [pc, #664]	; (8016b94 <etharp_find_entry+0x2d4>)
 80168fa:	4613      	mov	r3, r2
 80168fc:	005b      	lsls	r3, r3, #1
 80168fe:	4413      	add	r3, r2
 8016900:	00db      	lsls	r3, r3, #3
 8016902:	440b      	add	r3, r1
 8016904:	3314      	adds	r3, #20
 8016906:	781b      	ldrb	r3, [r3, #0]
 8016908:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801690a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801690e:	2b0a      	cmp	r3, #10
 8016910:	d105      	bne.n	801691e <etharp_find_entry+0x5e>
 8016912:	7dfb      	ldrb	r3, [r7, #23]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d102      	bne.n	801691e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016918:	8c3b      	ldrh	r3, [r7, #32]
 801691a:	847b      	strh	r3, [r7, #34]	; 0x22
 801691c:	e095      	b.n	8016a4a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801691e:	7dfb      	ldrb	r3, [r7, #23]
 8016920:	2b00      	cmp	r3, #0
 8016922:	f000 8092 	beq.w	8016a4a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016926:	7dfb      	ldrb	r3, [r7, #23]
 8016928:	2b01      	cmp	r3, #1
 801692a:	d009      	beq.n	8016940 <etharp_find_entry+0x80>
 801692c:	7dfb      	ldrb	r3, [r7, #23]
 801692e:	2b01      	cmp	r3, #1
 8016930:	d806      	bhi.n	8016940 <etharp_find_entry+0x80>
 8016932:	4b99      	ldr	r3, [pc, #612]	; (8016b98 <etharp_find_entry+0x2d8>)
 8016934:	f44f 7292 	mov.w	r2, #292	; 0x124
 8016938:	4998      	ldr	r1, [pc, #608]	; (8016b9c <etharp_find_entry+0x2dc>)
 801693a:	4899      	ldr	r0, [pc, #612]	; (8016ba0 <etharp_find_entry+0x2e0>)
 801693c:	f003 f85e 	bl	80199fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d020      	beq.n	8016988 <etharp_find_entry+0xc8>
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	6819      	ldr	r1, [r3, #0]
 801694a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801694e:	4891      	ldr	r0, [pc, #580]	; (8016b94 <etharp_find_entry+0x2d4>)
 8016950:	4613      	mov	r3, r2
 8016952:	005b      	lsls	r3, r3, #1
 8016954:	4413      	add	r3, r2
 8016956:	00db      	lsls	r3, r3, #3
 8016958:	4403      	add	r3, r0
 801695a:	3304      	adds	r3, #4
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	4299      	cmp	r1, r3
 8016960:	d112      	bne.n	8016988 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d00c      	beq.n	8016982 <etharp_find_entry+0xc2>
 8016968:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801696c:	4989      	ldr	r1, [pc, #548]	; (8016b94 <etharp_find_entry+0x2d4>)
 801696e:	4613      	mov	r3, r2
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	4413      	add	r3, r2
 8016974:	00db      	lsls	r3, r3, #3
 8016976:	440b      	add	r3, r1
 8016978:	3308      	adds	r3, #8
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	687a      	ldr	r2, [r7, #4]
 801697e:	429a      	cmp	r2, r3
 8016980:	d102      	bne.n	8016988 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016982:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016986:	e100      	b.n	8016b8a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016988:	7dfb      	ldrb	r3, [r7, #23]
 801698a:	2b01      	cmp	r3, #1
 801698c:	d140      	bne.n	8016a10 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801698e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016992:	4980      	ldr	r1, [pc, #512]	; (8016b94 <etharp_find_entry+0x2d4>)
 8016994:	4613      	mov	r3, r2
 8016996:	005b      	lsls	r3, r3, #1
 8016998:	4413      	add	r3, r2
 801699a:	00db      	lsls	r3, r3, #3
 801699c:	440b      	add	r3, r1
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d01a      	beq.n	80169da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80169a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169a8:	497a      	ldr	r1, [pc, #488]	; (8016b94 <etharp_find_entry+0x2d4>)
 80169aa:	4613      	mov	r3, r2
 80169ac:	005b      	lsls	r3, r3, #1
 80169ae:	4413      	add	r3, r2
 80169b0:	00db      	lsls	r3, r3, #3
 80169b2:	440b      	add	r3, r1
 80169b4:	3312      	adds	r3, #18
 80169b6:	881b      	ldrh	r3, [r3, #0]
 80169b8:	8bba      	ldrh	r2, [r7, #28]
 80169ba:	429a      	cmp	r2, r3
 80169bc:	d845      	bhi.n	8016a4a <etharp_find_entry+0x18a>
            old_queue = i;
 80169be:	8c3b      	ldrh	r3, [r7, #32]
 80169c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80169c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169c6:	4973      	ldr	r1, [pc, #460]	; (8016b94 <etharp_find_entry+0x2d4>)
 80169c8:	4613      	mov	r3, r2
 80169ca:	005b      	lsls	r3, r3, #1
 80169cc:	4413      	add	r3, r2
 80169ce:	00db      	lsls	r3, r3, #3
 80169d0:	440b      	add	r3, r1
 80169d2:	3312      	adds	r3, #18
 80169d4:	881b      	ldrh	r3, [r3, #0]
 80169d6:	83bb      	strh	r3, [r7, #28]
 80169d8:	e037      	b.n	8016a4a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80169da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169de:	496d      	ldr	r1, [pc, #436]	; (8016b94 <etharp_find_entry+0x2d4>)
 80169e0:	4613      	mov	r3, r2
 80169e2:	005b      	lsls	r3, r3, #1
 80169e4:	4413      	add	r3, r2
 80169e6:	00db      	lsls	r3, r3, #3
 80169e8:	440b      	add	r3, r1
 80169ea:	3312      	adds	r3, #18
 80169ec:	881b      	ldrh	r3, [r3, #0]
 80169ee:	8b7a      	ldrh	r2, [r7, #26]
 80169f0:	429a      	cmp	r2, r3
 80169f2:	d82a      	bhi.n	8016a4a <etharp_find_entry+0x18a>
            old_pending = i;
 80169f4:	8c3b      	ldrh	r3, [r7, #32]
 80169f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80169f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169fc:	4965      	ldr	r1, [pc, #404]	; (8016b94 <etharp_find_entry+0x2d4>)
 80169fe:	4613      	mov	r3, r2
 8016a00:	005b      	lsls	r3, r3, #1
 8016a02:	4413      	add	r3, r2
 8016a04:	00db      	lsls	r3, r3, #3
 8016a06:	440b      	add	r3, r1
 8016a08:	3312      	adds	r3, #18
 8016a0a:	881b      	ldrh	r3, [r3, #0]
 8016a0c:	837b      	strh	r3, [r7, #26]
 8016a0e:	e01c      	b.n	8016a4a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016a10:	7dfb      	ldrb	r3, [r7, #23]
 8016a12:	2b01      	cmp	r3, #1
 8016a14:	d919      	bls.n	8016a4a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016a16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a1a:	495e      	ldr	r1, [pc, #376]	; (8016b94 <etharp_find_entry+0x2d4>)
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	005b      	lsls	r3, r3, #1
 8016a20:	4413      	add	r3, r2
 8016a22:	00db      	lsls	r3, r3, #3
 8016a24:	440b      	add	r3, r1
 8016a26:	3312      	adds	r3, #18
 8016a28:	881b      	ldrh	r3, [r3, #0]
 8016a2a:	8b3a      	ldrh	r2, [r7, #24]
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d80c      	bhi.n	8016a4a <etharp_find_entry+0x18a>
            old_stable = i;
 8016a30:	8c3b      	ldrh	r3, [r7, #32]
 8016a32:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016a34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a38:	4956      	ldr	r1, [pc, #344]	; (8016b94 <etharp_find_entry+0x2d4>)
 8016a3a:	4613      	mov	r3, r2
 8016a3c:	005b      	lsls	r3, r3, #1
 8016a3e:	4413      	add	r3, r2
 8016a40:	00db      	lsls	r3, r3, #3
 8016a42:	440b      	add	r3, r1
 8016a44:	3312      	adds	r3, #18
 8016a46:	881b      	ldrh	r3, [r3, #0]
 8016a48:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a4a:	8c3b      	ldrh	r3, [r7, #32]
 8016a4c:	3301      	adds	r3, #1
 8016a4e:	b29b      	uxth	r3, r3
 8016a50:	843b      	strh	r3, [r7, #32]
 8016a52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a56:	2b09      	cmp	r3, #9
 8016a58:	f77f af4c 	ble.w	80168f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016a5c:	7afb      	ldrb	r3, [r7, #11]
 8016a5e:	f003 0302 	and.w	r3, r3, #2
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d108      	bne.n	8016a78 <etharp_find_entry+0x1b8>
 8016a66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a6a:	2b0a      	cmp	r3, #10
 8016a6c:	d107      	bne.n	8016a7e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016a6e:	7afb      	ldrb	r3, [r7, #11]
 8016a70:	f003 0301 	and.w	r3, r3, #1
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d102      	bne.n	8016a7e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016a78:	f04f 33ff 	mov.w	r3, #4294967295
 8016a7c:	e085      	b.n	8016b8a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016a7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a82:	2b09      	cmp	r3, #9
 8016a84:	dc02      	bgt.n	8016a8c <etharp_find_entry+0x1cc>
    i = empty;
 8016a86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a88:	843b      	strh	r3, [r7, #32]
 8016a8a:	e039      	b.n	8016b00 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016a8c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016a90:	2b09      	cmp	r3, #9
 8016a92:	dc14      	bgt.n	8016abe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016a94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a96:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016a98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a9c:	493d      	ldr	r1, [pc, #244]	; (8016b94 <etharp_find_entry+0x2d4>)
 8016a9e:	4613      	mov	r3, r2
 8016aa0:	005b      	lsls	r3, r3, #1
 8016aa2:	4413      	add	r3, r2
 8016aa4:	00db      	lsls	r3, r3, #3
 8016aa6:	440b      	add	r3, r1
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d018      	beq.n	8016ae0 <etharp_find_entry+0x220>
 8016aae:	4b3a      	ldr	r3, [pc, #232]	; (8016b98 <etharp_find_entry+0x2d8>)
 8016ab0:	f240 126d 	movw	r2, #365	; 0x16d
 8016ab4:	493b      	ldr	r1, [pc, #236]	; (8016ba4 <etharp_find_entry+0x2e4>)
 8016ab6:	483a      	ldr	r0, [pc, #232]	; (8016ba0 <etharp_find_entry+0x2e0>)
 8016ab8:	f002 ffa0 	bl	80199fc <iprintf>
 8016abc:	e010      	b.n	8016ae0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016abe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016ac2:	2b09      	cmp	r3, #9
 8016ac4:	dc02      	bgt.n	8016acc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016ac6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016ac8:	843b      	strh	r3, [r7, #32]
 8016aca:	e009      	b.n	8016ae0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016acc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016ad0:	2b09      	cmp	r3, #9
 8016ad2:	dc02      	bgt.n	8016ada <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016ad4:	8bfb      	ldrh	r3, [r7, #30]
 8016ad6:	843b      	strh	r3, [r7, #32]
 8016ad8:	e002      	b.n	8016ae0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016ada:	f04f 33ff 	mov.w	r3, #4294967295
 8016ade:	e054      	b.n	8016b8a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016ae0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ae4:	2b09      	cmp	r3, #9
 8016ae6:	dd06      	ble.n	8016af6 <etharp_find_entry+0x236>
 8016ae8:	4b2b      	ldr	r3, [pc, #172]	; (8016b98 <etharp_find_entry+0x2d8>)
 8016aea:	f240 127f 	movw	r2, #383	; 0x17f
 8016aee:	492e      	ldr	r1, [pc, #184]	; (8016ba8 <etharp_find_entry+0x2e8>)
 8016af0:	482b      	ldr	r0, [pc, #172]	; (8016ba0 <etharp_find_entry+0x2e0>)
 8016af2:	f002 ff83 	bl	80199fc <iprintf>
    etharp_free_entry(i);
 8016af6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7ff fe06 	bl	801670c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016b00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b04:	2b09      	cmp	r3, #9
 8016b06:	dd06      	ble.n	8016b16 <etharp_find_entry+0x256>
 8016b08:	4b23      	ldr	r3, [pc, #140]	; (8016b98 <etharp_find_entry+0x2d8>)
 8016b0a:	f240 1283 	movw	r2, #387	; 0x183
 8016b0e:	4926      	ldr	r1, [pc, #152]	; (8016ba8 <etharp_find_entry+0x2e8>)
 8016b10:	4823      	ldr	r0, [pc, #140]	; (8016ba0 <etharp_find_entry+0x2e0>)
 8016b12:	f002 ff73 	bl	80199fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016b16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b1a:	491e      	ldr	r1, [pc, #120]	; (8016b94 <etharp_find_entry+0x2d4>)
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	005b      	lsls	r3, r3, #1
 8016b20:	4413      	add	r3, r2
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	440b      	add	r3, r1
 8016b26:	3314      	adds	r3, #20
 8016b28:	781b      	ldrb	r3, [r3, #0]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d006      	beq.n	8016b3c <etharp_find_entry+0x27c>
 8016b2e:	4b1a      	ldr	r3, [pc, #104]	; (8016b98 <etharp_find_entry+0x2d8>)
 8016b30:	f240 1285 	movw	r2, #389	; 0x185
 8016b34:	491d      	ldr	r1, [pc, #116]	; (8016bac <etharp_find_entry+0x2ec>)
 8016b36:	481a      	ldr	r0, [pc, #104]	; (8016ba0 <etharp_find_entry+0x2e0>)
 8016b38:	f002 ff60 	bl	80199fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d00b      	beq.n	8016b5a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016b42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	6819      	ldr	r1, [r3, #0]
 8016b4a:	4812      	ldr	r0, [pc, #72]	; (8016b94 <etharp_find_entry+0x2d4>)
 8016b4c:	4613      	mov	r3, r2
 8016b4e:	005b      	lsls	r3, r3, #1
 8016b50:	4413      	add	r3, r2
 8016b52:	00db      	lsls	r3, r3, #3
 8016b54:	4403      	add	r3, r0
 8016b56:	3304      	adds	r3, #4
 8016b58:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016b5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b5e:	490d      	ldr	r1, [pc, #52]	; (8016b94 <etharp_find_entry+0x2d4>)
 8016b60:	4613      	mov	r3, r2
 8016b62:	005b      	lsls	r3, r3, #1
 8016b64:	4413      	add	r3, r2
 8016b66:	00db      	lsls	r3, r3, #3
 8016b68:	440b      	add	r3, r1
 8016b6a:	3312      	adds	r3, #18
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016b70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b74:	4907      	ldr	r1, [pc, #28]	; (8016b94 <etharp_find_entry+0x2d4>)
 8016b76:	4613      	mov	r3, r2
 8016b78:	005b      	lsls	r3, r3, #1
 8016b7a:	4413      	add	r3, r2
 8016b7c:	00db      	lsls	r3, r3, #3
 8016b7e:	440b      	add	r3, r1
 8016b80:	3308      	adds	r3, #8
 8016b82:	687a      	ldr	r2, [r7, #4]
 8016b84:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016b86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3728      	adds	r7, #40	; 0x28
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	bf00      	nop
 8016b94:	20004760 	.word	0x20004760
 8016b98:	0801fad8 	.word	0x0801fad8
 8016b9c:	0801fb10 	.word	0x0801fb10
 8016ba0:	0801fb50 	.word	0x0801fb50
 8016ba4:	0801fb78 	.word	0x0801fb78
 8016ba8:	0801fb90 	.word	0x0801fb90
 8016bac:	0801fba4 	.word	0x0801fba4

08016bb0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b088      	sub	sp, #32
 8016bb4:	af02      	add	r7, sp, #8
 8016bb6:	60f8      	str	r0, [r7, #12]
 8016bb8:	60b9      	str	r1, [r7, #8]
 8016bba:	607a      	str	r2, [r7, #4]
 8016bbc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016bc4:	2b06      	cmp	r3, #6
 8016bc6:	d006      	beq.n	8016bd6 <etharp_update_arp_entry+0x26>
 8016bc8:	4b48      	ldr	r3, [pc, #288]	; (8016cec <etharp_update_arp_entry+0x13c>)
 8016bca:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016bce:	4948      	ldr	r1, [pc, #288]	; (8016cf0 <etharp_update_arp_entry+0x140>)
 8016bd0:	4848      	ldr	r0, [pc, #288]	; (8016cf4 <etharp_update_arp_entry+0x144>)
 8016bd2:	f002 ff13 	bl	80199fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d012      	beq.n	8016c02 <etharp_update_arp_entry+0x52>
 8016bdc:	68bb      	ldr	r3, [r7, #8]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d00e      	beq.n	8016c02 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016be4:	68bb      	ldr	r3, [r7, #8]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	68f9      	ldr	r1, [r7, #12]
 8016bea:	4618      	mov	r0, r3
 8016bec:	f001 f91e 	bl	8017e2c <ip4_addr_isbroadcast_u32>
 8016bf0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d105      	bne.n	8016c02 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016bfe:	2be0      	cmp	r3, #224	; 0xe0
 8016c00:	d102      	bne.n	8016c08 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016c02:	f06f 030f 	mvn.w	r3, #15
 8016c06:	e06c      	b.n	8016ce2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016c08:	78fb      	ldrb	r3, [r7, #3]
 8016c0a:	68fa      	ldr	r2, [r7, #12]
 8016c0c:	4619      	mov	r1, r3
 8016c0e:	68b8      	ldr	r0, [r7, #8]
 8016c10:	f7ff fe56 	bl	80168c0 <etharp_find_entry>
 8016c14:	4603      	mov	r3, r0
 8016c16:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016c18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	da02      	bge.n	8016c26 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016c20:	8afb      	ldrh	r3, [r7, #22]
 8016c22:	b25b      	sxtb	r3, r3
 8016c24:	e05d      	b.n	8016ce2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016c26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c2a:	4933      	ldr	r1, [pc, #204]	; (8016cf8 <etharp_update_arp_entry+0x148>)
 8016c2c:	4613      	mov	r3, r2
 8016c2e:	005b      	lsls	r3, r3, #1
 8016c30:	4413      	add	r3, r2
 8016c32:	00db      	lsls	r3, r3, #3
 8016c34:	440b      	add	r3, r1
 8016c36:	3314      	adds	r3, #20
 8016c38:	2202      	movs	r2, #2
 8016c3a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016c3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c40:	492d      	ldr	r1, [pc, #180]	; (8016cf8 <etharp_update_arp_entry+0x148>)
 8016c42:	4613      	mov	r3, r2
 8016c44:	005b      	lsls	r3, r3, #1
 8016c46:	4413      	add	r3, r2
 8016c48:	00db      	lsls	r3, r3, #3
 8016c4a:	440b      	add	r3, r1
 8016c4c:	3308      	adds	r3, #8
 8016c4e:	68fa      	ldr	r2, [r7, #12]
 8016c50:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016c52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c56:	4613      	mov	r3, r2
 8016c58:	005b      	lsls	r3, r3, #1
 8016c5a:	4413      	add	r3, r2
 8016c5c:	00db      	lsls	r3, r3, #3
 8016c5e:	3308      	adds	r3, #8
 8016c60:	4a25      	ldr	r2, [pc, #148]	; (8016cf8 <etharp_update_arp_entry+0x148>)
 8016c62:	4413      	add	r3, r2
 8016c64:	3304      	adds	r3, #4
 8016c66:	2206      	movs	r2, #6
 8016c68:	6879      	ldr	r1, [r7, #4]
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f002 f995 	bl	8018f9a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016c70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c74:	4920      	ldr	r1, [pc, #128]	; (8016cf8 <etharp_update_arp_entry+0x148>)
 8016c76:	4613      	mov	r3, r2
 8016c78:	005b      	lsls	r3, r3, #1
 8016c7a:	4413      	add	r3, r2
 8016c7c:	00db      	lsls	r3, r3, #3
 8016c7e:	440b      	add	r3, r1
 8016c80:	3312      	adds	r3, #18
 8016c82:	2200      	movs	r2, #0
 8016c84:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016c86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c8a:	491b      	ldr	r1, [pc, #108]	; (8016cf8 <etharp_update_arp_entry+0x148>)
 8016c8c:	4613      	mov	r3, r2
 8016c8e:	005b      	lsls	r3, r3, #1
 8016c90:	4413      	add	r3, r2
 8016c92:	00db      	lsls	r3, r3, #3
 8016c94:	440b      	add	r3, r1
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d021      	beq.n	8016ce0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016c9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ca0:	4915      	ldr	r1, [pc, #84]	; (8016cf8 <etharp_update_arp_entry+0x148>)
 8016ca2:	4613      	mov	r3, r2
 8016ca4:	005b      	lsls	r3, r3, #1
 8016ca6:	4413      	add	r3, r2
 8016ca8:	00db      	lsls	r3, r3, #3
 8016caa:	440b      	add	r3, r1
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016cb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cb4:	4910      	ldr	r1, [pc, #64]	; (8016cf8 <etharp_update_arp_entry+0x148>)
 8016cb6:	4613      	mov	r3, r2
 8016cb8:	005b      	lsls	r3, r3, #1
 8016cba:	4413      	add	r3, r2
 8016cbc:	00db      	lsls	r3, r3, #3
 8016cbe:	440b      	add	r3, r1
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016cca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016cce:	9300      	str	r3, [sp, #0]
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6939      	ldr	r1, [r7, #16]
 8016cd4:	68f8      	ldr	r0, [r7, #12]
 8016cd6:	f001 ffad 	bl	8018c34 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016cda:	6938      	ldr	r0, [r7, #16]
 8016cdc:	f7f7 fc8a 	bl	800e5f4 <pbuf_free>
  }
  return ERR_OK;
 8016ce0:	2300      	movs	r3, #0
}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	3718      	adds	r7, #24
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	bd80      	pop	{r7, pc}
 8016cea:	bf00      	nop
 8016cec:	0801fad8 	.word	0x0801fad8
 8016cf0:	0801fbd0 	.word	0x0801fbd0
 8016cf4:	0801fb50 	.word	0x0801fb50
 8016cf8:	20004760 	.word	0x20004760

08016cfc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d04:	2300      	movs	r3, #0
 8016d06:	60fb      	str	r3, [r7, #12]
 8016d08:	e01e      	b.n	8016d48 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016d0a:	4913      	ldr	r1, [pc, #76]	; (8016d58 <etharp_cleanup_netif+0x5c>)
 8016d0c:	68fa      	ldr	r2, [r7, #12]
 8016d0e:	4613      	mov	r3, r2
 8016d10:	005b      	lsls	r3, r3, #1
 8016d12:	4413      	add	r3, r2
 8016d14:	00db      	lsls	r3, r3, #3
 8016d16:	440b      	add	r3, r1
 8016d18:	3314      	adds	r3, #20
 8016d1a:	781b      	ldrb	r3, [r3, #0]
 8016d1c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016d1e:	7afb      	ldrb	r3, [r7, #11]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d00e      	beq.n	8016d42 <etharp_cleanup_netif+0x46>
 8016d24:	490c      	ldr	r1, [pc, #48]	; (8016d58 <etharp_cleanup_netif+0x5c>)
 8016d26:	68fa      	ldr	r2, [r7, #12]
 8016d28:	4613      	mov	r3, r2
 8016d2a:	005b      	lsls	r3, r3, #1
 8016d2c:	4413      	add	r3, r2
 8016d2e:	00db      	lsls	r3, r3, #3
 8016d30:	440b      	add	r3, r1
 8016d32:	3308      	adds	r3, #8
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	687a      	ldr	r2, [r7, #4]
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	d102      	bne.n	8016d42 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016d3c:	68f8      	ldr	r0, [r7, #12]
 8016d3e:	f7ff fce5 	bl	801670c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	3301      	adds	r3, #1
 8016d46:	60fb      	str	r3, [r7, #12]
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	2b09      	cmp	r3, #9
 8016d4c:	dddd      	ble.n	8016d0a <etharp_cleanup_netif+0xe>
    }
  }
}
 8016d4e:	bf00      	nop
 8016d50:	3710      	adds	r7, #16
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
 8016d56:	bf00      	nop
 8016d58:	20004760 	.word	0x20004760

08016d5c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016d5c:	b5b0      	push	{r4, r5, r7, lr}
 8016d5e:	b08a      	sub	sp, #40	; 0x28
 8016d60:	af04      	add	r7, sp, #16
 8016d62:	6078      	str	r0, [r7, #4]
 8016d64:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016d66:	683b      	ldr	r3, [r7, #0]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d107      	bne.n	8016d7c <etharp_input+0x20>
 8016d6c:	4b3f      	ldr	r3, [pc, #252]	; (8016e6c <etharp_input+0x110>)
 8016d6e:	f240 228a 	movw	r2, #650	; 0x28a
 8016d72:	493f      	ldr	r1, [pc, #252]	; (8016e70 <etharp_input+0x114>)
 8016d74:	483f      	ldr	r0, [pc, #252]	; (8016e74 <etharp_input+0x118>)
 8016d76:	f002 fe41 	bl	80199fc <iprintf>
 8016d7a:	e074      	b.n	8016e66 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	685b      	ldr	r3, [r3, #4]
 8016d80:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016d82:	693b      	ldr	r3, [r7, #16]
 8016d84:	881b      	ldrh	r3, [r3, #0]
 8016d86:	b29b      	uxth	r3, r3
 8016d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d8c:	d10c      	bne.n	8016da8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016d8e:	693b      	ldr	r3, [r7, #16]
 8016d90:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016d92:	2b06      	cmp	r3, #6
 8016d94:	d108      	bne.n	8016da8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016d96:	693b      	ldr	r3, [r7, #16]
 8016d98:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016d9a:	2b04      	cmp	r3, #4
 8016d9c:	d104      	bne.n	8016da8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016d9e:	693b      	ldr	r3, [r7, #16]
 8016da0:	885b      	ldrh	r3, [r3, #2]
 8016da2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016da4:	2b08      	cmp	r3, #8
 8016da6:	d003      	beq.n	8016db0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016da8:	6878      	ldr	r0, [r7, #4]
 8016daa:	f7f7 fc23 	bl	800e5f4 <pbuf_free>
    return;
 8016dae:	e05a      	b.n	8016e66 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016db0:	693b      	ldr	r3, [r7, #16]
 8016db2:	330e      	adds	r3, #14
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016db8:	693b      	ldr	r3, [r7, #16]
 8016dba:	3318      	adds	r3, #24
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016dc0:	683b      	ldr	r3, [r7, #0]
 8016dc2:	3304      	adds	r3, #4
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d102      	bne.n	8016dd0 <etharp_input+0x74>
    for_us = 0;
 8016dca:	2300      	movs	r3, #0
 8016dcc:	75fb      	strb	r3, [r7, #23]
 8016dce:	e009      	b.n	8016de4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016dd0:	68ba      	ldr	r2, [r7, #8]
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	3304      	adds	r3, #4
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	429a      	cmp	r2, r3
 8016dda:	bf0c      	ite	eq
 8016ddc:	2301      	moveq	r3, #1
 8016dde:	2300      	movne	r3, #0
 8016de0:	b2db      	uxtb	r3, r3
 8016de2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016de4:	693b      	ldr	r3, [r7, #16]
 8016de6:	f103 0208 	add.w	r2, r3, #8
 8016dea:	7dfb      	ldrb	r3, [r7, #23]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d001      	beq.n	8016df4 <etharp_input+0x98>
 8016df0:	2301      	movs	r3, #1
 8016df2:	e000      	b.n	8016df6 <etharp_input+0x9a>
 8016df4:	2302      	movs	r3, #2
 8016df6:	f107 010c 	add.w	r1, r7, #12
 8016dfa:	6838      	ldr	r0, [r7, #0]
 8016dfc:	f7ff fed8 	bl	8016bb0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	88db      	ldrh	r3, [r3, #6]
 8016e04:	b29b      	uxth	r3, r3
 8016e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e0a:	d003      	beq.n	8016e14 <etharp_input+0xb8>
 8016e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e10:	d01e      	beq.n	8016e50 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016e12:	e025      	b.n	8016e60 <etharp_input+0x104>
      if (for_us) {
 8016e14:	7dfb      	ldrb	r3, [r7, #23]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d021      	beq.n	8016e5e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016e1a:	683b      	ldr	r3, [r7, #0]
 8016e1c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016e20:	693b      	ldr	r3, [r7, #16]
 8016e22:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016e2c:	683b      	ldr	r3, [r7, #0]
 8016e2e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016e30:	693a      	ldr	r2, [r7, #16]
 8016e32:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016e34:	2102      	movs	r1, #2
 8016e36:	9103      	str	r1, [sp, #12]
 8016e38:	f107 010c 	add.w	r1, r7, #12
 8016e3c:	9102      	str	r1, [sp, #8]
 8016e3e:	9201      	str	r2, [sp, #4]
 8016e40:	9300      	str	r3, [sp, #0]
 8016e42:	462b      	mov	r3, r5
 8016e44:	4622      	mov	r2, r4
 8016e46:	4601      	mov	r1, r0
 8016e48:	6838      	ldr	r0, [r7, #0]
 8016e4a:	f000 faef 	bl	801742c <etharp_raw>
      break;
 8016e4e:	e006      	b.n	8016e5e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016e50:	f107 030c 	add.w	r3, r7, #12
 8016e54:	4619      	mov	r1, r3
 8016e56:	6838      	ldr	r0, [r7, #0]
 8016e58:	f7fe f9fe 	bl	8015258 <dhcp_arp_reply>
      break;
 8016e5c:	e000      	b.n	8016e60 <etharp_input+0x104>
      break;
 8016e5e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f7f7 fbc7 	bl	800e5f4 <pbuf_free>
}
 8016e66:	3718      	adds	r7, #24
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8016e6c:	0801fad8 	.word	0x0801fad8
 8016e70:	0801fc28 	.word	0x0801fc28
 8016e74:	0801fb50 	.word	0x0801fb50

08016e78 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b086      	sub	sp, #24
 8016e7c:	af02      	add	r7, sp, #8
 8016e7e:	60f8      	str	r0, [r7, #12]
 8016e80:	60b9      	str	r1, [r7, #8]
 8016e82:	4613      	mov	r3, r2
 8016e84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016e86:	79fa      	ldrb	r2, [r7, #7]
 8016e88:	4944      	ldr	r1, [pc, #272]	; (8016f9c <etharp_output_to_arp_index+0x124>)
 8016e8a:	4613      	mov	r3, r2
 8016e8c:	005b      	lsls	r3, r3, #1
 8016e8e:	4413      	add	r3, r2
 8016e90:	00db      	lsls	r3, r3, #3
 8016e92:	440b      	add	r3, r1
 8016e94:	3314      	adds	r3, #20
 8016e96:	781b      	ldrb	r3, [r3, #0]
 8016e98:	2b01      	cmp	r3, #1
 8016e9a:	d806      	bhi.n	8016eaa <etharp_output_to_arp_index+0x32>
 8016e9c:	4b40      	ldr	r3, [pc, #256]	; (8016fa0 <etharp_output_to_arp_index+0x128>)
 8016e9e:	f240 22ef 	movw	r2, #751	; 0x2ef
 8016ea2:	4940      	ldr	r1, [pc, #256]	; (8016fa4 <etharp_output_to_arp_index+0x12c>)
 8016ea4:	4840      	ldr	r0, [pc, #256]	; (8016fa8 <etharp_output_to_arp_index+0x130>)
 8016ea6:	f002 fda9 	bl	80199fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016eaa:	79fa      	ldrb	r2, [r7, #7]
 8016eac:	493b      	ldr	r1, [pc, #236]	; (8016f9c <etharp_output_to_arp_index+0x124>)
 8016eae:	4613      	mov	r3, r2
 8016eb0:	005b      	lsls	r3, r3, #1
 8016eb2:	4413      	add	r3, r2
 8016eb4:	00db      	lsls	r3, r3, #3
 8016eb6:	440b      	add	r3, r1
 8016eb8:	3314      	adds	r3, #20
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	2b02      	cmp	r3, #2
 8016ebe:	d153      	bne.n	8016f68 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016ec0:	79fa      	ldrb	r2, [r7, #7]
 8016ec2:	4936      	ldr	r1, [pc, #216]	; (8016f9c <etharp_output_to_arp_index+0x124>)
 8016ec4:	4613      	mov	r3, r2
 8016ec6:	005b      	lsls	r3, r3, #1
 8016ec8:	4413      	add	r3, r2
 8016eca:	00db      	lsls	r3, r3, #3
 8016ecc:	440b      	add	r3, r1
 8016ece:	3312      	adds	r3, #18
 8016ed0:	881b      	ldrh	r3, [r3, #0]
 8016ed2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016ed6:	d919      	bls.n	8016f0c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016ed8:	79fa      	ldrb	r2, [r7, #7]
 8016eda:	4613      	mov	r3, r2
 8016edc:	005b      	lsls	r3, r3, #1
 8016ede:	4413      	add	r3, r2
 8016ee0:	00db      	lsls	r3, r3, #3
 8016ee2:	4a2e      	ldr	r2, [pc, #184]	; (8016f9c <etharp_output_to_arp_index+0x124>)
 8016ee4:	4413      	add	r3, r2
 8016ee6:	3304      	adds	r3, #4
 8016ee8:	4619      	mov	r1, r3
 8016eea:	68f8      	ldr	r0, [r7, #12]
 8016eec:	f000 fb4c 	bl	8017588 <etharp_request>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d138      	bne.n	8016f68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016ef6:	79fa      	ldrb	r2, [r7, #7]
 8016ef8:	4928      	ldr	r1, [pc, #160]	; (8016f9c <etharp_output_to_arp_index+0x124>)
 8016efa:	4613      	mov	r3, r2
 8016efc:	005b      	lsls	r3, r3, #1
 8016efe:	4413      	add	r3, r2
 8016f00:	00db      	lsls	r3, r3, #3
 8016f02:	440b      	add	r3, r1
 8016f04:	3314      	adds	r3, #20
 8016f06:	2203      	movs	r2, #3
 8016f08:	701a      	strb	r2, [r3, #0]
 8016f0a:	e02d      	b.n	8016f68 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016f0c:	79fa      	ldrb	r2, [r7, #7]
 8016f0e:	4923      	ldr	r1, [pc, #140]	; (8016f9c <etharp_output_to_arp_index+0x124>)
 8016f10:	4613      	mov	r3, r2
 8016f12:	005b      	lsls	r3, r3, #1
 8016f14:	4413      	add	r3, r2
 8016f16:	00db      	lsls	r3, r3, #3
 8016f18:	440b      	add	r3, r1
 8016f1a:	3312      	adds	r3, #18
 8016f1c:	881b      	ldrh	r3, [r3, #0]
 8016f1e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016f22:	d321      	bcc.n	8016f68 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016f24:	79fa      	ldrb	r2, [r7, #7]
 8016f26:	4613      	mov	r3, r2
 8016f28:	005b      	lsls	r3, r3, #1
 8016f2a:	4413      	add	r3, r2
 8016f2c:	00db      	lsls	r3, r3, #3
 8016f2e:	4a1b      	ldr	r2, [pc, #108]	; (8016f9c <etharp_output_to_arp_index+0x124>)
 8016f30:	4413      	add	r3, r2
 8016f32:	1d19      	adds	r1, r3, #4
 8016f34:	79fa      	ldrb	r2, [r7, #7]
 8016f36:	4613      	mov	r3, r2
 8016f38:	005b      	lsls	r3, r3, #1
 8016f3a:	4413      	add	r3, r2
 8016f3c:	00db      	lsls	r3, r3, #3
 8016f3e:	3308      	adds	r3, #8
 8016f40:	4a16      	ldr	r2, [pc, #88]	; (8016f9c <etharp_output_to_arp_index+0x124>)
 8016f42:	4413      	add	r3, r2
 8016f44:	3304      	adds	r3, #4
 8016f46:	461a      	mov	r2, r3
 8016f48:	68f8      	ldr	r0, [r7, #12]
 8016f4a:	f000 fafb 	bl	8017544 <etharp_request_dst>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d109      	bne.n	8016f68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016f54:	79fa      	ldrb	r2, [r7, #7]
 8016f56:	4911      	ldr	r1, [pc, #68]	; (8016f9c <etharp_output_to_arp_index+0x124>)
 8016f58:	4613      	mov	r3, r2
 8016f5a:	005b      	lsls	r3, r3, #1
 8016f5c:	4413      	add	r3, r2
 8016f5e:	00db      	lsls	r3, r3, #3
 8016f60:	440b      	add	r3, r1
 8016f62:	3314      	adds	r3, #20
 8016f64:	2203      	movs	r2, #3
 8016f66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016f6e:	79fa      	ldrb	r2, [r7, #7]
 8016f70:	4613      	mov	r3, r2
 8016f72:	005b      	lsls	r3, r3, #1
 8016f74:	4413      	add	r3, r2
 8016f76:	00db      	lsls	r3, r3, #3
 8016f78:	3308      	adds	r3, #8
 8016f7a:	4a08      	ldr	r2, [pc, #32]	; (8016f9c <etharp_output_to_arp_index+0x124>)
 8016f7c:	4413      	add	r3, r2
 8016f7e:	1d1a      	adds	r2, r3, #4
 8016f80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016f84:	9300      	str	r3, [sp, #0]
 8016f86:	4613      	mov	r3, r2
 8016f88:	460a      	mov	r2, r1
 8016f8a:	68b9      	ldr	r1, [r7, #8]
 8016f8c:	68f8      	ldr	r0, [r7, #12]
 8016f8e:	f001 fe51 	bl	8018c34 <ethernet_output>
 8016f92:	4603      	mov	r3, r0
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3710      	adds	r7, #16
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}
 8016f9c:	20004760 	.word	0x20004760
 8016fa0:	0801fad8 	.word	0x0801fad8
 8016fa4:	0801fc48 	.word	0x0801fc48
 8016fa8:	0801fb50 	.word	0x0801fb50

08016fac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b08a      	sub	sp, #40	; 0x28
 8016fb0:	af02      	add	r7, sp, #8
 8016fb2:	60f8      	str	r0, [r7, #12]
 8016fb4:	60b9      	str	r1, [r7, #8]
 8016fb6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d106      	bne.n	8016fd0 <etharp_output+0x24>
 8016fc2:	4b73      	ldr	r3, [pc, #460]	; (8017190 <etharp_output+0x1e4>)
 8016fc4:	f240 321e 	movw	r2, #798	; 0x31e
 8016fc8:	4972      	ldr	r1, [pc, #456]	; (8017194 <etharp_output+0x1e8>)
 8016fca:	4873      	ldr	r0, [pc, #460]	; (8017198 <etharp_output+0x1ec>)
 8016fcc:	f002 fd16 	bl	80199fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d106      	bne.n	8016fe4 <etharp_output+0x38>
 8016fd6:	4b6e      	ldr	r3, [pc, #440]	; (8017190 <etharp_output+0x1e4>)
 8016fd8:	f240 321f 	movw	r2, #799	; 0x31f
 8016fdc:	496f      	ldr	r1, [pc, #444]	; (801719c <etharp_output+0x1f0>)
 8016fde:	486e      	ldr	r0, [pc, #440]	; (8017198 <etharp_output+0x1ec>)
 8016fe0:	f002 fd0c 	bl	80199fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d106      	bne.n	8016ff8 <etharp_output+0x4c>
 8016fea:	4b69      	ldr	r3, [pc, #420]	; (8017190 <etharp_output+0x1e4>)
 8016fec:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016ff0:	496b      	ldr	r1, [pc, #428]	; (80171a0 <etharp_output+0x1f4>)
 8016ff2:	4869      	ldr	r0, [pc, #420]	; (8017198 <etharp_output+0x1ec>)
 8016ff4:	f002 fd02 	bl	80199fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	68f9      	ldr	r1, [r7, #12]
 8016ffe:	4618      	mov	r0, r3
 8017000:	f000 ff14 	bl	8017e2c <ip4_addr_isbroadcast_u32>
 8017004:	4603      	mov	r3, r0
 8017006:	2b00      	cmp	r3, #0
 8017008:	d002      	beq.n	8017010 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801700a:	4b66      	ldr	r3, [pc, #408]	; (80171a4 <etharp_output+0x1f8>)
 801700c:	61fb      	str	r3, [r7, #28]
 801700e:	e0af      	b.n	8017170 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017018:	2be0      	cmp	r3, #224	; 0xe0
 801701a:	d118      	bne.n	801704e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801701c:	2301      	movs	r3, #1
 801701e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017020:	2300      	movs	r3, #0
 8017022:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017024:	235e      	movs	r3, #94	; 0x5e
 8017026:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	3301      	adds	r3, #1
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017032:	b2db      	uxtb	r3, r3
 8017034:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	3302      	adds	r3, #2
 801703a:	781b      	ldrb	r3, [r3, #0]
 801703c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	3303      	adds	r3, #3
 8017042:	781b      	ldrb	r3, [r3, #0]
 8017044:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017046:	f107 0310 	add.w	r3, r7, #16
 801704a:	61fb      	str	r3, [r7, #28]
 801704c:	e090      	b.n	8017170 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	681a      	ldr	r2, [r3, #0]
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	3304      	adds	r3, #4
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	405a      	eors	r2, r3
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	3308      	adds	r3, #8
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	4013      	ands	r3, r2
 8017062:	2b00      	cmp	r3, #0
 8017064:	d012      	beq.n	801708c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801706c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017070:	4293      	cmp	r3, r2
 8017072:	d00b      	beq.n	801708c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	330c      	adds	r3, #12
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d003      	beq.n	8017086 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	330c      	adds	r3, #12
 8017082:	61bb      	str	r3, [r7, #24]
 8017084:	e002      	b.n	801708c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017086:	f06f 0303 	mvn.w	r3, #3
 801708a:	e07d      	b.n	8017188 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801708c:	4b46      	ldr	r3, [pc, #280]	; (80171a8 <etharp_output+0x1fc>)
 801708e:	781b      	ldrb	r3, [r3, #0]
 8017090:	4619      	mov	r1, r3
 8017092:	4a46      	ldr	r2, [pc, #280]	; (80171ac <etharp_output+0x200>)
 8017094:	460b      	mov	r3, r1
 8017096:	005b      	lsls	r3, r3, #1
 8017098:	440b      	add	r3, r1
 801709a:	00db      	lsls	r3, r3, #3
 801709c:	4413      	add	r3, r2
 801709e:	3314      	adds	r3, #20
 80170a0:	781b      	ldrb	r3, [r3, #0]
 80170a2:	2b01      	cmp	r3, #1
 80170a4:	d925      	bls.n	80170f2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80170a6:	4b40      	ldr	r3, [pc, #256]	; (80171a8 <etharp_output+0x1fc>)
 80170a8:	781b      	ldrb	r3, [r3, #0]
 80170aa:	4619      	mov	r1, r3
 80170ac:	4a3f      	ldr	r2, [pc, #252]	; (80171ac <etharp_output+0x200>)
 80170ae:	460b      	mov	r3, r1
 80170b0:	005b      	lsls	r3, r3, #1
 80170b2:	440b      	add	r3, r1
 80170b4:	00db      	lsls	r3, r3, #3
 80170b6:	4413      	add	r3, r2
 80170b8:	3308      	adds	r3, #8
 80170ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80170bc:	68fa      	ldr	r2, [r7, #12]
 80170be:	429a      	cmp	r2, r3
 80170c0:	d117      	bne.n	80170f2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80170c2:	69bb      	ldr	r3, [r7, #24]
 80170c4:	681a      	ldr	r2, [r3, #0]
 80170c6:	4b38      	ldr	r3, [pc, #224]	; (80171a8 <etharp_output+0x1fc>)
 80170c8:	781b      	ldrb	r3, [r3, #0]
 80170ca:	4618      	mov	r0, r3
 80170cc:	4937      	ldr	r1, [pc, #220]	; (80171ac <etharp_output+0x200>)
 80170ce:	4603      	mov	r3, r0
 80170d0:	005b      	lsls	r3, r3, #1
 80170d2:	4403      	add	r3, r0
 80170d4:	00db      	lsls	r3, r3, #3
 80170d6:	440b      	add	r3, r1
 80170d8:	3304      	adds	r3, #4
 80170da:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80170dc:	429a      	cmp	r2, r3
 80170de:	d108      	bne.n	80170f2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80170e0:	4b31      	ldr	r3, [pc, #196]	; (80171a8 <etharp_output+0x1fc>)
 80170e2:	781b      	ldrb	r3, [r3, #0]
 80170e4:	461a      	mov	r2, r3
 80170e6:	68b9      	ldr	r1, [r7, #8]
 80170e8:	68f8      	ldr	r0, [r7, #12]
 80170ea:	f7ff fec5 	bl	8016e78 <etharp_output_to_arp_index>
 80170ee:	4603      	mov	r3, r0
 80170f0:	e04a      	b.n	8017188 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80170f2:	2300      	movs	r3, #0
 80170f4:	75fb      	strb	r3, [r7, #23]
 80170f6:	e031      	b.n	801715c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80170f8:	7dfa      	ldrb	r2, [r7, #23]
 80170fa:	492c      	ldr	r1, [pc, #176]	; (80171ac <etharp_output+0x200>)
 80170fc:	4613      	mov	r3, r2
 80170fe:	005b      	lsls	r3, r3, #1
 8017100:	4413      	add	r3, r2
 8017102:	00db      	lsls	r3, r3, #3
 8017104:	440b      	add	r3, r1
 8017106:	3314      	adds	r3, #20
 8017108:	781b      	ldrb	r3, [r3, #0]
 801710a:	2b01      	cmp	r3, #1
 801710c:	d923      	bls.n	8017156 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801710e:	7dfa      	ldrb	r2, [r7, #23]
 8017110:	4926      	ldr	r1, [pc, #152]	; (80171ac <etharp_output+0x200>)
 8017112:	4613      	mov	r3, r2
 8017114:	005b      	lsls	r3, r3, #1
 8017116:	4413      	add	r3, r2
 8017118:	00db      	lsls	r3, r3, #3
 801711a:	440b      	add	r3, r1
 801711c:	3308      	adds	r3, #8
 801711e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017120:	68fa      	ldr	r2, [r7, #12]
 8017122:	429a      	cmp	r2, r3
 8017124:	d117      	bne.n	8017156 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017126:	69bb      	ldr	r3, [r7, #24]
 8017128:	6819      	ldr	r1, [r3, #0]
 801712a:	7dfa      	ldrb	r2, [r7, #23]
 801712c:	481f      	ldr	r0, [pc, #124]	; (80171ac <etharp_output+0x200>)
 801712e:	4613      	mov	r3, r2
 8017130:	005b      	lsls	r3, r3, #1
 8017132:	4413      	add	r3, r2
 8017134:	00db      	lsls	r3, r3, #3
 8017136:	4403      	add	r3, r0
 8017138:	3304      	adds	r3, #4
 801713a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801713c:	4299      	cmp	r1, r3
 801713e:	d10a      	bne.n	8017156 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017140:	4a19      	ldr	r2, [pc, #100]	; (80171a8 <etharp_output+0x1fc>)
 8017142:	7dfb      	ldrb	r3, [r7, #23]
 8017144:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017146:	7dfb      	ldrb	r3, [r7, #23]
 8017148:	461a      	mov	r2, r3
 801714a:	68b9      	ldr	r1, [r7, #8]
 801714c:	68f8      	ldr	r0, [r7, #12]
 801714e:	f7ff fe93 	bl	8016e78 <etharp_output_to_arp_index>
 8017152:	4603      	mov	r3, r0
 8017154:	e018      	b.n	8017188 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017156:	7dfb      	ldrb	r3, [r7, #23]
 8017158:	3301      	adds	r3, #1
 801715a:	75fb      	strb	r3, [r7, #23]
 801715c:	7dfb      	ldrb	r3, [r7, #23]
 801715e:	2b09      	cmp	r3, #9
 8017160:	d9ca      	bls.n	80170f8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017162:	68ba      	ldr	r2, [r7, #8]
 8017164:	69b9      	ldr	r1, [r7, #24]
 8017166:	68f8      	ldr	r0, [r7, #12]
 8017168:	f000 f822 	bl	80171b0 <etharp_query>
 801716c:	4603      	mov	r3, r0
 801716e:	e00b      	b.n	8017188 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017176:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801717a:	9300      	str	r3, [sp, #0]
 801717c:	69fb      	ldr	r3, [r7, #28]
 801717e:	68b9      	ldr	r1, [r7, #8]
 8017180:	68f8      	ldr	r0, [r7, #12]
 8017182:	f001 fd57 	bl	8018c34 <ethernet_output>
 8017186:	4603      	mov	r3, r0
}
 8017188:	4618      	mov	r0, r3
 801718a:	3720      	adds	r7, #32
 801718c:	46bd      	mov	sp, r7
 801718e:	bd80      	pop	{r7, pc}
 8017190:	0801fad8 	.word	0x0801fad8
 8017194:	0801fc28 	.word	0x0801fc28
 8017198:	0801fb50 	.word	0x0801fb50
 801719c:	0801fc78 	.word	0x0801fc78
 80171a0:	0801fc18 	.word	0x0801fc18
 80171a4:	08021038 	.word	0x08021038
 80171a8:	20004850 	.word	0x20004850
 80171ac:	20004760 	.word	0x20004760

080171b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b08c      	sub	sp, #48	; 0x30
 80171b4:	af02      	add	r7, sp, #8
 80171b6:	60f8      	str	r0, [r7, #12]
 80171b8:	60b9      	str	r1, [r7, #8]
 80171ba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	3326      	adds	r3, #38	; 0x26
 80171c0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80171c2:	23ff      	movs	r3, #255	; 0xff
 80171c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80171c8:	2300      	movs	r3, #0
 80171ca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80171cc:	68bb      	ldr	r3, [r7, #8]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	68f9      	ldr	r1, [r7, #12]
 80171d2:	4618      	mov	r0, r3
 80171d4:	f000 fe2a 	bl	8017e2c <ip4_addr_isbroadcast_u32>
 80171d8:	4603      	mov	r3, r0
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d10c      	bne.n	80171f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80171de:	68bb      	ldr	r3, [r7, #8]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80171e6:	2be0      	cmp	r3, #224	; 0xe0
 80171e8:	d006      	beq.n	80171f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80171ea:	68bb      	ldr	r3, [r7, #8]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d003      	beq.n	80171f8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d102      	bne.n	80171fe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80171f8:	f06f 030f 	mvn.w	r3, #15
 80171fc:	e102      	b.n	8017404 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80171fe:	68fa      	ldr	r2, [r7, #12]
 8017200:	2101      	movs	r1, #1
 8017202:	68b8      	ldr	r0, [r7, #8]
 8017204:	f7ff fb5c 	bl	80168c0 <etharp_find_entry>
 8017208:	4603      	mov	r3, r0
 801720a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801720c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017210:	2b00      	cmp	r3, #0
 8017212:	da02      	bge.n	801721a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017214:	8a7b      	ldrh	r3, [r7, #18]
 8017216:	b25b      	sxtb	r3, r3
 8017218:	e0f4      	b.n	8017404 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801721a:	8a7b      	ldrh	r3, [r7, #18]
 801721c:	2b7e      	cmp	r3, #126	; 0x7e
 801721e:	d906      	bls.n	801722e <etharp_query+0x7e>
 8017220:	4b7a      	ldr	r3, [pc, #488]	; (801740c <etharp_query+0x25c>)
 8017222:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017226:	497a      	ldr	r1, [pc, #488]	; (8017410 <etharp_query+0x260>)
 8017228:	487a      	ldr	r0, [pc, #488]	; (8017414 <etharp_query+0x264>)
 801722a:	f002 fbe7 	bl	80199fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801722e:	8a7b      	ldrh	r3, [r7, #18]
 8017230:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017232:	7c7a      	ldrb	r2, [r7, #17]
 8017234:	4978      	ldr	r1, [pc, #480]	; (8017418 <etharp_query+0x268>)
 8017236:	4613      	mov	r3, r2
 8017238:	005b      	lsls	r3, r3, #1
 801723a:	4413      	add	r3, r2
 801723c:	00db      	lsls	r3, r3, #3
 801723e:	440b      	add	r3, r1
 8017240:	3314      	adds	r3, #20
 8017242:	781b      	ldrb	r3, [r3, #0]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d115      	bne.n	8017274 <etharp_query+0xc4>
    is_new_entry = 1;
 8017248:	2301      	movs	r3, #1
 801724a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801724c:	7c7a      	ldrb	r2, [r7, #17]
 801724e:	4972      	ldr	r1, [pc, #456]	; (8017418 <etharp_query+0x268>)
 8017250:	4613      	mov	r3, r2
 8017252:	005b      	lsls	r3, r3, #1
 8017254:	4413      	add	r3, r2
 8017256:	00db      	lsls	r3, r3, #3
 8017258:	440b      	add	r3, r1
 801725a:	3314      	adds	r3, #20
 801725c:	2201      	movs	r2, #1
 801725e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017260:	7c7a      	ldrb	r2, [r7, #17]
 8017262:	496d      	ldr	r1, [pc, #436]	; (8017418 <etharp_query+0x268>)
 8017264:	4613      	mov	r3, r2
 8017266:	005b      	lsls	r3, r3, #1
 8017268:	4413      	add	r3, r2
 801726a:	00db      	lsls	r3, r3, #3
 801726c:	440b      	add	r3, r1
 801726e:	3308      	adds	r3, #8
 8017270:	68fa      	ldr	r2, [r7, #12]
 8017272:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017274:	7c7a      	ldrb	r2, [r7, #17]
 8017276:	4968      	ldr	r1, [pc, #416]	; (8017418 <etharp_query+0x268>)
 8017278:	4613      	mov	r3, r2
 801727a:	005b      	lsls	r3, r3, #1
 801727c:	4413      	add	r3, r2
 801727e:	00db      	lsls	r3, r3, #3
 8017280:	440b      	add	r3, r1
 8017282:	3314      	adds	r3, #20
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	2b01      	cmp	r3, #1
 8017288:	d011      	beq.n	80172ae <etharp_query+0xfe>
 801728a:	7c7a      	ldrb	r2, [r7, #17]
 801728c:	4962      	ldr	r1, [pc, #392]	; (8017418 <etharp_query+0x268>)
 801728e:	4613      	mov	r3, r2
 8017290:	005b      	lsls	r3, r3, #1
 8017292:	4413      	add	r3, r2
 8017294:	00db      	lsls	r3, r3, #3
 8017296:	440b      	add	r3, r1
 8017298:	3314      	adds	r3, #20
 801729a:	781b      	ldrb	r3, [r3, #0]
 801729c:	2b01      	cmp	r3, #1
 801729e:	d806      	bhi.n	80172ae <etharp_query+0xfe>
 80172a0:	4b5a      	ldr	r3, [pc, #360]	; (801740c <etharp_query+0x25c>)
 80172a2:	f240 32cf 	movw	r2, #975	; 0x3cf
 80172a6:	495d      	ldr	r1, [pc, #372]	; (801741c <etharp_query+0x26c>)
 80172a8:	485a      	ldr	r0, [pc, #360]	; (8017414 <etharp_query+0x264>)
 80172aa:	f002 fba7 	bl	80199fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80172ae:	6a3b      	ldr	r3, [r7, #32]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d102      	bne.n	80172ba <etharp_query+0x10a>
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d10c      	bne.n	80172d4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80172ba:	68b9      	ldr	r1, [r7, #8]
 80172bc:	68f8      	ldr	r0, [r7, #12]
 80172be:	f000 f963 	bl	8017588 <etharp_request>
 80172c2:	4603      	mov	r3, r0
 80172c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d102      	bne.n	80172d4 <etharp_query+0x124>
      return result;
 80172ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80172d2:	e097      	b.n	8017404 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d106      	bne.n	80172e8 <etharp_query+0x138>
 80172da:	4b4c      	ldr	r3, [pc, #304]	; (801740c <etharp_query+0x25c>)
 80172dc:	f240 32e1 	movw	r2, #993	; 0x3e1
 80172e0:	494f      	ldr	r1, [pc, #316]	; (8017420 <etharp_query+0x270>)
 80172e2:	484c      	ldr	r0, [pc, #304]	; (8017414 <etharp_query+0x264>)
 80172e4:	f002 fb8a 	bl	80199fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80172e8:	7c7a      	ldrb	r2, [r7, #17]
 80172ea:	494b      	ldr	r1, [pc, #300]	; (8017418 <etharp_query+0x268>)
 80172ec:	4613      	mov	r3, r2
 80172ee:	005b      	lsls	r3, r3, #1
 80172f0:	4413      	add	r3, r2
 80172f2:	00db      	lsls	r3, r3, #3
 80172f4:	440b      	add	r3, r1
 80172f6:	3314      	adds	r3, #20
 80172f8:	781b      	ldrb	r3, [r3, #0]
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d918      	bls.n	8017330 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80172fe:	4a49      	ldr	r2, [pc, #292]	; (8017424 <etharp_query+0x274>)
 8017300:	7c7b      	ldrb	r3, [r7, #17]
 8017302:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017304:	7c7a      	ldrb	r2, [r7, #17]
 8017306:	4613      	mov	r3, r2
 8017308:	005b      	lsls	r3, r3, #1
 801730a:	4413      	add	r3, r2
 801730c:	00db      	lsls	r3, r3, #3
 801730e:	3308      	adds	r3, #8
 8017310:	4a41      	ldr	r2, [pc, #260]	; (8017418 <etharp_query+0x268>)
 8017312:	4413      	add	r3, r2
 8017314:	1d1a      	adds	r2, r3, #4
 8017316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801731a:	9300      	str	r3, [sp, #0]
 801731c:	4613      	mov	r3, r2
 801731e:	697a      	ldr	r2, [r7, #20]
 8017320:	6879      	ldr	r1, [r7, #4]
 8017322:	68f8      	ldr	r0, [r7, #12]
 8017324:	f001 fc86 	bl	8018c34 <ethernet_output>
 8017328:	4603      	mov	r3, r0
 801732a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801732e:	e067      	b.n	8017400 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017330:	7c7a      	ldrb	r2, [r7, #17]
 8017332:	4939      	ldr	r1, [pc, #228]	; (8017418 <etharp_query+0x268>)
 8017334:	4613      	mov	r3, r2
 8017336:	005b      	lsls	r3, r3, #1
 8017338:	4413      	add	r3, r2
 801733a:	00db      	lsls	r3, r3, #3
 801733c:	440b      	add	r3, r1
 801733e:	3314      	adds	r3, #20
 8017340:	781b      	ldrb	r3, [r3, #0]
 8017342:	2b01      	cmp	r3, #1
 8017344:	d15c      	bne.n	8017400 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017346:	2300      	movs	r3, #0
 8017348:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801734e:	e01c      	b.n	801738a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017350:	69fb      	ldr	r3, [r7, #28]
 8017352:	895a      	ldrh	r2, [r3, #10]
 8017354:	69fb      	ldr	r3, [r7, #28]
 8017356:	891b      	ldrh	r3, [r3, #8]
 8017358:	429a      	cmp	r2, r3
 801735a:	d10a      	bne.n	8017372 <etharp_query+0x1c2>
 801735c:	69fb      	ldr	r3, [r7, #28]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d006      	beq.n	8017372 <etharp_query+0x1c2>
 8017364:	4b29      	ldr	r3, [pc, #164]	; (801740c <etharp_query+0x25c>)
 8017366:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801736a:	492f      	ldr	r1, [pc, #188]	; (8017428 <etharp_query+0x278>)
 801736c:	4829      	ldr	r0, [pc, #164]	; (8017414 <etharp_query+0x264>)
 801736e:	f002 fb45 	bl	80199fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017372:	69fb      	ldr	r3, [r7, #28]
 8017374:	7b1b      	ldrb	r3, [r3, #12]
 8017376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801737a:	2b00      	cmp	r3, #0
 801737c:	d002      	beq.n	8017384 <etharp_query+0x1d4>
        copy_needed = 1;
 801737e:	2301      	movs	r3, #1
 8017380:	61bb      	str	r3, [r7, #24]
        break;
 8017382:	e005      	b.n	8017390 <etharp_query+0x1e0>
      }
      p = p->next;
 8017384:	69fb      	ldr	r3, [r7, #28]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	61fb      	str	r3, [r7, #28]
    while (p) {
 801738a:	69fb      	ldr	r3, [r7, #28]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d1df      	bne.n	8017350 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8017390:	69bb      	ldr	r3, [r7, #24]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d007      	beq.n	80173a6 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017396:	687a      	ldr	r2, [r7, #4]
 8017398:	f44f 7120 	mov.w	r1, #640	; 0x280
 801739c:	200e      	movs	r0, #14
 801739e:	f7f7 fba1 	bl	800eae4 <pbuf_clone>
 80173a2:	61f8      	str	r0, [r7, #28]
 80173a4:	e004      	b.n	80173b0 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80173aa:	69f8      	ldr	r0, [r7, #28]
 80173ac:	f7f7 f9c8 	bl	800e740 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80173b0:	69fb      	ldr	r3, [r7, #28]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d021      	beq.n	80173fa <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80173b6:	7c7a      	ldrb	r2, [r7, #17]
 80173b8:	4917      	ldr	r1, [pc, #92]	; (8017418 <etharp_query+0x268>)
 80173ba:	4613      	mov	r3, r2
 80173bc:	005b      	lsls	r3, r3, #1
 80173be:	4413      	add	r3, r2
 80173c0:	00db      	lsls	r3, r3, #3
 80173c2:	440b      	add	r3, r1
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d00a      	beq.n	80173e0 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80173ca:	7c7a      	ldrb	r2, [r7, #17]
 80173cc:	4912      	ldr	r1, [pc, #72]	; (8017418 <etharp_query+0x268>)
 80173ce:	4613      	mov	r3, r2
 80173d0:	005b      	lsls	r3, r3, #1
 80173d2:	4413      	add	r3, r2
 80173d4:	00db      	lsls	r3, r3, #3
 80173d6:	440b      	add	r3, r1
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	4618      	mov	r0, r3
 80173dc:	f7f7 f90a 	bl	800e5f4 <pbuf_free>
      }
      arp_table[i].q = p;
 80173e0:	7c7a      	ldrb	r2, [r7, #17]
 80173e2:	490d      	ldr	r1, [pc, #52]	; (8017418 <etharp_query+0x268>)
 80173e4:	4613      	mov	r3, r2
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	4413      	add	r3, r2
 80173ea:	00db      	lsls	r3, r3, #3
 80173ec:	440b      	add	r3, r1
 80173ee:	69fa      	ldr	r2, [r7, #28]
 80173f0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80173f2:	2300      	movs	r3, #0
 80173f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80173f8:	e002      	b.n	8017400 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80173fa:	23ff      	movs	r3, #255	; 0xff
 80173fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017400:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017404:	4618      	mov	r0, r3
 8017406:	3728      	adds	r7, #40	; 0x28
 8017408:	46bd      	mov	sp, r7
 801740a:	bd80      	pop	{r7, pc}
 801740c:	0801fad8 	.word	0x0801fad8
 8017410:	0801fc84 	.word	0x0801fc84
 8017414:	0801fb50 	.word	0x0801fb50
 8017418:	20004760 	.word	0x20004760
 801741c:	0801fc94 	.word	0x0801fc94
 8017420:	0801fc78 	.word	0x0801fc78
 8017424:	20004850 	.word	0x20004850
 8017428:	0801fcbc 	.word	0x0801fcbc

0801742c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b08a      	sub	sp, #40	; 0x28
 8017430:	af02      	add	r7, sp, #8
 8017432:	60f8      	str	r0, [r7, #12]
 8017434:	60b9      	str	r1, [r7, #8]
 8017436:	607a      	str	r2, [r7, #4]
 8017438:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801743a:	2300      	movs	r3, #0
 801743c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d106      	bne.n	8017452 <etharp_raw+0x26>
 8017444:	4b3a      	ldr	r3, [pc, #232]	; (8017530 <etharp_raw+0x104>)
 8017446:	f240 4257 	movw	r2, #1111	; 0x457
 801744a:	493a      	ldr	r1, [pc, #232]	; (8017534 <etharp_raw+0x108>)
 801744c:	483a      	ldr	r0, [pc, #232]	; (8017538 <etharp_raw+0x10c>)
 801744e:	f002 fad5 	bl	80199fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017452:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017456:	211c      	movs	r1, #28
 8017458:	200e      	movs	r0, #14
 801745a:	f7f6 fdeb 	bl	800e034 <pbuf_alloc>
 801745e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017460:	69bb      	ldr	r3, [r7, #24]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d102      	bne.n	801746c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017466:	f04f 33ff 	mov.w	r3, #4294967295
 801746a:	e05d      	b.n	8017528 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801746c:	69bb      	ldr	r3, [r7, #24]
 801746e:	895b      	ldrh	r3, [r3, #10]
 8017470:	2b1b      	cmp	r3, #27
 8017472:	d806      	bhi.n	8017482 <etharp_raw+0x56>
 8017474:	4b2e      	ldr	r3, [pc, #184]	; (8017530 <etharp_raw+0x104>)
 8017476:	f240 4263 	movw	r2, #1123	; 0x463
 801747a:	4930      	ldr	r1, [pc, #192]	; (801753c <etharp_raw+0x110>)
 801747c:	482e      	ldr	r0, [pc, #184]	; (8017538 <etharp_raw+0x10c>)
 801747e:	f002 fabd 	bl	80199fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017482:	69bb      	ldr	r3, [r7, #24]
 8017484:	685b      	ldr	r3, [r3, #4]
 8017486:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017488:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801748a:	4618      	mov	r0, r3
 801748c:	f7f5 fd7c 	bl	800cf88 <lwip_htons>
 8017490:	4603      	mov	r3, r0
 8017492:	461a      	mov	r2, r3
 8017494:	697b      	ldr	r3, [r7, #20]
 8017496:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801749e:	2b06      	cmp	r3, #6
 80174a0:	d006      	beq.n	80174b0 <etharp_raw+0x84>
 80174a2:	4b23      	ldr	r3, [pc, #140]	; (8017530 <etharp_raw+0x104>)
 80174a4:	f240 426a 	movw	r2, #1130	; 0x46a
 80174a8:	4925      	ldr	r1, [pc, #148]	; (8017540 <etharp_raw+0x114>)
 80174aa:	4823      	ldr	r0, [pc, #140]	; (8017538 <etharp_raw+0x10c>)
 80174ac:	f002 faa6 	bl	80199fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80174b0:	697b      	ldr	r3, [r7, #20]
 80174b2:	3308      	adds	r3, #8
 80174b4:	2206      	movs	r2, #6
 80174b6:	6839      	ldr	r1, [r7, #0]
 80174b8:	4618      	mov	r0, r3
 80174ba:	f001 fd6e 	bl	8018f9a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	3312      	adds	r3, #18
 80174c2:	2206      	movs	r2, #6
 80174c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80174c6:	4618      	mov	r0, r3
 80174c8:	f001 fd67 	bl	8018f9a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80174cc:	697b      	ldr	r3, [r7, #20]
 80174ce:	330e      	adds	r3, #14
 80174d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80174d2:	6812      	ldr	r2, [r2, #0]
 80174d4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80174d6:	697b      	ldr	r3, [r7, #20]
 80174d8:	3318      	adds	r3, #24
 80174da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174dc:	6812      	ldr	r2, [r2, #0]
 80174de:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80174e0:	697b      	ldr	r3, [r7, #20]
 80174e2:	2200      	movs	r2, #0
 80174e4:	701a      	strb	r2, [r3, #0]
 80174e6:	2200      	movs	r2, #0
 80174e8:	f042 0201 	orr.w	r2, r2, #1
 80174ec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	2200      	movs	r2, #0
 80174f2:	f042 0208 	orr.w	r2, r2, #8
 80174f6:	709a      	strb	r2, [r3, #2]
 80174f8:	2200      	movs	r2, #0
 80174fa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80174fc:	697b      	ldr	r3, [r7, #20]
 80174fe:	2206      	movs	r2, #6
 8017500:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017502:	697b      	ldr	r3, [r7, #20]
 8017504:	2204      	movs	r2, #4
 8017506:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017508:	f640 0306 	movw	r3, #2054	; 0x806
 801750c:	9300      	str	r3, [sp, #0]
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	68ba      	ldr	r2, [r7, #8]
 8017512:	69b9      	ldr	r1, [r7, #24]
 8017514:	68f8      	ldr	r0, [r7, #12]
 8017516:	f001 fb8d 	bl	8018c34 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801751a:	69b8      	ldr	r0, [r7, #24]
 801751c:	f7f7 f86a 	bl	800e5f4 <pbuf_free>
  p = NULL;
 8017520:	2300      	movs	r3, #0
 8017522:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017524:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017528:	4618      	mov	r0, r3
 801752a:	3720      	adds	r7, #32
 801752c:	46bd      	mov	sp, r7
 801752e:	bd80      	pop	{r7, pc}
 8017530:	0801fad8 	.word	0x0801fad8
 8017534:	0801fc28 	.word	0x0801fc28
 8017538:	0801fb50 	.word	0x0801fb50
 801753c:	0801fcd8 	.word	0x0801fcd8
 8017540:	0801fd0c 	.word	0x0801fd0c

08017544 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b088      	sub	sp, #32
 8017548:	af04      	add	r7, sp, #16
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017560:	2201      	movs	r2, #1
 8017562:	9203      	str	r2, [sp, #12]
 8017564:	68ba      	ldr	r2, [r7, #8]
 8017566:	9202      	str	r2, [sp, #8]
 8017568:	4a06      	ldr	r2, [pc, #24]	; (8017584 <etharp_request_dst+0x40>)
 801756a:	9201      	str	r2, [sp, #4]
 801756c:	9300      	str	r3, [sp, #0]
 801756e:	4603      	mov	r3, r0
 8017570:	687a      	ldr	r2, [r7, #4]
 8017572:	68f8      	ldr	r0, [r7, #12]
 8017574:	f7ff ff5a 	bl	801742c <etharp_raw>
 8017578:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801757a:	4618      	mov	r0, r3
 801757c:	3710      	adds	r7, #16
 801757e:	46bd      	mov	sp, r7
 8017580:	bd80      	pop	{r7, pc}
 8017582:	bf00      	nop
 8017584:	08021040 	.word	0x08021040

08017588 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b082      	sub	sp, #8
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
 8017590:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017592:	4a05      	ldr	r2, [pc, #20]	; (80175a8 <etharp_request+0x20>)
 8017594:	6839      	ldr	r1, [r7, #0]
 8017596:	6878      	ldr	r0, [r7, #4]
 8017598:	f7ff ffd4 	bl	8017544 <etharp_request_dst>
 801759c:	4603      	mov	r3, r0
}
 801759e:	4618      	mov	r0, r3
 80175a0:	3708      	adds	r7, #8
 80175a2:	46bd      	mov	sp, r7
 80175a4:	bd80      	pop	{r7, pc}
 80175a6:	bf00      	nop
 80175a8:	08021038 	.word	0x08021038

080175ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b08e      	sub	sp, #56	; 0x38
 80175b0:	af04      	add	r7, sp, #16
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80175b6:	4b79      	ldr	r3, [pc, #484]	; (801779c <icmp_input+0x1f0>)
 80175b8:	689b      	ldr	r3, [r3, #8]
 80175ba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80175bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175be:	781b      	ldrb	r3, [r3, #0]
 80175c0:	f003 030f 	and.w	r3, r3, #15
 80175c4:	b2db      	uxtb	r3, r3
 80175c6:	009b      	lsls	r3, r3, #2
 80175c8:	b2db      	uxtb	r3, r3
 80175ca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80175cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80175ce:	2b13      	cmp	r3, #19
 80175d0:	f240 80cd 	bls.w	801776e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	895b      	ldrh	r3, [r3, #10]
 80175d8:	2b03      	cmp	r3, #3
 80175da:	f240 80ca 	bls.w	8017772 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	685b      	ldr	r3, [r3, #4]
 80175e2:	781b      	ldrb	r3, [r3, #0]
 80175e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80175e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	f000 80b7 	beq.w	8017760 <icmp_input+0x1b4>
 80175f2:	2b08      	cmp	r3, #8
 80175f4:	f040 80b7 	bne.w	8017766 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80175f8:	4b69      	ldr	r3, [pc, #420]	; (80177a0 <icmp_input+0x1f4>)
 80175fa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80175fc:	4b67      	ldr	r3, [pc, #412]	; (801779c <icmp_input+0x1f0>)
 80175fe:	695b      	ldr	r3, [r3, #20]
 8017600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017604:	2be0      	cmp	r3, #224	; 0xe0
 8017606:	f000 80bb 	beq.w	8017780 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801760a:	4b64      	ldr	r3, [pc, #400]	; (801779c <icmp_input+0x1f0>)
 801760c:	695a      	ldr	r2, [r3, #20]
 801760e:	4b63      	ldr	r3, [pc, #396]	; (801779c <icmp_input+0x1f0>)
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	4619      	mov	r1, r3
 8017614:	4610      	mov	r0, r2
 8017616:	f000 fc09 	bl	8017e2c <ip4_addr_isbroadcast_u32>
 801761a:	4603      	mov	r3, r0
 801761c:	2b00      	cmp	r3, #0
 801761e:	f040 80b1 	bne.w	8017784 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	891b      	ldrh	r3, [r3, #8]
 8017626:	2b07      	cmp	r3, #7
 8017628:	f240 80a5 	bls.w	8017776 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801762c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801762e:	330e      	adds	r3, #14
 8017630:	4619      	mov	r1, r3
 8017632:	6878      	ldr	r0, [r7, #4]
 8017634:	f7f6 ff48 	bl	800e4c8 <pbuf_add_header>
 8017638:	4603      	mov	r3, r0
 801763a:	2b00      	cmp	r3, #0
 801763c:	d04b      	beq.n	80176d6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	891a      	ldrh	r2, [r3, #8]
 8017642:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017644:	4413      	add	r3, r2
 8017646:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	891b      	ldrh	r3, [r3, #8]
 801764c:	8b7a      	ldrh	r2, [r7, #26]
 801764e:	429a      	cmp	r2, r3
 8017650:	f0c0 809a 	bcc.w	8017788 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017654:	8b7b      	ldrh	r3, [r7, #26]
 8017656:	f44f 7220 	mov.w	r2, #640	; 0x280
 801765a:	4619      	mov	r1, r3
 801765c:	200e      	movs	r0, #14
 801765e:	f7f6 fce9 	bl	800e034 <pbuf_alloc>
 8017662:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017664:	697b      	ldr	r3, [r7, #20]
 8017666:	2b00      	cmp	r3, #0
 8017668:	f000 8090 	beq.w	801778c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801766c:	697b      	ldr	r3, [r7, #20]
 801766e:	895b      	ldrh	r3, [r3, #10]
 8017670:	461a      	mov	r2, r3
 8017672:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017674:	3308      	adds	r3, #8
 8017676:	429a      	cmp	r2, r3
 8017678:	d203      	bcs.n	8017682 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801767a:	6978      	ldr	r0, [r7, #20]
 801767c:	f7f6 ffba 	bl	800e5f4 <pbuf_free>
          goto icmperr;
 8017680:	e085      	b.n	801778e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017682:	697b      	ldr	r3, [r7, #20]
 8017684:	685b      	ldr	r3, [r3, #4]
 8017686:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801768a:	4618      	mov	r0, r3
 801768c:	f001 fc85 	bl	8018f9a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017690:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017692:	4619      	mov	r1, r3
 8017694:	6978      	ldr	r0, [r7, #20]
 8017696:	f7f6 ff27 	bl	800e4e8 <pbuf_remove_header>
 801769a:	4603      	mov	r3, r0
 801769c:	2b00      	cmp	r3, #0
 801769e:	d009      	beq.n	80176b4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80176a0:	4b40      	ldr	r3, [pc, #256]	; (80177a4 <icmp_input+0x1f8>)
 80176a2:	22b6      	movs	r2, #182	; 0xb6
 80176a4:	4940      	ldr	r1, [pc, #256]	; (80177a8 <icmp_input+0x1fc>)
 80176a6:	4841      	ldr	r0, [pc, #260]	; (80177ac <icmp_input+0x200>)
 80176a8:	f002 f9a8 	bl	80199fc <iprintf>
          pbuf_free(r);
 80176ac:	6978      	ldr	r0, [r7, #20]
 80176ae:	f7f6 ffa1 	bl	800e5f4 <pbuf_free>
          goto icmperr;
 80176b2:	e06c      	b.n	801778e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80176b4:	6879      	ldr	r1, [r7, #4]
 80176b6:	6978      	ldr	r0, [r7, #20]
 80176b8:	f7f7 f8d0 	bl	800e85c <pbuf_copy>
 80176bc:	4603      	mov	r3, r0
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d003      	beq.n	80176ca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80176c2:	6978      	ldr	r0, [r7, #20]
 80176c4:	f7f6 ff96 	bl	800e5f4 <pbuf_free>
          goto icmperr;
 80176c8:	e061      	b.n	801778e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80176ca:	6878      	ldr	r0, [r7, #4]
 80176cc:	f7f6 ff92 	bl	800e5f4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80176d0:	697b      	ldr	r3, [r7, #20]
 80176d2:	607b      	str	r3, [r7, #4]
 80176d4:	e00f      	b.n	80176f6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80176d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176d8:	330e      	adds	r3, #14
 80176da:	4619      	mov	r1, r3
 80176dc:	6878      	ldr	r0, [r7, #4]
 80176de:	f7f6 ff03 	bl	800e4e8 <pbuf_remove_header>
 80176e2:	4603      	mov	r3, r0
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d006      	beq.n	80176f6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80176e8:	4b2e      	ldr	r3, [pc, #184]	; (80177a4 <icmp_input+0x1f8>)
 80176ea:	22c7      	movs	r2, #199	; 0xc7
 80176ec:	4930      	ldr	r1, [pc, #192]	; (80177b0 <icmp_input+0x204>)
 80176ee:	482f      	ldr	r0, [pc, #188]	; (80177ac <icmp_input+0x200>)
 80176f0:	f002 f984 	bl	80199fc <iprintf>
          goto icmperr;
 80176f4:	e04b      	b.n	801778e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	685b      	ldr	r3, [r3, #4]
 80176fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80176fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176fe:	4619      	mov	r1, r3
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f7f6 fee1 	bl	800e4c8 <pbuf_add_header>
 8017706:	4603      	mov	r3, r0
 8017708:	2b00      	cmp	r3, #0
 801770a:	d12b      	bne.n	8017764 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	685b      	ldr	r3, [r3, #4]
 8017710:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017712:	69fb      	ldr	r3, [r7, #28]
 8017714:	681a      	ldr	r2, [r3, #0]
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801771a:	4b20      	ldr	r3, [pc, #128]	; (801779c <icmp_input+0x1f0>)
 801771c:	691a      	ldr	r2, [r3, #16]
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017722:	693b      	ldr	r3, [r7, #16]
 8017724:	2200      	movs	r2, #0
 8017726:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017728:	693b      	ldr	r3, [r7, #16]
 801772a:	2200      	movs	r2, #0
 801772c:	709a      	strb	r2, [r3, #2]
 801772e:	2200      	movs	r2, #0
 8017730:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	22ff      	movs	r2, #255	; 0xff
 8017736:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	2200      	movs	r2, #0
 801773c:	729a      	strb	r2, [r3, #10]
 801773e:	2200      	movs	r2, #0
 8017740:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	9302      	str	r3, [sp, #8]
 8017746:	2301      	movs	r3, #1
 8017748:	9301      	str	r3, [sp, #4]
 801774a:	2300      	movs	r3, #0
 801774c:	9300      	str	r3, [sp, #0]
 801774e:	23ff      	movs	r3, #255	; 0xff
 8017750:	2200      	movs	r2, #0
 8017752:	69f9      	ldr	r1, [r7, #28]
 8017754:	6878      	ldr	r0, [r7, #4]
 8017756:	f000 fa91 	bl	8017c7c <ip4_output_if>
 801775a:	4603      	mov	r3, r0
 801775c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801775e:	e001      	b.n	8017764 <icmp_input+0x1b8>
      break;
 8017760:	bf00      	nop
 8017762:	e000      	b.n	8017766 <icmp_input+0x1ba>
      break;
 8017764:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017766:	6878      	ldr	r0, [r7, #4]
 8017768:	f7f6 ff44 	bl	800e5f4 <pbuf_free>
  return;
 801776c:	e013      	b.n	8017796 <icmp_input+0x1ea>
    goto lenerr;
 801776e:	bf00      	nop
 8017770:	e002      	b.n	8017778 <icmp_input+0x1cc>
    goto lenerr;
 8017772:	bf00      	nop
 8017774:	e000      	b.n	8017778 <icmp_input+0x1cc>
        goto lenerr;
 8017776:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017778:	6878      	ldr	r0, [r7, #4]
 801777a:	f7f6 ff3b 	bl	800e5f4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801777e:	e00a      	b.n	8017796 <icmp_input+0x1ea>
        goto icmperr;
 8017780:	bf00      	nop
 8017782:	e004      	b.n	801778e <icmp_input+0x1e2>
        goto icmperr;
 8017784:	bf00      	nop
 8017786:	e002      	b.n	801778e <icmp_input+0x1e2>
          goto icmperr;
 8017788:	bf00      	nop
 801778a:	e000      	b.n	801778e <icmp_input+0x1e2>
          goto icmperr;
 801778c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f7f6 ff30 	bl	800e5f4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017794:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017796:	3728      	adds	r7, #40	; 0x28
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}
 801779c:	20007d8c 	.word	0x20007d8c
 80177a0:	20007da0 	.word	0x20007da0
 80177a4:	0801fd50 	.word	0x0801fd50
 80177a8:	0801fd88 	.word	0x0801fd88
 80177ac:	0801fdc0 	.word	0x0801fdc0
 80177b0:	0801fde8 	.word	0x0801fde8

080177b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
 80177bc:	460b      	mov	r3, r1
 80177be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80177c0:	78fb      	ldrb	r3, [r7, #3]
 80177c2:	461a      	mov	r2, r3
 80177c4:	2103      	movs	r1, #3
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f000 f814 	bl	80177f4 <icmp_send_response>
}
 80177cc:	bf00      	nop
 80177ce:	3708      	adds	r7, #8
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	460b      	mov	r3, r1
 80177de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80177e0:	78fb      	ldrb	r3, [r7, #3]
 80177e2:	461a      	mov	r2, r3
 80177e4:	210b      	movs	r1, #11
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f000 f804 	bl	80177f4 <icmp_send_response>
}
 80177ec:	bf00      	nop
 80177ee:	3708      	adds	r7, #8
 80177f0:	46bd      	mov	sp, r7
 80177f2:	bd80      	pop	{r7, pc}

080177f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b08c      	sub	sp, #48	; 0x30
 80177f8:	af04      	add	r7, sp, #16
 80177fa:	6078      	str	r0, [r7, #4]
 80177fc:	460b      	mov	r3, r1
 80177fe:	70fb      	strb	r3, [r7, #3]
 8017800:	4613      	mov	r3, r2
 8017802:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017804:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017808:	2124      	movs	r1, #36	; 0x24
 801780a:	2022      	movs	r0, #34	; 0x22
 801780c:	f7f6 fc12 	bl	800e034 <pbuf_alloc>
 8017810:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017812:	69fb      	ldr	r3, [r7, #28]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d04c      	beq.n	80178b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017818:	69fb      	ldr	r3, [r7, #28]
 801781a:	895b      	ldrh	r3, [r3, #10]
 801781c:	2b23      	cmp	r3, #35	; 0x23
 801781e:	d806      	bhi.n	801782e <icmp_send_response+0x3a>
 8017820:	4b26      	ldr	r3, [pc, #152]	; (80178bc <icmp_send_response+0xc8>)
 8017822:	f240 1269 	movw	r2, #361	; 0x169
 8017826:	4926      	ldr	r1, [pc, #152]	; (80178c0 <icmp_send_response+0xcc>)
 8017828:	4826      	ldr	r0, [pc, #152]	; (80178c4 <icmp_send_response+0xd0>)
 801782a:	f002 f8e7 	bl	80199fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	685b      	ldr	r3, [r3, #4]
 8017832:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017834:	69fb      	ldr	r3, [r7, #28]
 8017836:	685b      	ldr	r3, [r3, #4]
 8017838:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801783a:	697b      	ldr	r3, [r7, #20]
 801783c:	78fa      	ldrb	r2, [r7, #3]
 801783e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017840:	697b      	ldr	r3, [r7, #20]
 8017842:	78ba      	ldrb	r2, [r7, #2]
 8017844:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017846:	697b      	ldr	r3, [r7, #20]
 8017848:	2200      	movs	r2, #0
 801784a:	711a      	strb	r2, [r3, #4]
 801784c:	2200      	movs	r2, #0
 801784e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017850:	697b      	ldr	r3, [r7, #20]
 8017852:	2200      	movs	r2, #0
 8017854:	719a      	strb	r2, [r3, #6]
 8017856:	2200      	movs	r2, #0
 8017858:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801785a:	69fb      	ldr	r3, [r7, #28]
 801785c:	685b      	ldr	r3, [r3, #4]
 801785e:	f103 0008 	add.w	r0, r3, #8
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	685b      	ldr	r3, [r3, #4]
 8017866:	221c      	movs	r2, #28
 8017868:	4619      	mov	r1, r3
 801786a:	f001 fb96 	bl	8018f9a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801786e:	69bb      	ldr	r3, [r7, #24]
 8017870:	68db      	ldr	r3, [r3, #12]
 8017872:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017874:	f107 030c 	add.w	r3, r7, #12
 8017878:	4618      	mov	r0, r3
 801787a:	f000 f825 	bl	80178c8 <ip4_route>
 801787e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017880:	693b      	ldr	r3, [r7, #16]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d011      	beq.n	80178aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	2200      	movs	r2, #0
 801788a:	709a      	strb	r2, [r3, #2]
 801788c:	2200      	movs	r2, #0
 801788e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017890:	f107 020c 	add.w	r2, r7, #12
 8017894:	693b      	ldr	r3, [r7, #16]
 8017896:	9302      	str	r3, [sp, #8]
 8017898:	2301      	movs	r3, #1
 801789a:	9301      	str	r3, [sp, #4]
 801789c:	2300      	movs	r3, #0
 801789e:	9300      	str	r3, [sp, #0]
 80178a0:	23ff      	movs	r3, #255	; 0xff
 80178a2:	2100      	movs	r1, #0
 80178a4:	69f8      	ldr	r0, [r7, #28]
 80178a6:	f000 f9e9 	bl	8017c7c <ip4_output_if>
  }
  pbuf_free(q);
 80178aa:	69f8      	ldr	r0, [r7, #28]
 80178ac:	f7f6 fea2 	bl	800e5f4 <pbuf_free>
 80178b0:	e000      	b.n	80178b4 <icmp_send_response+0xc0>
    return;
 80178b2:	bf00      	nop
}
 80178b4:	3720      	adds	r7, #32
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}
 80178ba:	bf00      	nop
 80178bc:	0801fd50 	.word	0x0801fd50
 80178c0:	0801fe1c 	.word	0x0801fe1c
 80178c4:	0801fdc0 	.word	0x0801fdc0

080178c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80178c8:	b480      	push	{r7}
 80178ca:	b085      	sub	sp, #20
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80178d0:	4b33      	ldr	r3, [pc, #204]	; (80179a0 <ip4_route+0xd8>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	60fb      	str	r3, [r7, #12]
 80178d6:	e036      	b.n	8017946 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80178de:	f003 0301 	and.w	r3, r3, #1
 80178e2:	b2db      	uxtb	r3, r3
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d02b      	beq.n	8017940 <ip4_route+0x78>
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80178ee:	089b      	lsrs	r3, r3, #2
 80178f0:	f003 0301 	and.w	r3, r3, #1
 80178f4:	b2db      	uxtb	r3, r3
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d022      	beq.n	8017940 <ip4_route+0x78>
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	3304      	adds	r3, #4
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d01d      	beq.n	8017940 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681a      	ldr	r2, [r3, #0]
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	3304      	adds	r3, #4
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	405a      	eors	r2, r3
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	3308      	adds	r3, #8
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	4013      	ands	r3, r2
 8017918:	2b00      	cmp	r3, #0
 801791a:	d101      	bne.n	8017920 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	e038      	b.n	8017992 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017926:	f003 0302 	and.w	r3, r3, #2
 801792a:	2b00      	cmp	r3, #0
 801792c:	d108      	bne.n	8017940 <ip4_route+0x78>
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	681a      	ldr	r2, [r3, #0]
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	330c      	adds	r3, #12
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	429a      	cmp	r2, r3
 801793a:	d101      	bne.n	8017940 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	e028      	b.n	8017992 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	60fb      	str	r3, [r7, #12]
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d1c5      	bne.n	80178d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801794c:	4b15      	ldr	r3, [pc, #84]	; (80179a4 <ip4_route+0xdc>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d01a      	beq.n	801798a <ip4_route+0xc2>
 8017954:	4b13      	ldr	r3, [pc, #76]	; (80179a4 <ip4_route+0xdc>)
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801795c:	f003 0301 	and.w	r3, r3, #1
 8017960:	2b00      	cmp	r3, #0
 8017962:	d012      	beq.n	801798a <ip4_route+0xc2>
 8017964:	4b0f      	ldr	r3, [pc, #60]	; (80179a4 <ip4_route+0xdc>)
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801796c:	f003 0304 	and.w	r3, r3, #4
 8017970:	2b00      	cmp	r3, #0
 8017972:	d00a      	beq.n	801798a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017974:	4b0b      	ldr	r3, [pc, #44]	; (80179a4 <ip4_route+0xdc>)
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	3304      	adds	r3, #4
 801797a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801797c:	2b00      	cmp	r3, #0
 801797e:	d004      	beq.n	801798a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	b2db      	uxtb	r3, r3
 8017986:	2b7f      	cmp	r3, #127	; 0x7f
 8017988:	d101      	bne.n	801798e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801798a:	2300      	movs	r3, #0
 801798c:	e001      	b.n	8017992 <ip4_route+0xca>
  }

  return netif_default;
 801798e:	4b05      	ldr	r3, [pc, #20]	; (80179a4 <ip4_route+0xdc>)
 8017990:	681b      	ldr	r3, [r3, #0]
}
 8017992:	4618      	mov	r0, r3
 8017994:	3714      	adds	r7, #20
 8017996:	46bd      	mov	sp, r7
 8017998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799c:	4770      	bx	lr
 801799e:	bf00      	nop
 80179a0:	2000b4b0 	.word	0x2000b4b0
 80179a4:	2000b4b4 	.word	0x2000b4b4

080179a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b082      	sub	sp, #8
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80179b6:	f003 0301 	and.w	r3, r3, #1
 80179ba:	b2db      	uxtb	r3, r3
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d016      	beq.n	80179ee <ip4_input_accept+0x46>
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	3304      	adds	r3, #4
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d011      	beq.n	80179ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80179ca:	4b0b      	ldr	r3, [pc, #44]	; (80179f8 <ip4_input_accept+0x50>)
 80179cc:	695a      	ldr	r2, [r3, #20]
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	3304      	adds	r3, #4
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	429a      	cmp	r2, r3
 80179d6:	d008      	beq.n	80179ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80179d8:	4b07      	ldr	r3, [pc, #28]	; (80179f8 <ip4_input_accept+0x50>)
 80179da:	695b      	ldr	r3, [r3, #20]
 80179dc:	6879      	ldr	r1, [r7, #4]
 80179de:	4618      	mov	r0, r3
 80179e0:	f000 fa24 	bl	8017e2c <ip4_addr_isbroadcast_u32>
 80179e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d001      	beq.n	80179ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80179ea:	2301      	movs	r3, #1
 80179ec:	e000      	b.n	80179f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80179ee:	2300      	movs	r3, #0
}
 80179f0:	4618      	mov	r0, r3
 80179f2:	3708      	adds	r7, #8
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}
 80179f8:	20007d8c 	.word	0x20007d8c

080179fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b088      	sub	sp, #32
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
 8017a04:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017a06:	2301      	movs	r3, #1
 8017a08:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	685b      	ldr	r3, [r3, #4]
 8017a0e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017a10:	69fb      	ldr	r3, [r7, #28]
 8017a12:	781b      	ldrb	r3, [r3, #0]
 8017a14:	091b      	lsrs	r3, r3, #4
 8017a16:	b2db      	uxtb	r3, r3
 8017a18:	2b04      	cmp	r3, #4
 8017a1a:	d004      	beq.n	8017a26 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017a1c:	6878      	ldr	r0, [r7, #4]
 8017a1e:	f7f6 fde9 	bl	800e5f4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017a22:	2300      	movs	r3, #0
 8017a24:	e121      	b.n	8017c6a <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017a26:	69fb      	ldr	r3, [r7, #28]
 8017a28:	781b      	ldrb	r3, [r3, #0]
 8017a2a:	f003 030f 	and.w	r3, r3, #15
 8017a2e:	b2db      	uxtb	r3, r3
 8017a30:	009b      	lsls	r3, r3, #2
 8017a32:	b2db      	uxtb	r3, r3
 8017a34:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017a36:	69fb      	ldr	r3, [r7, #28]
 8017a38:	885b      	ldrh	r3, [r3, #2]
 8017a3a:	b29b      	uxth	r3, r3
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7f5 faa3 	bl	800cf88 <lwip_htons>
 8017a42:	4603      	mov	r3, r0
 8017a44:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	891b      	ldrh	r3, [r3, #8]
 8017a4a:	8a3a      	ldrh	r2, [r7, #16]
 8017a4c:	429a      	cmp	r2, r3
 8017a4e:	d204      	bcs.n	8017a5a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017a50:	8a3b      	ldrh	r3, [r7, #16]
 8017a52:	4619      	mov	r1, r3
 8017a54:	6878      	ldr	r0, [r7, #4]
 8017a56:	f7f6 fc47 	bl	800e2e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	895b      	ldrh	r3, [r3, #10]
 8017a5e:	8a7a      	ldrh	r2, [r7, #18]
 8017a60:	429a      	cmp	r2, r3
 8017a62:	d807      	bhi.n	8017a74 <ip4_input+0x78>
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	891b      	ldrh	r3, [r3, #8]
 8017a68:	8a3a      	ldrh	r2, [r7, #16]
 8017a6a:	429a      	cmp	r2, r3
 8017a6c:	d802      	bhi.n	8017a74 <ip4_input+0x78>
 8017a6e:	8a7b      	ldrh	r3, [r7, #18]
 8017a70:	2b13      	cmp	r3, #19
 8017a72:	d804      	bhi.n	8017a7e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017a74:	6878      	ldr	r0, [r7, #4]
 8017a76:	f7f6 fdbd 	bl	800e5f4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	e0f5      	b.n	8017c6a <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017a7e:	69fb      	ldr	r3, [r7, #28]
 8017a80:	691b      	ldr	r3, [r3, #16]
 8017a82:	4a7c      	ldr	r2, [pc, #496]	; (8017c74 <ip4_input+0x278>)
 8017a84:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017a86:	69fb      	ldr	r3, [r7, #28]
 8017a88:	68db      	ldr	r3, [r3, #12]
 8017a8a:	4a7a      	ldr	r2, [pc, #488]	; (8017c74 <ip4_input+0x278>)
 8017a8c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017a8e:	4b79      	ldr	r3, [pc, #484]	; (8017c74 <ip4_input+0x278>)
 8017a90:	695b      	ldr	r3, [r3, #20]
 8017a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017a96:	2be0      	cmp	r3, #224	; 0xe0
 8017a98:	d112      	bne.n	8017ac0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017aa0:	f003 0301 	and.w	r3, r3, #1
 8017aa4:	b2db      	uxtb	r3, r3
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d007      	beq.n	8017aba <ip4_input+0xbe>
 8017aaa:	683b      	ldr	r3, [r7, #0]
 8017aac:	3304      	adds	r3, #4
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d002      	beq.n	8017aba <ip4_input+0xbe>
      netif = inp;
 8017ab4:	683b      	ldr	r3, [r7, #0]
 8017ab6:	61bb      	str	r3, [r7, #24]
 8017ab8:	e02a      	b.n	8017b10 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017aba:	2300      	movs	r3, #0
 8017abc:	61bb      	str	r3, [r7, #24]
 8017abe:	e027      	b.n	8017b10 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017ac0:	6838      	ldr	r0, [r7, #0]
 8017ac2:	f7ff ff71 	bl	80179a8 <ip4_input_accept>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d002      	beq.n	8017ad2 <ip4_input+0xd6>
      netif = inp;
 8017acc:	683b      	ldr	r3, [r7, #0]
 8017ace:	61bb      	str	r3, [r7, #24]
 8017ad0:	e01e      	b.n	8017b10 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017ad6:	4b67      	ldr	r3, [pc, #412]	; (8017c74 <ip4_input+0x278>)
 8017ad8:	695b      	ldr	r3, [r3, #20]
 8017ada:	b2db      	uxtb	r3, r3
 8017adc:	2b7f      	cmp	r3, #127	; 0x7f
 8017ade:	d017      	beq.n	8017b10 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017ae0:	4b65      	ldr	r3, [pc, #404]	; (8017c78 <ip4_input+0x27c>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	61bb      	str	r3, [r7, #24]
 8017ae6:	e00e      	b.n	8017b06 <ip4_input+0x10a>
          if (netif == inp) {
 8017ae8:	69ba      	ldr	r2, [r7, #24]
 8017aea:	683b      	ldr	r3, [r7, #0]
 8017aec:	429a      	cmp	r2, r3
 8017aee:	d006      	beq.n	8017afe <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017af0:	69b8      	ldr	r0, [r7, #24]
 8017af2:	f7ff ff59 	bl	80179a8 <ip4_input_accept>
 8017af6:	4603      	mov	r3, r0
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d108      	bne.n	8017b0e <ip4_input+0x112>
 8017afc:	e000      	b.n	8017b00 <ip4_input+0x104>
            continue;
 8017afe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017b00:	69bb      	ldr	r3, [r7, #24]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	61bb      	str	r3, [r7, #24]
 8017b06:	69bb      	ldr	r3, [r7, #24]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d1ed      	bne.n	8017ae8 <ip4_input+0xec>
 8017b0c:	e000      	b.n	8017b10 <ip4_input+0x114>
            break;
 8017b0e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017b10:	69bb      	ldr	r3, [r7, #24]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d111      	bne.n	8017b3a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017b16:	69fb      	ldr	r3, [r7, #28]
 8017b18:	7a5b      	ldrb	r3, [r3, #9]
 8017b1a:	2b11      	cmp	r3, #17
 8017b1c:	d10d      	bne.n	8017b3a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017b1e:	8a7b      	ldrh	r3, [r7, #18]
 8017b20:	69fa      	ldr	r2, [r7, #28]
 8017b22:	4413      	add	r3, r2
 8017b24:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	885b      	ldrh	r3, [r3, #2]
 8017b2a:	b29b      	uxth	r3, r3
 8017b2c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017b30:	d103      	bne.n	8017b3a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017b32:	683b      	ldr	r3, [r7, #0]
 8017b34:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017b36:	2300      	movs	r3, #0
 8017b38:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d017      	beq.n	8017b70 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017b40:	4b4c      	ldr	r3, [pc, #304]	; (8017c74 <ip4_input+0x278>)
 8017b42:	691b      	ldr	r3, [r3, #16]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d013      	beq.n	8017b70 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017b48:	4b4a      	ldr	r3, [pc, #296]	; (8017c74 <ip4_input+0x278>)
 8017b4a:	691b      	ldr	r3, [r3, #16]
 8017b4c:	6839      	ldr	r1, [r7, #0]
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f000 f96c 	bl	8017e2c <ip4_addr_isbroadcast_u32>
 8017b54:	4603      	mov	r3, r0
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d105      	bne.n	8017b66 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017b5a:	4b46      	ldr	r3, [pc, #280]	; (8017c74 <ip4_input+0x278>)
 8017b5c:	691b      	ldr	r3, [r3, #16]
 8017b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017b62:	2be0      	cmp	r3, #224	; 0xe0
 8017b64:	d104      	bne.n	8017b70 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7f6 fd44 	bl	800e5f4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	e07c      	b.n	8017c6a <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017b70:	69bb      	ldr	r3, [r7, #24]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d104      	bne.n	8017b80 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	f7f6 fd3c 	bl	800e5f4 <pbuf_free>
    return ERR_OK;
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	e074      	b.n	8017c6a <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017b80:	69fb      	ldr	r3, [r7, #28]
 8017b82:	88db      	ldrh	r3, [r3, #6]
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	461a      	mov	r2, r3
 8017b88:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017b8c:	4013      	ands	r3, r2
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d00b      	beq.n	8017baa <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017b92:	6878      	ldr	r0, [r7, #4]
 8017b94:	f000 fc90 	bl	80184b8 <ip4_reass>
 8017b98:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d101      	bne.n	8017ba4 <ip4_input+0x1a8>
      return ERR_OK;
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	e062      	b.n	8017c6a <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	685b      	ldr	r3, [r3, #4]
 8017ba8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017baa:	4a32      	ldr	r2, [pc, #200]	; (8017c74 <ip4_input+0x278>)
 8017bac:	69bb      	ldr	r3, [r7, #24]
 8017bae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017bb0:	4a30      	ldr	r2, [pc, #192]	; (8017c74 <ip4_input+0x278>)
 8017bb2:	683b      	ldr	r3, [r7, #0]
 8017bb4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017bb6:	4a2f      	ldr	r2, [pc, #188]	; (8017c74 <ip4_input+0x278>)
 8017bb8:	69fb      	ldr	r3, [r7, #28]
 8017bba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017bbc:	69fb      	ldr	r3, [r7, #28]
 8017bbe:	781b      	ldrb	r3, [r3, #0]
 8017bc0:	f003 030f 	and.w	r3, r3, #15
 8017bc4:	b2db      	uxtb	r3, r3
 8017bc6:	009b      	lsls	r3, r3, #2
 8017bc8:	b2db      	uxtb	r3, r3
 8017bca:	b29a      	uxth	r2, r3
 8017bcc:	4b29      	ldr	r3, [pc, #164]	; (8017c74 <ip4_input+0x278>)
 8017bce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017bd0:	8a7b      	ldrh	r3, [r7, #18]
 8017bd2:	4619      	mov	r1, r3
 8017bd4:	6878      	ldr	r0, [r7, #4]
 8017bd6:	f7f6 fc87 	bl	800e4e8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017bda:	69fb      	ldr	r3, [r7, #28]
 8017bdc:	7a5b      	ldrb	r3, [r3, #9]
 8017bde:	2b06      	cmp	r3, #6
 8017be0:	d009      	beq.n	8017bf6 <ip4_input+0x1fa>
 8017be2:	2b11      	cmp	r3, #17
 8017be4:	d002      	beq.n	8017bec <ip4_input+0x1f0>
 8017be6:	2b01      	cmp	r3, #1
 8017be8:	d00a      	beq.n	8017c00 <ip4_input+0x204>
 8017bea:	e00e      	b.n	8017c0a <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017bec:	6839      	ldr	r1, [r7, #0]
 8017bee:	6878      	ldr	r0, [r7, #4]
 8017bf0:	f7fc fb2a 	bl	8014248 <udp_input>
        break;
 8017bf4:	e026      	b.n	8017c44 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017bf6:	6839      	ldr	r1, [r7, #0]
 8017bf8:	6878      	ldr	r0, [r7, #4]
 8017bfa:	f7f8 fb33 	bl	8010264 <tcp_input>
        break;
 8017bfe:	e021      	b.n	8017c44 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017c00:	6839      	ldr	r1, [r7, #0]
 8017c02:	6878      	ldr	r0, [r7, #4]
 8017c04:	f7ff fcd2 	bl	80175ac <icmp_input>
        break;
 8017c08:	e01c      	b.n	8017c44 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017c0a:	4b1a      	ldr	r3, [pc, #104]	; (8017c74 <ip4_input+0x278>)
 8017c0c:	695b      	ldr	r3, [r3, #20]
 8017c0e:	69b9      	ldr	r1, [r7, #24]
 8017c10:	4618      	mov	r0, r3
 8017c12:	f000 f90b 	bl	8017e2c <ip4_addr_isbroadcast_u32>
 8017c16:	4603      	mov	r3, r0
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d10f      	bne.n	8017c3c <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017c1c:	4b15      	ldr	r3, [pc, #84]	; (8017c74 <ip4_input+0x278>)
 8017c1e:	695b      	ldr	r3, [r3, #20]
 8017c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017c24:	2be0      	cmp	r3, #224	; 0xe0
 8017c26:	d009      	beq.n	8017c3c <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017c28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017c2c:	4619      	mov	r1, r3
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f7f6 fccd 	bl	800e5ce <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017c34:	2102      	movs	r1, #2
 8017c36:	6878      	ldr	r0, [r7, #4]
 8017c38:	f7ff fdbc 	bl	80177b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017c3c:	6878      	ldr	r0, [r7, #4]
 8017c3e:	f7f6 fcd9 	bl	800e5f4 <pbuf_free>
        break;
 8017c42:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017c44:	4b0b      	ldr	r3, [pc, #44]	; (8017c74 <ip4_input+0x278>)
 8017c46:	2200      	movs	r2, #0
 8017c48:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017c4a:	4b0a      	ldr	r3, [pc, #40]	; (8017c74 <ip4_input+0x278>)
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017c50:	4b08      	ldr	r3, [pc, #32]	; (8017c74 <ip4_input+0x278>)
 8017c52:	2200      	movs	r2, #0
 8017c54:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017c56:	4b07      	ldr	r3, [pc, #28]	; (8017c74 <ip4_input+0x278>)
 8017c58:	2200      	movs	r2, #0
 8017c5a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017c5c:	4b05      	ldr	r3, [pc, #20]	; (8017c74 <ip4_input+0x278>)
 8017c5e:	2200      	movs	r2, #0
 8017c60:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017c62:	4b04      	ldr	r3, [pc, #16]	; (8017c74 <ip4_input+0x278>)
 8017c64:	2200      	movs	r2, #0
 8017c66:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017c68:	2300      	movs	r3, #0
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3720      	adds	r7, #32
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	20007d8c 	.word	0x20007d8c
 8017c78:	2000b4b0 	.word	0x2000b4b0

08017c7c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b08a      	sub	sp, #40	; 0x28
 8017c80:	af04      	add	r7, sp, #16
 8017c82:	60f8      	str	r0, [r7, #12]
 8017c84:	60b9      	str	r1, [r7, #8]
 8017c86:	607a      	str	r2, [r7, #4]
 8017c88:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017c8a:	68bb      	ldr	r3, [r7, #8]
 8017c8c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d009      	beq.n	8017ca8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017c94:	68bb      	ldr	r3, [r7, #8]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d003      	beq.n	8017ca2 <ip4_output_if+0x26>
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d102      	bne.n	8017ca8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca4:	3304      	adds	r3, #4
 8017ca6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017ca8:	78fa      	ldrb	r2, [r7, #3]
 8017caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cac:	9302      	str	r3, [sp, #8]
 8017cae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017cb2:	9301      	str	r3, [sp, #4]
 8017cb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017cb8:	9300      	str	r3, [sp, #0]
 8017cba:	4613      	mov	r3, r2
 8017cbc:	687a      	ldr	r2, [r7, #4]
 8017cbe:	6979      	ldr	r1, [r7, #20]
 8017cc0:	68f8      	ldr	r0, [r7, #12]
 8017cc2:	f000 f805 	bl	8017cd0 <ip4_output_if_src>
 8017cc6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3718      	adds	r7, #24
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}

08017cd0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b088      	sub	sp, #32
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	60f8      	str	r0, [r7, #12]
 8017cd8:	60b9      	str	r1, [r7, #8]
 8017cda:	607a      	str	r2, [r7, #4]
 8017cdc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	7b9b      	ldrb	r3, [r3, #14]
 8017ce2:	2b01      	cmp	r3, #1
 8017ce4:	d006      	beq.n	8017cf4 <ip4_output_if_src+0x24>
 8017ce6:	4b4b      	ldr	r3, [pc, #300]	; (8017e14 <ip4_output_if_src+0x144>)
 8017ce8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017cec:	494a      	ldr	r1, [pc, #296]	; (8017e18 <ip4_output_if_src+0x148>)
 8017cee:	484b      	ldr	r0, [pc, #300]	; (8017e1c <ip4_output_if_src+0x14c>)
 8017cf0:	f001 fe84 	bl	80199fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d060      	beq.n	8017dbc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017cfa:	2314      	movs	r3, #20
 8017cfc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017cfe:	2114      	movs	r1, #20
 8017d00:	68f8      	ldr	r0, [r7, #12]
 8017d02:	f7f6 fbe1 	bl	800e4c8 <pbuf_add_header>
 8017d06:	4603      	mov	r3, r0
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d002      	beq.n	8017d12 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017d0c:	f06f 0301 	mvn.w	r3, #1
 8017d10:	e07c      	b.n	8017e0c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	685b      	ldr	r3, [r3, #4]
 8017d16:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	895b      	ldrh	r3, [r3, #10]
 8017d1c:	2b13      	cmp	r3, #19
 8017d1e:	d806      	bhi.n	8017d2e <ip4_output_if_src+0x5e>
 8017d20:	4b3c      	ldr	r3, [pc, #240]	; (8017e14 <ip4_output_if_src+0x144>)
 8017d22:	f240 3289 	movw	r2, #905	; 0x389
 8017d26:	493e      	ldr	r1, [pc, #248]	; (8017e20 <ip4_output_if_src+0x150>)
 8017d28:	483c      	ldr	r0, [pc, #240]	; (8017e1c <ip4_output_if_src+0x14c>)
 8017d2a:	f001 fe67 	bl	80199fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017d2e:	69fb      	ldr	r3, [r7, #28]
 8017d30:	78fa      	ldrb	r2, [r7, #3]
 8017d32:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017d34:	69fb      	ldr	r3, [r7, #28]
 8017d36:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017d3a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	681a      	ldr	r2, [r3, #0]
 8017d40:	69fb      	ldr	r3, [r7, #28]
 8017d42:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017d44:	8b7b      	ldrh	r3, [r7, #26]
 8017d46:	089b      	lsrs	r3, r3, #2
 8017d48:	b29b      	uxth	r3, r3
 8017d4a:	b2db      	uxtb	r3, r3
 8017d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d50:	b2da      	uxtb	r2, r3
 8017d52:	69fb      	ldr	r3, [r7, #28]
 8017d54:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017d56:	69fb      	ldr	r3, [r7, #28]
 8017d58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017d5c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	891b      	ldrh	r3, [r3, #8]
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7f5 f910 	bl	800cf88 <lwip_htons>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	69fb      	ldr	r3, [r7, #28]
 8017d6e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017d70:	69fb      	ldr	r3, [r7, #28]
 8017d72:	2200      	movs	r2, #0
 8017d74:	719a      	strb	r2, [r3, #6]
 8017d76:	2200      	movs	r2, #0
 8017d78:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017d7a:	4b2a      	ldr	r3, [pc, #168]	; (8017e24 <ip4_output_if_src+0x154>)
 8017d7c:	881b      	ldrh	r3, [r3, #0]
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7f5 f902 	bl	800cf88 <lwip_htons>
 8017d84:	4603      	mov	r3, r0
 8017d86:	461a      	mov	r2, r3
 8017d88:	69fb      	ldr	r3, [r7, #28]
 8017d8a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017d8c:	4b25      	ldr	r3, [pc, #148]	; (8017e24 <ip4_output_if_src+0x154>)
 8017d8e:	881b      	ldrh	r3, [r3, #0]
 8017d90:	3301      	adds	r3, #1
 8017d92:	b29a      	uxth	r2, r3
 8017d94:	4b23      	ldr	r3, [pc, #140]	; (8017e24 <ip4_output_if_src+0x154>)
 8017d96:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d104      	bne.n	8017da8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017d9e:	4b22      	ldr	r3, [pc, #136]	; (8017e28 <ip4_output_if_src+0x158>)
 8017da0:	681a      	ldr	r2, [r3, #0]
 8017da2:	69fb      	ldr	r3, [r7, #28]
 8017da4:	60da      	str	r2, [r3, #12]
 8017da6:	e003      	b.n	8017db0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017da8:	68bb      	ldr	r3, [r7, #8]
 8017daa:	681a      	ldr	r2, [r3, #0]
 8017dac:	69fb      	ldr	r3, [r7, #28]
 8017dae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017db0:	69fb      	ldr	r3, [r7, #28]
 8017db2:	2200      	movs	r2, #0
 8017db4:	729a      	strb	r2, [r3, #10]
 8017db6:	2200      	movs	r2, #0
 8017db8:	72da      	strb	r2, [r3, #11]
 8017dba:	e00f      	b.n	8017ddc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	895b      	ldrh	r3, [r3, #10]
 8017dc0:	2b13      	cmp	r3, #19
 8017dc2:	d802      	bhi.n	8017dca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017dc4:	f06f 0301 	mvn.w	r3, #1
 8017dc8:	e020      	b.n	8017e0c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	685b      	ldr	r3, [r3, #4]
 8017dce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017dd0:	69fb      	ldr	r3, [r7, #28]
 8017dd2:	691b      	ldr	r3, [r3, #16]
 8017dd4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017dd6:	f107 0314 	add.w	r3, r7, #20
 8017dda:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d00c      	beq.n	8017dfe <ip4_output_if_src+0x12e>
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	891a      	ldrh	r2, [r3, #8]
 8017de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017dec:	429a      	cmp	r2, r3
 8017dee:	d906      	bls.n	8017dfe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017df0:	687a      	ldr	r2, [r7, #4]
 8017df2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017df4:	68f8      	ldr	r0, [r7, #12]
 8017df6:	f000 fd4b 	bl	8018890 <ip4_frag>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	e006      	b.n	8017e0c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e00:	695b      	ldr	r3, [r3, #20]
 8017e02:	687a      	ldr	r2, [r7, #4]
 8017e04:	68f9      	ldr	r1, [r7, #12]
 8017e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e08:	4798      	blx	r3
 8017e0a:	4603      	mov	r3, r0
}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	3720      	adds	r7, #32
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}
 8017e14:	0801fe48 	.word	0x0801fe48
 8017e18:	0801fe7c 	.word	0x0801fe7c
 8017e1c:	0801fe88 	.word	0x0801fe88
 8017e20:	0801feb0 	.word	0x0801feb0
 8017e24:	20004852 	.word	0x20004852
 8017e28:	08021030 	.word	0x08021030

08017e2c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017e2c:	b480      	push	{r7}
 8017e2e:	b085      	sub	sp, #20
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
 8017e34:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e40:	d002      	beq.n	8017e48 <ip4_addr_isbroadcast_u32+0x1c>
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d101      	bne.n	8017e4c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017e48:	2301      	movs	r3, #1
 8017e4a:	e02a      	b.n	8017ea2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017e4c:	683b      	ldr	r3, [r7, #0]
 8017e4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e52:	f003 0302 	and.w	r3, r3, #2
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d101      	bne.n	8017e5e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	e021      	b.n	8017ea2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017e5e:	683b      	ldr	r3, [r7, #0]
 8017e60:	3304      	adds	r3, #4
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	687a      	ldr	r2, [r7, #4]
 8017e66:	429a      	cmp	r2, r3
 8017e68:	d101      	bne.n	8017e6e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	e019      	b.n	8017ea2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017e6e:	68fa      	ldr	r2, [r7, #12]
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	3304      	adds	r3, #4
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	405a      	eors	r2, r3
 8017e78:	683b      	ldr	r3, [r7, #0]
 8017e7a:	3308      	adds	r3, #8
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	4013      	ands	r3, r2
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d10d      	bne.n	8017ea0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017e84:	683b      	ldr	r3, [r7, #0]
 8017e86:	3308      	adds	r3, #8
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	43da      	mvns	r2, r3
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017e90:	683b      	ldr	r3, [r7, #0]
 8017e92:	3308      	adds	r3, #8
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d101      	bne.n	8017ea0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017e9c:	2301      	movs	r3, #1
 8017e9e:	e000      	b.n	8017ea2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017ea0:	2300      	movs	r3, #0
  }
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3714      	adds	r7, #20
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eac:	4770      	bx	lr
	...

08017eb0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b084      	sub	sp, #16
 8017eb4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017eba:	4b12      	ldr	r3, [pc, #72]	; (8017f04 <ip_reass_tmr+0x54>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017ec0:	e018      	b.n	8017ef4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	7fdb      	ldrb	r3, [r3, #31]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d00b      	beq.n	8017ee2 <ip_reass_tmr+0x32>
      r->timer--;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	7fdb      	ldrb	r3, [r3, #31]
 8017ece:	3b01      	subs	r3, #1
 8017ed0:	b2da      	uxtb	r2, r3
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	60fb      	str	r3, [r7, #12]
 8017ee0:	e008      	b.n	8017ef4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017eec:	68b9      	ldr	r1, [r7, #8]
 8017eee:	6878      	ldr	r0, [r7, #4]
 8017ef0:	f000 f80a 	bl	8017f08 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d1e3      	bne.n	8017ec2 <ip_reass_tmr+0x12>
    }
  }
}
 8017efa:	bf00      	nop
 8017efc:	3710      	adds	r7, #16
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd80      	pop	{r7, pc}
 8017f02:	bf00      	nop
 8017f04:	20004854 	.word	0x20004854

08017f08 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b088      	sub	sp, #32
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017f12:	2300      	movs	r3, #0
 8017f14:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017f16:	683a      	ldr	r2, [r7, #0]
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d105      	bne.n	8017f2a <ip_reass_free_complete_datagram+0x22>
 8017f1e:	4b45      	ldr	r3, [pc, #276]	; (8018034 <ip_reass_free_complete_datagram+0x12c>)
 8017f20:	22ab      	movs	r2, #171	; 0xab
 8017f22:	4945      	ldr	r1, [pc, #276]	; (8018038 <ip_reass_free_complete_datagram+0x130>)
 8017f24:	4845      	ldr	r0, [pc, #276]	; (801803c <ip_reass_free_complete_datagram+0x134>)
 8017f26:	f001 fd69 	bl	80199fc <iprintf>
  if (prev != NULL) {
 8017f2a:	683b      	ldr	r3, [r7, #0]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d00a      	beq.n	8017f46 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	687a      	ldr	r2, [r7, #4]
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d005      	beq.n	8017f46 <ip_reass_free_complete_datagram+0x3e>
 8017f3a:	4b3e      	ldr	r3, [pc, #248]	; (8018034 <ip_reass_free_complete_datagram+0x12c>)
 8017f3c:	22ad      	movs	r2, #173	; 0xad
 8017f3e:	4940      	ldr	r1, [pc, #256]	; (8018040 <ip_reass_free_complete_datagram+0x138>)
 8017f40:	483e      	ldr	r0, [pc, #248]	; (801803c <ip_reass_free_complete_datagram+0x134>)
 8017f42:	f001 fd5b 	bl	80199fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	685b      	ldr	r3, [r3, #4]
 8017f4a:	685b      	ldr	r3, [r3, #4]
 8017f4c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017f4e:	697b      	ldr	r3, [r7, #20]
 8017f50:	889b      	ldrh	r3, [r3, #4]
 8017f52:	b29b      	uxth	r3, r3
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d12a      	bne.n	8017fae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	685b      	ldr	r3, [r3, #4]
 8017f5c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017f5e:	697b      	ldr	r3, [r7, #20]
 8017f60:	681a      	ldr	r2, [r3, #0]
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017f66:	69bb      	ldr	r3, [r7, #24]
 8017f68:	6858      	ldr	r0, [r3, #4]
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	3308      	adds	r3, #8
 8017f6e:	2214      	movs	r2, #20
 8017f70:	4619      	mov	r1, r3
 8017f72:	f001 f812 	bl	8018f9a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017f76:	2101      	movs	r1, #1
 8017f78:	69b8      	ldr	r0, [r7, #24]
 8017f7a:	f7ff fc2b 	bl	80177d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017f7e:	69b8      	ldr	r0, [r7, #24]
 8017f80:	f7f6 fbc6 	bl	800e710 <pbuf_clen>
 8017f84:	4603      	mov	r3, r0
 8017f86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017f88:	8bfa      	ldrh	r2, [r7, #30]
 8017f8a:	8a7b      	ldrh	r3, [r7, #18]
 8017f8c:	4413      	add	r3, r2
 8017f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017f92:	db05      	blt.n	8017fa0 <ip_reass_free_complete_datagram+0x98>
 8017f94:	4b27      	ldr	r3, [pc, #156]	; (8018034 <ip_reass_free_complete_datagram+0x12c>)
 8017f96:	22bc      	movs	r2, #188	; 0xbc
 8017f98:	492a      	ldr	r1, [pc, #168]	; (8018044 <ip_reass_free_complete_datagram+0x13c>)
 8017f9a:	4828      	ldr	r0, [pc, #160]	; (801803c <ip_reass_free_complete_datagram+0x134>)
 8017f9c:	f001 fd2e 	bl	80199fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017fa0:	8bfa      	ldrh	r2, [r7, #30]
 8017fa2:	8a7b      	ldrh	r3, [r7, #18]
 8017fa4:	4413      	add	r3, r2
 8017fa6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017fa8:	69b8      	ldr	r0, [r7, #24]
 8017faa:	f7f6 fb23 	bl	800e5f4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	685b      	ldr	r3, [r3, #4]
 8017fb2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017fb4:	e01f      	b.n	8017ff6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017fb6:	69bb      	ldr	r3, [r7, #24]
 8017fb8:	685b      	ldr	r3, [r3, #4]
 8017fba:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017fbc:	69bb      	ldr	r3, [r7, #24]
 8017fbe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017fc0:	697b      	ldr	r3, [r7, #20]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017fc6:	68f8      	ldr	r0, [r7, #12]
 8017fc8:	f7f6 fba2 	bl	800e710 <pbuf_clen>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017fd0:	8bfa      	ldrh	r2, [r7, #30]
 8017fd2:	8a7b      	ldrh	r3, [r7, #18]
 8017fd4:	4413      	add	r3, r2
 8017fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017fda:	db05      	blt.n	8017fe8 <ip_reass_free_complete_datagram+0xe0>
 8017fdc:	4b15      	ldr	r3, [pc, #84]	; (8018034 <ip_reass_free_complete_datagram+0x12c>)
 8017fde:	22cc      	movs	r2, #204	; 0xcc
 8017fe0:	4918      	ldr	r1, [pc, #96]	; (8018044 <ip_reass_free_complete_datagram+0x13c>)
 8017fe2:	4816      	ldr	r0, [pc, #88]	; (801803c <ip_reass_free_complete_datagram+0x134>)
 8017fe4:	f001 fd0a 	bl	80199fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017fe8:	8bfa      	ldrh	r2, [r7, #30]
 8017fea:	8a7b      	ldrh	r3, [r7, #18]
 8017fec:	4413      	add	r3, r2
 8017fee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017ff0:	68f8      	ldr	r0, [r7, #12]
 8017ff2:	f7f6 faff 	bl	800e5f4 <pbuf_free>
  while (p != NULL) {
 8017ff6:	69bb      	ldr	r3, [r7, #24]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d1dc      	bne.n	8017fb6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017ffc:	6839      	ldr	r1, [r7, #0]
 8017ffe:	6878      	ldr	r0, [r7, #4]
 8018000:	f000 f8c2 	bl	8018188 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018004:	4b10      	ldr	r3, [pc, #64]	; (8018048 <ip_reass_free_complete_datagram+0x140>)
 8018006:	881b      	ldrh	r3, [r3, #0]
 8018008:	8bfa      	ldrh	r2, [r7, #30]
 801800a:	429a      	cmp	r2, r3
 801800c:	d905      	bls.n	801801a <ip_reass_free_complete_datagram+0x112>
 801800e:	4b09      	ldr	r3, [pc, #36]	; (8018034 <ip_reass_free_complete_datagram+0x12c>)
 8018010:	22d2      	movs	r2, #210	; 0xd2
 8018012:	490e      	ldr	r1, [pc, #56]	; (801804c <ip_reass_free_complete_datagram+0x144>)
 8018014:	4809      	ldr	r0, [pc, #36]	; (801803c <ip_reass_free_complete_datagram+0x134>)
 8018016:	f001 fcf1 	bl	80199fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801801a:	4b0b      	ldr	r3, [pc, #44]	; (8018048 <ip_reass_free_complete_datagram+0x140>)
 801801c:	881a      	ldrh	r2, [r3, #0]
 801801e:	8bfb      	ldrh	r3, [r7, #30]
 8018020:	1ad3      	subs	r3, r2, r3
 8018022:	b29a      	uxth	r2, r3
 8018024:	4b08      	ldr	r3, [pc, #32]	; (8018048 <ip_reass_free_complete_datagram+0x140>)
 8018026:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018028:	8bfb      	ldrh	r3, [r7, #30]
}
 801802a:	4618      	mov	r0, r3
 801802c:	3720      	adds	r7, #32
 801802e:	46bd      	mov	sp, r7
 8018030:	bd80      	pop	{r7, pc}
 8018032:	bf00      	nop
 8018034:	0801fee0 	.word	0x0801fee0
 8018038:	0801ff1c 	.word	0x0801ff1c
 801803c:	0801ff28 	.word	0x0801ff28
 8018040:	0801ff50 	.word	0x0801ff50
 8018044:	0801ff64 	.word	0x0801ff64
 8018048:	20004858 	.word	0x20004858
 801804c:	0801ff84 	.word	0x0801ff84

08018050 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b08a      	sub	sp, #40	; 0x28
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801805a:	2300      	movs	r3, #0
 801805c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801805e:	2300      	movs	r3, #0
 8018060:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018062:	2300      	movs	r3, #0
 8018064:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018066:	2300      	movs	r3, #0
 8018068:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801806a:	2300      	movs	r3, #0
 801806c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801806e:	4b28      	ldr	r3, [pc, #160]	; (8018110 <ip_reass_remove_oldest_datagram+0xc0>)
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018074:	e030      	b.n	80180d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018078:	695a      	ldr	r2, [r3, #20]
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	68db      	ldr	r3, [r3, #12]
 801807e:	429a      	cmp	r2, r3
 8018080:	d10c      	bne.n	801809c <ip_reass_remove_oldest_datagram+0x4c>
 8018082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018084:	699a      	ldr	r2, [r3, #24]
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	691b      	ldr	r3, [r3, #16]
 801808a:	429a      	cmp	r2, r3
 801808c:	d106      	bne.n	801809c <ip_reass_remove_oldest_datagram+0x4c>
 801808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018090:	899a      	ldrh	r2, [r3, #12]
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	889b      	ldrh	r3, [r3, #4]
 8018096:	b29b      	uxth	r3, r3
 8018098:	429a      	cmp	r2, r3
 801809a:	d014      	beq.n	80180c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801809c:	693b      	ldr	r3, [r7, #16]
 801809e:	3301      	adds	r3, #1
 80180a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80180a2:	6a3b      	ldr	r3, [r7, #32]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d104      	bne.n	80180b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80180a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80180ac:	69fb      	ldr	r3, [r7, #28]
 80180ae:	61bb      	str	r3, [r7, #24]
 80180b0:	e009      	b.n	80180c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80180b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b4:	7fda      	ldrb	r2, [r3, #31]
 80180b6:	6a3b      	ldr	r3, [r7, #32]
 80180b8:	7fdb      	ldrb	r3, [r3, #31]
 80180ba:	429a      	cmp	r2, r3
 80180bc:	d803      	bhi.n	80180c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80180be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80180c2:	69fb      	ldr	r3, [r7, #28]
 80180c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80180c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d001      	beq.n	80180d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80180ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80180d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80180d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d1cb      	bne.n	8018076 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80180de:	6a3b      	ldr	r3, [r7, #32]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d008      	beq.n	80180f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80180e4:	69b9      	ldr	r1, [r7, #24]
 80180e6:	6a38      	ldr	r0, [r7, #32]
 80180e8:	f7ff ff0e 	bl	8017f08 <ip_reass_free_complete_datagram>
 80180ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80180ee:	697a      	ldr	r2, [r7, #20]
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	4413      	add	r3, r2
 80180f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80180f6:	697a      	ldr	r2, [r7, #20]
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	429a      	cmp	r2, r3
 80180fc:	da02      	bge.n	8018104 <ip_reass_remove_oldest_datagram+0xb4>
 80180fe:	693b      	ldr	r3, [r7, #16]
 8018100:	2b01      	cmp	r3, #1
 8018102:	dcac      	bgt.n	801805e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018104:	697b      	ldr	r3, [r7, #20]
}
 8018106:	4618      	mov	r0, r3
 8018108:	3728      	adds	r7, #40	; 0x28
 801810a:	46bd      	mov	sp, r7
 801810c:	bd80      	pop	{r7, pc}
 801810e:	bf00      	nop
 8018110:	20004854 	.word	0x20004854

08018114 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b084      	sub	sp, #16
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
 801811c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801811e:	2004      	movs	r0, #4
 8018120:	f7f5 fbe8 	bl	800d8f4 <memp_malloc>
 8018124:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d110      	bne.n	801814e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801812c:	6839      	ldr	r1, [r7, #0]
 801812e:	6878      	ldr	r0, [r7, #4]
 8018130:	f7ff ff8e 	bl	8018050 <ip_reass_remove_oldest_datagram>
 8018134:	4602      	mov	r2, r0
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	4293      	cmp	r3, r2
 801813a:	dc03      	bgt.n	8018144 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801813c:	2004      	movs	r0, #4
 801813e:	f7f5 fbd9 	bl	800d8f4 <memp_malloc>
 8018142:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d101      	bne.n	801814e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801814a:	2300      	movs	r3, #0
 801814c:	e016      	b.n	801817c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801814e:	2220      	movs	r2, #32
 8018150:	2100      	movs	r1, #0
 8018152:	68f8      	ldr	r0, [r7, #12]
 8018154:	f000 ff45 	bl	8018fe2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	220f      	movs	r2, #15
 801815c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801815e:	4b09      	ldr	r3, [pc, #36]	; (8018184 <ip_reass_enqueue_new_datagram+0x70>)
 8018160:	681a      	ldr	r2, [r3, #0]
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018166:	4a07      	ldr	r2, [pc, #28]	; (8018184 <ip_reass_enqueue_new_datagram+0x70>)
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	3308      	adds	r3, #8
 8018170:	2214      	movs	r2, #20
 8018172:	6879      	ldr	r1, [r7, #4]
 8018174:	4618      	mov	r0, r3
 8018176:	f000 ff10 	bl	8018f9a <memcpy>
  return ipr;
 801817a:	68fb      	ldr	r3, [r7, #12]
}
 801817c:	4618      	mov	r0, r3
 801817e:	3710      	adds	r7, #16
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}
 8018184:	20004854 	.word	0x20004854

08018188 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b082      	sub	sp, #8
 801818c:	af00      	add	r7, sp, #0
 801818e:	6078      	str	r0, [r7, #4]
 8018190:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018192:	4b10      	ldr	r3, [pc, #64]	; (80181d4 <ip_reass_dequeue_datagram+0x4c>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	687a      	ldr	r2, [r7, #4]
 8018198:	429a      	cmp	r2, r3
 801819a:	d104      	bne.n	80181a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	4a0c      	ldr	r2, [pc, #48]	; (80181d4 <ip_reass_dequeue_datagram+0x4c>)
 80181a2:	6013      	str	r3, [r2, #0]
 80181a4:	e00d      	b.n	80181c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d106      	bne.n	80181ba <ip_reass_dequeue_datagram+0x32>
 80181ac:	4b0a      	ldr	r3, [pc, #40]	; (80181d8 <ip_reass_dequeue_datagram+0x50>)
 80181ae:	f240 1245 	movw	r2, #325	; 0x145
 80181b2:	490a      	ldr	r1, [pc, #40]	; (80181dc <ip_reass_dequeue_datagram+0x54>)
 80181b4:	480a      	ldr	r0, [pc, #40]	; (80181e0 <ip_reass_dequeue_datagram+0x58>)
 80181b6:	f001 fc21 	bl	80199fc <iprintf>
    prev->next = ipr->next;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	681a      	ldr	r2, [r3, #0]
 80181be:	683b      	ldr	r3, [r7, #0]
 80181c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80181c2:	6879      	ldr	r1, [r7, #4]
 80181c4:	2004      	movs	r0, #4
 80181c6:	f7f5 fbe7 	bl	800d998 <memp_free>
}
 80181ca:	bf00      	nop
 80181cc:	3708      	adds	r7, #8
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}
 80181d2:	bf00      	nop
 80181d4:	20004854 	.word	0x20004854
 80181d8:	0801fee0 	.word	0x0801fee0
 80181dc:	0801ffa8 	.word	0x0801ffa8
 80181e0:	0801ff28 	.word	0x0801ff28

080181e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b08c      	sub	sp, #48	; 0x30
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	60f8      	str	r0, [r7, #12]
 80181ec:	60b9      	str	r1, [r7, #8]
 80181ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80181f0:	2300      	movs	r3, #0
 80181f2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80181f4:	2301      	movs	r3, #1
 80181f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80181f8:	68bb      	ldr	r3, [r7, #8]
 80181fa:	685b      	ldr	r3, [r3, #4]
 80181fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80181fe:	69fb      	ldr	r3, [r7, #28]
 8018200:	885b      	ldrh	r3, [r3, #2]
 8018202:	b29b      	uxth	r3, r3
 8018204:	4618      	mov	r0, r3
 8018206:	f7f4 febf 	bl	800cf88 <lwip_htons>
 801820a:	4603      	mov	r3, r0
 801820c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801820e:	69fb      	ldr	r3, [r7, #28]
 8018210:	781b      	ldrb	r3, [r3, #0]
 8018212:	f003 030f 	and.w	r3, r3, #15
 8018216:	b2db      	uxtb	r3, r3
 8018218:	009b      	lsls	r3, r3, #2
 801821a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801821c:	7e7b      	ldrb	r3, [r7, #25]
 801821e:	b29b      	uxth	r3, r3
 8018220:	8b7a      	ldrh	r2, [r7, #26]
 8018222:	429a      	cmp	r2, r3
 8018224:	d202      	bcs.n	801822c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018226:	f04f 33ff 	mov.w	r3, #4294967295
 801822a:	e135      	b.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801822c:	7e7b      	ldrb	r3, [r7, #25]
 801822e:	b29b      	uxth	r3, r3
 8018230:	8b7a      	ldrh	r2, [r7, #26]
 8018232:	1ad3      	subs	r3, r2, r3
 8018234:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018236:	69fb      	ldr	r3, [r7, #28]
 8018238:	88db      	ldrh	r3, [r3, #6]
 801823a:	b29b      	uxth	r3, r3
 801823c:	4618      	mov	r0, r3
 801823e:	f7f4 fea3 	bl	800cf88 <lwip_htons>
 8018242:	4603      	mov	r3, r0
 8018244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018248:	b29b      	uxth	r3, r3
 801824a:	00db      	lsls	r3, r3, #3
 801824c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801824e:	68bb      	ldr	r3, [r7, #8]
 8018250:	685b      	ldr	r3, [r3, #4]
 8018252:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018256:	2200      	movs	r2, #0
 8018258:	701a      	strb	r2, [r3, #0]
 801825a:	2200      	movs	r2, #0
 801825c:	705a      	strb	r2, [r3, #1]
 801825e:	2200      	movs	r2, #0
 8018260:	709a      	strb	r2, [r3, #2]
 8018262:	2200      	movs	r2, #0
 8018264:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018268:	8afa      	ldrh	r2, [r7, #22]
 801826a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801826c:	8afa      	ldrh	r2, [r7, #22]
 801826e:	8b7b      	ldrh	r3, [r7, #26]
 8018270:	4413      	add	r3, r2
 8018272:	b29a      	uxth	r2, r3
 8018274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018276:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801827a:	88db      	ldrh	r3, [r3, #6]
 801827c:	b29b      	uxth	r3, r3
 801827e:	8afa      	ldrh	r2, [r7, #22]
 8018280:	429a      	cmp	r2, r3
 8018282:	d902      	bls.n	801828a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018284:	f04f 33ff 	mov.w	r3, #4294967295
 8018288:	e106      	b.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	685b      	ldr	r3, [r3, #4]
 801828e:	627b      	str	r3, [r7, #36]	; 0x24
 8018290:	e068      	b.n	8018364 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018294:	685b      	ldr	r3, [r3, #4]
 8018296:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801829a:	889b      	ldrh	r3, [r3, #4]
 801829c:	b29a      	uxth	r2, r3
 801829e:	693b      	ldr	r3, [r7, #16]
 80182a0:	889b      	ldrh	r3, [r3, #4]
 80182a2:	b29b      	uxth	r3, r3
 80182a4:	429a      	cmp	r2, r3
 80182a6:	d235      	bcs.n	8018314 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80182a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80182ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80182ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d020      	beq.n	80182f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80182b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182b6:	889b      	ldrh	r3, [r3, #4]
 80182b8:	b29a      	uxth	r2, r3
 80182ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182bc:	88db      	ldrh	r3, [r3, #6]
 80182be:	b29b      	uxth	r3, r3
 80182c0:	429a      	cmp	r2, r3
 80182c2:	d307      	bcc.n	80182d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80182c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182c6:	88db      	ldrh	r3, [r3, #6]
 80182c8:	b29a      	uxth	r2, r3
 80182ca:	693b      	ldr	r3, [r7, #16]
 80182cc:	889b      	ldrh	r3, [r3, #4]
 80182ce:	b29b      	uxth	r3, r3
 80182d0:	429a      	cmp	r2, r3
 80182d2:	d902      	bls.n	80182da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80182d4:	f04f 33ff 	mov.w	r3, #4294967295
 80182d8:	e0de      	b.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80182da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182dc:	68ba      	ldr	r2, [r7, #8]
 80182de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80182e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182e2:	88db      	ldrh	r3, [r3, #6]
 80182e4:	b29a      	uxth	r2, r3
 80182e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182e8:	889b      	ldrh	r3, [r3, #4]
 80182ea:	b29b      	uxth	r3, r3
 80182ec:	429a      	cmp	r2, r3
 80182ee:	d03d      	beq.n	801836c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80182f0:	2300      	movs	r3, #0
 80182f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80182f4:	e03a      	b.n	801836c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80182f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182f8:	88db      	ldrh	r3, [r3, #6]
 80182fa:	b29a      	uxth	r2, r3
 80182fc:	693b      	ldr	r3, [r7, #16]
 80182fe:	889b      	ldrh	r3, [r3, #4]
 8018300:	b29b      	uxth	r3, r3
 8018302:	429a      	cmp	r2, r3
 8018304:	d902      	bls.n	801830c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018306:	f04f 33ff 	mov.w	r3, #4294967295
 801830a:	e0c5      	b.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	68ba      	ldr	r2, [r7, #8]
 8018310:	605a      	str	r2, [r3, #4]
      break;
 8018312:	e02b      	b.n	801836c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018316:	889b      	ldrh	r3, [r3, #4]
 8018318:	b29a      	uxth	r2, r3
 801831a:	693b      	ldr	r3, [r7, #16]
 801831c:	889b      	ldrh	r3, [r3, #4]
 801831e:	b29b      	uxth	r3, r3
 8018320:	429a      	cmp	r2, r3
 8018322:	d102      	bne.n	801832a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018324:	f04f 33ff 	mov.w	r3, #4294967295
 8018328:	e0b6      	b.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801832c:	889b      	ldrh	r3, [r3, #4]
 801832e:	b29a      	uxth	r2, r3
 8018330:	693b      	ldr	r3, [r7, #16]
 8018332:	88db      	ldrh	r3, [r3, #6]
 8018334:	b29b      	uxth	r3, r3
 8018336:	429a      	cmp	r2, r3
 8018338:	d202      	bcs.n	8018340 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801833a:	f04f 33ff 	mov.w	r3, #4294967295
 801833e:	e0ab      	b.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018342:	2b00      	cmp	r3, #0
 8018344:	d009      	beq.n	801835a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018348:	88db      	ldrh	r3, [r3, #6]
 801834a:	b29a      	uxth	r2, r3
 801834c:	693b      	ldr	r3, [r7, #16]
 801834e:	889b      	ldrh	r3, [r3, #4]
 8018350:	b29b      	uxth	r3, r3
 8018352:	429a      	cmp	r2, r3
 8018354:	d001      	beq.n	801835a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018356:	2300      	movs	r3, #0
 8018358:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801835a:	693b      	ldr	r3, [r7, #16]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018360:	693b      	ldr	r3, [r7, #16]
 8018362:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018366:	2b00      	cmp	r3, #0
 8018368:	d193      	bne.n	8018292 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801836a:	e000      	b.n	801836e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801836c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018370:	2b00      	cmp	r3, #0
 8018372:	d12d      	bne.n	80183d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018376:	2b00      	cmp	r3, #0
 8018378:	d01c      	beq.n	80183b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801837c:	88db      	ldrh	r3, [r3, #6]
 801837e:	b29a      	uxth	r2, r3
 8018380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018382:	889b      	ldrh	r3, [r3, #4]
 8018384:	b29b      	uxth	r3, r3
 8018386:	429a      	cmp	r2, r3
 8018388:	d906      	bls.n	8018398 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801838a:	4b45      	ldr	r3, [pc, #276]	; (80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801838c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018390:	4944      	ldr	r1, [pc, #272]	; (80184a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018392:	4845      	ldr	r0, [pc, #276]	; (80184a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018394:	f001 fb32 	bl	80199fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801839a:	68ba      	ldr	r2, [r7, #8]
 801839c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183a0:	88db      	ldrh	r3, [r3, #6]
 80183a2:	b29a      	uxth	r2, r3
 80183a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183a6:	889b      	ldrh	r3, [r3, #4]
 80183a8:	b29b      	uxth	r3, r3
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d010      	beq.n	80183d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80183ae:	2300      	movs	r3, #0
 80183b0:	623b      	str	r3, [r7, #32]
 80183b2:	e00d      	b.n	80183d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	685b      	ldr	r3, [r3, #4]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d006      	beq.n	80183ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80183bc:	4b38      	ldr	r3, [pc, #224]	; (80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80183be:	f240 12bf 	movw	r2, #447	; 0x1bf
 80183c2:	493a      	ldr	r1, [pc, #232]	; (80184ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80183c4:	4838      	ldr	r0, [pc, #224]	; (80184a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80183c6:	f001 fb19 	bl	80199fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	68ba      	ldr	r2, [r7, #8]
 80183ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d105      	bne.n	80183e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	7f9b      	ldrb	r3, [r3, #30]
 80183da:	f003 0301 	and.w	r3, r3, #1
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d059      	beq.n	8018496 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80183e2:	6a3b      	ldr	r3, [r7, #32]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d04f      	beq.n	8018488 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	685b      	ldr	r3, [r3, #4]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d006      	beq.n	80183fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	685b      	ldr	r3, [r3, #4]
 80183f4:	685b      	ldr	r3, [r3, #4]
 80183f6:	889b      	ldrh	r3, [r3, #4]
 80183f8:	b29b      	uxth	r3, r3
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d002      	beq.n	8018404 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80183fe:	2300      	movs	r3, #0
 8018400:	623b      	str	r3, [r7, #32]
 8018402:	e041      	b.n	8018488 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018406:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801840e:	e012      	b.n	8018436 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018412:	685b      	ldr	r3, [r3, #4]
 8018414:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018418:	88db      	ldrh	r3, [r3, #6]
 801841a:	b29a      	uxth	r2, r3
 801841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841e:	889b      	ldrh	r3, [r3, #4]
 8018420:	b29b      	uxth	r3, r3
 8018422:	429a      	cmp	r2, r3
 8018424:	d002      	beq.n	801842c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018426:	2300      	movs	r3, #0
 8018428:	623b      	str	r3, [r7, #32]
            break;
 801842a:	e007      	b.n	801843c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801842e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018438:	2b00      	cmp	r3, #0
 801843a:	d1e9      	bne.n	8018410 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801843c:	6a3b      	ldr	r3, [r7, #32]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d022      	beq.n	8018488 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	685b      	ldr	r3, [r3, #4]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d106      	bne.n	8018458 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801844a:	4b15      	ldr	r3, [pc, #84]	; (80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801844c:	f240 12df 	movw	r2, #479	; 0x1df
 8018450:	4917      	ldr	r1, [pc, #92]	; (80184b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018452:	4815      	ldr	r0, [pc, #84]	; (80184a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018454:	f001 fad2 	bl	80199fc <iprintf>
          LWIP_ASSERT("sanity check",
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	685b      	ldr	r3, [r3, #4]
 801845c:	685b      	ldr	r3, [r3, #4]
 801845e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018460:	429a      	cmp	r2, r3
 8018462:	d106      	bne.n	8018472 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018464:	4b0e      	ldr	r3, [pc, #56]	; (80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018466:	f240 12e1 	movw	r2, #481	; 0x1e1
 801846a:	4911      	ldr	r1, [pc, #68]	; (80184b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801846c:	480e      	ldr	r0, [pc, #56]	; (80184a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801846e:	f001 fac5 	bl	80199fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d006      	beq.n	8018488 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801847a:	4b09      	ldr	r3, [pc, #36]	; (80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801847c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8018480:	490c      	ldr	r1, [pc, #48]	; (80184b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018482:	4809      	ldr	r0, [pc, #36]	; (80184a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018484:	f001 faba 	bl	80199fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018488:	6a3b      	ldr	r3, [r7, #32]
 801848a:	2b00      	cmp	r3, #0
 801848c:	bf14      	ite	ne
 801848e:	2301      	movne	r3, #1
 8018490:	2300      	moveq	r3, #0
 8018492:	b2db      	uxtb	r3, r3
 8018494:	e000      	b.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018496:	2300      	movs	r3, #0
}
 8018498:	4618      	mov	r0, r3
 801849a:	3730      	adds	r7, #48	; 0x30
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}
 80184a0:	0801fee0 	.word	0x0801fee0
 80184a4:	0801ffc4 	.word	0x0801ffc4
 80184a8:	0801ff28 	.word	0x0801ff28
 80184ac:	0801ffe4 	.word	0x0801ffe4
 80184b0:	0802001c 	.word	0x0802001c
 80184b4:	0802002c 	.word	0x0802002c

080184b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b08e      	sub	sp, #56	; 0x38
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	685b      	ldr	r3, [r3, #4]
 80184c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80184c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184c8:	781b      	ldrb	r3, [r3, #0]
 80184ca:	f003 030f 	and.w	r3, r3, #15
 80184ce:	b2db      	uxtb	r3, r3
 80184d0:	009b      	lsls	r3, r3, #2
 80184d2:	b2db      	uxtb	r3, r3
 80184d4:	2b14      	cmp	r3, #20
 80184d6:	f040 8167 	bne.w	80187a8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80184da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184dc:	88db      	ldrh	r3, [r3, #6]
 80184de:	b29b      	uxth	r3, r3
 80184e0:	4618      	mov	r0, r3
 80184e2:	f7f4 fd51 	bl	800cf88 <lwip_htons>
 80184e6:	4603      	mov	r3, r0
 80184e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80184ec:	b29b      	uxth	r3, r3
 80184ee:	00db      	lsls	r3, r3, #3
 80184f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80184f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184f4:	885b      	ldrh	r3, [r3, #2]
 80184f6:	b29b      	uxth	r3, r3
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7f4 fd45 	bl	800cf88 <lwip_htons>
 80184fe:	4603      	mov	r3, r0
 8018500:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018504:	781b      	ldrb	r3, [r3, #0]
 8018506:	f003 030f 	and.w	r3, r3, #15
 801850a:	b2db      	uxtb	r3, r3
 801850c:	009b      	lsls	r3, r3, #2
 801850e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018516:	b29b      	uxth	r3, r3
 8018518:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801851a:	429a      	cmp	r2, r3
 801851c:	f0c0 8146 	bcc.w	80187ac <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018524:	b29b      	uxth	r3, r3
 8018526:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018528:	1ad3      	subs	r3, r2, r3
 801852a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801852c:	6878      	ldr	r0, [r7, #4]
 801852e:	f7f6 f8ef 	bl	800e710 <pbuf_clen>
 8018532:	4603      	mov	r3, r0
 8018534:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018536:	4ba3      	ldr	r3, [pc, #652]	; (80187c4 <ip4_reass+0x30c>)
 8018538:	881b      	ldrh	r3, [r3, #0]
 801853a:	461a      	mov	r2, r3
 801853c:	8c3b      	ldrh	r3, [r7, #32]
 801853e:	4413      	add	r3, r2
 8018540:	2b0a      	cmp	r3, #10
 8018542:	dd10      	ble.n	8018566 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018544:	8c3b      	ldrh	r3, [r7, #32]
 8018546:	4619      	mov	r1, r3
 8018548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801854a:	f7ff fd81 	bl	8018050 <ip_reass_remove_oldest_datagram>
 801854e:	4603      	mov	r3, r0
 8018550:	2b00      	cmp	r3, #0
 8018552:	f000 812d 	beq.w	80187b0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018556:	4b9b      	ldr	r3, [pc, #620]	; (80187c4 <ip4_reass+0x30c>)
 8018558:	881b      	ldrh	r3, [r3, #0]
 801855a:	461a      	mov	r2, r3
 801855c:	8c3b      	ldrh	r3, [r7, #32]
 801855e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018560:	2b0a      	cmp	r3, #10
 8018562:	f300 8125 	bgt.w	80187b0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018566:	4b98      	ldr	r3, [pc, #608]	; (80187c8 <ip4_reass+0x310>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	633b      	str	r3, [r7, #48]	; 0x30
 801856c:	e015      	b.n	801859a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018570:	695a      	ldr	r2, [r3, #20]
 8018572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018574:	68db      	ldr	r3, [r3, #12]
 8018576:	429a      	cmp	r2, r3
 8018578:	d10c      	bne.n	8018594 <ip4_reass+0xdc>
 801857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801857c:	699a      	ldr	r2, [r3, #24]
 801857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018580:	691b      	ldr	r3, [r3, #16]
 8018582:	429a      	cmp	r2, r3
 8018584:	d106      	bne.n	8018594 <ip4_reass+0xdc>
 8018586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018588:	899a      	ldrh	r2, [r3, #12]
 801858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801858c:	889b      	ldrh	r3, [r3, #4]
 801858e:	b29b      	uxth	r3, r3
 8018590:	429a      	cmp	r2, r3
 8018592:	d006      	beq.n	80185a2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	633b      	str	r3, [r7, #48]	; 0x30
 801859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801859c:	2b00      	cmp	r3, #0
 801859e:	d1e6      	bne.n	801856e <ip4_reass+0xb6>
 80185a0:	e000      	b.n	80185a4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80185a2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80185a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d109      	bne.n	80185be <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80185aa:	8c3b      	ldrh	r3, [r7, #32]
 80185ac:	4619      	mov	r1, r3
 80185ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185b0:	f7ff fdb0 	bl	8018114 <ip_reass_enqueue_new_datagram>
 80185b4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80185b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d11c      	bne.n	80185f6 <ip4_reass+0x13e>
      goto nullreturn;
 80185bc:	e0f9      	b.n	80187b2 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80185be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185c0:	88db      	ldrh	r3, [r3, #6]
 80185c2:	b29b      	uxth	r3, r3
 80185c4:	4618      	mov	r0, r3
 80185c6:	f7f4 fcdf 	bl	800cf88 <lwip_htons>
 80185ca:	4603      	mov	r3, r0
 80185cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d110      	bne.n	80185f6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80185d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d6:	89db      	ldrh	r3, [r3, #14]
 80185d8:	4618      	mov	r0, r3
 80185da:	f7f4 fcd5 	bl	800cf88 <lwip_htons>
 80185de:	4603      	mov	r3, r0
 80185e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d006      	beq.n	80185f6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80185e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ea:	3308      	adds	r3, #8
 80185ec:	2214      	movs	r2, #20
 80185ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80185f0:	4618      	mov	r0, r3
 80185f2:	f000 fcd2 	bl	8018f9a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80185f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185f8:	88db      	ldrh	r3, [r3, #6]
 80185fa:	b29b      	uxth	r3, r3
 80185fc:	f003 0320 	and.w	r3, r3, #32
 8018600:	2b00      	cmp	r3, #0
 8018602:	bf0c      	ite	eq
 8018604:	2301      	moveq	r3, #1
 8018606:	2300      	movne	r3, #0
 8018608:	b2db      	uxtb	r3, r3
 801860a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801860c:	69fb      	ldr	r3, [r7, #28]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d00e      	beq.n	8018630 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018612:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018614:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018616:	4413      	add	r3, r2
 8018618:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801861a:	8b7a      	ldrh	r2, [r7, #26]
 801861c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801861e:	429a      	cmp	r2, r3
 8018620:	f0c0 80a0 	bcc.w	8018764 <ip4_reass+0x2ac>
 8018624:	8b7b      	ldrh	r3, [r7, #26]
 8018626:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801862a:	4293      	cmp	r3, r2
 801862c:	f200 809a 	bhi.w	8018764 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018630:	69fa      	ldr	r2, [r7, #28]
 8018632:	6879      	ldr	r1, [r7, #4]
 8018634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018636:	f7ff fdd5 	bl	80181e4 <ip_reass_chain_frag_into_datagram_and_validate>
 801863a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801863c:	697b      	ldr	r3, [r7, #20]
 801863e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018642:	f000 8091 	beq.w	8018768 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018646:	4b5f      	ldr	r3, [pc, #380]	; (80187c4 <ip4_reass+0x30c>)
 8018648:	881a      	ldrh	r2, [r3, #0]
 801864a:	8c3b      	ldrh	r3, [r7, #32]
 801864c:	4413      	add	r3, r2
 801864e:	b29a      	uxth	r2, r3
 8018650:	4b5c      	ldr	r3, [pc, #368]	; (80187c4 <ip4_reass+0x30c>)
 8018652:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018654:	69fb      	ldr	r3, [r7, #28]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d00d      	beq.n	8018676 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801865a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801865c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801865e:	4413      	add	r3, r2
 8018660:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018664:	8a7a      	ldrh	r2, [r7, #18]
 8018666:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801866a:	7f9b      	ldrb	r3, [r3, #30]
 801866c:	f043 0301 	orr.w	r3, r3, #1
 8018670:	b2da      	uxtb	r2, r3
 8018672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018674:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	2b01      	cmp	r3, #1
 801867a:	d171      	bne.n	8018760 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801867e:	8b9b      	ldrh	r3, [r3, #28]
 8018680:	3314      	adds	r3, #20
 8018682:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018686:	685b      	ldr	r3, [r3, #4]
 8018688:	685b      	ldr	r3, [r3, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018690:	685b      	ldr	r3, [r3, #4]
 8018692:	685b      	ldr	r3, [r3, #4]
 8018694:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018698:	3308      	adds	r3, #8
 801869a:	2214      	movs	r2, #20
 801869c:	4619      	mov	r1, r3
 801869e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80186a0:	f000 fc7b 	bl	8018f9a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80186a4:	8a3b      	ldrh	r3, [r7, #16]
 80186a6:	4618      	mov	r0, r3
 80186a8:	f7f4 fc6e 	bl	800cf88 <lwip_htons>
 80186ac:	4603      	mov	r3, r0
 80186ae:	461a      	mov	r2, r3
 80186b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80186b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b6:	2200      	movs	r2, #0
 80186b8:	719a      	strb	r2, [r3, #6]
 80186ba:	2200      	movs	r2, #0
 80186bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80186be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186c0:	2200      	movs	r2, #0
 80186c2:	729a      	strb	r2, [r3, #10]
 80186c4:	2200      	movs	r2, #0
 80186c6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80186c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ca:	685b      	ldr	r3, [r3, #4]
 80186cc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80186ce:	e00d      	b.n	80186ec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80186d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186d2:	685b      	ldr	r3, [r3, #4]
 80186d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80186d6:	2114      	movs	r1, #20
 80186d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80186da:	f7f5 ff05 	bl	800e4e8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80186de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80186e0:	6878      	ldr	r0, [r7, #4]
 80186e2:	f7f6 f855 	bl	800e790 <pbuf_cat>
      r = iprh->next_pbuf;
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80186ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d1ee      	bne.n	80186d0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80186f2:	4b35      	ldr	r3, [pc, #212]	; (80187c8 <ip4_reass+0x310>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80186f8:	429a      	cmp	r2, r3
 80186fa:	d102      	bne.n	8018702 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80186fc:	2300      	movs	r3, #0
 80186fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018700:	e010      	b.n	8018724 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018702:	4b31      	ldr	r3, [pc, #196]	; (80187c8 <ip4_reass+0x310>)
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018708:	e007      	b.n	801871a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018710:	429a      	cmp	r2, r3
 8018712:	d006      	beq.n	8018722 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	62fb      	str	r3, [r7, #44]	; 0x2c
 801871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801871c:	2b00      	cmp	r3, #0
 801871e:	d1f4      	bne.n	801870a <ip4_reass+0x252>
 8018720:	e000      	b.n	8018724 <ip4_reass+0x26c>
          break;
 8018722:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018728:	f7ff fd2e 	bl	8018188 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801872c:	6878      	ldr	r0, [r7, #4]
 801872e:	f7f5 ffef 	bl	800e710 <pbuf_clen>
 8018732:	4603      	mov	r3, r0
 8018734:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018736:	4b23      	ldr	r3, [pc, #140]	; (80187c4 <ip4_reass+0x30c>)
 8018738:	881b      	ldrh	r3, [r3, #0]
 801873a:	8c3a      	ldrh	r2, [r7, #32]
 801873c:	429a      	cmp	r2, r3
 801873e:	d906      	bls.n	801874e <ip4_reass+0x296>
 8018740:	4b22      	ldr	r3, [pc, #136]	; (80187cc <ip4_reass+0x314>)
 8018742:	f240 229b 	movw	r2, #667	; 0x29b
 8018746:	4922      	ldr	r1, [pc, #136]	; (80187d0 <ip4_reass+0x318>)
 8018748:	4822      	ldr	r0, [pc, #136]	; (80187d4 <ip4_reass+0x31c>)
 801874a:	f001 f957 	bl	80199fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801874e:	4b1d      	ldr	r3, [pc, #116]	; (80187c4 <ip4_reass+0x30c>)
 8018750:	881a      	ldrh	r2, [r3, #0]
 8018752:	8c3b      	ldrh	r3, [r7, #32]
 8018754:	1ad3      	subs	r3, r2, r3
 8018756:	b29a      	uxth	r2, r3
 8018758:	4b1a      	ldr	r3, [pc, #104]	; (80187c4 <ip4_reass+0x30c>)
 801875a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	e02c      	b.n	80187ba <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018760:	2300      	movs	r3, #0
 8018762:	e02a      	b.n	80187ba <ip4_reass+0x302>

nullreturn_ipr:
 8018764:	bf00      	nop
 8018766:	e000      	b.n	801876a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018768:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801876c:	2b00      	cmp	r3, #0
 801876e:	d106      	bne.n	801877e <ip4_reass+0x2c6>
 8018770:	4b16      	ldr	r3, [pc, #88]	; (80187cc <ip4_reass+0x314>)
 8018772:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018776:	4918      	ldr	r1, [pc, #96]	; (80187d8 <ip4_reass+0x320>)
 8018778:	4816      	ldr	r0, [pc, #88]	; (80187d4 <ip4_reass+0x31c>)
 801877a:	f001 f93f 	bl	80199fc <iprintf>
  if (ipr->p == NULL) {
 801877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018780:	685b      	ldr	r3, [r3, #4]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d114      	bne.n	80187b0 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018786:	4b10      	ldr	r3, [pc, #64]	; (80187c8 <ip4_reass+0x310>)
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801878c:	429a      	cmp	r2, r3
 801878e:	d006      	beq.n	801879e <ip4_reass+0x2e6>
 8018790:	4b0e      	ldr	r3, [pc, #56]	; (80187cc <ip4_reass+0x314>)
 8018792:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018796:	4911      	ldr	r1, [pc, #68]	; (80187dc <ip4_reass+0x324>)
 8018798:	480e      	ldr	r0, [pc, #56]	; (80187d4 <ip4_reass+0x31c>)
 801879a:	f001 f92f 	bl	80199fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801879e:	2100      	movs	r1, #0
 80187a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80187a2:	f7ff fcf1 	bl	8018188 <ip_reass_dequeue_datagram>
 80187a6:	e004      	b.n	80187b2 <ip4_reass+0x2fa>
    goto nullreturn;
 80187a8:	bf00      	nop
 80187aa:	e002      	b.n	80187b2 <ip4_reass+0x2fa>
    goto nullreturn;
 80187ac:	bf00      	nop
 80187ae:	e000      	b.n	80187b2 <ip4_reass+0x2fa>
  }

nullreturn:
 80187b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f7f5 ff1e 	bl	800e5f4 <pbuf_free>
  return NULL;
 80187b8:	2300      	movs	r3, #0
}
 80187ba:	4618      	mov	r0, r3
 80187bc:	3738      	adds	r7, #56	; 0x38
 80187be:	46bd      	mov	sp, r7
 80187c0:	bd80      	pop	{r7, pc}
 80187c2:	bf00      	nop
 80187c4:	20004858 	.word	0x20004858
 80187c8:	20004854 	.word	0x20004854
 80187cc:	0801fee0 	.word	0x0801fee0
 80187d0:	08020050 	.word	0x08020050
 80187d4:	0801ff28 	.word	0x0801ff28
 80187d8:	0802006c 	.word	0x0802006c
 80187dc:	08020078 	.word	0x08020078

080187e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80187e4:	2005      	movs	r0, #5
 80187e6:	f7f5 f885 	bl	800d8f4 <memp_malloc>
 80187ea:	4603      	mov	r3, r0
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	bd80      	pop	{r7, pc}

080187f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b082      	sub	sp, #8
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d106      	bne.n	801880c <ip_frag_free_pbuf_custom_ref+0x1c>
 80187fe:	4b07      	ldr	r3, [pc, #28]	; (801881c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018800:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018804:	4906      	ldr	r1, [pc, #24]	; (8018820 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018806:	4807      	ldr	r0, [pc, #28]	; (8018824 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018808:	f001 f8f8 	bl	80199fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801880c:	6879      	ldr	r1, [r7, #4]
 801880e:	2005      	movs	r0, #5
 8018810:	f7f5 f8c2 	bl	800d998 <memp_free>
}
 8018814:	bf00      	nop
 8018816:	3708      	adds	r7, #8
 8018818:	46bd      	mov	sp, r7
 801881a:	bd80      	pop	{r7, pc}
 801881c:	0801fee0 	.word	0x0801fee0
 8018820:	08020098 	.word	0x08020098
 8018824:	0801ff28 	.word	0x0801ff28

08018828 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b084      	sub	sp, #16
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d106      	bne.n	8018848 <ipfrag_free_pbuf_custom+0x20>
 801883a:	4b11      	ldr	r3, [pc, #68]	; (8018880 <ipfrag_free_pbuf_custom+0x58>)
 801883c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018840:	4910      	ldr	r1, [pc, #64]	; (8018884 <ipfrag_free_pbuf_custom+0x5c>)
 8018842:	4811      	ldr	r0, [pc, #68]	; (8018888 <ipfrag_free_pbuf_custom+0x60>)
 8018844:	f001 f8da 	bl	80199fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018848:	68fa      	ldr	r2, [r7, #12]
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	429a      	cmp	r2, r3
 801884e:	d006      	beq.n	801885e <ipfrag_free_pbuf_custom+0x36>
 8018850:	4b0b      	ldr	r3, [pc, #44]	; (8018880 <ipfrag_free_pbuf_custom+0x58>)
 8018852:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018856:	490d      	ldr	r1, [pc, #52]	; (801888c <ipfrag_free_pbuf_custom+0x64>)
 8018858:	480b      	ldr	r0, [pc, #44]	; (8018888 <ipfrag_free_pbuf_custom+0x60>)
 801885a:	f001 f8cf 	bl	80199fc <iprintf>
  if (pcr->original != NULL) {
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	695b      	ldr	r3, [r3, #20]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d004      	beq.n	8018870 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	695b      	ldr	r3, [r3, #20]
 801886a:	4618      	mov	r0, r3
 801886c:	f7f5 fec2 	bl	800e5f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018870:	68f8      	ldr	r0, [r7, #12]
 8018872:	f7ff ffbd 	bl	80187f0 <ip_frag_free_pbuf_custom_ref>
}
 8018876:	bf00      	nop
 8018878:	3710      	adds	r7, #16
 801887a:	46bd      	mov	sp, r7
 801887c:	bd80      	pop	{r7, pc}
 801887e:	bf00      	nop
 8018880:	0801fee0 	.word	0x0801fee0
 8018884:	080200a4 	.word	0x080200a4
 8018888:	0801ff28 	.word	0x0801ff28
 801888c:	080200b0 	.word	0x080200b0

08018890 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b094      	sub	sp, #80	; 0x50
 8018894:	af02      	add	r7, sp, #8
 8018896:	60f8      	str	r0, [r7, #12]
 8018898:	60b9      	str	r1, [r7, #8]
 801889a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801889c:	2300      	movs	r3, #0
 801889e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80188a2:	68bb      	ldr	r3, [r7, #8]
 80188a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80188a6:	3b14      	subs	r3, #20
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	da00      	bge.n	80188ae <ip4_frag+0x1e>
 80188ac:	3307      	adds	r3, #7
 80188ae:	10db      	asrs	r3, r3, #3
 80188b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80188b2:	2314      	movs	r3, #20
 80188b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	685b      	ldr	r3, [r3, #4]
 80188ba:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80188bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188be:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80188c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	f003 030f 	and.w	r3, r3, #15
 80188c8:	b2db      	uxtb	r3, r3
 80188ca:	009b      	lsls	r3, r3, #2
 80188cc:	b2db      	uxtb	r3, r3
 80188ce:	2b14      	cmp	r3, #20
 80188d0:	d002      	beq.n	80188d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80188d2:	f06f 0305 	mvn.w	r3, #5
 80188d6:	e10f      	b.n	8018af8 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	895b      	ldrh	r3, [r3, #10]
 80188dc:	2b13      	cmp	r3, #19
 80188de:	d809      	bhi.n	80188f4 <ip4_frag+0x64>
 80188e0:	4b87      	ldr	r3, [pc, #540]	; (8018b00 <ip4_frag+0x270>)
 80188e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80188e6:	4987      	ldr	r1, [pc, #540]	; (8018b04 <ip4_frag+0x274>)
 80188e8:	4887      	ldr	r0, [pc, #540]	; (8018b08 <ip4_frag+0x278>)
 80188ea:	f001 f887 	bl	80199fc <iprintf>
 80188ee:	f06f 0305 	mvn.w	r3, #5
 80188f2:	e101      	b.n	8018af8 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80188f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188f6:	88db      	ldrh	r3, [r3, #6]
 80188f8:	b29b      	uxth	r3, r3
 80188fa:	4618      	mov	r0, r3
 80188fc:	f7f4 fb44 	bl	800cf88 <lwip_htons>
 8018900:	4603      	mov	r3, r0
 8018902:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018904:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018906:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801890a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801890e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018914:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	891b      	ldrh	r3, [r3, #8]
 801891a:	3b14      	subs	r3, #20
 801891c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018920:	e0e0      	b.n	8018ae4 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018922:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018924:	00db      	lsls	r3, r3, #3
 8018926:	b29b      	uxth	r3, r3
 8018928:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801892c:	4293      	cmp	r3, r2
 801892e:	bf28      	it	cs
 8018930:	4613      	movcs	r3, r2
 8018932:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018934:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018938:	2114      	movs	r1, #20
 801893a:	200e      	movs	r0, #14
 801893c:	f7f5 fb7a 	bl	800e034 <pbuf_alloc>
 8018940:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018944:	2b00      	cmp	r3, #0
 8018946:	f000 80d4 	beq.w	8018af2 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801894c:	895b      	ldrh	r3, [r3, #10]
 801894e:	2b13      	cmp	r3, #19
 8018950:	d806      	bhi.n	8018960 <ip4_frag+0xd0>
 8018952:	4b6b      	ldr	r3, [pc, #428]	; (8018b00 <ip4_frag+0x270>)
 8018954:	f240 3225 	movw	r2, #805	; 0x325
 8018958:	496c      	ldr	r1, [pc, #432]	; (8018b0c <ip4_frag+0x27c>)
 801895a:	486b      	ldr	r0, [pc, #428]	; (8018b08 <ip4_frag+0x278>)
 801895c:	f001 f84e 	bl	80199fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018962:	685b      	ldr	r3, [r3, #4]
 8018964:	2214      	movs	r2, #20
 8018966:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018968:	4618      	mov	r0, r3
 801896a:	f000 fb16 	bl	8018f9a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018970:	685b      	ldr	r3, [r3, #4]
 8018972:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018974:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018976:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801897a:	e064      	b.n	8018a46 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	895a      	ldrh	r2, [r3, #10]
 8018980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018982:	1ad3      	subs	r3, r2, r3
 8018984:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	895b      	ldrh	r3, [r3, #10]
 801898a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801898c:	429a      	cmp	r2, r3
 801898e:	d906      	bls.n	801899e <ip4_frag+0x10e>
 8018990:	4b5b      	ldr	r3, [pc, #364]	; (8018b00 <ip4_frag+0x270>)
 8018992:	f240 322d 	movw	r2, #813	; 0x32d
 8018996:	495e      	ldr	r1, [pc, #376]	; (8018b10 <ip4_frag+0x280>)
 8018998:	485b      	ldr	r0, [pc, #364]	; (8018b08 <ip4_frag+0x278>)
 801899a:	f001 f82f 	bl	80199fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801899e:	8bfa      	ldrh	r2, [r7, #30]
 80189a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80189a4:	4293      	cmp	r3, r2
 80189a6:	bf28      	it	cs
 80189a8:	4613      	movcs	r3, r2
 80189aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80189ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d105      	bne.n	80189c2 <ip4_frag+0x132>
        poff = 0;
 80189b6:	2300      	movs	r3, #0
 80189b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	60fb      	str	r3, [r7, #12]
        continue;
 80189c0:	e041      	b.n	8018a46 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80189c2:	f7ff ff0d 	bl	80187e0 <ip_frag_alloc_pbuf_custom_ref>
 80189c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80189c8:	69bb      	ldr	r3, [r7, #24]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d103      	bne.n	80189d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80189ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80189d0:	f7f5 fe10 	bl	800e5f4 <pbuf_free>
        goto memerr;
 80189d4:	e08e      	b.n	8018af4 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80189d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80189dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80189de:	4413      	add	r3, r2
 80189e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80189e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80189e8:	9201      	str	r2, [sp, #4]
 80189ea:	9300      	str	r3, [sp, #0]
 80189ec:	4603      	mov	r3, r0
 80189ee:	2241      	movs	r2, #65	; 0x41
 80189f0:	2000      	movs	r0, #0
 80189f2:	f7f5 fc45 	bl	800e280 <pbuf_alloced_custom>
 80189f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d106      	bne.n	8018a0c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80189fe:	69b8      	ldr	r0, [r7, #24]
 8018a00:	f7ff fef6 	bl	80187f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a06:	f7f5 fdf5 	bl	800e5f4 <pbuf_free>
        goto memerr;
 8018a0a:	e073      	b.n	8018af4 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8018a0c:	68f8      	ldr	r0, [r7, #12]
 8018a0e:	f7f5 fe97 	bl	800e740 <pbuf_ref>
      pcr->original = p;
 8018a12:	69bb      	ldr	r3, [r7, #24]
 8018a14:	68fa      	ldr	r2, [r7, #12]
 8018a16:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018a18:	69bb      	ldr	r3, [r7, #24]
 8018a1a:	4a3e      	ldr	r2, [pc, #248]	; (8018b14 <ip4_frag+0x284>)
 8018a1c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018a1e:	6979      	ldr	r1, [r7, #20]
 8018a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a22:	f7f5 feb5 	bl	800e790 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018a26:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018a2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018a2e:	1ad3      	subs	r3, r2, r3
 8018a30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018a34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d004      	beq.n	8018a46 <ip4_frag+0x1b6>
        poff = 0;
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018a46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d196      	bne.n	801897c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018a4e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018a50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018a54:	4413      	add	r3, r2
 8018a56:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018a58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a5c:	68bb      	ldr	r3, [r7, #8]
 8018a5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018a60:	3b14      	subs	r3, #20
 8018a62:	429a      	cmp	r2, r3
 8018a64:	bfd4      	ite	le
 8018a66:	2301      	movle	r3, #1
 8018a68:	2300      	movgt	r3, #0
 8018a6a:	b2db      	uxtb	r3, r3
 8018a6c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018a6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018a72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a76:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018a78:	6a3b      	ldr	r3, [r7, #32]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d002      	beq.n	8018a84 <ip4_frag+0x1f4>
 8018a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d003      	beq.n	8018a8c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018a84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018a8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018a8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7f4 fa7a 	bl	800cf88 <lwip_htons>
 8018a94:	4603      	mov	r3, r0
 8018a96:	461a      	mov	r2, r3
 8018a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a9a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018a9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018a9e:	3314      	adds	r3, #20
 8018aa0:	b29b      	uxth	r3, r3
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	f7f4 fa70 	bl	800cf88 <lwip_htons>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	461a      	mov	r2, r3
 8018aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aae:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ab2:	2200      	movs	r2, #0
 8018ab4:	729a      	strb	r2, [r3, #10]
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018aba:	68bb      	ldr	r3, [r7, #8]
 8018abc:	695b      	ldr	r3, [r3, #20]
 8018abe:	687a      	ldr	r2, [r7, #4]
 8018ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018ac2:	68b8      	ldr	r0, [r7, #8]
 8018ac4:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ac8:	f7f5 fd94 	bl	800e5f4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018acc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018ad0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018ad2:	1ad3      	subs	r3, r2, r3
 8018ad4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018ad8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018adc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018ade:	4413      	add	r3, r2
 8018ae0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018ae4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	f47f af1a 	bne.w	8018922 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018aee:	2300      	movs	r3, #0
 8018af0:	e002      	b.n	8018af8 <ip4_frag+0x268>
      goto memerr;
 8018af2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018af8:	4618      	mov	r0, r3
 8018afa:	3748      	adds	r7, #72	; 0x48
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bd80      	pop	{r7, pc}
 8018b00:	0801fee0 	.word	0x0801fee0
 8018b04:	080200bc 	.word	0x080200bc
 8018b08:	0801ff28 	.word	0x0801ff28
 8018b0c:	080200d8 	.word	0x080200d8
 8018b10:	080200f8 	.word	0x080200f8
 8018b14:	08018829 	.word	0x08018829

08018b18 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b086      	sub	sp, #24
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
 8018b20:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018b22:	230e      	movs	r3, #14
 8018b24:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	895b      	ldrh	r3, [r3, #10]
 8018b2a:	2b0e      	cmp	r3, #14
 8018b2c:	d96e      	bls.n	8018c0c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	7bdb      	ldrb	r3, [r3, #15]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d106      	bne.n	8018b44 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018b36:	683b      	ldr	r3, [r7, #0]
 8018b38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	b2da      	uxtb	r2, r3
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	685b      	ldr	r3, [r3, #4]
 8018b48:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018b4a:	693b      	ldr	r3, [r7, #16]
 8018b4c:	7b1a      	ldrb	r2, [r3, #12]
 8018b4e:	7b5b      	ldrb	r3, [r3, #13]
 8018b50:	021b      	lsls	r3, r3, #8
 8018b52:	4313      	orrs	r3, r2
 8018b54:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018b56:	693b      	ldr	r3, [r7, #16]
 8018b58:	781b      	ldrb	r3, [r3, #0]
 8018b5a:	f003 0301 	and.w	r3, r3, #1
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d023      	beq.n	8018baa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018b62:	693b      	ldr	r3, [r7, #16]
 8018b64:	781b      	ldrb	r3, [r3, #0]
 8018b66:	2b01      	cmp	r3, #1
 8018b68:	d10f      	bne.n	8018b8a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018b6a:	693b      	ldr	r3, [r7, #16]
 8018b6c:	785b      	ldrb	r3, [r3, #1]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d11b      	bne.n	8018baa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018b72:	693b      	ldr	r3, [r7, #16]
 8018b74:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018b76:	2b5e      	cmp	r3, #94	; 0x5e
 8018b78:	d117      	bne.n	8018baa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	7b5b      	ldrb	r3, [r3, #13]
 8018b7e:	f043 0310 	orr.w	r3, r3, #16
 8018b82:	b2da      	uxtb	r2, r3
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	735a      	strb	r2, [r3, #13]
 8018b88:	e00f      	b.n	8018baa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018b8a:	693b      	ldr	r3, [r7, #16]
 8018b8c:	2206      	movs	r2, #6
 8018b8e:	4928      	ldr	r1, [pc, #160]	; (8018c30 <ethernet_input+0x118>)
 8018b90:	4618      	mov	r0, r3
 8018b92:	f000 f9f3 	bl	8018f7c <memcmp>
 8018b96:	4603      	mov	r3, r0
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d106      	bne.n	8018baa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	7b5b      	ldrb	r3, [r3, #13]
 8018ba0:	f043 0308 	orr.w	r3, r3, #8
 8018ba4:	b2da      	uxtb	r2, r3
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018baa:	89fb      	ldrh	r3, [r7, #14]
 8018bac:	2b08      	cmp	r3, #8
 8018bae:	d003      	beq.n	8018bb8 <ethernet_input+0xa0>
 8018bb0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018bb4:	d014      	beq.n	8018be0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018bb6:	e032      	b.n	8018c1e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018bbe:	f003 0308 	and.w	r3, r3, #8
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d024      	beq.n	8018c10 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018bc6:	8afb      	ldrh	r3, [r7, #22]
 8018bc8:	4619      	mov	r1, r3
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f7f5 fc8c 	bl	800e4e8 <pbuf_remove_header>
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d11e      	bne.n	8018c14 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018bd6:	6839      	ldr	r1, [r7, #0]
 8018bd8:	6878      	ldr	r0, [r7, #4]
 8018bda:	f7fe ff0f 	bl	80179fc <ip4_input>
      break;
 8018bde:	e013      	b.n	8018c08 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018be0:	683b      	ldr	r3, [r7, #0]
 8018be2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018be6:	f003 0308 	and.w	r3, r3, #8
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d014      	beq.n	8018c18 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018bee:	8afb      	ldrh	r3, [r7, #22]
 8018bf0:	4619      	mov	r1, r3
 8018bf2:	6878      	ldr	r0, [r7, #4]
 8018bf4:	f7f5 fc78 	bl	800e4e8 <pbuf_remove_header>
 8018bf8:	4603      	mov	r3, r0
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d10e      	bne.n	8018c1c <ethernet_input+0x104>
        etharp_input(p, netif);
 8018bfe:	6839      	ldr	r1, [r7, #0]
 8018c00:	6878      	ldr	r0, [r7, #4]
 8018c02:	f7fe f8ab 	bl	8016d5c <etharp_input>
      break;
 8018c06:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018c08:	2300      	movs	r3, #0
 8018c0a:	e00c      	b.n	8018c26 <ethernet_input+0x10e>
    goto free_and_return;
 8018c0c:	bf00      	nop
 8018c0e:	e006      	b.n	8018c1e <ethernet_input+0x106>
        goto free_and_return;
 8018c10:	bf00      	nop
 8018c12:	e004      	b.n	8018c1e <ethernet_input+0x106>
        goto free_and_return;
 8018c14:	bf00      	nop
 8018c16:	e002      	b.n	8018c1e <ethernet_input+0x106>
        goto free_and_return;
 8018c18:	bf00      	nop
 8018c1a:	e000      	b.n	8018c1e <ethernet_input+0x106>
        goto free_and_return;
 8018c1c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018c1e:	6878      	ldr	r0, [r7, #4]
 8018c20:	f7f5 fce8 	bl	800e5f4 <pbuf_free>
  return ERR_OK;
 8018c24:	2300      	movs	r3, #0
}
 8018c26:	4618      	mov	r0, r3
 8018c28:	3718      	adds	r7, #24
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bd80      	pop	{r7, pc}
 8018c2e:	bf00      	nop
 8018c30:	08021038 	.word	0x08021038

08018c34 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b086      	sub	sp, #24
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	60f8      	str	r0, [r7, #12]
 8018c3c:	60b9      	str	r1, [r7, #8]
 8018c3e:	607a      	str	r2, [r7, #4]
 8018c40:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018c42:	8c3b      	ldrh	r3, [r7, #32]
 8018c44:	4618      	mov	r0, r3
 8018c46:	f7f4 f99f 	bl	800cf88 <lwip_htons>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018c4e:	210e      	movs	r1, #14
 8018c50:	68b8      	ldr	r0, [r7, #8]
 8018c52:	f7f5 fc39 	bl	800e4c8 <pbuf_add_header>
 8018c56:	4603      	mov	r3, r0
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d125      	bne.n	8018ca8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018c5c:	68bb      	ldr	r3, [r7, #8]
 8018c5e:	685b      	ldr	r3, [r3, #4]
 8018c60:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018c62:	693b      	ldr	r3, [r7, #16]
 8018c64:	8afa      	ldrh	r2, [r7, #22]
 8018c66:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018c68:	693b      	ldr	r3, [r7, #16]
 8018c6a:	2206      	movs	r2, #6
 8018c6c:	6839      	ldr	r1, [r7, #0]
 8018c6e:	4618      	mov	r0, r3
 8018c70:	f000 f993 	bl	8018f9a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018c74:	693b      	ldr	r3, [r7, #16]
 8018c76:	3306      	adds	r3, #6
 8018c78:	2206      	movs	r2, #6
 8018c7a:	6879      	ldr	r1, [r7, #4]
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f000 f98c 	bl	8018f9a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018c88:	2b06      	cmp	r3, #6
 8018c8a:	d006      	beq.n	8018c9a <ethernet_output+0x66>
 8018c8c:	4b0a      	ldr	r3, [pc, #40]	; (8018cb8 <ethernet_output+0x84>)
 8018c8e:	f240 1233 	movw	r2, #307	; 0x133
 8018c92:	490a      	ldr	r1, [pc, #40]	; (8018cbc <ethernet_output+0x88>)
 8018c94:	480a      	ldr	r0, [pc, #40]	; (8018cc0 <ethernet_output+0x8c>)
 8018c96:	f000 feb1 	bl	80199fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	699b      	ldr	r3, [r3, #24]
 8018c9e:	68b9      	ldr	r1, [r7, #8]
 8018ca0:	68f8      	ldr	r0, [r7, #12]
 8018ca2:	4798      	blx	r3
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	e002      	b.n	8018cae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018ca8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018caa:	f06f 0301 	mvn.w	r3, #1
}
 8018cae:	4618      	mov	r0, r3
 8018cb0:	3718      	adds	r7, #24
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	bd80      	pop	{r7, pc}
 8018cb6:	bf00      	nop
 8018cb8:	08020108 	.word	0x08020108
 8018cbc:	08020140 	.word	0x08020140
 8018cc0:	08020174 	.word	0x08020174

08018cc4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b086      	sub	sp, #24
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	6078      	str	r0, [r7, #4]
 8018ccc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018cce:	683b      	ldr	r3, [r7, #0]
 8018cd0:	60bb      	str	r3, [r7, #8]
 8018cd2:	2304      	movs	r3, #4
 8018cd4:	60fb      	str	r3, [r7, #12]
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	613b      	str	r3, [r7, #16]
 8018cda:	2300      	movs	r3, #0
 8018cdc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018cde:	f107 0308 	add.w	r3, r7, #8
 8018ce2:	2100      	movs	r1, #0
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f7f1 fad7 	bl	800a298 <osMessageCreate>
 8018cea:	4602      	mov	r2, r0
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d102      	bne.n	8018cfe <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8018cfc:	e000      	b.n	8018d00 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018cfe:	2300      	movs	r3, #0
}
 8018d00:	4618      	mov	r0, r3
 8018d02:	3718      	adds	r7, #24
 8018d04:	46bd      	mov	sp, r7
 8018d06:	bd80      	pop	{r7, pc}

08018d08 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b084      	sub	sp, #16
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
 8018d10:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	6839      	ldr	r1, [r7, #0]
 8018d18:	2200      	movs	r2, #0
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	f7f1 fae6 	bl	800a2ec <osMessagePut>
 8018d20:	4603      	mov	r3, r0
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d102      	bne.n	8018d2c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018d26:	2300      	movs	r3, #0
 8018d28:	73fb      	strb	r3, [r7, #15]
 8018d2a:	e001      	b.n	8018d30 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018d2c:	23ff      	movs	r3, #255	; 0xff
 8018d2e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018d34:	4618      	mov	r0, r3
 8018d36:	3710      	adds	r7, #16
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	bd80      	pop	{r7, pc}

08018d3c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b08c      	sub	sp, #48	; 0x30
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	61f8      	str	r0, [r7, #28]
 8018d44:	61b9      	str	r1, [r7, #24]
 8018d46:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018d48:	f7f1 f918 	bl	8009f7c <osKernelSysTick>
 8018d4c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018d4e:	697b      	ldr	r3, [r7, #20]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d017      	beq.n	8018d84 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018d54:	69fb      	ldr	r3, [r7, #28]
 8018d56:	6819      	ldr	r1, [r3, #0]
 8018d58:	f107 0320 	add.w	r3, r7, #32
 8018d5c:	697a      	ldr	r2, [r7, #20]
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f7f1 fb04 	bl	800a36c <osMessageGet>

    if(event.status == osEventMessage)
 8018d64:	6a3b      	ldr	r3, [r7, #32]
 8018d66:	2b10      	cmp	r3, #16
 8018d68:	d109      	bne.n	8018d7e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d6c:	461a      	mov	r2, r3
 8018d6e:	69bb      	ldr	r3, [r7, #24]
 8018d70:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018d72:	f7f1 f903 	bl	8009f7c <osKernelSysTick>
 8018d76:	4602      	mov	r2, r0
 8018d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d7a:	1ad3      	subs	r3, r2, r3
 8018d7c:	e019      	b.n	8018db2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d82:	e016      	b.n	8018db2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018d84:	69fb      	ldr	r3, [r7, #28]
 8018d86:	6819      	ldr	r1, [r3, #0]
 8018d88:	463b      	mov	r3, r7
 8018d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f7f1 faec 	bl	800a36c <osMessageGet>
 8018d94:	f107 0320 	add.w	r3, r7, #32
 8018d98:	463a      	mov	r2, r7
 8018d9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8018d9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018da2:	461a      	mov	r2, r3
 8018da4:	69bb      	ldr	r3, [r7, #24]
 8018da6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018da8:	f7f1 f8e8 	bl	8009f7c <osKernelSysTick>
 8018dac:	4602      	mov	r2, r0
 8018dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018db0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	3730      	adds	r7, #48	; 0x30
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}

08018dba <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018dba:	b480      	push	{r7}
 8018dbc:	b083      	sub	sp, #12
 8018dbe:	af00      	add	r7, sp, #0
 8018dc0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d101      	bne.n	8018dce <sys_mbox_valid+0x14>
    return 0;
 8018dca:	2300      	movs	r3, #0
 8018dcc:	e000      	b.n	8018dd0 <sys_mbox_valid+0x16>
  else
    return 1;
 8018dce:	2301      	movs	r3, #1
}
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	370c      	adds	r7, #12
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dda:	4770      	bx	lr

08018ddc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018de0:	4803      	ldr	r0, [pc, #12]	; (8018df0 <sys_init+0x14>)
 8018de2:	f7f1 f93b 	bl	800a05c <osMutexCreate>
 8018de6:	4602      	mov	r2, r0
 8018de8:	4b02      	ldr	r3, [pc, #8]	; (8018df4 <sys_init+0x18>)
 8018dea:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018dec:	bf00      	nop
 8018dee:	bd80      	pop	{r7, pc}
 8018df0:	08021048 	.word	0x08021048
 8018df4:	2000b508 	.word	0x2000b508

08018df8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b084      	sub	sp, #16
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018e00:	2300      	movs	r3, #0
 8018e02:	60bb      	str	r3, [r7, #8]
 8018e04:	2300      	movs	r3, #0
 8018e06:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018e08:	f107 0308 	add.w	r3, r7, #8
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	f7f1 f925 	bl	800a05c <osMutexCreate>
 8018e12:	4602      	mov	r2, r0
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d102      	bne.n	8018e26 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018e20:	f04f 33ff 	mov.w	r3, #4294967295
 8018e24:	e000      	b.n	8018e28 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018e26:	2300      	movs	r3, #0
}
 8018e28:	4618      	mov	r0, r3
 8018e2a:	3710      	adds	r7, #16
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd80      	pop	{r7, pc}

08018e30 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b082      	sub	sp, #8
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8018e40:	4618      	mov	r0, r3
 8018e42:	f7f1 f923 	bl	800a08c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018e46:	bf00      	nop
 8018e48:	3708      	adds	r7, #8
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bd80      	pop	{r7, pc}

08018e4e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018e4e:	b580      	push	{r7, lr}
 8018e50:	b082      	sub	sp, #8
 8018e52:	af00      	add	r7, sp, #0
 8018e54:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	f7f1 f964 	bl	800a128 <osMutexRelease>
}
 8018e60:	bf00      	nop
 8018e62:	3708      	adds	r7, #8
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}

08018e68 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b08c      	sub	sp, #48	; 0x30
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	60f8      	str	r0, [r7, #12]
 8018e70:	60b9      	str	r1, [r7, #8]
 8018e72:	607a      	str	r2, [r7, #4]
 8018e74:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018e76:	f107 0314 	add.w	r3, r7, #20
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	601a      	str	r2, [r3, #0]
 8018e7e:	605a      	str	r2, [r3, #4]
 8018e80:	609a      	str	r2, [r3, #8]
 8018e82:	60da      	str	r2, [r3, #12]
 8018e84:	611a      	str	r2, [r3, #16]
 8018e86:	615a      	str	r2, [r3, #20]
 8018e88:	619a      	str	r2, [r3, #24]
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	617b      	str	r3, [r7, #20]
 8018e8e:	68bb      	ldr	r3, [r7, #8]
 8018e90:	61bb      	str	r3, [r7, #24]
 8018e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e94:	b21b      	sxth	r3, r3
 8018e96:	83bb      	strh	r3, [r7, #28]
 8018e98:	683b      	ldr	r3, [r7, #0]
 8018e9a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018e9c:	f107 0314 	add.w	r3, r7, #20
 8018ea0:	6879      	ldr	r1, [r7, #4]
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f7f1 f87a 	bl	8009f9c <osThreadCreate>
 8018ea8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018eaa:	4618      	mov	r0, r3
 8018eac:	3730      	adds	r7, #48	; 0x30
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd80      	pop	{r7, pc}
	...

08018eb4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018eb8:	4b04      	ldr	r3, [pc, #16]	; (8018ecc <sys_arch_protect+0x18>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f7f1 f8e3 	bl	800a08c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018ec6:	2301      	movs	r3, #1
}
 8018ec8:	4618      	mov	r0, r3
 8018eca:	bd80      	pop	{r7, pc}
 8018ecc:	2000b508 	.word	0x2000b508

08018ed0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	b082      	sub	sp, #8
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018ed8:	4b04      	ldr	r3, [pc, #16]	; (8018eec <sys_arch_unprotect+0x1c>)
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	4618      	mov	r0, r3
 8018ede:	f7f1 f923 	bl	800a128 <osMutexRelease>
}
 8018ee2:	bf00      	nop
 8018ee4:	3708      	adds	r7, #8
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bd80      	pop	{r7, pc}
 8018eea:	bf00      	nop
 8018eec:	2000b508 	.word	0x2000b508

08018ef0 <__libc_init_array>:
 8018ef0:	b570      	push	{r4, r5, r6, lr}
 8018ef2:	4e0d      	ldr	r6, [pc, #52]	; (8018f28 <__libc_init_array+0x38>)
 8018ef4:	4c0d      	ldr	r4, [pc, #52]	; (8018f2c <__libc_init_array+0x3c>)
 8018ef6:	1ba4      	subs	r4, r4, r6
 8018ef8:	10a4      	asrs	r4, r4, #2
 8018efa:	2500      	movs	r5, #0
 8018efc:	42a5      	cmp	r5, r4
 8018efe:	d109      	bne.n	8018f14 <__libc_init_array+0x24>
 8018f00:	4e0b      	ldr	r6, [pc, #44]	; (8018f30 <__libc_init_array+0x40>)
 8018f02:	4c0c      	ldr	r4, [pc, #48]	; (8018f34 <__libc_init_array+0x44>)
 8018f04:	f004 f884 	bl	801d010 <_init>
 8018f08:	1ba4      	subs	r4, r4, r6
 8018f0a:	10a4      	asrs	r4, r4, #2
 8018f0c:	2500      	movs	r5, #0
 8018f0e:	42a5      	cmp	r5, r4
 8018f10:	d105      	bne.n	8018f1e <__libc_init_array+0x2e>
 8018f12:	bd70      	pop	{r4, r5, r6, pc}
 8018f14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018f18:	4798      	blx	r3
 8018f1a:	3501      	adds	r5, #1
 8018f1c:	e7ee      	b.n	8018efc <__libc_init_array+0xc>
 8018f1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018f22:	4798      	blx	r3
 8018f24:	3501      	adds	r5, #1
 8018f26:	e7f2      	b.n	8018f0e <__libc_init_array+0x1e>
 8018f28:	080213a8 	.word	0x080213a8
 8018f2c:	080213a8 	.word	0x080213a8
 8018f30:	080213a8 	.word	0x080213a8
 8018f34:	080213ac 	.word	0x080213ac

08018f38 <malloc>:
 8018f38:	4b02      	ldr	r3, [pc, #8]	; (8018f44 <malloc+0xc>)
 8018f3a:	4601      	mov	r1, r0
 8018f3c:	6818      	ldr	r0, [r3, #0]
 8018f3e:	f000 b8a7 	b.w	8019090 <_malloc_r>
 8018f42:	bf00      	nop
 8018f44:	200000c0 	.word	0x200000c0

08018f48 <free>:
 8018f48:	4b02      	ldr	r3, [pc, #8]	; (8018f54 <free+0xc>)
 8018f4a:	4601      	mov	r1, r0
 8018f4c:	6818      	ldr	r0, [r3, #0]
 8018f4e:	f000 b851 	b.w	8018ff4 <_free_r>
 8018f52:	bf00      	nop
 8018f54:	200000c0 	.word	0x200000c0

08018f58 <__ascii_mbtowc>:
 8018f58:	b082      	sub	sp, #8
 8018f5a:	b901      	cbnz	r1, 8018f5e <__ascii_mbtowc+0x6>
 8018f5c:	a901      	add	r1, sp, #4
 8018f5e:	b142      	cbz	r2, 8018f72 <__ascii_mbtowc+0x1a>
 8018f60:	b14b      	cbz	r3, 8018f76 <__ascii_mbtowc+0x1e>
 8018f62:	7813      	ldrb	r3, [r2, #0]
 8018f64:	600b      	str	r3, [r1, #0]
 8018f66:	7812      	ldrb	r2, [r2, #0]
 8018f68:	1c10      	adds	r0, r2, #0
 8018f6a:	bf18      	it	ne
 8018f6c:	2001      	movne	r0, #1
 8018f6e:	b002      	add	sp, #8
 8018f70:	4770      	bx	lr
 8018f72:	4610      	mov	r0, r2
 8018f74:	e7fb      	b.n	8018f6e <__ascii_mbtowc+0x16>
 8018f76:	f06f 0001 	mvn.w	r0, #1
 8018f7a:	e7f8      	b.n	8018f6e <__ascii_mbtowc+0x16>

08018f7c <memcmp>:
 8018f7c:	b530      	push	{r4, r5, lr}
 8018f7e:	2400      	movs	r4, #0
 8018f80:	42a2      	cmp	r2, r4
 8018f82:	d101      	bne.n	8018f88 <memcmp+0xc>
 8018f84:	2000      	movs	r0, #0
 8018f86:	e007      	b.n	8018f98 <memcmp+0x1c>
 8018f88:	5d03      	ldrb	r3, [r0, r4]
 8018f8a:	3401      	adds	r4, #1
 8018f8c:	190d      	adds	r5, r1, r4
 8018f8e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8018f92:	42ab      	cmp	r3, r5
 8018f94:	d0f4      	beq.n	8018f80 <memcmp+0x4>
 8018f96:	1b58      	subs	r0, r3, r5
 8018f98:	bd30      	pop	{r4, r5, pc}

08018f9a <memcpy>:
 8018f9a:	b510      	push	{r4, lr}
 8018f9c:	1e43      	subs	r3, r0, #1
 8018f9e:	440a      	add	r2, r1
 8018fa0:	4291      	cmp	r1, r2
 8018fa2:	d100      	bne.n	8018fa6 <memcpy+0xc>
 8018fa4:	bd10      	pop	{r4, pc}
 8018fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018fae:	e7f7      	b.n	8018fa0 <memcpy+0x6>

08018fb0 <memmove>:
 8018fb0:	4288      	cmp	r0, r1
 8018fb2:	b510      	push	{r4, lr}
 8018fb4:	eb01 0302 	add.w	r3, r1, r2
 8018fb8:	d807      	bhi.n	8018fca <memmove+0x1a>
 8018fba:	1e42      	subs	r2, r0, #1
 8018fbc:	4299      	cmp	r1, r3
 8018fbe:	d00a      	beq.n	8018fd6 <memmove+0x26>
 8018fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018fc4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018fc8:	e7f8      	b.n	8018fbc <memmove+0xc>
 8018fca:	4283      	cmp	r3, r0
 8018fcc:	d9f5      	bls.n	8018fba <memmove+0xa>
 8018fce:	1881      	adds	r1, r0, r2
 8018fd0:	1ad2      	subs	r2, r2, r3
 8018fd2:	42d3      	cmn	r3, r2
 8018fd4:	d100      	bne.n	8018fd8 <memmove+0x28>
 8018fd6:	bd10      	pop	{r4, pc}
 8018fd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018fdc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018fe0:	e7f7      	b.n	8018fd2 <memmove+0x22>

08018fe2 <memset>:
 8018fe2:	4402      	add	r2, r0
 8018fe4:	4603      	mov	r3, r0
 8018fe6:	4293      	cmp	r3, r2
 8018fe8:	d100      	bne.n	8018fec <memset+0xa>
 8018fea:	4770      	bx	lr
 8018fec:	f803 1b01 	strb.w	r1, [r3], #1
 8018ff0:	e7f9      	b.n	8018fe6 <memset+0x4>
	...

08018ff4 <_free_r>:
 8018ff4:	b538      	push	{r3, r4, r5, lr}
 8018ff6:	4605      	mov	r5, r0
 8018ff8:	2900      	cmp	r1, #0
 8018ffa:	d045      	beq.n	8019088 <_free_r+0x94>
 8018ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019000:	1f0c      	subs	r4, r1, #4
 8019002:	2b00      	cmp	r3, #0
 8019004:	bfb8      	it	lt
 8019006:	18e4      	addlt	r4, r4, r3
 8019008:	f001 fc9e 	bl	801a948 <__malloc_lock>
 801900c:	4a1f      	ldr	r2, [pc, #124]	; (801908c <_free_r+0x98>)
 801900e:	6813      	ldr	r3, [r2, #0]
 8019010:	4610      	mov	r0, r2
 8019012:	b933      	cbnz	r3, 8019022 <_free_r+0x2e>
 8019014:	6063      	str	r3, [r4, #4]
 8019016:	6014      	str	r4, [r2, #0]
 8019018:	4628      	mov	r0, r5
 801901a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801901e:	f001 bc94 	b.w	801a94a <__malloc_unlock>
 8019022:	42a3      	cmp	r3, r4
 8019024:	d90c      	bls.n	8019040 <_free_r+0x4c>
 8019026:	6821      	ldr	r1, [r4, #0]
 8019028:	1862      	adds	r2, r4, r1
 801902a:	4293      	cmp	r3, r2
 801902c:	bf04      	itt	eq
 801902e:	681a      	ldreq	r2, [r3, #0]
 8019030:	685b      	ldreq	r3, [r3, #4]
 8019032:	6063      	str	r3, [r4, #4]
 8019034:	bf04      	itt	eq
 8019036:	1852      	addeq	r2, r2, r1
 8019038:	6022      	streq	r2, [r4, #0]
 801903a:	6004      	str	r4, [r0, #0]
 801903c:	e7ec      	b.n	8019018 <_free_r+0x24>
 801903e:	4613      	mov	r3, r2
 8019040:	685a      	ldr	r2, [r3, #4]
 8019042:	b10a      	cbz	r2, 8019048 <_free_r+0x54>
 8019044:	42a2      	cmp	r2, r4
 8019046:	d9fa      	bls.n	801903e <_free_r+0x4a>
 8019048:	6819      	ldr	r1, [r3, #0]
 801904a:	1858      	adds	r0, r3, r1
 801904c:	42a0      	cmp	r0, r4
 801904e:	d10b      	bne.n	8019068 <_free_r+0x74>
 8019050:	6820      	ldr	r0, [r4, #0]
 8019052:	4401      	add	r1, r0
 8019054:	1858      	adds	r0, r3, r1
 8019056:	4282      	cmp	r2, r0
 8019058:	6019      	str	r1, [r3, #0]
 801905a:	d1dd      	bne.n	8019018 <_free_r+0x24>
 801905c:	6810      	ldr	r0, [r2, #0]
 801905e:	6852      	ldr	r2, [r2, #4]
 8019060:	605a      	str	r2, [r3, #4]
 8019062:	4401      	add	r1, r0
 8019064:	6019      	str	r1, [r3, #0]
 8019066:	e7d7      	b.n	8019018 <_free_r+0x24>
 8019068:	d902      	bls.n	8019070 <_free_r+0x7c>
 801906a:	230c      	movs	r3, #12
 801906c:	602b      	str	r3, [r5, #0]
 801906e:	e7d3      	b.n	8019018 <_free_r+0x24>
 8019070:	6820      	ldr	r0, [r4, #0]
 8019072:	1821      	adds	r1, r4, r0
 8019074:	428a      	cmp	r2, r1
 8019076:	bf04      	itt	eq
 8019078:	6811      	ldreq	r1, [r2, #0]
 801907a:	6852      	ldreq	r2, [r2, #4]
 801907c:	6062      	str	r2, [r4, #4]
 801907e:	bf04      	itt	eq
 8019080:	1809      	addeq	r1, r1, r0
 8019082:	6021      	streq	r1, [r4, #0]
 8019084:	605c      	str	r4, [r3, #4]
 8019086:	e7c7      	b.n	8019018 <_free_r+0x24>
 8019088:	bd38      	pop	{r3, r4, r5, pc}
 801908a:	bf00      	nop
 801908c:	2000485c 	.word	0x2000485c

08019090 <_malloc_r>:
 8019090:	b570      	push	{r4, r5, r6, lr}
 8019092:	1ccd      	adds	r5, r1, #3
 8019094:	f025 0503 	bic.w	r5, r5, #3
 8019098:	3508      	adds	r5, #8
 801909a:	2d0c      	cmp	r5, #12
 801909c:	bf38      	it	cc
 801909e:	250c      	movcc	r5, #12
 80190a0:	2d00      	cmp	r5, #0
 80190a2:	4606      	mov	r6, r0
 80190a4:	db01      	blt.n	80190aa <_malloc_r+0x1a>
 80190a6:	42a9      	cmp	r1, r5
 80190a8:	d903      	bls.n	80190b2 <_malloc_r+0x22>
 80190aa:	230c      	movs	r3, #12
 80190ac:	6033      	str	r3, [r6, #0]
 80190ae:	2000      	movs	r0, #0
 80190b0:	bd70      	pop	{r4, r5, r6, pc}
 80190b2:	f001 fc49 	bl	801a948 <__malloc_lock>
 80190b6:	4a21      	ldr	r2, [pc, #132]	; (801913c <_malloc_r+0xac>)
 80190b8:	6814      	ldr	r4, [r2, #0]
 80190ba:	4621      	mov	r1, r4
 80190bc:	b991      	cbnz	r1, 80190e4 <_malloc_r+0x54>
 80190be:	4c20      	ldr	r4, [pc, #128]	; (8019140 <_malloc_r+0xb0>)
 80190c0:	6823      	ldr	r3, [r4, #0]
 80190c2:	b91b      	cbnz	r3, 80190cc <_malloc_r+0x3c>
 80190c4:	4630      	mov	r0, r6
 80190c6:	f000 fce5 	bl	8019a94 <_sbrk_r>
 80190ca:	6020      	str	r0, [r4, #0]
 80190cc:	4629      	mov	r1, r5
 80190ce:	4630      	mov	r0, r6
 80190d0:	f000 fce0 	bl	8019a94 <_sbrk_r>
 80190d4:	1c43      	adds	r3, r0, #1
 80190d6:	d124      	bne.n	8019122 <_malloc_r+0x92>
 80190d8:	230c      	movs	r3, #12
 80190da:	6033      	str	r3, [r6, #0]
 80190dc:	4630      	mov	r0, r6
 80190de:	f001 fc34 	bl	801a94a <__malloc_unlock>
 80190e2:	e7e4      	b.n	80190ae <_malloc_r+0x1e>
 80190e4:	680b      	ldr	r3, [r1, #0]
 80190e6:	1b5b      	subs	r3, r3, r5
 80190e8:	d418      	bmi.n	801911c <_malloc_r+0x8c>
 80190ea:	2b0b      	cmp	r3, #11
 80190ec:	d90f      	bls.n	801910e <_malloc_r+0x7e>
 80190ee:	600b      	str	r3, [r1, #0]
 80190f0:	50cd      	str	r5, [r1, r3]
 80190f2:	18cc      	adds	r4, r1, r3
 80190f4:	4630      	mov	r0, r6
 80190f6:	f001 fc28 	bl	801a94a <__malloc_unlock>
 80190fa:	f104 000b 	add.w	r0, r4, #11
 80190fe:	1d23      	adds	r3, r4, #4
 8019100:	f020 0007 	bic.w	r0, r0, #7
 8019104:	1ac3      	subs	r3, r0, r3
 8019106:	d0d3      	beq.n	80190b0 <_malloc_r+0x20>
 8019108:	425a      	negs	r2, r3
 801910a:	50e2      	str	r2, [r4, r3]
 801910c:	e7d0      	b.n	80190b0 <_malloc_r+0x20>
 801910e:	428c      	cmp	r4, r1
 8019110:	684b      	ldr	r3, [r1, #4]
 8019112:	bf16      	itet	ne
 8019114:	6063      	strne	r3, [r4, #4]
 8019116:	6013      	streq	r3, [r2, #0]
 8019118:	460c      	movne	r4, r1
 801911a:	e7eb      	b.n	80190f4 <_malloc_r+0x64>
 801911c:	460c      	mov	r4, r1
 801911e:	6849      	ldr	r1, [r1, #4]
 8019120:	e7cc      	b.n	80190bc <_malloc_r+0x2c>
 8019122:	1cc4      	adds	r4, r0, #3
 8019124:	f024 0403 	bic.w	r4, r4, #3
 8019128:	42a0      	cmp	r0, r4
 801912a:	d005      	beq.n	8019138 <_malloc_r+0xa8>
 801912c:	1a21      	subs	r1, r4, r0
 801912e:	4630      	mov	r0, r6
 8019130:	f000 fcb0 	bl	8019a94 <_sbrk_r>
 8019134:	3001      	adds	r0, #1
 8019136:	d0cf      	beq.n	80190d8 <_malloc_r+0x48>
 8019138:	6025      	str	r5, [r4, #0]
 801913a:	e7db      	b.n	80190f4 <_malloc_r+0x64>
 801913c:	2000485c 	.word	0x2000485c
 8019140:	20004860 	.word	0x20004860

08019144 <__cvt>:
 8019144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019148:	ec55 4b10 	vmov	r4, r5, d0
 801914c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801914e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019152:	2d00      	cmp	r5, #0
 8019154:	460e      	mov	r6, r1
 8019156:	4691      	mov	r9, r2
 8019158:	4619      	mov	r1, r3
 801915a:	bfb8      	it	lt
 801915c:	4622      	movlt	r2, r4
 801915e:	462b      	mov	r3, r5
 8019160:	f027 0720 	bic.w	r7, r7, #32
 8019164:	bfbb      	ittet	lt
 8019166:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801916a:	461d      	movlt	r5, r3
 801916c:	2300      	movge	r3, #0
 801916e:	232d      	movlt	r3, #45	; 0x2d
 8019170:	bfb8      	it	lt
 8019172:	4614      	movlt	r4, r2
 8019174:	2f46      	cmp	r7, #70	; 0x46
 8019176:	700b      	strb	r3, [r1, #0]
 8019178:	d004      	beq.n	8019184 <__cvt+0x40>
 801917a:	2f45      	cmp	r7, #69	; 0x45
 801917c:	d100      	bne.n	8019180 <__cvt+0x3c>
 801917e:	3601      	adds	r6, #1
 8019180:	2102      	movs	r1, #2
 8019182:	e000      	b.n	8019186 <__cvt+0x42>
 8019184:	2103      	movs	r1, #3
 8019186:	ab03      	add	r3, sp, #12
 8019188:	9301      	str	r3, [sp, #4]
 801918a:	ab02      	add	r3, sp, #8
 801918c:	9300      	str	r3, [sp, #0]
 801918e:	4632      	mov	r2, r6
 8019190:	4653      	mov	r3, sl
 8019192:	ec45 4b10 	vmov	d0, r4, r5
 8019196:	f000 fd47 	bl	8019c28 <_dtoa_r>
 801919a:	2f47      	cmp	r7, #71	; 0x47
 801919c:	4680      	mov	r8, r0
 801919e:	d102      	bne.n	80191a6 <__cvt+0x62>
 80191a0:	f019 0f01 	tst.w	r9, #1
 80191a4:	d026      	beq.n	80191f4 <__cvt+0xb0>
 80191a6:	2f46      	cmp	r7, #70	; 0x46
 80191a8:	eb08 0906 	add.w	r9, r8, r6
 80191ac:	d111      	bne.n	80191d2 <__cvt+0x8e>
 80191ae:	f898 3000 	ldrb.w	r3, [r8]
 80191b2:	2b30      	cmp	r3, #48	; 0x30
 80191b4:	d10a      	bne.n	80191cc <__cvt+0x88>
 80191b6:	2200      	movs	r2, #0
 80191b8:	2300      	movs	r3, #0
 80191ba:	4620      	mov	r0, r4
 80191bc:	4629      	mov	r1, r5
 80191be:	f7e7 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 80191c2:	b918      	cbnz	r0, 80191cc <__cvt+0x88>
 80191c4:	f1c6 0601 	rsb	r6, r6, #1
 80191c8:	f8ca 6000 	str.w	r6, [sl]
 80191cc:	f8da 3000 	ldr.w	r3, [sl]
 80191d0:	4499      	add	r9, r3
 80191d2:	2200      	movs	r2, #0
 80191d4:	2300      	movs	r3, #0
 80191d6:	4620      	mov	r0, r4
 80191d8:	4629      	mov	r1, r5
 80191da:	f7e7 fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80191de:	b938      	cbnz	r0, 80191f0 <__cvt+0xac>
 80191e0:	2230      	movs	r2, #48	; 0x30
 80191e2:	9b03      	ldr	r3, [sp, #12]
 80191e4:	454b      	cmp	r3, r9
 80191e6:	d205      	bcs.n	80191f4 <__cvt+0xb0>
 80191e8:	1c59      	adds	r1, r3, #1
 80191ea:	9103      	str	r1, [sp, #12]
 80191ec:	701a      	strb	r2, [r3, #0]
 80191ee:	e7f8      	b.n	80191e2 <__cvt+0x9e>
 80191f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80191f4:	9b03      	ldr	r3, [sp, #12]
 80191f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80191f8:	eba3 0308 	sub.w	r3, r3, r8
 80191fc:	4640      	mov	r0, r8
 80191fe:	6013      	str	r3, [r2, #0]
 8019200:	b004      	add	sp, #16
 8019202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019206 <__exponent>:
 8019206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019208:	2900      	cmp	r1, #0
 801920a:	4604      	mov	r4, r0
 801920c:	bfba      	itte	lt
 801920e:	4249      	neglt	r1, r1
 8019210:	232d      	movlt	r3, #45	; 0x2d
 8019212:	232b      	movge	r3, #43	; 0x2b
 8019214:	2909      	cmp	r1, #9
 8019216:	f804 2b02 	strb.w	r2, [r4], #2
 801921a:	7043      	strb	r3, [r0, #1]
 801921c:	dd20      	ble.n	8019260 <__exponent+0x5a>
 801921e:	f10d 0307 	add.w	r3, sp, #7
 8019222:	461f      	mov	r7, r3
 8019224:	260a      	movs	r6, #10
 8019226:	fb91 f5f6 	sdiv	r5, r1, r6
 801922a:	fb06 1115 	mls	r1, r6, r5, r1
 801922e:	3130      	adds	r1, #48	; 0x30
 8019230:	2d09      	cmp	r5, #9
 8019232:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019236:	f103 32ff 	add.w	r2, r3, #4294967295
 801923a:	4629      	mov	r1, r5
 801923c:	dc09      	bgt.n	8019252 <__exponent+0x4c>
 801923e:	3130      	adds	r1, #48	; 0x30
 8019240:	3b02      	subs	r3, #2
 8019242:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019246:	42bb      	cmp	r3, r7
 8019248:	4622      	mov	r2, r4
 801924a:	d304      	bcc.n	8019256 <__exponent+0x50>
 801924c:	1a10      	subs	r0, r2, r0
 801924e:	b003      	add	sp, #12
 8019250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019252:	4613      	mov	r3, r2
 8019254:	e7e7      	b.n	8019226 <__exponent+0x20>
 8019256:	f813 2b01 	ldrb.w	r2, [r3], #1
 801925a:	f804 2b01 	strb.w	r2, [r4], #1
 801925e:	e7f2      	b.n	8019246 <__exponent+0x40>
 8019260:	2330      	movs	r3, #48	; 0x30
 8019262:	4419      	add	r1, r3
 8019264:	7083      	strb	r3, [r0, #2]
 8019266:	1d02      	adds	r2, r0, #4
 8019268:	70c1      	strb	r1, [r0, #3]
 801926a:	e7ef      	b.n	801924c <__exponent+0x46>

0801926c <_printf_float>:
 801926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019270:	b08d      	sub	sp, #52	; 0x34
 8019272:	460c      	mov	r4, r1
 8019274:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8019278:	4616      	mov	r6, r2
 801927a:	461f      	mov	r7, r3
 801927c:	4605      	mov	r5, r0
 801927e:	f001 fb55 	bl	801a92c <_localeconv_r>
 8019282:	6803      	ldr	r3, [r0, #0]
 8019284:	9304      	str	r3, [sp, #16]
 8019286:	4618      	mov	r0, r3
 8019288:	f7e6 ffa2 	bl	80001d0 <strlen>
 801928c:	2300      	movs	r3, #0
 801928e:	930a      	str	r3, [sp, #40]	; 0x28
 8019290:	f8d8 3000 	ldr.w	r3, [r8]
 8019294:	9005      	str	r0, [sp, #20]
 8019296:	3307      	adds	r3, #7
 8019298:	f023 0307 	bic.w	r3, r3, #7
 801929c:	f103 0208 	add.w	r2, r3, #8
 80192a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80192a4:	f8d4 b000 	ldr.w	fp, [r4]
 80192a8:	f8c8 2000 	str.w	r2, [r8]
 80192ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80192b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80192b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80192bc:	9307      	str	r3, [sp, #28]
 80192be:	f8cd 8018 	str.w	r8, [sp, #24]
 80192c2:	f04f 32ff 	mov.w	r2, #4294967295
 80192c6:	4ba7      	ldr	r3, [pc, #668]	; (8019564 <_printf_float+0x2f8>)
 80192c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80192cc:	f7e7 fc2e 	bl	8000b2c <__aeabi_dcmpun>
 80192d0:	bb70      	cbnz	r0, 8019330 <_printf_float+0xc4>
 80192d2:	f04f 32ff 	mov.w	r2, #4294967295
 80192d6:	4ba3      	ldr	r3, [pc, #652]	; (8019564 <_printf_float+0x2f8>)
 80192d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80192dc:	f7e7 fc08 	bl	8000af0 <__aeabi_dcmple>
 80192e0:	bb30      	cbnz	r0, 8019330 <_printf_float+0xc4>
 80192e2:	2200      	movs	r2, #0
 80192e4:	2300      	movs	r3, #0
 80192e6:	4640      	mov	r0, r8
 80192e8:	4649      	mov	r1, r9
 80192ea:	f7e7 fbf7 	bl	8000adc <__aeabi_dcmplt>
 80192ee:	b110      	cbz	r0, 80192f6 <_printf_float+0x8a>
 80192f0:	232d      	movs	r3, #45	; 0x2d
 80192f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80192f6:	4a9c      	ldr	r2, [pc, #624]	; (8019568 <_printf_float+0x2fc>)
 80192f8:	4b9c      	ldr	r3, [pc, #624]	; (801956c <_printf_float+0x300>)
 80192fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80192fe:	bf8c      	ite	hi
 8019300:	4690      	movhi	r8, r2
 8019302:	4698      	movls	r8, r3
 8019304:	2303      	movs	r3, #3
 8019306:	f02b 0204 	bic.w	r2, fp, #4
 801930a:	6123      	str	r3, [r4, #16]
 801930c:	6022      	str	r2, [r4, #0]
 801930e:	f04f 0900 	mov.w	r9, #0
 8019312:	9700      	str	r7, [sp, #0]
 8019314:	4633      	mov	r3, r6
 8019316:	aa0b      	add	r2, sp, #44	; 0x2c
 8019318:	4621      	mov	r1, r4
 801931a:	4628      	mov	r0, r5
 801931c:	f000 f9e6 	bl	80196ec <_printf_common>
 8019320:	3001      	adds	r0, #1
 8019322:	f040 808d 	bne.w	8019440 <_printf_float+0x1d4>
 8019326:	f04f 30ff 	mov.w	r0, #4294967295
 801932a:	b00d      	add	sp, #52	; 0x34
 801932c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019330:	4642      	mov	r2, r8
 8019332:	464b      	mov	r3, r9
 8019334:	4640      	mov	r0, r8
 8019336:	4649      	mov	r1, r9
 8019338:	f7e7 fbf8 	bl	8000b2c <__aeabi_dcmpun>
 801933c:	b110      	cbz	r0, 8019344 <_printf_float+0xd8>
 801933e:	4a8c      	ldr	r2, [pc, #560]	; (8019570 <_printf_float+0x304>)
 8019340:	4b8c      	ldr	r3, [pc, #560]	; (8019574 <_printf_float+0x308>)
 8019342:	e7da      	b.n	80192fa <_printf_float+0x8e>
 8019344:	6861      	ldr	r1, [r4, #4]
 8019346:	1c4b      	adds	r3, r1, #1
 8019348:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801934c:	a80a      	add	r0, sp, #40	; 0x28
 801934e:	d13e      	bne.n	80193ce <_printf_float+0x162>
 8019350:	2306      	movs	r3, #6
 8019352:	6063      	str	r3, [r4, #4]
 8019354:	2300      	movs	r3, #0
 8019356:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801935a:	ab09      	add	r3, sp, #36	; 0x24
 801935c:	9300      	str	r3, [sp, #0]
 801935e:	ec49 8b10 	vmov	d0, r8, r9
 8019362:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019366:	6022      	str	r2, [r4, #0]
 8019368:	f8cd a004 	str.w	sl, [sp, #4]
 801936c:	6861      	ldr	r1, [r4, #4]
 801936e:	4628      	mov	r0, r5
 8019370:	f7ff fee8 	bl	8019144 <__cvt>
 8019374:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8019378:	2b47      	cmp	r3, #71	; 0x47
 801937a:	4680      	mov	r8, r0
 801937c:	d109      	bne.n	8019392 <_printf_float+0x126>
 801937e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019380:	1cd8      	adds	r0, r3, #3
 8019382:	db02      	blt.n	801938a <_printf_float+0x11e>
 8019384:	6862      	ldr	r2, [r4, #4]
 8019386:	4293      	cmp	r3, r2
 8019388:	dd47      	ble.n	801941a <_printf_float+0x1ae>
 801938a:	f1aa 0a02 	sub.w	sl, sl, #2
 801938e:	fa5f fa8a 	uxtb.w	sl, sl
 8019392:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8019396:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019398:	d824      	bhi.n	80193e4 <_printf_float+0x178>
 801939a:	3901      	subs	r1, #1
 801939c:	4652      	mov	r2, sl
 801939e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80193a2:	9109      	str	r1, [sp, #36]	; 0x24
 80193a4:	f7ff ff2f 	bl	8019206 <__exponent>
 80193a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80193aa:	1813      	adds	r3, r2, r0
 80193ac:	2a01      	cmp	r2, #1
 80193ae:	4681      	mov	r9, r0
 80193b0:	6123      	str	r3, [r4, #16]
 80193b2:	dc02      	bgt.n	80193ba <_printf_float+0x14e>
 80193b4:	6822      	ldr	r2, [r4, #0]
 80193b6:	07d1      	lsls	r1, r2, #31
 80193b8:	d501      	bpl.n	80193be <_printf_float+0x152>
 80193ba:	3301      	adds	r3, #1
 80193bc:	6123      	str	r3, [r4, #16]
 80193be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d0a5      	beq.n	8019312 <_printf_float+0xa6>
 80193c6:	232d      	movs	r3, #45	; 0x2d
 80193c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80193cc:	e7a1      	b.n	8019312 <_printf_float+0xa6>
 80193ce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80193d2:	f000 8177 	beq.w	80196c4 <_printf_float+0x458>
 80193d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80193da:	d1bb      	bne.n	8019354 <_printf_float+0xe8>
 80193dc:	2900      	cmp	r1, #0
 80193de:	d1b9      	bne.n	8019354 <_printf_float+0xe8>
 80193e0:	2301      	movs	r3, #1
 80193e2:	e7b6      	b.n	8019352 <_printf_float+0xe6>
 80193e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80193e8:	d119      	bne.n	801941e <_printf_float+0x1b2>
 80193ea:	2900      	cmp	r1, #0
 80193ec:	6863      	ldr	r3, [r4, #4]
 80193ee:	dd0c      	ble.n	801940a <_printf_float+0x19e>
 80193f0:	6121      	str	r1, [r4, #16]
 80193f2:	b913      	cbnz	r3, 80193fa <_printf_float+0x18e>
 80193f4:	6822      	ldr	r2, [r4, #0]
 80193f6:	07d2      	lsls	r2, r2, #31
 80193f8:	d502      	bpl.n	8019400 <_printf_float+0x194>
 80193fa:	3301      	adds	r3, #1
 80193fc:	440b      	add	r3, r1
 80193fe:	6123      	str	r3, [r4, #16]
 8019400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019402:	65a3      	str	r3, [r4, #88]	; 0x58
 8019404:	f04f 0900 	mov.w	r9, #0
 8019408:	e7d9      	b.n	80193be <_printf_float+0x152>
 801940a:	b913      	cbnz	r3, 8019412 <_printf_float+0x1a6>
 801940c:	6822      	ldr	r2, [r4, #0]
 801940e:	07d0      	lsls	r0, r2, #31
 8019410:	d501      	bpl.n	8019416 <_printf_float+0x1aa>
 8019412:	3302      	adds	r3, #2
 8019414:	e7f3      	b.n	80193fe <_printf_float+0x192>
 8019416:	2301      	movs	r3, #1
 8019418:	e7f1      	b.n	80193fe <_printf_float+0x192>
 801941a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801941e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8019422:	4293      	cmp	r3, r2
 8019424:	db05      	blt.n	8019432 <_printf_float+0x1c6>
 8019426:	6822      	ldr	r2, [r4, #0]
 8019428:	6123      	str	r3, [r4, #16]
 801942a:	07d1      	lsls	r1, r2, #31
 801942c:	d5e8      	bpl.n	8019400 <_printf_float+0x194>
 801942e:	3301      	adds	r3, #1
 8019430:	e7e5      	b.n	80193fe <_printf_float+0x192>
 8019432:	2b00      	cmp	r3, #0
 8019434:	bfd4      	ite	le
 8019436:	f1c3 0302 	rsble	r3, r3, #2
 801943a:	2301      	movgt	r3, #1
 801943c:	4413      	add	r3, r2
 801943e:	e7de      	b.n	80193fe <_printf_float+0x192>
 8019440:	6823      	ldr	r3, [r4, #0]
 8019442:	055a      	lsls	r2, r3, #21
 8019444:	d407      	bmi.n	8019456 <_printf_float+0x1ea>
 8019446:	6923      	ldr	r3, [r4, #16]
 8019448:	4642      	mov	r2, r8
 801944a:	4631      	mov	r1, r6
 801944c:	4628      	mov	r0, r5
 801944e:	47b8      	blx	r7
 8019450:	3001      	adds	r0, #1
 8019452:	d12b      	bne.n	80194ac <_printf_float+0x240>
 8019454:	e767      	b.n	8019326 <_printf_float+0xba>
 8019456:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801945a:	f240 80dc 	bls.w	8019616 <_printf_float+0x3aa>
 801945e:	2200      	movs	r2, #0
 8019460:	2300      	movs	r3, #0
 8019462:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019466:	f7e7 fb2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801946a:	2800      	cmp	r0, #0
 801946c:	d033      	beq.n	80194d6 <_printf_float+0x26a>
 801946e:	2301      	movs	r3, #1
 8019470:	4a41      	ldr	r2, [pc, #260]	; (8019578 <_printf_float+0x30c>)
 8019472:	4631      	mov	r1, r6
 8019474:	4628      	mov	r0, r5
 8019476:	47b8      	blx	r7
 8019478:	3001      	adds	r0, #1
 801947a:	f43f af54 	beq.w	8019326 <_printf_float+0xba>
 801947e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019482:	429a      	cmp	r2, r3
 8019484:	db02      	blt.n	801948c <_printf_float+0x220>
 8019486:	6823      	ldr	r3, [r4, #0]
 8019488:	07d8      	lsls	r0, r3, #31
 801948a:	d50f      	bpl.n	80194ac <_printf_float+0x240>
 801948c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019490:	4631      	mov	r1, r6
 8019492:	4628      	mov	r0, r5
 8019494:	47b8      	blx	r7
 8019496:	3001      	adds	r0, #1
 8019498:	f43f af45 	beq.w	8019326 <_printf_float+0xba>
 801949c:	f04f 0800 	mov.w	r8, #0
 80194a0:	f104 091a 	add.w	r9, r4, #26
 80194a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80194a6:	3b01      	subs	r3, #1
 80194a8:	4543      	cmp	r3, r8
 80194aa:	dc09      	bgt.n	80194c0 <_printf_float+0x254>
 80194ac:	6823      	ldr	r3, [r4, #0]
 80194ae:	079b      	lsls	r3, r3, #30
 80194b0:	f100 8103 	bmi.w	80196ba <_printf_float+0x44e>
 80194b4:	68e0      	ldr	r0, [r4, #12]
 80194b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194b8:	4298      	cmp	r0, r3
 80194ba:	bfb8      	it	lt
 80194bc:	4618      	movlt	r0, r3
 80194be:	e734      	b.n	801932a <_printf_float+0xbe>
 80194c0:	2301      	movs	r3, #1
 80194c2:	464a      	mov	r2, r9
 80194c4:	4631      	mov	r1, r6
 80194c6:	4628      	mov	r0, r5
 80194c8:	47b8      	blx	r7
 80194ca:	3001      	adds	r0, #1
 80194cc:	f43f af2b 	beq.w	8019326 <_printf_float+0xba>
 80194d0:	f108 0801 	add.w	r8, r8, #1
 80194d4:	e7e6      	b.n	80194a4 <_printf_float+0x238>
 80194d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194d8:	2b00      	cmp	r3, #0
 80194da:	dc2b      	bgt.n	8019534 <_printf_float+0x2c8>
 80194dc:	2301      	movs	r3, #1
 80194de:	4a26      	ldr	r2, [pc, #152]	; (8019578 <_printf_float+0x30c>)
 80194e0:	4631      	mov	r1, r6
 80194e2:	4628      	mov	r0, r5
 80194e4:	47b8      	blx	r7
 80194e6:	3001      	adds	r0, #1
 80194e8:	f43f af1d 	beq.w	8019326 <_printf_float+0xba>
 80194ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194ee:	b923      	cbnz	r3, 80194fa <_printf_float+0x28e>
 80194f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80194f2:	b913      	cbnz	r3, 80194fa <_printf_float+0x28e>
 80194f4:	6823      	ldr	r3, [r4, #0]
 80194f6:	07d9      	lsls	r1, r3, #31
 80194f8:	d5d8      	bpl.n	80194ac <_printf_float+0x240>
 80194fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80194fe:	4631      	mov	r1, r6
 8019500:	4628      	mov	r0, r5
 8019502:	47b8      	blx	r7
 8019504:	3001      	adds	r0, #1
 8019506:	f43f af0e 	beq.w	8019326 <_printf_float+0xba>
 801950a:	f04f 0900 	mov.w	r9, #0
 801950e:	f104 0a1a 	add.w	sl, r4, #26
 8019512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019514:	425b      	negs	r3, r3
 8019516:	454b      	cmp	r3, r9
 8019518:	dc01      	bgt.n	801951e <_printf_float+0x2b2>
 801951a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801951c:	e794      	b.n	8019448 <_printf_float+0x1dc>
 801951e:	2301      	movs	r3, #1
 8019520:	4652      	mov	r2, sl
 8019522:	4631      	mov	r1, r6
 8019524:	4628      	mov	r0, r5
 8019526:	47b8      	blx	r7
 8019528:	3001      	adds	r0, #1
 801952a:	f43f aefc 	beq.w	8019326 <_printf_float+0xba>
 801952e:	f109 0901 	add.w	r9, r9, #1
 8019532:	e7ee      	b.n	8019512 <_printf_float+0x2a6>
 8019534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019538:	429a      	cmp	r2, r3
 801953a:	bfa8      	it	ge
 801953c:	461a      	movge	r2, r3
 801953e:	2a00      	cmp	r2, #0
 8019540:	4691      	mov	r9, r2
 8019542:	dd07      	ble.n	8019554 <_printf_float+0x2e8>
 8019544:	4613      	mov	r3, r2
 8019546:	4631      	mov	r1, r6
 8019548:	4642      	mov	r2, r8
 801954a:	4628      	mov	r0, r5
 801954c:	47b8      	blx	r7
 801954e:	3001      	adds	r0, #1
 8019550:	f43f aee9 	beq.w	8019326 <_printf_float+0xba>
 8019554:	f104 031a 	add.w	r3, r4, #26
 8019558:	f04f 0b00 	mov.w	fp, #0
 801955c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019560:	9306      	str	r3, [sp, #24]
 8019562:	e015      	b.n	8019590 <_printf_float+0x324>
 8019564:	7fefffff 	.word	0x7fefffff
 8019568:	08021062 	.word	0x08021062
 801956c:	0802105e 	.word	0x0802105e
 8019570:	0802106a 	.word	0x0802106a
 8019574:	08021066 	.word	0x08021066
 8019578:	0802106e 	.word	0x0802106e
 801957c:	2301      	movs	r3, #1
 801957e:	9a06      	ldr	r2, [sp, #24]
 8019580:	4631      	mov	r1, r6
 8019582:	4628      	mov	r0, r5
 8019584:	47b8      	blx	r7
 8019586:	3001      	adds	r0, #1
 8019588:	f43f aecd 	beq.w	8019326 <_printf_float+0xba>
 801958c:	f10b 0b01 	add.w	fp, fp, #1
 8019590:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8019594:	ebaa 0309 	sub.w	r3, sl, r9
 8019598:	455b      	cmp	r3, fp
 801959a:	dcef      	bgt.n	801957c <_printf_float+0x310>
 801959c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80195a0:	429a      	cmp	r2, r3
 80195a2:	44d0      	add	r8, sl
 80195a4:	db15      	blt.n	80195d2 <_printf_float+0x366>
 80195a6:	6823      	ldr	r3, [r4, #0]
 80195a8:	07da      	lsls	r2, r3, #31
 80195aa:	d412      	bmi.n	80195d2 <_printf_float+0x366>
 80195ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80195b0:	eba3 020a 	sub.w	r2, r3, sl
 80195b4:	eba3 0a01 	sub.w	sl, r3, r1
 80195b8:	4592      	cmp	sl, r2
 80195ba:	bfa8      	it	ge
 80195bc:	4692      	movge	sl, r2
 80195be:	f1ba 0f00 	cmp.w	sl, #0
 80195c2:	dc0e      	bgt.n	80195e2 <_printf_float+0x376>
 80195c4:	f04f 0800 	mov.w	r8, #0
 80195c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80195cc:	f104 091a 	add.w	r9, r4, #26
 80195d0:	e019      	b.n	8019606 <_printf_float+0x39a>
 80195d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80195d6:	4631      	mov	r1, r6
 80195d8:	4628      	mov	r0, r5
 80195da:	47b8      	blx	r7
 80195dc:	3001      	adds	r0, #1
 80195de:	d1e5      	bne.n	80195ac <_printf_float+0x340>
 80195e0:	e6a1      	b.n	8019326 <_printf_float+0xba>
 80195e2:	4653      	mov	r3, sl
 80195e4:	4642      	mov	r2, r8
 80195e6:	4631      	mov	r1, r6
 80195e8:	4628      	mov	r0, r5
 80195ea:	47b8      	blx	r7
 80195ec:	3001      	adds	r0, #1
 80195ee:	d1e9      	bne.n	80195c4 <_printf_float+0x358>
 80195f0:	e699      	b.n	8019326 <_printf_float+0xba>
 80195f2:	2301      	movs	r3, #1
 80195f4:	464a      	mov	r2, r9
 80195f6:	4631      	mov	r1, r6
 80195f8:	4628      	mov	r0, r5
 80195fa:	47b8      	blx	r7
 80195fc:	3001      	adds	r0, #1
 80195fe:	f43f ae92 	beq.w	8019326 <_printf_float+0xba>
 8019602:	f108 0801 	add.w	r8, r8, #1
 8019606:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801960a:	1a9b      	subs	r3, r3, r2
 801960c:	eba3 030a 	sub.w	r3, r3, sl
 8019610:	4543      	cmp	r3, r8
 8019612:	dcee      	bgt.n	80195f2 <_printf_float+0x386>
 8019614:	e74a      	b.n	80194ac <_printf_float+0x240>
 8019616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019618:	2a01      	cmp	r2, #1
 801961a:	dc01      	bgt.n	8019620 <_printf_float+0x3b4>
 801961c:	07db      	lsls	r3, r3, #31
 801961e:	d53a      	bpl.n	8019696 <_printf_float+0x42a>
 8019620:	2301      	movs	r3, #1
 8019622:	4642      	mov	r2, r8
 8019624:	4631      	mov	r1, r6
 8019626:	4628      	mov	r0, r5
 8019628:	47b8      	blx	r7
 801962a:	3001      	adds	r0, #1
 801962c:	f43f ae7b 	beq.w	8019326 <_printf_float+0xba>
 8019630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019634:	4631      	mov	r1, r6
 8019636:	4628      	mov	r0, r5
 8019638:	47b8      	blx	r7
 801963a:	3001      	adds	r0, #1
 801963c:	f108 0801 	add.w	r8, r8, #1
 8019640:	f43f ae71 	beq.w	8019326 <_printf_float+0xba>
 8019644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019646:	2200      	movs	r2, #0
 8019648:	f103 3aff 	add.w	sl, r3, #4294967295
 801964c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019650:	2300      	movs	r3, #0
 8019652:	f7e7 fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 8019656:	b9c8      	cbnz	r0, 801968c <_printf_float+0x420>
 8019658:	4653      	mov	r3, sl
 801965a:	4642      	mov	r2, r8
 801965c:	4631      	mov	r1, r6
 801965e:	4628      	mov	r0, r5
 8019660:	47b8      	blx	r7
 8019662:	3001      	adds	r0, #1
 8019664:	d10e      	bne.n	8019684 <_printf_float+0x418>
 8019666:	e65e      	b.n	8019326 <_printf_float+0xba>
 8019668:	2301      	movs	r3, #1
 801966a:	4652      	mov	r2, sl
 801966c:	4631      	mov	r1, r6
 801966e:	4628      	mov	r0, r5
 8019670:	47b8      	blx	r7
 8019672:	3001      	adds	r0, #1
 8019674:	f43f ae57 	beq.w	8019326 <_printf_float+0xba>
 8019678:	f108 0801 	add.w	r8, r8, #1
 801967c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801967e:	3b01      	subs	r3, #1
 8019680:	4543      	cmp	r3, r8
 8019682:	dcf1      	bgt.n	8019668 <_printf_float+0x3fc>
 8019684:	464b      	mov	r3, r9
 8019686:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801968a:	e6de      	b.n	801944a <_printf_float+0x1de>
 801968c:	f04f 0800 	mov.w	r8, #0
 8019690:	f104 0a1a 	add.w	sl, r4, #26
 8019694:	e7f2      	b.n	801967c <_printf_float+0x410>
 8019696:	2301      	movs	r3, #1
 8019698:	e7df      	b.n	801965a <_printf_float+0x3ee>
 801969a:	2301      	movs	r3, #1
 801969c:	464a      	mov	r2, r9
 801969e:	4631      	mov	r1, r6
 80196a0:	4628      	mov	r0, r5
 80196a2:	47b8      	blx	r7
 80196a4:	3001      	adds	r0, #1
 80196a6:	f43f ae3e 	beq.w	8019326 <_printf_float+0xba>
 80196aa:	f108 0801 	add.w	r8, r8, #1
 80196ae:	68e3      	ldr	r3, [r4, #12]
 80196b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80196b2:	1a9b      	subs	r3, r3, r2
 80196b4:	4543      	cmp	r3, r8
 80196b6:	dcf0      	bgt.n	801969a <_printf_float+0x42e>
 80196b8:	e6fc      	b.n	80194b4 <_printf_float+0x248>
 80196ba:	f04f 0800 	mov.w	r8, #0
 80196be:	f104 0919 	add.w	r9, r4, #25
 80196c2:	e7f4      	b.n	80196ae <_printf_float+0x442>
 80196c4:	2900      	cmp	r1, #0
 80196c6:	f43f ae8b 	beq.w	80193e0 <_printf_float+0x174>
 80196ca:	2300      	movs	r3, #0
 80196cc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80196d0:	ab09      	add	r3, sp, #36	; 0x24
 80196d2:	9300      	str	r3, [sp, #0]
 80196d4:	ec49 8b10 	vmov	d0, r8, r9
 80196d8:	6022      	str	r2, [r4, #0]
 80196da:	f8cd a004 	str.w	sl, [sp, #4]
 80196de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80196e2:	4628      	mov	r0, r5
 80196e4:	f7ff fd2e 	bl	8019144 <__cvt>
 80196e8:	4680      	mov	r8, r0
 80196ea:	e648      	b.n	801937e <_printf_float+0x112>

080196ec <_printf_common>:
 80196ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196f0:	4691      	mov	r9, r2
 80196f2:	461f      	mov	r7, r3
 80196f4:	688a      	ldr	r2, [r1, #8]
 80196f6:	690b      	ldr	r3, [r1, #16]
 80196f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80196fc:	4293      	cmp	r3, r2
 80196fe:	bfb8      	it	lt
 8019700:	4613      	movlt	r3, r2
 8019702:	f8c9 3000 	str.w	r3, [r9]
 8019706:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801970a:	4606      	mov	r6, r0
 801970c:	460c      	mov	r4, r1
 801970e:	b112      	cbz	r2, 8019716 <_printf_common+0x2a>
 8019710:	3301      	adds	r3, #1
 8019712:	f8c9 3000 	str.w	r3, [r9]
 8019716:	6823      	ldr	r3, [r4, #0]
 8019718:	0699      	lsls	r1, r3, #26
 801971a:	bf42      	ittt	mi
 801971c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019720:	3302      	addmi	r3, #2
 8019722:	f8c9 3000 	strmi.w	r3, [r9]
 8019726:	6825      	ldr	r5, [r4, #0]
 8019728:	f015 0506 	ands.w	r5, r5, #6
 801972c:	d107      	bne.n	801973e <_printf_common+0x52>
 801972e:	f104 0a19 	add.w	sl, r4, #25
 8019732:	68e3      	ldr	r3, [r4, #12]
 8019734:	f8d9 2000 	ldr.w	r2, [r9]
 8019738:	1a9b      	subs	r3, r3, r2
 801973a:	42ab      	cmp	r3, r5
 801973c:	dc28      	bgt.n	8019790 <_printf_common+0xa4>
 801973e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019742:	6822      	ldr	r2, [r4, #0]
 8019744:	3300      	adds	r3, #0
 8019746:	bf18      	it	ne
 8019748:	2301      	movne	r3, #1
 801974a:	0692      	lsls	r2, r2, #26
 801974c:	d42d      	bmi.n	80197aa <_printf_common+0xbe>
 801974e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019752:	4639      	mov	r1, r7
 8019754:	4630      	mov	r0, r6
 8019756:	47c0      	blx	r8
 8019758:	3001      	adds	r0, #1
 801975a:	d020      	beq.n	801979e <_printf_common+0xb2>
 801975c:	6823      	ldr	r3, [r4, #0]
 801975e:	68e5      	ldr	r5, [r4, #12]
 8019760:	f8d9 2000 	ldr.w	r2, [r9]
 8019764:	f003 0306 	and.w	r3, r3, #6
 8019768:	2b04      	cmp	r3, #4
 801976a:	bf08      	it	eq
 801976c:	1aad      	subeq	r5, r5, r2
 801976e:	68a3      	ldr	r3, [r4, #8]
 8019770:	6922      	ldr	r2, [r4, #16]
 8019772:	bf0c      	ite	eq
 8019774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019778:	2500      	movne	r5, #0
 801977a:	4293      	cmp	r3, r2
 801977c:	bfc4      	itt	gt
 801977e:	1a9b      	subgt	r3, r3, r2
 8019780:	18ed      	addgt	r5, r5, r3
 8019782:	f04f 0900 	mov.w	r9, #0
 8019786:	341a      	adds	r4, #26
 8019788:	454d      	cmp	r5, r9
 801978a:	d11a      	bne.n	80197c2 <_printf_common+0xd6>
 801978c:	2000      	movs	r0, #0
 801978e:	e008      	b.n	80197a2 <_printf_common+0xb6>
 8019790:	2301      	movs	r3, #1
 8019792:	4652      	mov	r2, sl
 8019794:	4639      	mov	r1, r7
 8019796:	4630      	mov	r0, r6
 8019798:	47c0      	blx	r8
 801979a:	3001      	adds	r0, #1
 801979c:	d103      	bne.n	80197a6 <_printf_common+0xba>
 801979e:	f04f 30ff 	mov.w	r0, #4294967295
 80197a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197a6:	3501      	adds	r5, #1
 80197a8:	e7c3      	b.n	8019732 <_printf_common+0x46>
 80197aa:	18e1      	adds	r1, r4, r3
 80197ac:	1c5a      	adds	r2, r3, #1
 80197ae:	2030      	movs	r0, #48	; 0x30
 80197b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80197b4:	4422      	add	r2, r4
 80197b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80197ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80197be:	3302      	adds	r3, #2
 80197c0:	e7c5      	b.n	801974e <_printf_common+0x62>
 80197c2:	2301      	movs	r3, #1
 80197c4:	4622      	mov	r2, r4
 80197c6:	4639      	mov	r1, r7
 80197c8:	4630      	mov	r0, r6
 80197ca:	47c0      	blx	r8
 80197cc:	3001      	adds	r0, #1
 80197ce:	d0e6      	beq.n	801979e <_printf_common+0xb2>
 80197d0:	f109 0901 	add.w	r9, r9, #1
 80197d4:	e7d8      	b.n	8019788 <_printf_common+0x9c>
	...

080197d8 <_printf_i>:
 80197d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80197dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80197e0:	460c      	mov	r4, r1
 80197e2:	7e09      	ldrb	r1, [r1, #24]
 80197e4:	b085      	sub	sp, #20
 80197e6:	296e      	cmp	r1, #110	; 0x6e
 80197e8:	4617      	mov	r7, r2
 80197ea:	4606      	mov	r6, r0
 80197ec:	4698      	mov	r8, r3
 80197ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80197f0:	f000 80b3 	beq.w	801995a <_printf_i+0x182>
 80197f4:	d822      	bhi.n	801983c <_printf_i+0x64>
 80197f6:	2963      	cmp	r1, #99	; 0x63
 80197f8:	d036      	beq.n	8019868 <_printf_i+0x90>
 80197fa:	d80a      	bhi.n	8019812 <_printf_i+0x3a>
 80197fc:	2900      	cmp	r1, #0
 80197fe:	f000 80b9 	beq.w	8019974 <_printf_i+0x19c>
 8019802:	2958      	cmp	r1, #88	; 0x58
 8019804:	f000 8083 	beq.w	801990e <_printf_i+0x136>
 8019808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801980c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019810:	e032      	b.n	8019878 <_printf_i+0xa0>
 8019812:	2964      	cmp	r1, #100	; 0x64
 8019814:	d001      	beq.n	801981a <_printf_i+0x42>
 8019816:	2969      	cmp	r1, #105	; 0x69
 8019818:	d1f6      	bne.n	8019808 <_printf_i+0x30>
 801981a:	6820      	ldr	r0, [r4, #0]
 801981c:	6813      	ldr	r3, [r2, #0]
 801981e:	0605      	lsls	r5, r0, #24
 8019820:	f103 0104 	add.w	r1, r3, #4
 8019824:	d52a      	bpl.n	801987c <_printf_i+0xa4>
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	6011      	str	r1, [r2, #0]
 801982a:	2b00      	cmp	r3, #0
 801982c:	da03      	bge.n	8019836 <_printf_i+0x5e>
 801982e:	222d      	movs	r2, #45	; 0x2d
 8019830:	425b      	negs	r3, r3
 8019832:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019836:	486f      	ldr	r0, [pc, #444]	; (80199f4 <_printf_i+0x21c>)
 8019838:	220a      	movs	r2, #10
 801983a:	e039      	b.n	80198b0 <_printf_i+0xd8>
 801983c:	2973      	cmp	r1, #115	; 0x73
 801983e:	f000 809d 	beq.w	801997c <_printf_i+0x1a4>
 8019842:	d808      	bhi.n	8019856 <_printf_i+0x7e>
 8019844:	296f      	cmp	r1, #111	; 0x6f
 8019846:	d020      	beq.n	801988a <_printf_i+0xb2>
 8019848:	2970      	cmp	r1, #112	; 0x70
 801984a:	d1dd      	bne.n	8019808 <_printf_i+0x30>
 801984c:	6823      	ldr	r3, [r4, #0]
 801984e:	f043 0320 	orr.w	r3, r3, #32
 8019852:	6023      	str	r3, [r4, #0]
 8019854:	e003      	b.n	801985e <_printf_i+0x86>
 8019856:	2975      	cmp	r1, #117	; 0x75
 8019858:	d017      	beq.n	801988a <_printf_i+0xb2>
 801985a:	2978      	cmp	r1, #120	; 0x78
 801985c:	d1d4      	bne.n	8019808 <_printf_i+0x30>
 801985e:	2378      	movs	r3, #120	; 0x78
 8019860:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019864:	4864      	ldr	r0, [pc, #400]	; (80199f8 <_printf_i+0x220>)
 8019866:	e055      	b.n	8019914 <_printf_i+0x13c>
 8019868:	6813      	ldr	r3, [r2, #0]
 801986a:	1d19      	adds	r1, r3, #4
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	6011      	str	r1, [r2, #0]
 8019870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019878:	2301      	movs	r3, #1
 801987a:	e08c      	b.n	8019996 <_printf_i+0x1be>
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	6011      	str	r1, [r2, #0]
 8019880:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019884:	bf18      	it	ne
 8019886:	b21b      	sxthne	r3, r3
 8019888:	e7cf      	b.n	801982a <_printf_i+0x52>
 801988a:	6813      	ldr	r3, [r2, #0]
 801988c:	6825      	ldr	r5, [r4, #0]
 801988e:	1d18      	adds	r0, r3, #4
 8019890:	6010      	str	r0, [r2, #0]
 8019892:	0628      	lsls	r0, r5, #24
 8019894:	d501      	bpl.n	801989a <_printf_i+0xc2>
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	e002      	b.n	80198a0 <_printf_i+0xc8>
 801989a:	0668      	lsls	r0, r5, #25
 801989c:	d5fb      	bpl.n	8019896 <_printf_i+0xbe>
 801989e:	881b      	ldrh	r3, [r3, #0]
 80198a0:	4854      	ldr	r0, [pc, #336]	; (80199f4 <_printf_i+0x21c>)
 80198a2:	296f      	cmp	r1, #111	; 0x6f
 80198a4:	bf14      	ite	ne
 80198a6:	220a      	movne	r2, #10
 80198a8:	2208      	moveq	r2, #8
 80198aa:	2100      	movs	r1, #0
 80198ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80198b0:	6865      	ldr	r5, [r4, #4]
 80198b2:	60a5      	str	r5, [r4, #8]
 80198b4:	2d00      	cmp	r5, #0
 80198b6:	f2c0 8095 	blt.w	80199e4 <_printf_i+0x20c>
 80198ba:	6821      	ldr	r1, [r4, #0]
 80198bc:	f021 0104 	bic.w	r1, r1, #4
 80198c0:	6021      	str	r1, [r4, #0]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d13d      	bne.n	8019942 <_printf_i+0x16a>
 80198c6:	2d00      	cmp	r5, #0
 80198c8:	f040 808e 	bne.w	80199e8 <_printf_i+0x210>
 80198cc:	4665      	mov	r5, ip
 80198ce:	2a08      	cmp	r2, #8
 80198d0:	d10b      	bne.n	80198ea <_printf_i+0x112>
 80198d2:	6823      	ldr	r3, [r4, #0]
 80198d4:	07db      	lsls	r3, r3, #31
 80198d6:	d508      	bpl.n	80198ea <_printf_i+0x112>
 80198d8:	6923      	ldr	r3, [r4, #16]
 80198da:	6862      	ldr	r2, [r4, #4]
 80198dc:	429a      	cmp	r2, r3
 80198de:	bfde      	ittt	le
 80198e0:	2330      	movle	r3, #48	; 0x30
 80198e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80198e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80198ea:	ebac 0305 	sub.w	r3, ip, r5
 80198ee:	6123      	str	r3, [r4, #16]
 80198f0:	f8cd 8000 	str.w	r8, [sp]
 80198f4:	463b      	mov	r3, r7
 80198f6:	aa03      	add	r2, sp, #12
 80198f8:	4621      	mov	r1, r4
 80198fa:	4630      	mov	r0, r6
 80198fc:	f7ff fef6 	bl	80196ec <_printf_common>
 8019900:	3001      	adds	r0, #1
 8019902:	d14d      	bne.n	80199a0 <_printf_i+0x1c8>
 8019904:	f04f 30ff 	mov.w	r0, #4294967295
 8019908:	b005      	add	sp, #20
 801990a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801990e:	4839      	ldr	r0, [pc, #228]	; (80199f4 <_printf_i+0x21c>)
 8019910:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019914:	6813      	ldr	r3, [r2, #0]
 8019916:	6821      	ldr	r1, [r4, #0]
 8019918:	1d1d      	adds	r5, r3, #4
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	6015      	str	r5, [r2, #0]
 801991e:	060a      	lsls	r2, r1, #24
 8019920:	d50b      	bpl.n	801993a <_printf_i+0x162>
 8019922:	07ca      	lsls	r2, r1, #31
 8019924:	bf44      	itt	mi
 8019926:	f041 0120 	orrmi.w	r1, r1, #32
 801992a:	6021      	strmi	r1, [r4, #0]
 801992c:	b91b      	cbnz	r3, 8019936 <_printf_i+0x15e>
 801992e:	6822      	ldr	r2, [r4, #0]
 8019930:	f022 0220 	bic.w	r2, r2, #32
 8019934:	6022      	str	r2, [r4, #0]
 8019936:	2210      	movs	r2, #16
 8019938:	e7b7      	b.n	80198aa <_printf_i+0xd2>
 801993a:	064d      	lsls	r5, r1, #25
 801993c:	bf48      	it	mi
 801993e:	b29b      	uxthmi	r3, r3
 8019940:	e7ef      	b.n	8019922 <_printf_i+0x14a>
 8019942:	4665      	mov	r5, ip
 8019944:	fbb3 f1f2 	udiv	r1, r3, r2
 8019948:	fb02 3311 	mls	r3, r2, r1, r3
 801994c:	5cc3      	ldrb	r3, [r0, r3]
 801994e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019952:	460b      	mov	r3, r1
 8019954:	2900      	cmp	r1, #0
 8019956:	d1f5      	bne.n	8019944 <_printf_i+0x16c>
 8019958:	e7b9      	b.n	80198ce <_printf_i+0xf6>
 801995a:	6813      	ldr	r3, [r2, #0]
 801995c:	6825      	ldr	r5, [r4, #0]
 801995e:	6961      	ldr	r1, [r4, #20]
 8019960:	1d18      	adds	r0, r3, #4
 8019962:	6010      	str	r0, [r2, #0]
 8019964:	0628      	lsls	r0, r5, #24
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	d501      	bpl.n	801996e <_printf_i+0x196>
 801996a:	6019      	str	r1, [r3, #0]
 801996c:	e002      	b.n	8019974 <_printf_i+0x19c>
 801996e:	066a      	lsls	r2, r5, #25
 8019970:	d5fb      	bpl.n	801996a <_printf_i+0x192>
 8019972:	8019      	strh	r1, [r3, #0]
 8019974:	2300      	movs	r3, #0
 8019976:	6123      	str	r3, [r4, #16]
 8019978:	4665      	mov	r5, ip
 801997a:	e7b9      	b.n	80198f0 <_printf_i+0x118>
 801997c:	6813      	ldr	r3, [r2, #0]
 801997e:	1d19      	adds	r1, r3, #4
 8019980:	6011      	str	r1, [r2, #0]
 8019982:	681d      	ldr	r5, [r3, #0]
 8019984:	6862      	ldr	r2, [r4, #4]
 8019986:	2100      	movs	r1, #0
 8019988:	4628      	mov	r0, r5
 801998a:	f7e6 fc29 	bl	80001e0 <memchr>
 801998e:	b108      	cbz	r0, 8019994 <_printf_i+0x1bc>
 8019990:	1b40      	subs	r0, r0, r5
 8019992:	6060      	str	r0, [r4, #4]
 8019994:	6863      	ldr	r3, [r4, #4]
 8019996:	6123      	str	r3, [r4, #16]
 8019998:	2300      	movs	r3, #0
 801999a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801999e:	e7a7      	b.n	80198f0 <_printf_i+0x118>
 80199a0:	6923      	ldr	r3, [r4, #16]
 80199a2:	462a      	mov	r2, r5
 80199a4:	4639      	mov	r1, r7
 80199a6:	4630      	mov	r0, r6
 80199a8:	47c0      	blx	r8
 80199aa:	3001      	adds	r0, #1
 80199ac:	d0aa      	beq.n	8019904 <_printf_i+0x12c>
 80199ae:	6823      	ldr	r3, [r4, #0]
 80199b0:	079b      	lsls	r3, r3, #30
 80199b2:	d413      	bmi.n	80199dc <_printf_i+0x204>
 80199b4:	68e0      	ldr	r0, [r4, #12]
 80199b6:	9b03      	ldr	r3, [sp, #12]
 80199b8:	4298      	cmp	r0, r3
 80199ba:	bfb8      	it	lt
 80199bc:	4618      	movlt	r0, r3
 80199be:	e7a3      	b.n	8019908 <_printf_i+0x130>
 80199c0:	2301      	movs	r3, #1
 80199c2:	464a      	mov	r2, r9
 80199c4:	4639      	mov	r1, r7
 80199c6:	4630      	mov	r0, r6
 80199c8:	47c0      	blx	r8
 80199ca:	3001      	adds	r0, #1
 80199cc:	d09a      	beq.n	8019904 <_printf_i+0x12c>
 80199ce:	3501      	adds	r5, #1
 80199d0:	68e3      	ldr	r3, [r4, #12]
 80199d2:	9a03      	ldr	r2, [sp, #12]
 80199d4:	1a9b      	subs	r3, r3, r2
 80199d6:	42ab      	cmp	r3, r5
 80199d8:	dcf2      	bgt.n	80199c0 <_printf_i+0x1e8>
 80199da:	e7eb      	b.n	80199b4 <_printf_i+0x1dc>
 80199dc:	2500      	movs	r5, #0
 80199de:	f104 0919 	add.w	r9, r4, #25
 80199e2:	e7f5      	b.n	80199d0 <_printf_i+0x1f8>
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d1ac      	bne.n	8019942 <_printf_i+0x16a>
 80199e8:	7803      	ldrb	r3, [r0, #0]
 80199ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80199ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80199f2:	e76c      	b.n	80198ce <_printf_i+0xf6>
 80199f4:	08021070 	.word	0x08021070
 80199f8:	08021081 	.word	0x08021081

080199fc <iprintf>:
 80199fc:	b40f      	push	{r0, r1, r2, r3}
 80199fe:	4b0a      	ldr	r3, [pc, #40]	; (8019a28 <iprintf+0x2c>)
 8019a00:	b513      	push	{r0, r1, r4, lr}
 8019a02:	681c      	ldr	r4, [r3, #0]
 8019a04:	b124      	cbz	r4, 8019a10 <iprintf+0x14>
 8019a06:	69a3      	ldr	r3, [r4, #24]
 8019a08:	b913      	cbnz	r3, 8019a10 <iprintf+0x14>
 8019a0a:	4620      	mov	r0, r4
 8019a0c:	f000 ff04 	bl	801a818 <__sinit>
 8019a10:	ab05      	add	r3, sp, #20
 8019a12:	9a04      	ldr	r2, [sp, #16]
 8019a14:	68a1      	ldr	r1, [r4, #8]
 8019a16:	9301      	str	r3, [sp, #4]
 8019a18:	4620      	mov	r0, r4
 8019a1a:	f001 fbfd 	bl	801b218 <_vfiprintf_r>
 8019a1e:	b002      	add	sp, #8
 8019a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a24:	b004      	add	sp, #16
 8019a26:	4770      	bx	lr
 8019a28:	200000c0 	.word	0x200000c0

08019a2c <rand>:
 8019a2c:	b538      	push	{r3, r4, r5, lr}
 8019a2e:	4b13      	ldr	r3, [pc, #76]	; (8019a7c <rand+0x50>)
 8019a30:	681c      	ldr	r4, [r3, #0]
 8019a32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019a34:	b97b      	cbnz	r3, 8019a56 <rand+0x2a>
 8019a36:	2018      	movs	r0, #24
 8019a38:	f7ff fa7e 	bl	8018f38 <malloc>
 8019a3c:	4a10      	ldr	r2, [pc, #64]	; (8019a80 <rand+0x54>)
 8019a3e:	4b11      	ldr	r3, [pc, #68]	; (8019a84 <rand+0x58>)
 8019a40:	63a0      	str	r0, [r4, #56]	; 0x38
 8019a42:	e9c0 2300 	strd	r2, r3, [r0]
 8019a46:	4b10      	ldr	r3, [pc, #64]	; (8019a88 <rand+0x5c>)
 8019a48:	6083      	str	r3, [r0, #8]
 8019a4a:	230b      	movs	r3, #11
 8019a4c:	8183      	strh	r3, [r0, #12]
 8019a4e:	2201      	movs	r2, #1
 8019a50:	2300      	movs	r3, #0
 8019a52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019a56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019a58:	480c      	ldr	r0, [pc, #48]	; (8019a8c <rand+0x60>)
 8019a5a:	690a      	ldr	r2, [r1, #16]
 8019a5c:	694b      	ldr	r3, [r1, #20]
 8019a5e:	4c0c      	ldr	r4, [pc, #48]	; (8019a90 <rand+0x64>)
 8019a60:	4350      	muls	r0, r2
 8019a62:	fb04 0003 	mla	r0, r4, r3, r0
 8019a66:	fba2 2304 	umull	r2, r3, r2, r4
 8019a6a:	4403      	add	r3, r0
 8019a6c:	1c54      	adds	r4, r2, #1
 8019a6e:	f143 0500 	adc.w	r5, r3, #0
 8019a72:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8019a76:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8019a7a:	bd38      	pop	{r3, r4, r5, pc}
 8019a7c:	200000c0 	.word	0x200000c0
 8019a80:	abcd330e 	.word	0xabcd330e
 8019a84:	e66d1234 	.word	0xe66d1234
 8019a88:	0005deec 	.word	0x0005deec
 8019a8c:	5851f42d 	.word	0x5851f42d
 8019a90:	4c957f2d 	.word	0x4c957f2d

08019a94 <_sbrk_r>:
 8019a94:	b538      	push	{r3, r4, r5, lr}
 8019a96:	4c06      	ldr	r4, [pc, #24]	; (8019ab0 <_sbrk_r+0x1c>)
 8019a98:	2300      	movs	r3, #0
 8019a9a:	4605      	mov	r5, r0
 8019a9c:	4608      	mov	r0, r1
 8019a9e:	6023      	str	r3, [r4, #0]
 8019aa0:	f7ea fc26 	bl	80042f0 <_sbrk>
 8019aa4:	1c43      	adds	r3, r0, #1
 8019aa6:	d102      	bne.n	8019aae <_sbrk_r+0x1a>
 8019aa8:	6823      	ldr	r3, [r4, #0]
 8019aaa:	b103      	cbz	r3, 8019aae <_sbrk_r+0x1a>
 8019aac:	602b      	str	r3, [r5, #0]
 8019aae:	bd38      	pop	{r3, r4, r5, pc}
 8019ab0:	2000b504 	.word	0x2000b504

08019ab4 <siprintf>:
 8019ab4:	b40e      	push	{r1, r2, r3}
 8019ab6:	b500      	push	{lr}
 8019ab8:	b09c      	sub	sp, #112	; 0x70
 8019aba:	ab1d      	add	r3, sp, #116	; 0x74
 8019abc:	9002      	str	r0, [sp, #8]
 8019abe:	9006      	str	r0, [sp, #24]
 8019ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019ac4:	4809      	ldr	r0, [pc, #36]	; (8019aec <siprintf+0x38>)
 8019ac6:	9107      	str	r1, [sp, #28]
 8019ac8:	9104      	str	r1, [sp, #16]
 8019aca:	4909      	ldr	r1, [pc, #36]	; (8019af0 <siprintf+0x3c>)
 8019acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ad0:	9105      	str	r1, [sp, #20]
 8019ad2:	6800      	ldr	r0, [r0, #0]
 8019ad4:	9301      	str	r3, [sp, #4]
 8019ad6:	a902      	add	r1, sp, #8
 8019ad8:	f001 fa7c 	bl	801afd4 <_svfiprintf_r>
 8019adc:	9b02      	ldr	r3, [sp, #8]
 8019ade:	2200      	movs	r2, #0
 8019ae0:	701a      	strb	r2, [r3, #0]
 8019ae2:	b01c      	add	sp, #112	; 0x70
 8019ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ae8:	b003      	add	sp, #12
 8019aea:	4770      	bx	lr
 8019aec:	200000c0 	.word	0x200000c0
 8019af0:	ffff0208 	.word	0xffff0208

08019af4 <__ascii_wctomb>:
 8019af4:	b149      	cbz	r1, 8019b0a <__ascii_wctomb+0x16>
 8019af6:	2aff      	cmp	r2, #255	; 0xff
 8019af8:	bf85      	ittet	hi
 8019afa:	238a      	movhi	r3, #138	; 0x8a
 8019afc:	6003      	strhi	r3, [r0, #0]
 8019afe:	700a      	strbls	r2, [r1, #0]
 8019b00:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b04:	bf98      	it	ls
 8019b06:	2001      	movls	r0, #1
 8019b08:	4770      	bx	lr
 8019b0a:	4608      	mov	r0, r1
 8019b0c:	4770      	bx	lr

08019b0e <quorem>:
 8019b0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b12:	6903      	ldr	r3, [r0, #16]
 8019b14:	690c      	ldr	r4, [r1, #16]
 8019b16:	42a3      	cmp	r3, r4
 8019b18:	4680      	mov	r8, r0
 8019b1a:	f2c0 8082 	blt.w	8019c22 <quorem+0x114>
 8019b1e:	3c01      	subs	r4, #1
 8019b20:	f101 0714 	add.w	r7, r1, #20
 8019b24:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8019b28:	f100 0614 	add.w	r6, r0, #20
 8019b2c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8019b30:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8019b34:	eb06 030c 	add.w	r3, r6, ip
 8019b38:	3501      	adds	r5, #1
 8019b3a:	eb07 090c 	add.w	r9, r7, ip
 8019b3e:	9301      	str	r3, [sp, #4]
 8019b40:	fbb0 f5f5 	udiv	r5, r0, r5
 8019b44:	b395      	cbz	r5, 8019bac <quorem+0x9e>
 8019b46:	f04f 0a00 	mov.w	sl, #0
 8019b4a:	4638      	mov	r0, r7
 8019b4c:	46b6      	mov	lr, r6
 8019b4e:	46d3      	mov	fp, sl
 8019b50:	f850 2b04 	ldr.w	r2, [r0], #4
 8019b54:	b293      	uxth	r3, r2
 8019b56:	fb05 a303 	mla	r3, r5, r3, sl
 8019b5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019b5e:	b29b      	uxth	r3, r3
 8019b60:	ebab 0303 	sub.w	r3, fp, r3
 8019b64:	0c12      	lsrs	r2, r2, #16
 8019b66:	f8de b000 	ldr.w	fp, [lr]
 8019b6a:	fb05 a202 	mla	r2, r5, r2, sl
 8019b6e:	fa13 f38b 	uxtah	r3, r3, fp
 8019b72:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8019b76:	fa1f fb82 	uxth.w	fp, r2
 8019b7a:	f8de 2000 	ldr.w	r2, [lr]
 8019b7e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8019b82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019b86:	b29b      	uxth	r3, r3
 8019b88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019b8c:	4581      	cmp	r9, r0
 8019b8e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8019b92:	f84e 3b04 	str.w	r3, [lr], #4
 8019b96:	d2db      	bcs.n	8019b50 <quorem+0x42>
 8019b98:	f856 300c 	ldr.w	r3, [r6, ip]
 8019b9c:	b933      	cbnz	r3, 8019bac <quorem+0x9e>
 8019b9e:	9b01      	ldr	r3, [sp, #4]
 8019ba0:	3b04      	subs	r3, #4
 8019ba2:	429e      	cmp	r6, r3
 8019ba4:	461a      	mov	r2, r3
 8019ba6:	d330      	bcc.n	8019c0a <quorem+0xfc>
 8019ba8:	f8c8 4010 	str.w	r4, [r8, #16]
 8019bac:	4640      	mov	r0, r8
 8019bae:	f001 f8e3 	bl	801ad78 <__mcmp>
 8019bb2:	2800      	cmp	r0, #0
 8019bb4:	db25      	blt.n	8019c02 <quorem+0xf4>
 8019bb6:	3501      	adds	r5, #1
 8019bb8:	4630      	mov	r0, r6
 8019bba:	f04f 0c00 	mov.w	ip, #0
 8019bbe:	f857 2b04 	ldr.w	r2, [r7], #4
 8019bc2:	f8d0 e000 	ldr.w	lr, [r0]
 8019bc6:	b293      	uxth	r3, r2
 8019bc8:	ebac 0303 	sub.w	r3, ip, r3
 8019bcc:	0c12      	lsrs	r2, r2, #16
 8019bce:	fa13 f38e 	uxtah	r3, r3, lr
 8019bd2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019bd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019bda:	b29b      	uxth	r3, r3
 8019bdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019be0:	45b9      	cmp	r9, r7
 8019be2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019be6:	f840 3b04 	str.w	r3, [r0], #4
 8019bea:	d2e8      	bcs.n	8019bbe <quorem+0xb0>
 8019bec:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8019bf0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019bf4:	b92a      	cbnz	r2, 8019c02 <quorem+0xf4>
 8019bf6:	3b04      	subs	r3, #4
 8019bf8:	429e      	cmp	r6, r3
 8019bfa:	461a      	mov	r2, r3
 8019bfc:	d30b      	bcc.n	8019c16 <quorem+0x108>
 8019bfe:	f8c8 4010 	str.w	r4, [r8, #16]
 8019c02:	4628      	mov	r0, r5
 8019c04:	b003      	add	sp, #12
 8019c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c0a:	6812      	ldr	r2, [r2, #0]
 8019c0c:	3b04      	subs	r3, #4
 8019c0e:	2a00      	cmp	r2, #0
 8019c10:	d1ca      	bne.n	8019ba8 <quorem+0x9a>
 8019c12:	3c01      	subs	r4, #1
 8019c14:	e7c5      	b.n	8019ba2 <quorem+0x94>
 8019c16:	6812      	ldr	r2, [r2, #0]
 8019c18:	3b04      	subs	r3, #4
 8019c1a:	2a00      	cmp	r2, #0
 8019c1c:	d1ef      	bne.n	8019bfe <quorem+0xf0>
 8019c1e:	3c01      	subs	r4, #1
 8019c20:	e7ea      	b.n	8019bf8 <quorem+0xea>
 8019c22:	2000      	movs	r0, #0
 8019c24:	e7ee      	b.n	8019c04 <quorem+0xf6>
	...

08019c28 <_dtoa_r>:
 8019c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c2c:	ec57 6b10 	vmov	r6, r7, d0
 8019c30:	b097      	sub	sp, #92	; 0x5c
 8019c32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019c34:	9106      	str	r1, [sp, #24]
 8019c36:	4604      	mov	r4, r0
 8019c38:	920b      	str	r2, [sp, #44]	; 0x2c
 8019c3a:	9312      	str	r3, [sp, #72]	; 0x48
 8019c3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019c40:	e9cd 6700 	strd	r6, r7, [sp]
 8019c44:	b93d      	cbnz	r5, 8019c56 <_dtoa_r+0x2e>
 8019c46:	2010      	movs	r0, #16
 8019c48:	f7ff f976 	bl	8018f38 <malloc>
 8019c4c:	6260      	str	r0, [r4, #36]	; 0x24
 8019c4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019c52:	6005      	str	r5, [r0, #0]
 8019c54:	60c5      	str	r5, [r0, #12]
 8019c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019c58:	6819      	ldr	r1, [r3, #0]
 8019c5a:	b151      	cbz	r1, 8019c72 <_dtoa_r+0x4a>
 8019c5c:	685a      	ldr	r2, [r3, #4]
 8019c5e:	604a      	str	r2, [r1, #4]
 8019c60:	2301      	movs	r3, #1
 8019c62:	4093      	lsls	r3, r2
 8019c64:	608b      	str	r3, [r1, #8]
 8019c66:	4620      	mov	r0, r4
 8019c68:	f000 fea4 	bl	801a9b4 <_Bfree>
 8019c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019c6e:	2200      	movs	r2, #0
 8019c70:	601a      	str	r2, [r3, #0]
 8019c72:	1e3b      	subs	r3, r7, #0
 8019c74:	bfbb      	ittet	lt
 8019c76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019c7a:	9301      	strlt	r3, [sp, #4]
 8019c7c:	2300      	movge	r3, #0
 8019c7e:	2201      	movlt	r2, #1
 8019c80:	bfac      	ite	ge
 8019c82:	f8c8 3000 	strge.w	r3, [r8]
 8019c86:	f8c8 2000 	strlt.w	r2, [r8]
 8019c8a:	4baf      	ldr	r3, [pc, #700]	; (8019f48 <_dtoa_r+0x320>)
 8019c8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019c90:	ea33 0308 	bics.w	r3, r3, r8
 8019c94:	d114      	bne.n	8019cc0 <_dtoa_r+0x98>
 8019c96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019c98:	f242 730f 	movw	r3, #9999	; 0x270f
 8019c9c:	6013      	str	r3, [r2, #0]
 8019c9e:	9b00      	ldr	r3, [sp, #0]
 8019ca0:	b923      	cbnz	r3, 8019cac <_dtoa_r+0x84>
 8019ca2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8019ca6:	2800      	cmp	r0, #0
 8019ca8:	f000 8542 	beq.w	801a730 <_dtoa_r+0xb08>
 8019cac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019cae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8019f5c <_dtoa_r+0x334>
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	f000 8544 	beq.w	801a740 <_dtoa_r+0xb18>
 8019cb8:	f10b 0303 	add.w	r3, fp, #3
 8019cbc:	f000 bd3e 	b.w	801a73c <_dtoa_r+0xb14>
 8019cc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	4630      	mov	r0, r6
 8019cca:	4639      	mov	r1, r7
 8019ccc:	f7e6 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8019cd0:	4681      	mov	r9, r0
 8019cd2:	b168      	cbz	r0, 8019cf0 <_dtoa_r+0xc8>
 8019cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019cd6:	2301      	movs	r3, #1
 8019cd8:	6013      	str	r3, [r2, #0]
 8019cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	f000 8524 	beq.w	801a72a <_dtoa_r+0xb02>
 8019ce2:	4b9a      	ldr	r3, [pc, #616]	; (8019f4c <_dtoa_r+0x324>)
 8019ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019ce6:	f103 3bff 	add.w	fp, r3, #4294967295
 8019cea:	6013      	str	r3, [r2, #0]
 8019cec:	f000 bd28 	b.w	801a740 <_dtoa_r+0xb18>
 8019cf0:	aa14      	add	r2, sp, #80	; 0x50
 8019cf2:	a915      	add	r1, sp, #84	; 0x54
 8019cf4:	ec47 6b10 	vmov	d0, r6, r7
 8019cf8:	4620      	mov	r0, r4
 8019cfa:	f001 f8b4 	bl	801ae66 <__d2b>
 8019cfe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8019d02:	9004      	str	r0, [sp, #16]
 8019d04:	2d00      	cmp	r5, #0
 8019d06:	d07c      	beq.n	8019e02 <_dtoa_r+0x1da>
 8019d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019d0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8019d10:	46b2      	mov	sl, r6
 8019d12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8019d16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019d1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8019d1e:	2200      	movs	r2, #0
 8019d20:	4b8b      	ldr	r3, [pc, #556]	; (8019f50 <_dtoa_r+0x328>)
 8019d22:	4650      	mov	r0, sl
 8019d24:	4659      	mov	r1, fp
 8019d26:	f7e6 faaf 	bl	8000288 <__aeabi_dsub>
 8019d2a:	a381      	add	r3, pc, #516	; (adr r3, 8019f30 <_dtoa_r+0x308>)
 8019d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d30:	f7e6 fc62 	bl	80005f8 <__aeabi_dmul>
 8019d34:	a380      	add	r3, pc, #512	; (adr r3, 8019f38 <_dtoa_r+0x310>)
 8019d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d3a:	f7e6 faa7 	bl	800028c <__adddf3>
 8019d3e:	4606      	mov	r6, r0
 8019d40:	4628      	mov	r0, r5
 8019d42:	460f      	mov	r7, r1
 8019d44:	f7e6 fbee 	bl	8000524 <__aeabi_i2d>
 8019d48:	a37d      	add	r3, pc, #500	; (adr r3, 8019f40 <_dtoa_r+0x318>)
 8019d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d4e:	f7e6 fc53 	bl	80005f8 <__aeabi_dmul>
 8019d52:	4602      	mov	r2, r0
 8019d54:	460b      	mov	r3, r1
 8019d56:	4630      	mov	r0, r6
 8019d58:	4639      	mov	r1, r7
 8019d5a:	f7e6 fa97 	bl	800028c <__adddf3>
 8019d5e:	4606      	mov	r6, r0
 8019d60:	460f      	mov	r7, r1
 8019d62:	f7e6 fef9 	bl	8000b58 <__aeabi_d2iz>
 8019d66:	2200      	movs	r2, #0
 8019d68:	4682      	mov	sl, r0
 8019d6a:	2300      	movs	r3, #0
 8019d6c:	4630      	mov	r0, r6
 8019d6e:	4639      	mov	r1, r7
 8019d70:	f7e6 feb4 	bl	8000adc <__aeabi_dcmplt>
 8019d74:	b148      	cbz	r0, 8019d8a <_dtoa_r+0x162>
 8019d76:	4650      	mov	r0, sl
 8019d78:	f7e6 fbd4 	bl	8000524 <__aeabi_i2d>
 8019d7c:	4632      	mov	r2, r6
 8019d7e:	463b      	mov	r3, r7
 8019d80:	f7e6 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8019d84:	b908      	cbnz	r0, 8019d8a <_dtoa_r+0x162>
 8019d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019d8a:	f1ba 0f16 	cmp.w	sl, #22
 8019d8e:	d859      	bhi.n	8019e44 <_dtoa_r+0x21c>
 8019d90:	4970      	ldr	r1, [pc, #448]	; (8019f54 <_dtoa_r+0x32c>)
 8019d92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8019d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d9e:	f7e6 febb 	bl	8000b18 <__aeabi_dcmpgt>
 8019da2:	2800      	cmp	r0, #0
 8019da4:	d050      	beq.n	8019e48 <_dtoa_r+0x220>
 8019da6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019daa:	2300      	movs	r3, #0
 8019dac:	930f      	str	r3, [sp, #60]	; 0x3c
 8019dae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019db0:	1b5d      	subs	r5, r3, r5
 8019db2:	f1b5 0801 	subs.w	r8, r5, #1
 8019db6:	bf49      	itett	mi
 8019db8:	f1c5 0301 	rsbmi	r3, r5, #1
 8019dbc:	2300      	movpl	r3, #0
 8019dbe:	9305      	strmi	r3, [sp, #20]
 8019dc0:	f04f 0800 	movmi.w	r8, #0
 8019dc4:	bf58      	it	pl
 8019dc6:	9305      	strpl	r3, [sp, #20]
 8019dc8:	f1ba 0f00 	cmp.w	sl, #0
 8019dcc:	db3e      	blt.n	8019e4c <_dtoa_r+0x224>
 8019dce:	2300      	movs	r3, #0
 8019dd0:	44d0      	add	r8, sl
 8019dd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8019dd6:	9307      	str	r3, [sp, #28]
 8019dd8:	9b06      	ldr	r3, [sp, #24]
 8019dda:	2b09      	cmp	r3, #9
 8019ddc:	f200 8090 	bhi.w	8019f00 <_dtoa_r+0x2d8>
 8019de0:	2b05      	cmp	r3, #5
 8019de2:	bfc4      	itt	gt
 8019de4:	3b04      	subgt	r3, #4
 8019de6:	9306      	strgt	r3, [sp, #24]
 8019de8:	9b06      	ldr	r3, [sp, #24]
 8019dea:	f1a3 0302 	sub.w	r3, r3, #2
 8019dee:	bfcc      	ite	gt
 8019df0:	2500      	movgt	r5, #0
 8019df2:	2501      	movle	r5, #1
 8019df4:	2b03      	cmp	r3, #3
 8019df6:	f200 808f 	bhi.w	8019f18 <_dtoa_r+0x2f0>
 8019dfa:	e8df f003 	tbb	[pc, r3]
 8019dfe:	7f7d      	.short	0x7f7d
 8019e00:	7131      	.short	0x7131
 8019e02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8019e06:	441d      	add	r5, r3
 8019e08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8019e0c:	2820      	cmp	r0, #32
 8019e0e:	dd13      	ble.n	8019e38 <_dtoa_r+0x210>
 8019e10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8019e14:	9b00      	ldr	r3, [sp, #0]
 8019e16:	fa08 f800 	lsl.w	r8, r8, r0
 8019e1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8019e1e:	fa23 f000 	lsr.w	r0, r3, r0
 8019e22:	ea48 0000 	orr.w	r0, r8, r0
 8019e26:	f7e6 fb6d 	bl	8000504 <__aeabi_ui2d>
 8019e2a:	2301      	movs	r3, #1
 8019e2c:	4682      	mov	sl, r0
 8019e2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8019e32:	3d01      	subs	r5, #1
 8019e34:	9313      	str	r3, [sp, #76]	; 0x4c
 8019e36:	e772      	b.n	8019d1e <_dtoa_r+0xf6>
 8019e38:	9b00      	ldr	r3, [sp, #0]
 8019e3a:	f1c0 0020 	rsb	r0, r0, #32
 8019e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8019e42:	e7f0      	b.n	8019e26 <_dtoa_r+0x1fe>
 8019e44:	2301      	movs	r3, #1
 8019e46:	e7b1      	b.n	8019dac <_dtoa_r+0x184>
 8019e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8019e4a:	e7b0      	b.n	8019dae <_dtoa_r+0x186>
 8019e4c:	9b05      	ldr	r3, [sp, #20]
 8019e4e:	eba3 030a 	sub.w	r3, r3, sl
 8019e52:	9305      	str	r3, [sp, #20]
 8019e54:	f1ca 0300 	rsb	r3, sl, #0
 8019e58:	9307      	str	r3, [sp, #28]
 8019e5a:	2300      	movs	r3, #0
 8019e5c:	930e      	str	r3, [sp, #56]	; 0x38
 8019e5e:	e7bb      	b.n	8019dd8 <_dtoa_r+0x1b0>
 8019e60:	2301      	movs	r3, #1
 8019e62:	930a      	str	r3, [sp, #40]	; 0x28
 8019e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	dd59      	ble.n	8019f1e <_dtoa_r+0x2f6>
 8019e6a:	9302      	str	r3, [sp, #8]
 8019e6c:	4699      	mov	r9, r3
 8019e6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019e70:	2200      	movs	r2, #0
 8019e72:	6072      	str	r2, [r6, #4]
 8019e74:	2204      	movs	r2, #4
 8019e76:	f102 0014 	add.w	r0, r2, #20
 8019e7a:	4298      	cmp	r0, r3
 8019e7c:	6871      	ldr	r1, [r6, #4]
 8019e7e:	d953      	bls.n	8019f28 <_dtoa_r+0x300>
 8019e80:	4620      	mov	r0, r4
 8019e82:	f000 fd63 	bl	801a94c <_Balloc>
 8019e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019e88:	6030      	str	r0, [r6, #0]
 8019e8a:	f1b9 0f0e 	cmp.w	r9, #14
 8019e8e:	f8d3 b000 	ldr.w	fp, [r3]
 8019e92:	f200 80e6 	bhi.w	801a062 <_dtoa_r+0x43a>
 8019e96:	2d00      	cmp	r5, #0
 8019e98:	f000 80e3 	beq.w	801a062 <_dtoa_r+0x43a>
 8019e9c:	ed9d 7b00 	vldr	d7, [sp]
 8019ea0:	f1ba 0f00 	cmp.w	sl, #0
 8019ea4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8019ea8:	dd74      	ble.n	8019f94 <_dtoa_r+0x36c>
 8019eaa:	4a2a      	ldr	r2, [pc, #168]	; (8019f54 <_dtoa_r+0x32c>)
 8019eac:	f00a 030f 	and.w	r3, sl, #15
 8019eb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019eb4:	ed93 7b00 	vldr	d7, [r3]
 8019eb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8019ebc:	06f0      	lsls	r0, r6, #27
 8019ebe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019ec2:	d565      	bpl.n	8019f90 <_dtoa_r+0x368>
 8019ec4:	4b24      	ldr	r3, [pc, #144]	; (8019f58 <_dtoa_r+0x330>)
 8019ec6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019eca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019ece:	f7e6 fcbd 	bl	800084c <__aeabi_ddiv>
 8019ed2:	e9cd 0100 	strd	r0, r1, [sp]
 8019ed6:	f006 060f 	and.w	r6, r6, #15
 8019eda:	2503      	movs	r5, #3
 8019edc:	4f1e      	ldr	r7, [pc, #120]	; (8019f58 <_dtoa_r+0x330>)
 8019ede:	e04c      	b.n	8019f7a <_dtoa_r+0x352>
 8019ee0:	2301      	movs	r3, #1
 8019ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8019ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019ee6:	4453      	add	r3, sl
 8019ee8:	f103 0901 	add.w	r9, r3, #1
 8019eec:	9302      	str	r3, [sp, #8]
 8019eee:	464b      	mov	r3, r9
 8019ef0:	2b01      	cmp	r3, #1
 8019ef2:	bfb8      	it	lt
 8019ef4:	2301      	movlt	r3, #1
 8019ef6:	e7ba      	b.n	8019e6e <_dtoa_r+0x246>
 8019ef8:	2300      	movs	r3, #0
 8019efa:	e7b2      	b.n	8019e62 <_dtoa_r+0x23a>
 8019efc:	2300      	movs	r3, #0
 8019efe:	e7f0      	b.n	8019ee2 <_dtoa_r+0x2ba>
 8019f00:	2501      	movs	r5, #1
 8019f02:	2300      	movs	r3, #0
 8019f04:	9306      	str	r3, [sp, #24]
 8019f06:	950a      	str	r5, [sp, #40]	; 0x28
 8019f08:	f04f 33ff 	mov.w	r3, #4294967295
 8019f0c:	9302      	str	r3, [sp, #8]
 8019f0e:	4699      	mov	r9, r3
 8019f10:	2200      	movs	r2, #0
 8019f12:	2312      	movs	r3, #18
 8019f14:	920b      	str	r2, [sp, #44]	; 0x2c
 8019f16:	e7aa      	b.n	8019e6e <_dtoa_r+0x246>
 8019f18:	2301      	movs	r3, #1
 8019f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8019f1c:	e7f4      	b.n	8019f08 <_dtoa_r+0x2e0>
 8019f1e:	2301      	movs	r3, #1
 8019f20:	9302      	str	r3, [sp, #8]
 8019f22:	4699      	mov	r9, r3
 8019f24:	461a      	mov	r2, r3
 8019f26:	e7f5      	b.n	8019f14 <_dtoa_r+0x2ec>
 8019f28:	3101      	adds	r1, #1
 8019f2a:	6071      	str	r1, [r6, #4]
 8019f2c:	0052      	lsls	r2, r2, #1
 8019f2e:	e7a2      	b.n	8019e76 <_dtoa_r+0x24e>
 8019f30:	636f4361 	.word	0x636f4361
 8019f34:	3fd287a7 	.word	0x3fd287a7
 8019f38:	8b60c8b3 	.word	0x8b60c8b3
 8019f3c:	3fc68a28 	.word	0x3fc68a28
 8019f40:	509f79fb 	.word	0x509f79fb
 8019f44:	3fd34413 	.word	0x3fd34413
 8019f48:	7ff00000 	.word	0x7ff00000
 8019f4c:	0802106f 	.word	0x0802106f
 8019f50:	3ff80000 	.word	0x3ff80000
 8019f54:	08021228 	.word	0x08021228
 8019f58:	08021200 	.word	0x08021200
 8019f5c:	0802119c 	.word	0x0802119c
 8019f60:	07f1      	lsls	r1, r6, #31
 8019f62:	d508      	bpl.n	8019f76 <_dtoa_r+0x34e>
 8019f64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019f6c:	f7e6 fb44 	bl	80005f8 <__aeabi_dmul>
 8019f70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019f74:	3501      	adds	r5, #1
 8019f76:	1076      	asrs	r6, r6, #1
 8019f78:	3708      	adds	r7, #8
 8019f7a:	2e00      	cmp	r6, #0
 8019f7c:	d1f0      	bne.n	8019f60 <_dtoa_r+0x338>
 8019f7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019f86:	f7e6 fc61 	bl	800084c <__aeabi_ddiv>
 8019f8a:	e9cd 0100 	strd	r0, r1, [sp]
 8019f8e:	e01a      	b.n	8019fc6 <_dtoa_r+0x39e>
 8019f90:	2502      	movs	r5, #2
 8019f92:	e7a3      	b.n	8019edc <_dtoa_r+0x2b4>
 8019f94:	f000 80a0 	beq.w	801a0d8 <_dtoa_r+0x4b0>
 8019f98:	f1ca 0600 	rsb	r6, sl, #0
 8019f9c:	4b9f      	ldr	r3, [pc, #636]	; (801a21c <_dtoa_r+0x5f4>)
 8019f9e:	4fa0      	ldr	r7, [pc, #640]	; (801a220 <_dtoa_r+0x5f8>)
 8019fa0:	f006 020f 	and.w	r2, r6, #15
 8019fa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019fb0:	f7e6 fb22 	bl	80005f8 <__aeabi_dmul>
 8019fb4:	e9cd 0100 	strd	r0, r1, [sp]
 8019fb8:	1136      	asrs	r6, r6, #4
 8019fba:	2300      	movs	r3, #0
 8019fbc:	2502      	movs	r5, #2
 8019fbe:	2e00      	cmp	r6, #0
 8019fc0:	d17f      	bne.n	801a0c2 <_dtoa_r+0x49a>
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d1e1      	bne.n	8019f8a <_dtoa_r+0x362>
 8019fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	f000 8087 	beq.w	801a0dc <_dtoa_r+0x4b4>
 8019fce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019fd2:	2200      	movs	r2, #0
 8019fd4:	4b93      	ldr	r3, [pc, #588]	; (801a224 <_dtoa_r+0x5fc>)
 8019fd6:	4630      	mov	r0, r6
 8019fd8:	4639      	mov	r1, r7
 8019fda:	f7e6 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8019fde:	2800      	cmp	r0, #0
 8019fe0:	d07c      	beq.n	801a0dc <_dtoa_r+0x4b4>
 8019fe2:	f1b9 0f00 	cmp.w	r9, #0
 8019fe6:	d079      	beq.n	801a0dc <_dtoa_r+0x4b4>
 8019fe8:	9b02      	ldr	r3, [sp, #8]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	dd35      	ble.n	801a05a <_dtoa_r+0x432>
 8019fee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019ff2:	9308      	str	r3, [sp, #32]
 8019ff4:	4639      	mov	r1, r7
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	4b8b      	ldr	r3, [pc, #556]	; (801a228 <_dtoa_r+0x600>)
 8019ffa:	4630      	mov	r0, r6
 8019ffc:	f7e6 fafc 	bl	80005f8 <__aeabi_dmul>
 801a000:	e9cd 0100 	strd	r0, r1, [sp]
 801a004:	9f02      	ldr	r7, [sp, #8]
 801a006:	3501      	adds	r5, #1
 801a008:	4628      	mov	r0, r5
 801a00a:	f7e6 fa8b 	bl	8000524 <__aeabi_i2d>
 801a00e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a012:	f7e6 faf1 	bl	80005f8 <__aeabi_dmul>
 801a016:	2200      	movs	r2, #0
 801a018:	4b84      	ldr	r3, [pc, #528]	; (801a22c <_dtoa_r+0x604>)
 801a01a:	f7e6 f937 	bl	800028c <__adddf3>
 801a01e:	4605      	mov	r5, r0
 801a020:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801a024:	2f00      	cmp	r7, #0
 801a026:	d15d      	bne.n	801a0e4 <_dtoa_r+0x4bc>
 801a028:	2200      	movs	r2, #0
 801a02a:	4b81      	ldr	r3, [pc, #516]	; (801a230 <_dtoa_r+0x608>)
 801a02c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a030:	f7e6 f92a 	bl	8000288 <__aeabi_dsub>
 801a034:	462a      	mov	r2, r5
 801a036:	4633      	mov	r3, r6
 801a038:	e9cd 0100 	strd	r0, r1, [sp]
 801a03c:	f7e6 fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 801a040:	2800      	cmp	r0, #0
 801a042:	f040 8288 	bne.w	801a556 <_dtoa_r+0x92e>
 801a046:	462a      	mov	r2, r5
 801a048:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a04c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a050:	f7e6 fd44 	bl	8000adc <__aeabi_dcmplt>
 801a054:	2800      	cmp	r0, #0
 801a056:	f040 827c 	bne.w	801a552 <_dtoa_r+0x92a>
 801a05a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a05e:	e9cd 2300 	strd	r2, r3, [sp]
 801a062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a064:	2b00      	cmp	r3, #0
 801a066:	f2c0 8150 	blt.w	801a30a <_dtoa_r+0x6e2>
 801a06a:	f1ba 0f0e 	cmp.w	sl, #14
 801a06e:	f300 814c 	bgt.w	801a30a <_dtoa_r+0x6e2>
 801a072:	4b6a      	ldr	r3, [pc, #424]	; (801a21c <_dtoa_r+0x5f4>)
 801a074:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a078:	ed93 7b00 	vldr	d7, [r3]
 801a07c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a07e:	2b00      	cmp	r3, #0
 801a080:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a084:	f280 80d8 	bge.w	801a238 <_dtoa_r+0x610>
 801a088:	f1b9 0f00 	cmp.w	r9, #0
 801a08c:	f300 80d4 	bgt.w	801a238 <_dtoa_r+0x610>
 801a090:	f040 825e 	bne.w	801a550 <_dtoa_r+0x928>
 801a094:	2200      	movs	r2, #0
 801a096:	4b66      	ldr	r3, [pc, #408]	; (801a230 <_dtoa_r+0x608>)
 801a098:	ec51 0b17 	vmov	r0, r1, d7
 801a09c:	f7e6 faac 	bl	80005f8 <__aeabi_dmul>
 801a0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a0a4:	f7e6 fd2e 	bl	8000b04 <__aeabi_dcmpge>
 801a0a8:	464f      	mov	r7, r9
 801a0aa:	464e      	mov	r6, r9
 801a0ac:	2800      	cmp	r0, #0
 801a0ae:	f040 8234 	bne.w	801a51a <_dtoa_r+0x8f2>
 801a0b2:	2331      	movs	r3, #49	; 0x31
 801a0b4:	f10b 0501 	add.w	r5, fp, #1
 801a0b8:	f88b 3000 	strb.w	r3, [fp]
 801a0bc:	f10a 0a01 	add.w	sl, sl, #1
 801a0c0:	e22f      	b.n	801a522 <_dtoa_r+0x8fa>
 801a0c2:	07f2      	lsls	r2, r6, #31
 801a0c4:	d505      	bpl.n	801a0d2 <_dtoa_r+0x4aa>
 801a0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a0ca:	f7e6 fa95 	bl	80005f8 <__aeabi_dmul>
 801a0ce:	3501      	adds	r5, #1
 801a0d0:	2301      	movs	r3, #1
 801a0d2:	1076      	asrs	r6, r6, #1
 801a0d4:	3708      	adds	r7, #8
 801a0d6:	e772      	b.n	8019fbe <_dtoa_r+0x396>
 801a0d8:	2502      	movs	r5, #2
 801a0da:	e774      	b.n	8019fc6 <_dtoa_r+0x39e>
 801a0dc:	f8cd a020 	str.w	sl, [sp, #32]
 801a0e0:	464f      	mov	r7, r9
 801a0e2:	e791      	b.n	801a008 <_dtoa_r+0x3e0>
 801a0e4:	4b4d      	ldr	r3, [pc, #308]	; (801a21c <_dtoa_r+0x5f4>)
 801a0e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a0ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801a0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d047      	beq.n	801a184 <_dtoa_r+0x55c>
 801a0f4:	4602      	mov	r2, r0
 801a0f6:	460b      	mov	r3, r1
 801a0f8:	2000      	movs	r0, #0
 801a0fa:	494e      	ldr	r1, [pc, #312]	; (801a234 <_dtoa_r+0x60c>)
 801a0fc:	f7e6 fba6 	bl	800084c <__aeabi_ddiv>
 801a100:	462a      	mov	r2, r5
 801a102:	4633      	mov	r3, r6
 801a104:	f7e6 f8c0 	bl	8000288 <__aeabi_dsub>
 801a108:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a10c:	465d      	mov	r5, fp
 801a10e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a112:	f7e6 fd21 	bl	8000b58 <__aeabi_d2iz>
 801a116:	4606      	mov	r6, r0
 801a118:	f7e6 fa04 	bl	8000524 <__aeabi_i2d>
 801a11c:	4602      	mov	r2, r0
 801a11e:	460b      	mov	r3, r1
 801a120:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a124:	f7e6 f8b0 	bl	8000288 <__aeabi_dsub>
 801a128:	3630      	adds	r6, #48	; 0x30
 801a12a:	f805 6b01 	strb.w	r6, [r5], #1
 801a12e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a132:	e9cd 0100 	strd	r0, r1, [sp]
 801a136:	f7e6 fcd1 	bl	8000adc <__aeabi_dcmplt>
 801a13a:	2800      	cmp	r0, #0
 801a13c:	d163      	bne.n	801a206 <_dtoa_r+0x5de>
 801a13e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a142:	2000      	movs	r0, #0
 801a144:	4937      	ldr	r1, [pc, #220]	; (801a224 <_dtoa_r+0x5fc>)
 801a146:	f7e6 f89f 	bl	8000288 <__aeabi_dsub>
 801a14a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a14e:	f7e6 fcc5 	bl	8000adc <__aeabi_dcmplt>
 801a152:	2800      	cmp	r0, #0
 801a154:	f040 80b7 	bne.w	801a2c6 <_dtoa_r+0x69e>
 801a158:	eba5 030b 	sub.w	r3, r5, fp
 801a15c:	429f      	cmp	r7, r3
 801a15e:	f77f af7c 	ble.w	801a05a <_dtoa_r+0x432>
 801a162:	2200      	movs	r2, #0
 801a164:	4b30      	ldr	r3, [pc, #192]	; (801a228 <_dtoa_r+0x600>)
 801a166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a16a:	f7e6 fa45 	bl	80005f8 <__aeabi_dmul>
 801a16e:	2200      	movs	r2, #0
 801a170:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a174:	4b2c      	ldr	r3, [pc, #176]	; (801a228 <_dtoa_r+0x600>)
 801a176:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a17a:	f7e6 fa3d 	bl	80005f8 <__aeabi_dmul>
 801a17e:	e9cd 0100 	strd	r0, r1, [sp]
 801a182:	e7c4      	b.n	801a10e <_dtoa_r+0x4e6>
 801a184:	462a      	mov	r2, r5
 801a186:	4633      	mov	r3, r6
 801a188:	f7e6 fa36 	bl	80005f8 <__aeabi_dmul>
 801a18c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a190:	eb0b 0507 	add.w	r5, fp, r7
 801a194:	465e      	mov	r6, fp
 801a196:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a19a:	f7e6 fcdd 	bl	8000b58 <__aeabi_d2iz>
 801a19e:	4607      	mov	r7, r0
 801a1a0:	f7e6 f9c0 	bl	8000524 <__aeabi_i2d>
 801a1a4:	3730      	adds	r7, #48	; 0x30
 801a1a6:	4602      	mov	r2, r0
 801a1a8:	460b      	mov	r3, r1
 801a1aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a1ae:	f7e6 f86b 	bl	8000288 <__aeabi_dsub>
 801a1b2:	f806 7b01 	strb.w	r7, [r6], #1
 801a1b6:	42ae      	cmp	r6, r5
 801a1b8:	e9cd 0100 	strd	r0, r1, [sp]
 801a1bc:	f04f 0200 	mov.w	r2, #0
 801a1c0:	d126      	bne.n	801a210 <_dtoa_r+0x5e8>
 801a1c2:	4b1c      	ldr	r3, [pc, #112]	; (801a234 <_dtoa_r+0x60c>)
 801a1c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a1c8:	f7e6 f860 	bl	800028c <__adddf3>
 801a1cc:	4602      	mov	r2, r0
 801a1ce:	460b      	mov	r3, r1
 801a1d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a1d4:	f7e6 fca0 	bl	8000b18 <__aeabi_dcmpgt>
 801a1d8:	2800      	cmp	r0, #0
 801a1da:	d174      	bne.n	801a2c6 <_dtoa_r+0x69e>
 801a1dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a1e0:	2000      	movs	r0, #0
 801a1e2:	4914      	ldr	r1, [pc, #80]	; (801a234 <_dtoa_r+0x60c>)
 801a1e4:	f7e6 f850 	bl	8000288 <__aeabi_dsub>
 801a1e8:	4602      	mov	r2, r0
 801a1ea:	460b      	mov	r3, r1
 801a1ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a1f0:	f7e6 fc74 	bl	8000adc <__aeabi_dcmplt>
 801a1f4:	2800      	cmp	r0, #0
 801a1f6:	f43f af30 	beq.w	801a05a <_dtoa_r+0x432>
 801a1fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a1fe:	2b30      	cmp	r3, #48	; 0x30
 801a200:	f105 32ff 	add.w	r2, r5, #4294967295
 801a204:	d002      	beq.n	801a20c <_dtoa_r+0x5e4>
 801a206:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a20a:	e04a      	b.n	801a2a2 <_dtoa_r+0x67a>
 801a20c:	4615      	mov	r5, r2
 801a20e:	e7f4      	b.n	801a1fa <_dtoa_r+0x5d2>
 801a210:	4b05      	ldr	r3, [pc, #20]	; (801a228 <_dtoa_r+0x600>)
 801a212:	f7e6 f9f1 	bl	80005f8 <__aeabi_dmul>
 801a216:	e9cd 0100 	strd	r0, r1, [sp]
 801a21a:	e7bc      	b.n	801a196 <_dtoa_r+0x56e>
 801a21c:	08021228 	.word	0x08021228
 801a220:	08021200 	.word	0x08021200
 801a224:	3ff00000 	.word	0x3ff00000
 801a228:	40240000 	.word	0x40240000
 801a22c:	401c0000 	.word	0x401c0000
 801a230:	40140000 	.word	0x40140000
 801a234:	3fe00000 	.word	0x3fe00000
 801a238:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a23c:	465d      	mov	r5, fp
 801a23e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a242:	4630      	mov	r0, r6
 801a244:	4639      	mov	r1, r7
 801a246:	f7e6 fb01 	bl	800084c <__aeabi_ddiv>
 801a24a:	f7e6 fc85 	bl	8000b58 <__aeabi_d2iz>
 801a24e:	4680      	mov	r8, r0
 801a250:	f7e6 f968 	bl	8000524 <__aeabi_i2d>
 801a254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a258:	f7e6 f9ce 	bl	80005f8 <__aeabi_dmul>
 801a25c:	4602      	mov	r2, r0
 801a25e:	460b      	mov	r3, r1
 801a260:	4630      	mov	r0, r6
 801a262:	4639      	mov	r1, r7
 801a264:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801a268:	f7e6 f80e 	bl	8000288 <__aeabi_dsub>
 801a26c:	f805 6b01 	strb.w	r6, [r5], #1
 801a270:	eba5 060b 	sub.w	r6, r5, fp
 801a274:	45b1      	cmp	r9, r6
 801a276:	4602      	mov	r2, r0
 801a278:	460b      	mov	r3, r1
 801a27a:	d139      	bne.n	801a2f0 <_dtoa_r+0x6c8>
 801a27c:	f7e6 f806 	bl	800028c <__adddf3>
 801a280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a284:	4606      	mov	r6, r0
 801a286:	460f      	mov	r7, r1
 801a288:	f7e6 fc46 	bl	8000b18 <__aeabi_dcmpgt>
 801a28c:	b9c8      	cbnz	r0, 801a2c2 <_dtoa_r+0x69a>
 801a28e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a292:	4630      	mov	r0, r6
 801a294:	4639      	mov	r1, r7
 801a296:	f7e6 fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 801a29a:	b110      	cbz	r0, 801a2a2 <_dtoa_r+0x67a>
 801a29c:	f018 0f01 	tst.w	r8, #1
 801a2a0:	d10f      	bne.n	801a2c2 <_dtoa_r+0x69a>
 801a2a2:	9904      	ldr	r1, [sp, #16]
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	f000 fb85 	bl	801a9b4 <_Bfree>
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a2ae:	702b      	strb	r3, [r5, #0]
 801a2b0:	f10a 0301 	add.w	r3, sl, #1
 801a2b4:	6013      	str	r3, [r2, #0]
 801a2b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	f000 8241 	beq.w	801a740 <_dtoa_r+0xb18>
 801a2be:	601d      	str	r5, [r3, #0]
 801a2c0:	e23e      	b.n	801a740 <_dtoa_r+0xb18>
 801a2c2:	f8cd a020 	str.w	sl, [sp, #32]
 801a2c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801a2ca:	2a39      	cmp	r2, #57	; 0x39
 801a2cc:	f105 33ff 	add.w	r3, r5, #4294967295
 801a2d0:	d108      	bne.n	801a2e4 <_dtoa_r+0x6bc>
 801a2d2:	459b      	cmp	fp, r3
 801a2d4:	d10a      	bne.n	801a2ec <_dtoa_r+0x6c4>
 801a2d6:	9b08      	ldr	r3, [sp, #32]
 801a2d8:	3301      	adds	r3, #1
 801a2da:	9308      	str	r3, [sp, #32]
 801a2dc:	2330      	movs	r3, #48	; 0x30
 801a2de:	f88b 3000 	strb.w	r3, [fp]
 801a2e2:	465b      	mov	r3, fp
 801a2e4:	781a      	ldrb	r2, [r3, #0]
 801a2e6:	3201      	adds	r2, #1
 801a2e8:	701a      	strb	r2, [r3, #0]
 801a2ea:	e78c      	b.n	801a206 <_dtoa_r+0x5de>
 801a2ec:	461d      	mov	r5, r3
 801a2ee:	e7ea      	b.n	801a2c6 <_dtoa_r+0x69e>
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	4b9b      	ldr	r3, [pc, #620]	; (801a560 <_dtoa_r+0x938>)
 801a2f4:	f7e6 f980 	bl	80005f8 <__aeabi_dmul>
 801a2f8:	2200      	movs	r2, #0
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	4606      	mov	r6, r0
 801a2fe:	460f      	mov	r7, r1
 801a300:	f7e6 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 801a304:	2800      	cmp	r0, #0
 801a306:	d09a      	beq.n	801a23e <_dtoa_r+0x616>
 801a308:	e7cb      	b.n	801a2a2 <_dtoa_r+0x67a>
 801a30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a30c:	2a00      	cmp	r2, #0
 801a30e:	f000 808b 	beq.w	801a428 <_dtoa_r+0x800>
 801a312:	9a06      	ldr	r2, [sp, #24]
 801a314:	2a01      	cmp	r2, #1
 801a316:	dc6e      	bgt.n	801a3f6 <_dtoa_r+0x7ce>
 801a318:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a31a:	2a00      	cmp	r2, #0
 801a31c:	d067      	beq.n	801a3ee <_dtoa_r+0x7c6>
 801a31e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a322:	9f07      	ldr	r7, [sp, #28]
 801a324:	9d05      	ldr	r5, [sp, #20]
 801a326:	9a05      	ldr	r2, [sp, #20]
 801a328:	2101      	movs	r1, #1
 801a32a:	441a      	add	r2, r3
 801a32c:	4620      	mov	r0, r4
 801a32e:	9205      	str	r2, [sp, #20]
 801a330:	4498      	add	r8, r3
 801a332:	f000 fbdf 	bl	801aaf4 <__i2b>
 801a336:	4606      	mov	r6, r0
 801a338:	2d00      	cmp	r5, #0
 801a33a:	dd0c      	ble.n	801a356 <_dtoa_r+0x72e>
 801a33c:	f1b8 0f00 	cmp.w	r8, #0
 801a340:	dd09      	ble.n	801a356 <_dtoa_r+0x72e>
 801a342:	4545      	cmp	r5, r8
 801a344:	9a05      	ldr	r2, [sp, #20]
 801a346:	462b      	mov	r3, r5
 801a348:	bfa8      	it	ge
 801a34a:	4643      	movge	r3, r8
 801a34c:	1ad2      	subs	r2, r2, r3
 801a34e:	9205      	str	r2, [sp, #20]
 801a350:	1aed      	subs	r5, r5, r3
 801a352:	eba8 0803 	sub.w	r8, r8, r3
 801a356:	9b07      	ldr	r3, [sp, #28]
 801a358:	b1eb      	cbz	r3, 801a396 <_dtoa_r+0x76e>
 801a35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d067      	beq.n	801a430 <_dtoa_r+0x808>
 801a360:	b18f      	cbz	r7, 801a386 <_dtoa_r+0x75e>
 801a362:	4631      	mov	r1, r6
 801a364:	463a      	mov	r2, r7
 801a366:	4620      	mov	r0, r4
 801a368:	f000 fc64 	bl	801ac34 <__pow5mult>
 801a36c:	9a04      	ldr	r2, [sp, #16]
 801a36e:	4601      	mov	r1, r0
 801a370:	4606      	mov	r6, r0
 801a372:	4620      	mov	r0, r4
 801a374:	f000 fbc7 	bl	801ab06 <__multiply>
 801a378:	9904      	ldr	r1, [sp, #16]
 801a37a:	9008      	str	r0, [sp, #32]
 801a37c:	4620      	mov	r0, r4
 801a37e:	f000 fb19 	bl	801a9b4 <_Bfree>
 801a382:	9b08      	ldr	r3, [sp, #32]
 801a384:	9304      	str	r3, [sp, #16]
 801a386:	9b07      	ldr	r3, [sp, #28]
 801a388:	1bda      	subs	r2, r3, r7
 801a38a:	d004      	beq.n	801a396 <_dtoa_r+0x76e>
 801a38c:	9904      	ldr	r1, [sp, #16]
 801a38e:	4620      	mov	r0, r4
 801a390:	f000 fc50 	bl	801ac34 <__pow5mult>
 801a394:	9004      	str	r0, [sp, #16]
 801a396:	2101      	movs	r1, #1
 801a398:	4620      	mov	r0, r4
 801a39a:	f000 fbab 	bl	801aaf4 <__i2b>
 801a39e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3a0:	4607      	mov	r7, r0
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	f000 81d0 	beq.w	801a748 <_dtoa_r+0xb20>
 801a3a8:	461a      	mov	r2, r3
 801a3aa:	4601      	mov	r1, r0
 801a3ac:	4620      	mov	r0, r4
 801a3ae:	f000 fc41 	bl	801ac34 <__pow5mult>
 801a3b2:	9b06      	ldr	r3, [sp, #24]
 801a3b4:	2b01      	cmp	r3, #1
 801a3b6:	4607      	mov	r7, r0
 801a3b8:	dc40      	bgt.n	801a43c <_dtoa_r+0x814>
 801a3ba:	9b00      	ldr	r3, [sp, #0]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d139      	bne.n	801a434 <_dtoa_r+0x80c>
 801a3c0:	9b01      	ldr	r3, [sp, #4]
 801a3c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d136      	bne.n	801a438 <_dtoa_r+0x810>
 801a3ca:	9b01      	ldr	r3, [sp, #4]
 801a3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a3d0:	0d1b      	lsrs	r3, r3, #20
 801a3d2:	051b      	lsls	r3, r3, #20
 801a3d4:	b12b      	cbz	r3, 801a3e2 <_dtoa_r+0x7ba>
 801a3d6:	9b05      	ldr	r3, [sp, #20]
 801a3d8:	3301      	adds	r3, #1
 801a3da:	9305      	str	r3, [sp, #20]
 801a3dc:	f108 0801 	add.w	r8, r8, #1
 801a3e0:	2301      	movs	r3, #1
 801a3e2:	9307      	str	r3, [sp, #28]
 801a3e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d12a      	bne.n	801a440 <_dtoa_r+0x818>
 801a3ea:	2001      	movs	r0, #1
 801a3ec:	e030      	b.n	801a450 <_dtoa_r+0x828>
 801a3ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a3f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801a3f4:	e795      	b.n	801a322 <_dtoa_r+0x6fa>
 801a3f6:	9b07      	ldr	r3, [sp, #28]
 801a3f8:	f109 37ff 	add.w	r7, r9, #4294967295
 801a3fc:	42bb      	cmp	r3, r7
 801a3fe:	bfbf      	itttt	lt
 801a400:	9b07      	ldrlt	r3, [sp, #28]
 801a402:	9707      	strlt	r7, [sp, #28]
 801a404:	1afa      	sublt	r2, r7, r3
 801a406:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801a408:	bfbb      	ittet	lt
 801a40a:	189b      	addlt	r3, r3, r2
 801a40c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a40e:	1bdf      	subge	r7, r3, r7
 801a410:	2700      	movlt	r7, #0
 801a412:	f1b9 0f00 	cmp.w	r9, #0
 801a416:	bfb5      	itete	lt
 801a418:	9b05      	ldrlt	r3, [sp, #20]
 801a41a:	9d05      	ldrge	r5, [sp, #20]
 801a41c:	eba3 0509 	sublt.w	r5, r3, r9
 801a420:	464b      	movge	r3, r9
 801a422:	bfb8      	it	lt
 801a424:	2300      	movlt	r3, #0
 801a426:	e77e      	b.n	801a326 <_dtoa_r+0x6fe>
 801a428:	9f07      	ldr	r7, [sp, #28]
 801a42a:	9d05      	ldr	r5, [sp, #20]
 801a42c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801a42e:	e783      	b.n	801a338 <_dtoa_r+0x710>
 801a430:	9a07      	ldr	r2, [sp, #28]
 801a432:	e7ab      	b.n	801a38c <_dtoa_r+0x764>
 801a434:	2300      	movs	r3, #0
 801a436:	e7d4      	b.n	801a3e2 <_dtoa_r+0x7ba>
 801a438:	9b00      	ldr	r3, [sp, #0]
 801a43a:	e7d2      	b.n	801a3e2 <_dtoa_r+0x7ba>
 801a43c:	2300      	movs	r3, #0
 801a43e:	9307      	str	r3, [sp, #28]
 801a440:	693b      	ldr	r3, [r7, #16]
 801a442:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801a446:	6918      	ldr	r0, [r3, #16]
 801a448:	f000 fb06 	bl	801aa58 <__hi0bits>
 801a44c:	f1c0 0020 	rsb	r0, r0, #32
 801a450:	4440      	add	r0, r8
 801a452:	f010 001f 	ands.w	r0, r0, #31
 801a456:	d047      	beq.n	801a4e8 <_dtoa_r+0x8c0>
 801a458:	f1c0 0320 	rsb	r3, r0, #32
 801a45c:	2b04      	cmp	r3, #4
 801a45e:	dd3b      	ble.n	801a4d8 <_dtoa_r+0x8b0>
 801a460:	9b05      	ldr	r3, [sp, #20]
 801a462:	f1c0 001c 	rsb	r0, r0, #28
 801a466:	4403      	add	r3, r0
 801a468:	9305      	str	r3, [sp, #20]
 801a46a:	4405      	add	r5, r0
 801a46c:	4480      	add	r8, r0
 801a46e:	9b05      	ldr	r3, [sp, #20]
 801a470:	2b00      	cmp	r3, #0
 801a472:	dd05      	ble.n	801a480 <_dtoa_r+0x858>
 801a474:	461a      	mov	r2, r3
 801a476:	9904      	ldr	r1, [sp, #16]
 801a478:	4620      	mov	r0, r4
 801a47a:	f000 fc29 	bl	801acd0 <__lshift>
 801a47e:	9004      	str	r0, [sp, #16]
 801a480:	f1b8 0f00 	cmp.w	r8, #0
 801a484:	dd05      	ble.n	801a492 <_dtoa_r+0x86a>
 801a486:	4639      	mov	r1, r7
 801a488:	4642      	mov	r2, r8
 801a48a:	4620      	mov	r0, r4
 801a48c:	f000 fc20 	bl	801acd0 <__lshift>
 801a490:	4607      	mov	r7, r0
 801a492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a494:	b353      	cbz	r3, 801a4ec <_dtoa_r+0x8c4>
 801a496:	4639      	mov	r1, r7
 801a498:	9804      	ldr	r0, [sp, #16]
 801a49a:	f000 fc6d 	bl	801ad78 <__mcmp>
 801a49e:	2800      	cmp	r0, #0
 801a4a0:	da24      	bge.n	801a4ec <_dtoa_r+0x8c4>
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	220a      	movs	r2, #10
 801a4a6:	9904      	ldr	r1, [sp, #16]
 801a4a8:	4620      	mov	r0, r4
 801a4aa:	f000 fa9a 	bl	801a9e2 <__multadd>
 801a4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4b0:	9004      	str	r0, [sp, #16]
 801a4b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	f000 814d 	beq.w	801a756 <_dtoa_r+0xb2e>
 801a4bc:	2300      	movs	r3, #0
 801a4be:	4631      	mov	r1, r6
 801a4c0:	220a      	movs	r2, #10
 801a4c2:	4620      	mov	r0, r4
 801a4c4:	f000 fa8d 	bl	801a9e2 <__multadd>
 801a4c8:	9b02      	ldr	r3, [sp, #8]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	4606      	mov	r6, r0
 801a4ce:	dc4f      	bgt.n	801a570 <_dtoa_r+0x948>
 801a4d0:	9b06      	ldr	r3, [sp, #24]
 801a4d2:	2b02      	cmp	r3, #2
 801a4d4:	dd4c      	ble.n	801a570 <_dtoa_r+0x948>
 801a4d6:	e011      	b.n	801a4fc <_dtoa_r+0x8d4>
 801a4d8:	d0c9      	beq.n	801a46e <_dtoa_r+0x846>
 801a4da:	9a05      	ldr	r2, [sp, #20]
 801a4dc:	331c      	adds	r3, #28
 801a4de:	441a      	add	r2, r3
 801a4e0:	9205      	str	r2, [sp, #20]
 801a4e2:	441d      	add	r5, r3
 801a4e4:	4498      	add	r8, r3
 801a4e6:	e7c2      	b.n	801a46e <_dtoa_r+0x846>
 801a4e8:	4603      	mov	r3, r0
 801a4ea:	e7f6      	b.n	801a4da <_dtoa_r+0x8b2>
 801a4ec:	f1b9 0f00 	cmp.w	r9, #0
 801a4f0:	dc38      	bgt.n	801a564 <_dtoa_r+0x93c>
 801a4f2:	9b06      	ldr	r3, [sp, #24]
 801a4f4:	2b02      	cmp	r3, #2
 801a4f6:	dd35      	ble.n	801a564 <_dtoa_r+0x93c>
 801a4f8:	f8cd 9008 	str.w	r9, [sp, #8]
 801a4fc:	9b02      	ldr	r3, [sp, #8]
 801a4fe:	b963      	cbnz	r3, 801a51a <_dtoa_r+0x8f2>
 801a500:	4639      	mov	r1, r7
 801a502:	2205      	movs	r2, #5
 801a504:	4620      	mov	r0, r4
 801a506:	f000 fa6c 	bl	801a9e2 <__multadd>
 801a50a:	4601      	mov	r1, r0
 801a50c:	4607      	mov	r7, r0
 801a50e:	9804      	ldr	r0, [sp, #16]
 801a510:	f000 fc32 	bl	801ad78 <__mcmp>
 801a514:	2800      	cmp	r0, #0
 801a516:	f73f adcc 	bgt.w	801a0b2 <_dtoa_r+0x48a>
 801a51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a51c:	465d      	mov	r5, fp
 801a51e:	ea6f 0a03 	mvn.w	sl, r3
 801a522:	f04f 0900 	mov.w	r9, #0
 801a526:	4639      	mov	r1, r7
 801a528:	4620      	mov	r0, r4
 801a52a:	f000 fa43 	bl	801a9b4 <_Bfree>
 801a52e:	2e00      	cmp	r6, #0
 801a530:	f43f aeb7 	beq.w	801a2a2 <_dtoa_r+0x67a>
 801a534:	f1b9 0f00 	cmp.w	r9, #0
 801a538:	d005      	beq.n	801a546 <_dtoa_r+0x91e>
 801a53a:	45b1      	cmp	r9, r6
 801a53c:	d003      	beq.n	801a546 <_dtoa_r+0x91e>
 801a53e:	4649      	mov	r1, r9
 801a540:	4620      	mov	r0, r4
 801a542:	f000 fa37 	bl	801a9b4 <_Bfree>
 801a546:	4631      	mov	r1, r6
 801a548:	4620      	mov	r0, r4
 801a54a:	f000 fa33 	bl	801a9b4 <_Bfree>
 801a54e:	e6a8      	b.n	801a2a2 <_dtoa_r+0x67a>
 801a550:	2700      	movs	r7, #0
 801a552:	463e      	mov	r6, r7
 801a554:	e7e1      	b.n	801a51a <_dtoa_r+0x8f2>
 801a556:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a55a:	463e      	mov	r6, r7
 801a55c:	e5a9      	b.n	801a0b2 <_dtoa_r+0x48a>
 801a55e:	bf00      	nop
 801a560:	40240000 	.word	0x40240000
 801a564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a566:	f8cd 9008 	str.w	r9, [sp, #8]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	f000 80fa 	beq.w	801a764 <_dtoa_r+0xb3c>
 801a570:	2d00      	cmp	r5, #0
 801a572:	dd05      	ble.n	801a580 <_dtoa_r+0x958>
 801a574:	4631      	mov	r1, r6
 801a576:	462a      	mov	r2, r5
 801a578:	4620      	mov	r0, r4
 801a57a:	f000 fba9 	bl	801acd0 <__lshift>
 801a57e:	4606      	mov	r6, r0
 801a580:	9b07      	ldr	r3, [sp, #28]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d04c      	beq.n	801a620 <_dtoa_r+0x9f8>
 801a586:	6871      	ldr	r1, [r6, #4]
 801a588:	4620      	mov	r0, r4
 801a58a:	f000 f9df 	bl	801a94c <_Balloc>
 801a58e:	6932      	ldr	r2, [r6, #16]
 801a590:	3202      	adds	r2, #2
 801a592:	4605      	mov	r5, r0
 801a594:	0092      	lsls	r2, r2, #2
 801a596:	f106 010c 	add.w	r1, r6, #12
 801a59a:	300c      	adds	r0, #12
 801a59c:	f7fe fcfd 	bl	8018f9a <memcpy>
 801a5a0:	2201      	movs	r2, #1
 801a5a2:	4629      	mov	r1, r5
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	f000 fb93 	bl	801acd0 <__lshift>
 801a5aa:	9b00      	ldr	r3, [sp, #0]
 801a5ac:	f8cd b014 	str.w	fp, [sp, #20]
 801a5b0:	f003 0301 	and.w	r3, r3, #1
 801a5b4:	46b1      	mov	r9, r6
 801a5b6:	9307      	str	r3, [sp, #28]
 801a5b8:	4606      	mov	r6, r0
 801a5ba:	4639      	mov	r1, r7
 801a5bc:	9804      	ldr	r0, [sp, #16]
 801a5be:	f7ff faa6 	bl	8019b0e <quorem>
 801a5c2:	4649      	mov	r1, r9
 801a5c4:	4605      	mov	r5, r0
 801a5c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801a5ca:	9804      	ldr	r0, [sp, #16]
 801a5cc:	f000 fbd4 	bl	801ad78 <__mcmp>
 801a5d0:	4632      	mov	r2, r6
 801a5d2:	9000      	str	r0, [sp, #0]
 801a5d4:	4639      	mov	r1, r7
 801a5d6:	4620      	mov	r0, r4
 801a5d8:	f000 fbe8 	bl	801adac <__mdiff>
 801a5dc:	68c3      	ldr	r3, [r0, #12]
 801a5de:	4602      	mov	r2, r0
 801a5e0:	bb03      	cbnz	r3, 801a624 <_dtoa_r+0x9fc>
 801a5e2:	4601      	mov	r1, r0
 801a5e4:	9008      	str	r0, [sp, #32]
 801a5e6:	9804      	ldr	r0, [sp, #16]
 801a5e8:	f000 fbc6 	bl	801ad78 <__mcmp>
 801a5ec:	9a08      	ldr	r2, [sp, #32]
 801a5ee:	4603      	mov	r3, r0
 801a5f0:	4611      	mov	r1, r2
 801a5f2:	4620      	mov	r0, r4
 801a5f4:	9308      	str	r3, [sp, #32]
 801a5f6:	f000 f9dd 	bl	801a9b4 <_Bfree>
 801a5fa:	9b08      	ldr	r3, [sp, #32]
 801a5fc:	b9a3      	cbnz	r3, 801a628 <_dtoa_r+0xa00>
 801a5fe:	9a06      	ldr	r2, [sp, #24]
 801a600:	b992      	cbnz	r2, 801a628 <_dtoa_r+0xa00>
 801a602:	9a07      	ldr	r2, [sp, #28]
 801a604:	b982      	cbnz	r2, 801a628 <_dtoa_r+0xa00>
 801a606:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801a60a:	d029      	beq.n	801a660 <_dtoa_r+0xa38>
 801a60c:	9b00      	ldr	r3, [sp, #0]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	dd01      	ble.n	801a616 <_dtoa_r+0x9ee>
 801a612:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801a616:	9b05      	ldr	r3, [sp, #20]
 801a618:	1c5d      	adds	r5, r3, #1
 801a61a:	f883 8000 	strb.w	r8, [r3]
 801a61e:	e782      	b.n	801a526 <_dtoa_r+0x8fe>
 801a620:	4630      	mov	r0, r6
 801a622:	e7c2      	b.n	801a5aa <_dtoa_r+0x982>
 801a624:	2301      	movs	r3, #1
 801a626:	e7e3      	b.n	801a5f0 <_dtoa_r+0x9c8>
 801a628:	9a00      	ldr	r2, [sp, #0]
 801a62a:	2a00      	cmp	r2, #0
 801a62c:	db04      	blt.n	801a638 <_dtoa_r+0xa10>
 801a62e:	d125      	bne.n	801a67c <_dtoa_r+0xa54>
 801a630:	9a06      	ldr	r2, [sp, #24]
 801a632:	bb1a      	cbnz	r2, 801a67c <_dtoa_r+0xa54>
 801a634:	9a07      	ldr	r2, [sp, #28]
 801a636:	bb0a      	cbnz	r2, 801a67c <_dtoa_r+0xa54>
 801a638:	2b00      	cmp	r3, #0
 801a63a:	ddec      	ble.n	801a616 <_dtoa_r+0x9ee>
 801a63c:	2201      	movs	r2, #1
 801a63e:	9904      	ldr	r1, [sp, #16]
 801a640:	4620      	mov	r0, r4
 801a642:	f000 fb45 	bl	801acd0 <__lshift>
 801a646:	4639      	mov	r1, r7
 801a648:	9004      	str	r0, [sp, #16]
 801a64a:	f000 fb95 	bl	801ad78 <__mcmp>
 801a64e:	2800      	cmp	r0, #0
 801a650:	dc03      	bgt.n	801a65a <_dtoa_r+0xa32>
 801a652:	d1e0      	bne.n	801a616 <_dtoa_r+0x9ee>
 801a654:	f018 0f01 	tst.w	r8, #1
 801a658:	d0dd      	beq.n	801a616 <_dtoa_r+0x9ee>
 801a65a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801a65e:	d1d8      	bne.n	801a612 <_dtoa_r+0x9ea>
 801a660:	9b05      	ldr	r3, [sp, #20]
 801a662:	9a05      	ldr	r2, [sp, #20]
 801a664:	1c5d      	adds	r5, r3, #1
 801a666:	2339      	movs	r3, #57	; 0x39
 801a668:	7013      	strb	r3, [r2, #0]
 801a66a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a66e:	2b39      	cmp	r3, #57	; 0x39
 801a670:	f105 32ff 	add.w	r2, r5, #4294967295
 801a674:	d04f      	beq.n	801a716 <_dtoa_r+0xaee>
 801a676:	3301      	adds	r3, #1
 801a678:	7013      	strb	r3, [r2, #0]
 801a67a:	e754      	b.n	801a526 <_dtoa_r+0x8fe>
 801a67c:	9a05      	ldr	r2, [sp, #20]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	f102 0501 	add.w	r5, r2, #1
 801a684:	dd06      	ble.n	801a694 <_dtoa_r+0xa6c>
 801a686:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801a68a:	d0e9      	beq.n	801a660 <_dtoa_r+0xa38>
 801a68c:	f108 0801 	add.w	r8, r8, #1
 801a690:	9b05      	ldr	r3, [sp, #20]
 801a692:	e7c2      	b.n	801a61a <_dtoa_r+0x9f2>
 801a694:	9a02      	ldr	r2, [sp, #8]
 801a696:	f805 8c01 	strb.w	r8, [r5, #-1]
 801a69a:	eba5 030b 	sub.w	r3, r5, fp
 801a69e:	4293      	cmp	r3, r2
 801a6a0:	d021      	beq.n	801a6e6 <_dtoa_r+0xabe>
 801a6a2:	2300      	movs	r3, #0
 801a6a4:	220a      	movs	r2, #10
 801a6a6:	9904      	ldr	r1, [sp, #16]
 801a6a8:	4620      	mov	r0, r4
 801a6aa:	f000 f99a 	bl	801a9e2 <__multadd>
 801a6ae:	45b1      	cmp	r9, r6
 801a6b0:	9004      	str	r0, [sp, #16]
 801a6b2:	f04f 0300 	mov.w	r3, #0
 801a6b6:	f04f 020a 	mov.w	r2, #10
 801a6ba:	4649      	mov	r1, r9
 801a6bc:	4620      	mov	r0, r4
 801a6be:	d105      	bne.n	801a6cc <_dtoa_r+0xaa4>
 801a6c0:	f000 f98f 	bl	801a9e2 <__multadd>
 801a6c4:	4681      	mov	r9, r0
 801a6c6:	4606      	mov	r6, r0
 801a6c8:	9505      	str	r5, [sp, #20]
 801a6ca:	e776      	b.n	801a5ba <_dtoa_r+0x992>
 801a6cc:	f000 f989 	bl	801a9e2 <__multadd>
 801a6d0:	4631      	mov	r1, r6
 801a6d2:	4681      	mov	r9, r0
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	220a      	movs	r2, #10
 801a6d8:	4620      	mov	r0, r4
 801a6da:	f000 f982 	bl	801a9e2 <__multadd>
 801a6de:	4606      	mov	r6, r0
 801a6e0:	e7f2      	b.n	801a6c8 <_dtoa_r+0xaa0>
 801a6e2:	f04f 0900 	mov.w	r9, #0
 801a6e6:	2201      	movs	r2, #1
 801a6e8:	9904      	ldr	r1, [sp, #16]
 801a6ea:	4620      	mov	r0, r4
 801a6ec:	f000 faf0 	bl	801acd0 <__lshift>
 801a6f0:	4639      	mov	r1, r7
 801a6f2:	9004      	str	r0, [sp, #16]
 801a6f4:	f000 fb40 	bl	801ad78 <__mcmp>
 801a6f8:	2800      	cmp	r0, #0
 801a6fa:	dcb6      	bgt.n	801a66a <_dtoa_r+0xa42>
 801a6fc:	d102      	bne.n	801a704 <_dtoa_r+0xadc>
 801a6fe:	f018 0f01 	tst.w	r8, #1
 801a702:	d1b2      	bne.n	801a66a <_dtoa_r+0xa42>
 801a704:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a708:	2b30      	cmp	r3, #48	; 0x30
 801a70a:	f105 32ff 	add.w	r2, r5, #4294967295
 801a70e:	f47f af0a 	bne.w	801a526 <_dtoa_r+0x8fe>
 801a712:	4615      	mov	r5, r2
 801a714:	e7f6      	b.n	801a704 <_dtoa_r+0xadc>
 801a716:	4593      	cmp	fp, r2
 801a718:	d105      	bne.n	801a726 <_dtoa_r+0xafe>
 801a71a:	2331      	movs	r3, #49	; 0x31
 801a71c:	f10a 0a01 	add.w	sl, sl, #1
 801a720:	f88b 3000 	strb.w	r3, [fp]
 801a724:	e6ff      	b.n	801a526 <_dtoa_r+0x8fe>
 801a726:	4615      	mov	r5, r2
 801a728:	e79f      	b.n	801a66a <_dtoa_r+0xa42>
 801a72a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801a790 <_dtoa_r+0xb68>
 801a72e:	e007      	b.n	801a740 <_dtoa_r+0xb18>
 801a730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a732:	f8df b060 	ldr.w	fp, [pc, #96]	; 801a794 <_dtoa_r+0xb6c>
 801a736:	b11b      	cbz	r3, 801a740 <_dtoa_r+0xb18>
 801a738:	f10b 0308 	add.w	r3, fp, #8
 801a73c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a73e:	6013      	str	r3, [r2, #0]
 801a740:	4658      	mov	r0, fp
 801a742:	b017      	add	sp, #92	; 0x5c
 801a744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a748:	9b06      	ldr	r3, [sp, #24]
 801a74a:	2b01      	cmp	r3, #1
 801a74c:	f77f ae35 	ble.w	801a3ba <_dtoa_r+0x792>
 801a750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a752:	9307      	str	r3, [sp, #28]
 801a754:	e649      	b.n	801a3ea <_dtoa_r+0x7c2>
 801a756:	9b02      	ldr	r3, [sp, #8]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	dc03      	bgt.n	801a764 <_dtoa_r+0xb3c>
 801a75c:	9b06      	ldr	r3, [sp, #24]
 801a75e:	2b02      	cmp	r3, #2
 801a760:	f73f aecc 	bgt.w	801a4fc <_dtoa_r+0x8d4>
 801a764:	465d      	mov	r5, fp
 801a766:	4639      	mov	r1, r7
 801a768:	9804      	ldr	r0, [sp, #16]
 801a76a:	f7ff f9d0 	bl	8019b0e <quorem>
 801a76e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801a772:	f805 8b01 	strb.w	r8, [r5], #1
 801a776:	9a02      	ldr	r2, [sp, #8]
 801a778:	eba5 030b 	sub.w	r3, r5, fp
 801a77c:	429a      	cmp	r2, r3
 801a77e:	ddb0      	ble.n	801a6e2 <_dtoa_r+0xaba>
 801a780:	2300      	movs	r3, #0
 801a782:	220a      	movs	r2, #10
 801a784:	9904      	ldr	r1, [sp, #16]
 801a786:	4620      	mov	r0, r4
 801a788:	f000 f92b 	bl	801a9e2 <__multadd>
 801a78c:	9004      	str	r0, [sp, #16]
 801a78e:	e7ea      	b.n	801a766 <_dtoa_r+0xb3e>
 801a790:	0802106e 	.word	0x0802106e
 801a794:	08021193 	.word	0x08021193

0801a798 <std>:
 801a798:	2300      	movs	r3, #0
 801a79a:	b510      	push	{r4, lr}
 801a79c:	4604      	mov	r4, r0
 801a79e:	e9c0 3300 	strd	r3, r3, [r0]
 801a7a2:	6083      	str	r3, [r0, #8]
 801a7a4:	8181      	strh	r1, [r0, #12]
 801a7a6:	6643      	str	r3, [r0, #100]	; 0x64
 801a7a8:	81c2      	strh	r2, [r0, #14]
 801a7aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a7ae:	6183      	str	r3, [r0, #24]
 801a7b0:	4619      	mov	r1, r3
 801a7b2:	2208      	movs	r2, #8
 801a7b4:	305c      	adds	r0, #92	; 0x5c
 801a7b6:	f7fe fc14 	bl	8018fe2 <memset>
 801a7ba:	4b05      	ldr	r3, [pc, #20]	; (801a7d0 <std+0x38>)
 801a7bc:	6263      	str	r3, [r4, #36]	; 0x24
 801a7be:	4b05      	ldr	r3, [pc, #20]	; (801a7d4 <std+0x3c>)
 801a7c0:	62a3      	str	r3, [r4, #40]	; 0x28
 801a7c2:	4b05      	ldr	r3, [pc, #20]	; (801a7d8 <std+0x40>)
 801a7c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a7c6:	4b05      	ldr	r3, [pc, #20]	; (801a7dc <std+0x44>)
 801a7c8:	6224      	str	r4, [r4, #32]
 801a7ca:	6323      	str	r3, [r4, #48]	; 0x30
 801a7cc:	bd10      	pop	{r4, pc}
 801a7ce:	bf00      	nop
 801a7d0:	0801b445 	.word	0x0801b445
 801a7d4:	0801b467 	.word	0x0801b467
 801a7d8:	0801b49f 	.word	0x0801b49f
 801a7dc:	0801b4c3 	.word	0x0801b4c3

0801a7e0 <_cleanup_r>:
 801a7e0:	4901      	ldr	r1, [pc, #4]	; (801a7e8 <_cleanup_r+0x8>)
 801a7e2:	f000 b885 	b.w	801a8f0 <_fwalk_reent>
 801a7e6:	bf00      	nop
 801a7e8:	0801b79d 	.word	0x0801b79d

0801a7ec <__sfmoreglue>:
 801a7ec:	b570      	push	{r4, r5, r6, lr}
 801a7ee:	1e4a      	subs	r2, r1, #1
 801a7f0:	2568      	movs	r5, #104	; 0x68
 801a7f2:	4355      	muls	r5, r2
 801a7f4:	460e      	mov	r6, r1
 801a7f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a7fa:	f7fe fc49 	bl	8019090 <_malloc_r>
 801a7fe:	4604      	mov	r4, r0
 801a800:	b140      	cbz	r0, 801a814 <__sfmoreglue+0x28>
 801a802:	2100      	movs	r1, #0
 801a804:	e9c0 1600 	strd	r1, r6, [r0]
 801a808:	300c      	adds	r0, #12
 801a80a:	60a0      	str	r0, [r4, #8]
 801a80c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a810:	f7fe fbe7 	bl	8018fe2 <memset>
 801a814:	4620      	mov	r0, r4
 801a816:	bd70      	pop	{r4, r5, r6, pc}

0801a818 <__sinit>:
 801a818:	6983      	ldr	r3, [r0, #24]
 801a81a:	b510      	push	{r4, lr}
 801a81c:	4604      	mov	r4, r0
 801a81e:	bb33      	cbnz	r3, 801a86e <__sinit+0x56>
 801a820:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a824:	6503      	str	r3, [r0, #80]	; 0x50
 801a826:	4b12      	ldr	r3, [pc, #72]	; (801a870 <__sinit+0x58>)
 801a828:	4a12      	ldr	r2, [pc, #72]	; (801a874 <__sinit+0x5c>)
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	6282      	str	r2, [r0, #40]	; 0x28
 801a82e:	4298      	cmp	r0, r3
 801a830:	bf04      	itt	eq
 801a832:	2301      	moveq	r3, #1
 801a834:	6183      	streq	r3, [r0, #24]
 801a836:	f000 f81f 	bl	801a878 <__sfp>
 801a83a:	6060      	str	r0, [r4, #4]
 801a83c:	4620      	mov	r0, r4
 801a83e:	f000 f81b 	bl	801a878 <__sfp>
 801a842:	60a0      	str	r0, [r4, #8]
 801a844:	4620      	mov	r0, r4
 801a846:	f000 f817 	bl	801a878 <__sfp>
 801a84a:	2200      	movs	r2, #0
 801a84c:	60e0      	str	r0, [r4, #12]
 801a84e:	2104      	movs	r1, #4
 801a850:	6860      	ldr	r0, [r4, #4]
 801a852:	f7ff ffa1 	bl	801a798 <std>
 801a856:	2201      	movs	r2, #1
 801a858:	2109      	movs	r1, #9
 801a85a:	68a0      	ldr	r0, [r4, #8]
 801a85c:	f7ff ff9c 	bl	801a798 <std>
 801a860:	2202      	movs	r2, #2
 801a862:	2112      	movs	r1, #18
 801a864:	68e0      	ldr	r0, [r4, #12]
 801a866:	f7ff ff97 	bl	801a798 <std>
 801a86a:	2301      	movs	r3, #1
 801a86c:	61a3      	str	r3, [r4, #24]
 801a86e:	bd10      	pop	{r4, pc}
 801a870:	08021050 	.word	0x08021050
 801a874:	0801a7e1 	.word	0x0801a7e1

0801a878 <__sfp>:
 801a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a87a:	4b1b      	ldr	r3, [pc, #108]	; (801a8e8 <__sfp+0x70>)
 801a87c:	681e      	ldr	r6, [r3, #0]
 801a87e:	69b3      	ldr	r3, [r6, #24]
 801a880:	4607      	mov	r7, r0
 801a882:	b913      	cbnz	r3, 801a88a <__sfp+0x12>
 801a884:	4630      	mov	r0, r6
 801a886:	f7ff ffc7 	bl	801a818 <__sinit>
 801a88a:	3648      	adds	r6, #72	; 0x48
 801a88c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a890:	3b01      	subs	r3, #1
 801a892:	d503      	bpl.n	801a89c <__sfp+0x24>
 801a894:	6833      	ldr	r3, [r6, #0]
 801a896:	b133      	cbz	r3, 801a8a6 <__sfp+0x2e>
 801a898:	6836      	ldr	r6, [r6, #0]
 801a89a:	e7f7      	b.n	801a88c <__sfp+0x14>
 801a89c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a8a0:	b16d      	cbz	r5, 801a8be <__sfp+0x46>
 801a8a2:	3468      	adds	r4, #104	; 0x68
 801a8a4:	e7f4      	b.n	801a890 <__sfp+0x18>
 801a8a6:	2104      	movs	r1, #4
 801a8a8:	4638      	mov	r0, r7
 801a8aa:	f7ff ff9f 	bl	801a7ec <__sfmoreglue>
 801a8ae:	6030      	str	r0, [r6, #0]
 801a8b0:	2800      	cmp	r0, #0
 801a8b2:	d1f1      	bne.n	801a898 <__sfp+0x20>
 801a8b4:	230c      	movs	r3, #12
 801a8b6:	603b      	str	r3, [r7, #0]
 801a8b8:	4604      	mov	r4, r0
 801a8ba:	4620      	mov	r0, r4
 801a8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8be:	4b0b      	ldr	r3, [pc, #44]	; (801a8ec <__sfp+0x74>)
 801a8c0:	6665      	str	r5, [r4, #100]	; 0x64
 801a8c2:	e9c4 5500 	strd	r5, r5, [r4]
 801a8c6:	60a5      	str	r5, [r4, #8]
 801a8c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801a8cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801a8d0:	2208      	movs	r2, #8
 801a8d2:	4629      	mov	r1, r5
 801a8d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a8d8:	f7fe fb83 	bl	8018fe2 <memset>
 801a8dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a8e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a8e4:	e7e9      	b.n	801a8ba <__sfp+0x42>
 801a8e6:	bf00      	nop
 801a8e8:	08021050 	.word	0x08021050
 801a8ec:	ffff0001 	.word	0xffff0001

0801a8f0 <_fwalk_reent>:
 801a8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8f4:	4680      	mov	r8, r0
 801a8f6:	4689      	mov	r9, r1
 801a8f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a8fc:	2600      	movs	r6, #0
 801a8fe:	b914      	cbnz	r4, 801a906 <_fwalk_reent+0x16>
 801a900:	4630      	mov	r0, r6
 801a902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a906:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801a90a:	3f01      	subs	r7, #1
 801a90c:	d501      	bpl.n	801a912 <_fwalk_reent+0x22>
 801a90e:	6824      	ldr	r4, [r4, #0]
 801a910:	e7f5      	b.n	801a8fe <_fwalk_reent+0xe>
 801a912:	89ab      	ldrh	r3, [r5, #12]
 801a914:	2b01      	cmp	r3, #1
 801a916:	d907      	bls.n	801a928 <_fwalk_reent+0x38>
 801a918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a91c:	3301      	adds	r3, #1
 801a91e:	d003      	beq.n	801a928 <_fwalk_reent+0x38>
 801a920:	4629      	mov	r1, r5
 801a922:	4640      	mov	r0, r8
 801a924:	47c8      	blx	r9
 801a926:	4306      	orrs	r6, r0
 801a928:	3568      	adds	r5, #104	; 0x68
 801a92a:	e7ee      	b.n	801a90a <_fwalk_reent+0x1a>

0801a92c <_localeconv_r>:
 801a92c:	4b04      	ldr	r3, [pc, #16]	; (801a940 <_localeconv_r+0x14>)
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	6a18      	ldr	r0, [r3, #32]
 801a932:	4b04      	ldr	r3, [pc, #16]	; (801a944 <_localeconv_r+0x18>)
 801a934:	2800      	cmp	r0, #0
 801a936:	bf08      	it	eq
 801a938:	4618      	moveq	r0, r3
 801a93a:	30f0      	adds	r0, #240	; 0xf0
 801a93c:	4770      	bx	lr
 801a93e:	bf00      	nop
 801a940:	200000c0 	.word	0x200000c0
 801a944:	20000124 	.word	0x20000124

0801a948 <__malloc_lock>:
 801a948:	4770      	bx	lr

0801a94a <__malloc_unlock>:
 801a94a:	4770      	bx	lr

0801a94c <_Balloc>:
 801a94c:	b570      	push	{r4, r5, r6, lr}
 801a94e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a950:	4604      	mov	r4, r0
 801a952:	460e      	mov	r6, r1
 801a954:	b93d      	cbnz	r5, 801a966 <_Balloc+0x1a>
 801a956:	2010      	movs	r0, #16
 801a958:	f7fe faee 	bl	8018f38 <malloc>
 801a95c:	6260      	str	r0, [r4, #36]	; 0x24
 801a95e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a962:	6005      	str	r5, [r0, #0]
 801a964:	60c5      	str	r5, [r0, #12]
 801a966:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801a968:	68eb      	ldr	r3, [r5, #12]
 801a96a:	b183      	cbz	r3, 801a98e <_Balloc+0x42>
 801a96c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a96e:	68db      	ldr	r3, [r3, #12]
 801a970:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a974:	b9b8      	cbnz	r0, 801a9a6 <_Balloc+0x5a>
 801a976:	2101      	movs	r1, #1
 801a978:	fa01 f506 	lsl.w	r5, r1, r6
 801a97c:	1d6a      	adds	r2, r5, #5
 801a97e:	0092      	lsls	r2, r2, #2
 801a980:	4620      	mov	r0, r4
 801a982:	f000 fabf 	bl	801af04 <_calloc_r>
 801a986:	b160      	cbz	r0, 801a9a2 <_Balloc+0x56>
 801a988:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801a98c:	e00e      	b.n	801a9ac <_Balloc+0x60>
 801a98e:	2221      	movs	r2, #33	; 0x21
 801a990:	2104      	movs	r1, #4
 801a992:	4620      	mov	r0, r4
 801a994:	f000 fab6 	bl	801af04 <_calloc_r>
 801a998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a99a:	60e8      	str	r0, [r5, #12]
 801a99c:	68db      	ldr	r3, [r3, #12]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d1e4      	bne.n	801a96c <_Balloc+0x20>
 801a9a2:	2000      	movs	r0, #0
 801a9a4:	bd70      	pop	{r4, r5, r6, pc}
 801a9a6:	6802      	ldr	r2, [r0, #0]
 801a9a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a9b2:	e7f7      	b.n	801a9a4 <_Balloc+0x58>

0801a9b4 <_Bfree>:
 801a9b4:	b570      	push	{r4, r5, r6, lr}
 801a9b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801a9b8:	4606      	mov	r6, r0
 801a9ba:	460d      	mov	r5, r1
 801a9bc:	b93c      	cbnz	r4, 801a9ce <_Bfree+0x1a>
 801a9be:	2010      	movs	r0, #16
 801a9c0:	f7fe faba 	bl	8018f38 <malloc>
 801a9c4:	6270      	str	r0, [r6, #36]	; 0x24
 801a9c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a9ca:	6004      	str	r4, [r0, #0]
 801a9cc:	60c4      	str	r4, [r0, #12]
 801a9ce:	b13d      	cbz	r5, 801a9e0 <_Bfree+0x2c>
 801a9d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a9d2:	686a      	ldr	r2, [r5, #4]
 801a9d4:	68db      	ldr	r3, [r3, #12]
 801a9d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a9da:	6029      	str	r1, [r5, #0]
 801a9dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801a9e0:	bd70      	pop	{r4, r5, r6, pc}

0801a9e2 <__multadd>:
 801a9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9e6:	690d      	ldr	r5, [r1, #16]
 801a9e8:	461f      	mov	r7, r3
 801a9ea:	4606      	mov	r6, r0
 801a9ec:	460c      	mov	r4, r1
 801a9ee:	f101 0c14 	add.w	ip, r1, #20
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	f8dc 0000 	ldr.w	r0, [ip]
 801a9f8:	b281      	uxth	r1, r0
 801a9fa:	fb02 7101 	mla	r1, r2, r1, r7
 801a9fe:	0c0f      	lsrs	r7, r1, #16
 801aa00:	0c00      	lsrs	r0, r0, #16
 801aa02:	fb02 7000 	mla	r0, r2, r0, r7
 801aa06:	b289      	uxth	r1, r1
 801aa08:	3301      	adds	r3, #1
 801aa0a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801aa0e:	429d      	cmp	r5, r3
 801aa10:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801aa14:	f84c 1b04 	str.w	r1, [ip], #4
 801aa18:	dcec      	bgt.n	801a9f4 <__multadd+0x12>
 801aa1a:	b1d7      	cbz	r7, 801aa52 <__multadd+0x70>
 801aa1c:	68a3      	ldr	r3, [r4, #8]
 801aa1e:	42ab      	cmp	r3, r5
 801aa20:	dc12      	bgt.n	801aa48 <__multadd+0x66>
 801aa22:	6861      	ldr	r1, [r4, #4]
 801aa24:	4630      	mov	r0, r6
 801aa26:	3101      	adds	r1, #1
 801aa28:	f7ff ff90 	bl	801a94c <_Balloc>
 801aa2c:	6922      	ldr	r2, [r4, #16]
 801aa2e:	3202      	adds	r2, #2
 801aa30:	f104 010c 	add.w	r1, r4, #12
 801aa34:	4680      	mov	r8, r0
 801aa36:	0092      	lsls	r2, r2, #2
 801aa38:	300c      	adds	r0, #12
 801aa3a:	f7fe faae 	bl	8018f9a <memcpy>
 801aa3e:	4621      	mov	r1, r4
 801aa40:	4630      	mov	r0, r6
 801aa42:	f7ff ffb7 	bl	801a9b4 <_Bfree>
 801aa46:	4644      	mov	r4, r8
 801aa48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801aa4c:	3501      	adds	r5, #1
 801aa4e:	615f      	str	r7, [r3, #20]
 801aa50:	6125      	str	r5, [r4, #16]
 801aa52:	4620      	mov	r0, r4
 801aa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801aa58 <__hi0bits>:
 801aa58:	0c02      	lsrs	r2, r0, #16
 801aa5a:	0412      	lsls	r2, r2, #16
 801aa5c:	4603      	mov	r3, r0
 801aa5e:	b9b2      	cbnz	r2, 801aa8e <__hi0bits+0x36>
 801aa60:	0403      	lsls	r3, r0, #16
 801aa62:	2010      	movs	r0, #16
 801aa64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801aa68:	bf04      	itt	eq
 801aa6a:	021b      	lsleq	r3, r3, #8
 801aa6c:	3008      	addeq	r0, #8
 801aa6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801aa72:	bf04      	itt	eq
 801aa74:	011b      	lsleq	r3, r3, #4
 801aa76:	3004      	addeq	r0, #4
 801aa78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801aa7c:	bf04      	itt	eq
 801aa7e:	009b      	lsleq	r3, r3, #2
 801aa80:	3002      	addeq	r0, #2
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	db06      	blt.n	801aa94 <__hi0bits+0x3c>
 801aa86:	005b      	lsls	r3, r3, #1
 801aa88:	d503      	bpl.n	801aa92 <__hi0bits+0x3a>
 801aa8a:	3001      	adds	r0, #1
 801aa8c:	4770      	bx	lr
 801aa8e:	2000      	movs	r0, #0
 801aa90:	e7e8      	b.n	801aa64 <__hi0bits+0xc>
 801aa92:	2020      	movs	r0, #32
 801aa94:	4770      	bx	lr

0801aa96 <__lo0bits>:
 801aa96:	6803      	ldr	r3, [r0, #0]
 801aa98:	f013 0207 	ands.w	r2, r3, #7
 801aa9c:	4601      	mov	r1, r0
 801aa9e:	d00b      	beq.n	801aab8 <__lo0bits+0x22>
 801aaa0:	07da      	lsls	r2, r3, #31
 801aaa2:	d423      	bmi.n	801aaec <__lo0bits+0x56>
 801aaa4:	0798      	lsls	r0, r3, #30
 801aaa6:	bf49      	itett	mi
 801aaa8:	085b      	lsrmi	r3, r3, #1
 801aaaa:	089b      	lsrpl	r3, r3, #2
 801aaac:	2001      	movmi	r0, #1
 801aaae:	600b      	strmi	r3, [r1, #0]
 801aab0:	bf5c      	itt	pl
 801aab2:	600b      	strpl	r3, [r1, #0]
 801aab4:	2002      	movpl	r0, #2
 801aab6:	4770      	bx	lr
 801aab8:	b298      	uxth	r0, r3
 801aaba:	b9a8      	cbnz	r0, 801aae8 <__lo0bits+0x52>
 801aabc:	0c1b      	lsrs	r3, r3, #16
 801aabe:	2010      	movs	r0, #16
 801aac0:	f013 0fff 	tst.w	r3, #255	; 0xff
 801aac4:	bf04      	itt	eq
 801aac6:	0a1b      	lsreq	r3, r3, #8
 801aac8:	3008      	addeq	r0, #8
 801aaca:	071a      	lsls	r2, r3, #28
 801aacc:	bf04      	itt	eq
 801aace:	091b      	lsreq	r3, r3, #4
 801aad0:	3004      	addeq	r0, #4
 801aad2:	079a      	lsls	r2, r3, #30
 801aad4:	bf04      	itt	eq
 801aad6:	089b      	lsreq	r3, r3, #2
 801aad8:	3002      	addeq	r0, #2
 801aada:	07da      	lsls	r2, r3, #31
 801aadc:	d402      	bmi.n	801aae4 <__lo0bits+0x4e>
 801aade:	085b      	lsrs	r3, r3, #1
 801aae0:	d006      	beq.n	801aaf0 <__lo0bits+0x5a>
 801aae2:	3001      	adds	r0, #1
 801aae4:	600b      	str	r3, [r1, #0]
 801aae6:	4770      	bx	lr
 801aae8:	4610      	mov	r0, r2
 801aaea:	e7e9      	b.n	801aac0 <__lo0bits+0x2a>
 801aaec:	2000      	movs	r0, #0
 801aaee:	4770      	bx	lr
 801aaf0:	2020      	movs	r0, #32
 801aaf2:	4770      	bx	lr

0801aaf4 <__i2b>:
 801aaf4:	b510      	push	{r4, lr}
 801aaf6:	460c      	mov	r4, r1
 801aaf8:	2101      	movs	r1, #1
 801aafa:	f7ff ff27 	bl	801a94c <_Balloc>
 801aafe:	2201      	movs	r2, #1
 801ab00:	6144      	str	r4, [r0, #20]
 801ab02:	6102      	str	r2, [r0, #16]
 801ab04:	bd10      	pop	{r4, pc}

0801ab06 <__multiply>:
 801ab06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab0a:	4614      	mov	r4, r2
 801ab0c:	690a      	ldr	r2, [r1, #16]
 801ab0e:	6923      	ldr	r3, [r4, #16]
 801ab10:	429a      	cmp	r2, r3
 801ab12:	bfb8      	it	lt
 801ab14:	460b      	movlt	r3, r1
 801ab16:	4688      	mov	r8, r1
 801ab18:	bfbc      	itt	lt
 801ab1a:	46a0      	movlt	r8, r4
 801ab1c:	461c      	movlt	r4, r3
 801ab1e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ab22:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801ab26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ab2a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ab2e:	eb07 0609 	add.w	r6, r7, r9
 801ab32:	42b3      	cmp	r3, r6
 801ab34:	bfb8      	it	lt
 801ab36:	3101      	addlt	r1, #1
 801ab38:	f7ff ff08 	bl	801a94c <_Balloc>
 801ab3c:	f100 0514 	add.w	r5, r0, #20
 801ab40:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801ab44:	462b      	mov	r3, r5
 801ab46:	2200      	movs	r2, #0
 801ab48:	4573      	cmp	r3, lr
 801ab4a:	d316      	bcc.n	801ab7a <__multiply+0x74>
 801ab4c:	f104 0214 	add.w	r2, r4, #20
 801ab50:	f108 0114 	add.w	r1, r8, #20
 801ab54:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801ab58:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801ab5c:	9300      	str	r3, [sp, #0]
 801ab5e:	9b00      	ldr	r3, [sp, #0]
 801ab60:	9201      	str	r2, [sp, #4]
 801ab62:	4293      	cmp	r3, r2
 801ab64:	d80c      	bhi.n	801ab80 <__multiply+0x7a>
 801ab66:	2e00      	cmp	r6, #0
 801ab68:	dd03      	ble.n	801ab72 <__multiply+0x6c>
 801ab6a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d05d      	beq.n	801ac2e <__multiply+0x128>
 801ab72:	6106      	str	r6, [r0, #16]
 801ab74:	b003      	add	sp, #12
 801ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab7a:	f843 2b04 	str.w	r2, [r3], #4
 801ab7e:	e7e3      	b.n	801ab48 <__multiply+0x42>
 801ab80:	f8b2 b000 	ldrh.w	fp, [r2]
 801ab84:	f1bb 0f00 	cmp.w	fp, #0
 801ab88:	d023      	beq.n	801abd2 <__multiply+0xcc>
 801ab8a:	4689      	mov	r9, r1
 801ab8c:	46ac      	mov	ip, r5
 801ab8e:	f04f 0800 	mov.w	r8, #0
 801ab92:	f859 4b04 	ldr.w	r4, [r9], #4
 801ab96:	f8dc a000 	ldr.w	sl, [ip]
 801ab9a:	b2a3      	uxth	r3, r4
 801ab9c:	fa1f fa8a 	uxth.w	sl, sl
 801aba0:	fb0b a303 	mla	r3, fp, r3, sl
 801aba4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801aba8:	f8dc 4000 	ldr.w	r4, [ip]
 801abac:	4443      	add	r3, r8
 801abae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801abb2:	fb0b 840a 	mla	r4, fp, sl, r8
 801abb6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801abba:	46e2      	mov	sl, ip
 801abbc:	b29b      	uxth	r3, r3
 801abbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801abc2:	454f      	cmp	r7, r9
 801abc4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801abc8:	f84a 3b04 	str.w	r3, [sl], #4
 801abcc:	d82b      	bhi.n	801ac26 <__multiply+0x120>
 801abce:	f8cc 8004 	str.w	r8, [ip, #4]
 801abd2:	9b01      	ldr	r3, [sp, #4]
 801abd4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801abd8:	3204      	adds	r2, #4
 801abda:	f1ba 0f00 	cmp.w	sl, #0
 801abde:	d020      	beq.n	801ac22 <__multiply+0x11c>
 801abe0:	682b      	ldr	r3, [r5, #0]
 801abe2:	4689      	mov	r9, r1
 801abe4:	46a8      	mov	r8, r5
 801abe6:	f04f 0b00 	mov.w	fp, #0
 801abea:	f8b9 c000 	ldrh.w	ip, [r9]
 801abee:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801abf2:	fb0a 440c 	mla	r4, sl, ip, r4
 801abf6:	445c      	add	r4, fp
 801abf8:	46c4      	mov	ip, r8
 801abfa:	b29b      	uxth	r3, r3
 801abfc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801ac00:	f84c 3b04 	str.w	r3, [ip], #4
 801ac04:	f859 3b04 	ldr.w	r3, [r9], #4
 801ac08:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801ac0c:	0c1b      	lsrs	r3, r3, #16
 801ac0e:	fb0a b303 	mla	r3, sl, r3, fp
 801ac12:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801ac16:	454f      	cmp	r7, r9
 801ac18:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801ac1c:	d805      	bhi.n	801ac2a <__multiply+0x124>
 801ac1e:	f8c8 3004 	str.w	r3, [r8, #4]
 801ac22:	3504      	adds	r5, #4
 801ac24:	e79b      	b.n	801ab5e <__multiply+0x58>
 801ac26:	46d4      	mov	ip, sl
 801ac28:	e7b3      	b.n	801ab92 <__multiply+0x8c>
 801ac2a:	46e0      	mov	r8, ip
 801ac2c:	e7dd      	b.n	801abea <__multiply+0xe4>
 801ac2e:	3e01      	subs	r6, #1
 801ac30:	e799      	b.n	801ab66 <__multiply+0x60>
	...

0801ac34 <__pow5mult>:
 801ac34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac38:	4615      	mov	r5, r2
 801ac3a:	f012 0203 	ands.w	r2, r2, #3
 801ac3e:	4606      	mov	r6, r0
 801ac40:	460f      	mov	r7, r1
 801ac42:	d007      	beq.n	801ac54 <__pow5mult+0x20>
 801ac44:	3a01      	subs	r2, #1
 801ac46:	4c21      	ldr	r4, [pc, #132]	; (801accc <__pow5mult+0x98>)
 801ac48:	2300      	movs	r3, #0
 801ac4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ac4e:	f7ff fec8 	bl	801a9e2 <__multadd>
 801ac52:	4607      	mov	r7, r0
 801ac54:	10ad      	asrs	r5, r5, #2
 801ac56:	d035      	beq.n	801acc4 <__pow5mult+0x90>
 801ac58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ac5a:	b93c      	cbnz	r4, 801ac6c <__pow5mult+0x38>
 801ac5c:	2010      	movs	r0, #16
 801ac5e:	f7fe f96b 	bl	8018f38 <malloc>
 801ac62:	6270      	str	r0, [r6, #36]	; 0x24
 801ac64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ac68:	6004      	str	r4, [r0, #0]
 801ac6a:	60c4      	str	r4, [r0, #12]
 801ac6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ac70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ac74:	b94c      	cbnz	r4, 801ac8a <__pow5mult+0x56>
 801ac76:	f240 2171 	movw	r1, #625	; 0x271
 801ac7a:	4630      	mov	r0, r6
 801ac7c:	f7ff ff3a 	bl	801aaf4 <__i2b>
 801ac80:	2300      	movs	r3, #0
 801ac82:	f8c8 0008 	str.w	r0, [r8, #8]
 801ac86:	4604      	mov	r4, r0
 801ac88:	6003      	str	r3, [r0, #0]
 801ac8a:	f04f 0800 	mov.w	r8, #0
 801ac8e:	07eb      	lsls	r3, r5, #31
 801ac90:	d50a      	bpl.n	801aca8 <__pow5mult+0x74>
 801ac92:	4639      	mov	r1, r7
 801ac94:	4622      	mov	r2, r4
 801ac96:	4630      	mov	r0, r6
 801ac98:	f7ff ff35 	bl	801ab06 <__multiply>
 801ac9c:	4639      	mov	r1, r7
 801ac9e:	4681      	mov	r9, r0
 801aca0:	4630      	mov	r0, r6
 801aca2:	f7ff fe87 	bl	801a9b4 <_Bfree>
 801aca6:	464f      	mov	r7, r9
 801aca8:	106d      	asrs	r5, r5, #1
 801acaa:	d00b      	beq.n	801acc4 <__pow5mult+0x90>
 801acac:	6820      	ldr	r0, [r4, #0]
 801acae:	b938      	cbnz	r0, 801acc0 <__pow5mult+0x8c>
 801acb0:	4622      	mov	r2, r4
 801acb2:	4621      	mov	r1, r4
 801acb4:	4630      	mov	r0, r6
 801acb6:	f7ff ff26 	bl	801ab06 <__multiply>
 801acba:	6020      	str	r0, [r4, #0]
 801acbc:	f8c0 8000 	str.w	r8, [r0]
 801acc0:	4604      	mov	r4, r0
 801acc2:	e7e4      	b.n	801ac8e <__pow5mult+0x5a>
 801acc4:	4638      	mov	r0, r7
 801acc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801acca:	bf00      	nop
 801accc:	080212f0 	.word	0x080212f0

0801acd0 <__lshift>:
 801acd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acd4:	460c      	mov	r4, r1
 801acd6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801acda:	6923      	ldr	r3, [r4, #16]
 801acdc:	6849      	ldr	r1, [r1, #4]
 801acde:	eb0a 0903 	add.w	r9, sl, r3
 801ace2:	68a3      	ldr	r3, [r4, #8]
 801ace4:	4607      	mov	r7, r0
 801ace6:	4616      	mov	r6, r2
 801ace8:	f109 0501 	add.w	r5, r9, #1
 801acec:	42ab      	cmp	r3, r5
 801acee:	db32      	blt.n	801ad56 <__lshift+0x86>
 801acf0:	4638      	mov	r0, r7
 801acf2:	f7ff fe2b 	bl	801a94c <_Balloc>
 801acf6:	2300      	movs	r3, #0
 801acf8:	4680      	mov	r8, r0
 801acfa:	f100 0114 	add.w	r1, r0, #20
 801acfe:	461a      	mov	r2, r3
 801ad00:	4553      	cmp	r3, sl
 801ad02:	db2b      	blt.n	801ad5c <__lshift+0x8c>
 801ad04:	6920      	ldr	r0, [r4, #16]
 801ad06:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ad0a:	f104 0314 	add.w	r3, r4, #20
 801ad0e:	f016 021f 	ands.w	r2, r6, #31
 801ad12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ad16:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ad1a:	d025      	beq.n	801ad68 <__lshift+0x98>
 801ad1c:	f1c2 0e20 	rsb	lr, r2, #32
 801ad20:	2000      	movs	r0, #0
 801ad22:	681e      	ldr	r6, [r3, #0]
 801ad24:	468a      	mov	sl, r1
 801ad26:	4096      	lsls	r6, r2
 801ad28:	4330      	orrs	r0, r6
 801ad2a:	f84a 0b04 	str.w	r0, [sl], #4
 801ad2e:	f853 0b04 	ldr.w	r0, [r3], #4
 801ad32:	459c      	cmp	ip, r3
 801ad34:	fa20 f00e 	lsr.w	r0, r0, lr
 801ad38:	d814      	bhi.n	801ad64 <__lshift+0x94>
 801ad3a:	6048      	str	r0, [r1, #4]
 801ad3c:	b108      	cbz	r0, 801ad42 <__lshift+0x72>
 801ad3e:	f109 0502 	add.w	r5, r9, #2
 801ad42:	3d01      	subs	r5, #1
 801ad44:	4638      	mov	r0, r7
 801ad46:	f8c8 5010 	str.w	r5, [r8, #16]
 801ad4a:	4621      	mov	r1, r4
 801ad4c:	f7ff fe32 	bl	801a9b4 <_Bfree>
 801ad50:	4640      	mov	r0, r8
 801ad52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad56:	3101      	adds	r1, #1
 801ad58:	005b      	lsls	r3, r3, #1
 801ad5a:	e7c7      	b.n	801acec <__lshift+0x1c>
 801ad5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801ad60:	3301      	adds	r3, #1
 801ad62:	e7cd      	b.n	801ad00 <__lshift+0x30>
 801ad64:	4651      	mov	r1, sl
 801ad66:	e7dc      	b.n	801ad22 <__lshift+0x52>
 801ad68:	3904      	subs	r1, #4
 801ad6a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ad6e:	f841 2f04 	str.w	r2, [r1, #4]!
 801ad72:	459c      	cmp	ip, r3
 801ad74:	d8f9      	bhi.n	801ad6a <__lshift+0x9a>
 801ad76:	e7e4      	b.n	801ad42 <__lshift+0x72>

0801ad78 <__mcmp>:
 801ad78:	6903      	ldr	r3, [r0, #16]
 801ad7a:	690a      	ldr	r2, [r1, #16]
 801ad7c:	1a9b      	subs	r3, r3, r2
 801ad7e:	b530      	push	{r4, r5, lr}
 801ad80:	d10c      	bne.n	801ad9c <__mcmp+0x24>
 801ad82:	0092      	lsls	r2, r2, #2
 801ad84:	3014      	adds	r0, #20
 801ad86:	3114      	adds	r1, #20
 801ad88:	1884      	adds	r4, r0, r2
 801ad8a:	4411      	add	r1, r2
 801ad8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ad90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ad94:	4295      	cmp	r5, r2
 801ad96:	d003      	beq.n	801ada0 <__mcmp+0x28>
 801ad98:	d305      	bcc.n	801ada6 <__mcmp+0x2e>
 801ad9a:	2301      	movs	r3, #1
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	bd30      	pop	{r4, r5, pc}
 801ada0:	42a0      	cmp	r0, r4
 801ada2:	d3f3      	bcc.n	801ad8c <__mcmp+0x14>
 801ada4:	e7fa      	b.n	801ad9c <__mcmp+0x24>
 801ada6:	f04f 33ff 	mov.w	r3, #4294967295
 801adaa:	e7f7      	b.n	801ad9c <__mcmp+0x24>

0801adac <__mdiff>:
 801adac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801adb0:	460d      	mov	r5, r1
 801adb2:	4607      	mov	r7, r0
 801adb4:	4611      	mov	r1, r2
 801adb6:	4628      	mov	r0, r5
 801adb8:	4614      	mov	r4, r2
 801adba:	f7ff ffdd 	bl	801ad78 <__mcmp>
 801adbe:	1e06      	subs	r6, r0, #0
 801adc0:	d108      	bne.n	801add4 <__mdiff+0x28>
 801adc2:	4631      	mov	r1, r6
 801adc4:	4638      	mov	r0, r7
 801adc6:	f7ff fdc1 	bl	801a94c <_Balloc>
 801adca:	2301      	movs	r3, #1
 801adcc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801add0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801add4:	bfa4      	itt	ge
 801add6:	4623      	movge	r3, r4
 801add8:	462c      	movge	r4, r5
 801adda:	4638      	mov	r0, r7
 801addc:	6861      	ldr	r1, [r4, #4]
 801adde:	bfa6      	itte	ge
 801ade0:	461d      	movge	r5, r3
 801ade2:	2600      	movge	r6, #0
 801ade4:	2601      	movlt	r6, #1
 801ade6:	f7ff fdb1 	bl	801a94c <_Balloc>
 801adea:	692b      	ldr	r3, [r5, #16]
 801adec:	60c6      	str	r6, [r0, #12]
 801adee:	6926      	ldr	r6, [r4, #16]
 801adf0:	f105 0914 	add.w	r9, r5, #20
 801adf4:	f104 0214 	add.w	r2, r4, #20
 801adf8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801adfc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801ae00:	f100 0514 	add.w	r5, r0, #20
 801ae04:	f04f 0e00 	mov.w	lr, #0
 801ae08:	f852 ab04 	ldr.w	sl, [r2], #4
 801ae0c:	f859 4b04 	ldr.w	r4, [r9], #4
 801ae10:	fa1e f18a 	uxtah	r1, lr, sl
 801ae14:	b2a3      	uxth	r3, r4
 801ae16:	1ac9      	subs	r1, r1, r3
 801ae18:	0c23      	lsrs	r3, r4, #16
 801ae1a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801ae1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801ae22:	b289      	uxth	r1, r1
 801ae24:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801ae28:	45c8      	cmp	r8, r9
 801ae2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801ae2e:	4694      	mov	ip, r2
 801ae30:	f845 3b04 	str.w	r3, [r5], #4
 801ae34:	d8e8      	bhi.n	801ae08 <__mdiff+0x5c>
 801ae36:	45bc      	cmp	ip, r7
 801ae38:	d304      	bcc.n	801ae44 <__mdiff+0x98>
 801ae3a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801ae3e:	b183      	cbz	r3, 801ae62 <__mdiff+0xb6>
 801ae40:	6106      	str	r6, [r0, #16]
 801ae42:	e7c5      	b.n	801add0 <__mdiff+0x24>
 801ae44:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ae48:	fa1e f381 	uxtah	r3, lr, r1
 801ae4c:	141a      	asrs	r2, r3, #16
 801ae4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ae52:	b29b      	uxth	r3, r3
 801ae54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ae58:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801ae5c:	f845 3b04 	str.w	r3, [r5], #4
 801ae60:	e7e9      	b.n	801ae36 <__mdiff+0x8a>
 801ae62:	3e01      	subs	r6, #1
 801ae64:	e7e9      	b.n	801ae3a <__mdiff+0x8e>

0801ae66 <__d2b>:
 801ae66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ae6a:	460e      	mov	r6, r1
 801ae6c:	2101      	movs	r1, #1
 801ae6e:	ec59 8b10 	vmov	r8, r9, d0
 801ae72:	4615      	mov	r5, r2
 801ae74:	f7ff fd6a 	bl	801a94c <_Balloc>
 801ae78:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801ae7c:	4607      	mov	r7, r0
 801ae7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ae82:	bb34      	cbnz	r4, 801aed2 <__d2b+0x6c>
 801ae84:	9301      	str	r3, [sp, #4]
 801ae86:	f1b8 0300 	subs.w	r3, r8, #0
 801ae8a:	d027      	beq.n	801aedc <__d2b+0x76>
 801ae8c:	a802      	add	r0, sp, #8
 801ae8e:	f840 3d08 	str.w	r3, [r0, #-8]!
 801ae92:	f7ff fe00 	bl	801aa96 <__lo0bits>
 801ae96:	9900      	ldr	r1, [sp, #0]
 801ae98:	b1f0      	cbz	r0, 801aed8 <__d2b+0x72>
 801ae9a:	9a01      	ldr	r2, [sp, #4]
 801ae9c:	f1c0 0320 	rsb	r3, r0, #32
 801aea0:	fa02 f303 	lsl.w	r3, r2, r3
 801aea4:	430b      	orrs	r3, r1
 801aea6:	40c2      	lsrs	r2, r0
 801aea8:	617b      	str	r3, [r7, #20]
 801aeaa:	9201      	str	r2, [sp, #4]
 801aeac:	9b01      	ldr	r3, [sp, #4]
 801aeae:	61bb      	str	r3, [r7, #24]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	bf14      	ite	ne
 801aeb4:	2102      	movne	r1, #2
 801aeb6:	2101      	moveq	r1, #1
 801aeb8:	6139      	str	r1, [r7, #16]
 801aeba:	b1c4      	cbz	r4, 801aeee <__d2b+0x88>
 801aebc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801aec0:	4404      	add	r4, r0
 801aec2:	6034      	str	r4, [r6, #0]
 801aec4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801aec8:	6028      	str	r0, [r5, #0]
 801aeca:	4638      	mov	r0, r7
 801aecc:	b003      	add	sp, #12
 801aece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801aed6:	e7d5      	b.n	801ae84 <__d2b+0x1e>
 801aed8:	6179      	str	r1, [r7, #20]
 801aeda:	e7e7      	b.n	801aeac <__d2b+0x46>
 801aedc:	a801      	add	r0, sp, #4
 801aede:	f7ff fdda 	bl	801aa96 <__lo0bits>
 801aee2:	9b01      	ldr	r3, [sp, #4]
 801aee4:	617b      	str	r3, [r7, #20]
 801aee6:	2101      	movs	r1, #1
 801aee8:	6139      	str	r1, [r7, #16]
 801aeea:	3020      	adds	r0, #32
 801aeec:	e7e5      	b.n	801aeba <__d2b+0x54>
 801aeee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801aef2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801aef6:	6030      	str	r0, [r6, #0]
 801aef8:	6918      	ldr	r0, [r3, #16]
 801aefa:	f7ff fdad 	bl	801aa58 <__hi0bits>
 801aefe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801af02:	e7e1      	b.n	801aec8 <__d2b+0x62>

0801af04 <_calloc_r>:
 801af04:	b538      	push	{r3, r4, r5, lr}
 801af06:	fb02 f401 	mul.w	r4, r2, r1
 801af0a:	4621      	mov	r1, r4
 801af0c:	f7fe f8c0 	bl	8019090 <_malloc_r>
 801af10:	4605      	mov	r5, r0
 801af12:	b118      	cbz	r0, 801af1c <_calloc_r+0x18>
 801af14:	4622      	mov	r2, r4
 801af16:	2100      	movs	r1, #0
 801af18:	f7fe f863 	bl	8018fe2 <memset>
 801af1c:	4628      	mov	r0, r5
 801af1e:	bd38      	pop	{r3, r4, r5, pc}

0801af20 <__ssputs_r>:
 801af20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af24:	688e      	ldr	r6, [r1, #8]
 801af26:	429e      	cmp	r6, r3
 801af28:	4682      	mov	sl, r0
 801af2a:	460c      	mov	r4, r1
 801af2c:	4690      	mov	r8, r2
 801af2e:	4699      	mov	r9, r3
 801af30:	d837      	bhi.n	801afa2 <__ssputs_r+0x82>
 801af32:	898a      	ldrh	r2, [r1, #12]
 801af34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801af38:	d031      	beq.n	801af9e <__ssputs_r+0x7e>
 801af3a:	6825      	ldr	r5, [r4, #0]
 801af3c:	6909      	ldr	r1, [r1, #16]
 801af3e:	1a6f      	subs	r7, r5, r1
 801af40:	6965      	ldr	r5, [r4, #20]
 801af42:	2302      	movs	r3, #2
 801af44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801af48:	fb95 f5f3 	sdiv	r5, r5, r3
 801af4c:	f109 0301 	add.w	r3, r9, #1
 801af50:	443b      	add	r3, r7
 801af52:	429d      	cmp	r5, r3
 801af54:	bf38      	it	cc
 801af56:	461d      	movcc	r5, r3
 801af58:	0553      	lsls	r3, r2, #21
 801af5a:	d530      	bpl.n	801afbe <__ssputs_r+0x9e>
 801af5c:	4629      	mov	r1, r5
 801af5e:	f7fe f897 	bl	8019090 <_malloc_r>
 801af62:	4606      	mov	r6, r0
 801af64:	b950      	cbnz	r0, 801af7c <__ssputs_r+0x5c>
 801af66:	230c      	movs	r3, #12
 801af68:	f8ca 3000 	str.w	r3, [sl]
 801af6c:	89a3      	ldrh	r3, [r4, #12]
 801af6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af72:	81a3      	strh	r3, [r4, #12]
 801af74:	f04f 30ff 	mov.w	r0, #4294967295
 801af78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af7c:	463a      	mov	r2, r7
 801af7e:	6921      	ldr	r1, [r4, #16]
 801af80:	f7fe f80b 	bl	8018f9a <memcpy>
 801af84:	89a3      	ldrh	r3, [r4, #12]
 801af86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801af8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801af8e:	81a3      	strh	r3, [r4, #12]
 801af90:	6126      	str	r6, [r4, #16]
 801af92:	6165      	str	r5, [r4, #20]
 801af94:	443e      	add	r6, r7
 801af96:	1bed      	subs	r5, r5, r7
 801af98:	6026      	str	r6, [r4, #0]
 801af9a:	60a5      	str	r5, [r4, #8]
 801af9c:	464e      	mov	r6, r9
 801af9e:	454e      	cmp	r6, r9
 801afa0:	d900      	bls.n	801afa4 <__ssputs_r+0x84>
 801afa2:	464e      	mov	r6, r9
 801afa4:	4632      	mov	r2, r6
 801afa6:	4641      	mov	r1, r8
 801afa8:	6820      	ldr	r0, [r4, #0]
 801afaa:	f7fe f801 	bl	8018fb0 <memmove>
 801afae:	68a3      	ldr	r3, [r4, #8]
 801afb0:	1b9b      	subs	r3, r3, r6
 801afb2:	60a3      	str	r3, [r4, #8]
 801afb4:	6823      	ldr	r3, [r4, #0]
 801afb6:	441e      	add	r6, r3
 801afb8:	6026      	str	r6, [r4, #0]
 801afba:	2000      	movs	r0, #0
 801afbc:	e7dc      	b.n	801af78 <__ssputs_r+0x58>
 801afbe:	462a      	mov	r2, r5
 801afc0:	f000 fc8c 	bl	801b8dc <_realloc_r>
 801afc4:	4606      	mov	r6, r0
 801afc6:	2800      	cmp	r0, #0
 801afc8:	d1e2      	bne.n	801af90 <__ssputs_r+0x70>
 801afca:	6921      	ldr	r1, [r4, #16]
 801afcc:	4650      	mov	r0, sl
 801afce:	f7fe f811 	bl	8018ff4 <_free_r>
 801afd2:	e7c8      	b.n	801af66 <__ssputs_r+0x46>

0801afd4 <_svfiprintf_r>:
 801afd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afd8:	461d      	mov	r5, r3
 801afda:	898b      	ldrh	r3, [r1, #12]
 801afdc:	061f      	lsls	r7, r3, #24
 801afde:	b09d      	sub	sp, #116	; 0x74
 801afe0:	4680      	mov	r8, r0
 801afe2:	460c      	mov	r4, r1
 801afe4:	4616      	mov	r6, r2
 801afe6:	d50f      	bpl.n	801b008 <_svfiprintf_r+0x34>
 801afe8:	690b      	ldr	r3, [r1, #16]
 801afea:	b96b      	cbnz	r3, 801b008 <_svfiprintf_r+0x34>
 801afec:	2140      	movs	r1, #64	; 0x40
 801afee:	f7fe f84f 	bl	8019090 <_malloc_r>
 801aff2:	6020      	str	r0, [r4, #0]
 801aff4:	6120      	str	r0, [r4, #16]
 801aff6:	b928      	cbnz	r0, 801b004 <_svfiprintf_r+0x30>
 801aff8:	230c      	movs	r3, #12
 801affa:	f8c8 3000 	str.w	r3, [r8]
 801affe:	f04f 30ff 	mov.w	r0, #4294967295
 801b002:	e0c8      	b.n	801b196 <_svfiprintf_r+0x1c2>
 801b004:	2340      	movs	r3, #64	; 0x40
 801b006:	6163      	str	r3, [r4, #20]
 801b008:	2300      	movs	r3, #0
 801b00a:	9309      	str	r3, [sp, #36]	; 0x24
 801b00c:	2320      	movs	r3, #32
 801b00e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b012:	2330      	movs	r3, #48	; 0x30
 801b014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b018:	9503      	str	r5, [sp, #12]
 801b01a:	f04f 0b01 	mov.w	fp, #1
 801b01e:	4637      	mov	r7, r6
 801b020:	463d      	mov	r5, r7
 801b022:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b026:	b10b      	cbz	r3, 801b02c <_svfiprintf_r+0x58>
 801b028:	2b25      	cmp	r3, #37	; 0x25
 801b02a:	d13e      	bne.n	801b0aa <_svfiprintf_r+0xd6>
 801b02c:	ebb7 0a06 	subs.w	sl, r7, r6
 801b030:	d00b      	beq.n	801b04a <_svfiprintf_r+0x76>
 801b032:	4653      	mov	r3, sl
 801b034:	4632      	mov	r2, r6
 801b036:	4621      	mov	r1, r4
 801b038:	4640      	mov	r0, r8
 801b03a:	f7ff ff71 	bl	801af20 <__ssputs_r>
 801b03e:	3001      	adds	r0, #1
 801b040:	f000 80a4 	beq.w	801b18c <_svfiprintf_r+0x1b8>
 801b044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b046:	4453      	add	r3, sl
 801b048:	9309      	str	r3, [sp, #36]	; 0x24
 801b04a:	783b      	ldrb	r3, [r7, #0]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	f000 809d 	beq.w	801b18c <_svfiprintf_r+0x1b8>
 801b052:	2300      	movs	r3, #0
 801b054:	f04f 32ff 	mov.w	r2, #4294967295
 801b058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b05c:	9304      	str	r3, [sp, #16]
 801b05e:	9307      	str	r3, [sp, #28]
 801b060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b064:	931a      	str	r3, [sp, #104]	; 0x68
 801b066:	462f      	mov	r7, r5
 801b068:	2205      	movs	r2, #5
 801b06a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b06e:	4850      	ldr	r0, [pc, #320]	; (801b1b0 <_svfiprintf_r+0x1dc>)
 801b070:	f7e5 f8b6 	bl	80001e0 <memchr>
 801b074:	9b04      	ldr	r3, [sp, #16]
 801b076:	b9d0      	cbnz	r0, 801b0ae <_svfiprintf_r+0xda>
 801b078:	06d9      	lsls	r1, r3, #27
 801b07a:	bf44      	itt	mi
 801b07c:	2220      	movmi	r2, #32
 801b07e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b082:	071a      	lsls	r2, r3, #28
 801b084:	bf44      	itt	mi
 801b086:	222b      	movmi	r2, #43	; 0x2b
 801b088:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b08c:	782a      	ldrb	r2, [r5, #0]
 801b08e:	2a2a      	cmp	r2, #42	; 0x2a
 801b090:	d015      	beq.n	801b0be <_svfiprintf_r+0xea>
 801b092:	9a07      	ldr	r2, [sp, #28]
 801b094:	462f      	mov	r7, r5
 801b096:	2000      	movs	r0, #0
 801b098:	250a      	movs	r5, #10
 801b09a:	4639      	mov	r1, r7
 801b09c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b0a0:	3b30      	subs	r3, #48	; 0x30
 801b0a2:	2b09      	cmp	r3, #9
 801b0a4:	d94d      	bls.n	801b142 <_svfiprintf_r+0x16e>
 801b0a6:	b1b8      	cbz	r0, 801b0d8 <_svfiprintf_r+0x104>
 801b0a8:	e00f      	b.n	801b0ca <_svfiprintf_r+0xf6>
 801b0aa:	462f      	mov	r7, r5
 801b0ac:	e7b8      	b.n	801b020 <_svfiprintf_r+0x4c>
 801b0ae:	4a40      	ldr	r2, [pc, #256]	; (801b1b0 <_svfiprintf_r+0x1dc>)
 801b0b0:	1a80      	subs	r0, r0, r2
 801b0b2:	fa0b f000 	lsl.w	r0, fp, r0
 801b0b6:	4318      	orrs	r0, r3
 801b0b8:	9004      	str	r0, [sp, #16]
 801b0ba:	463d      	mov	r5, r7
 801b0bc:	e7d3      	b.n	801b066 <_svfiprintf_r+0x92>
 801b0be:	9a03      	ldr	r2, [sp, #12]
 801b0c0:	1d11      	adds	r1, r2, #4
 801b0c2:	6812      	ldr	r2, [r2, #0]
 801b0c4:	9103      	str	r1, [sp, #12]
 801b0c6:	2a00      	cmp	r2, #0
 801b0c8:	db01      	blt.n	801b0ce <_svfiprintf_r+0xfa>
 801b0ca:	9207      	str	r2, [sp, #28]
 801b0cc:	e004      	b.n	801b0d8 <_svfiprintf_r+0x104>
 801b0ce:	4252      	negs	r2, r2
 801b0d0:	f043 0302 	orr.w	r3, r3, #2
 801b0d4:	9207      	str	r2, [sp, #28]
 801b0d6:	9304      	str	r3, [sp, #16]
 801b0d8:	783b      	ldrb	r3, [r7, #0]
 801b0da:	2b2e      	cmp	r3, #46	; 0x2e
 801b0dc:	d10c      	bne.n	801b0f8 <_svfiprintf_r+0x124>
 801b0de:	787b      	ldrb	r3, [r7, #1]
 801b0e0:	2b2a      	cmp	r3, #42	; 0x2a
 801b0e2:	d133      	bne.n	801b14c <_svfiprintf_r+0x178>
 801b0e4:	9b03      	ldr	r3, [sp, #12]
 801b0e6:	1d1a      	adds	r2, r3, #4
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	9203      	str	r2, [sp, #12]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	bfb8      	it	lt
 801b0f0:	f04f 33ff 	movlt.w	r3, #4294967295
 801b0f4:	3702      	adds	r7, #2
 801b0f6:	9305      	str	r3, [sp, #20]
 801b0f8:	4d2e      	ldr	r5, [pc, #184]	; (801b1b4 <_svfiprintf_r+0x1e0>)
 801b0fa:	7839      	ldrb	r1, [r7, #0]
 801b0fc:	2203      	movs	r2, #3
 801b0fe:	4628      	mov	r0, r5
 801b100:	f7e5 f86e 	bl	80001e0 <memchr>
 801b104:	b138      	cbz	r0, 801b116 <_svfiprintf_r+0x142>
 801b106:	2340      	movs	r3, #64	; 0x40
 801b108:	1b40      	subs	r0, r0, r5
 801b10a:	fa03 f000 	lsl.w	r0, r3, r0
 801b10e:	9b04      	ldr	r3, [sp, #16]
 801b110:	4303      	orrs	r3, r0
 801b112:	3701      	adds	r7, #1
 801b114:	9304      	str	r3, [sp, #16]
 801b116:	7839      	ldrb	r1, [r7, #0]
 801b118:	4827      	ldr	r0, [pc, #156]	; (801b1b8 <_svfiprintf_r+0x1e4>)
 801b11a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b11e:	2206      	movs	r2, #6
 801b120:	1c7e      	adds	r6, r7, #1
 801b122:	f7e5 f85d 	bl	80001e0 <memchr>
 801b126:	2800      	cmp	r0, #0
 801b128:	d038      	beq.n	801b19c <_svfiprintf_r+0x1c8>
 801b12a:	4b24      	ldr	r3, [pc, #144]	; (801b1bc <_svfiprintf_r+0x1e8>)
 801b12c:	bb13      	cbnz	r3, 801b174 <_svfiprintf_r+0x1a0>
 801b12e:	9b03      	ldr	r3, [sp, #12]
 801b130:	3307      	adds	r3, #7
 801b132:	f023 0307 	bic.w	r3, r3, #7
 801b136:	3308      	adds	r3, #8
 801b138:	9303      	str	r3, [sp, #12]
 801b13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b13c:	444b      	add	r3, r9
 801b13e:	9309      	str	r3, [sp, #36]	; 0x24
 801b140:	e76d      	b.n	801b01e <_svfiprintf_r+0x4a>
 801b142:	fb05 3202 	mla	r2, r5, r2, r3
 801b146:	2001      	movs	r0, #1
 801b148:	460f      	mov	r7, r1
 801b14a:	e7a6      	b.n	801b09a <_svfiprintf_r+0xc6>
 801b14c:	2300      	movs	r3, #0
 801b14e:	3701      	adds	r7, #1
 801b150:	9305      	str	r3, [sp, #20]
 801b152:	4619      	mov	r1, r3
 801b154:	250a      	movs	r5, #10
 801b156:	4638      	mov	r0, r7
 801b158:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b15c:	3a30      	subs	r2, #48	; 0x30
 801b15e:	2a09      	cmp	r2, #9
 801b160:	d903      	bls.n	801b16a <_svfiprintf_r+0x196>
 801b162:	2b00      	cmp	r3, #0
 801b164:	d0c8      	beq.n	801b0f8 <_svfiprintf_r+0x124>
 801b166:	9105      	str	r1, [sp, #20]
 801b168:	e7c6      	b.n	801b0f8 <_svfiprintf_r+0x124>
 801b16a:	fb05 2101 	mla	r1, r5, r1, r2
 801b16e:	2301      	movs	r3, #1
 801b170:	4607      	mov	r7, r0
 801b172:	e7f0      	b.n	801b156 <_svfiprintf_r+0x182>
 801b174:	ab03      	add	r3, sp, #12
 801b176:	9300      	str	r3, [sp, #0]
 801b178:	4622      	mov	r2, r4
 801b17a:	4b11      	ldr	r3, [pc, #68]	; (801b1c0 <_svfiprintf_r+0x1ec>)
 801b17c:	a904      	add	r1, sp, #16
 801b17e:	4640      	mov	r0, r8
 801b180:	f7fe f874 	bl	801926c <_printf_float>
 801b184:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b188:	4681      	mov	r9, r0
 801b18a:	d1d6      	bne.n	801b13a <_svfiprintf_r+0x166>
 801b18c:	89a3      	ldrh	r3, [r4, #12]
 801b18e:	065b      	lsls	r3, r3, #25
 801b190:	f53f af35 	bmi.w	801affe <_svfiprintf_r+0x2a>
 801b194:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b196:	b01d      	add	sp, #116	; 0x74
 801b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b19c:	ab03      	add	r3, sp, #12
 801b19e:	9300      	str	r3, [sp, #0]
 801b1a0:	4622      	mov	r2, r4
 801b1a2:	4b07      	ldr	r3, [pc, #28]	; (801b1c0 <_svfiprintf_r+0x1ec>)
 801b1a4:	a904      	add	r1, sp, #16
 801b1a6:	4640      	mov	r0, r8
 801b1a8:	f7fe fb16 	bl	80197d8 <_printf_i>
 801b1ac:	e7ea      	b.n	801b184 <_svfiprintf_r+0x1b0>
 801b1ae:	bf00      	nop
 801b1b0:	080212fc 	.word	0x080212fc
 801b1b4:	08021302 	.word	0x08021302
 801b1b8:	08021306 	.word	0x08021306
 801b1bc:	0801926d 	.word	0x0801926d
 801b1c0:	0801af21 	.word	0x0801af21

0801b1c4 <__sfputc_r>:
 801b1c4:	6893      	ldr	r3, [r2, #8]
 801b1c6:	3b01      	subs	r3, #1
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	b410      	push	{r4}
 801b1cc:	6093      	str	r3, [r2, #8]
 801b1ce:	da08      	bge.n	801b1e2 <__sfputc_r+0x1e>
 801b1d0:	6994      	ldr	r4, [r2, #24]
 801b1d2:	42a3      	cmp	r3, r4
 801b1d4:	db01      	blt.n	801b1da <__sfputc_r+0x16>
 801b1d6:	290a      	cmp	r1, #10
 801b1d8:	d103      	bne.n	801b1e2 <__sfputc_r+0x1e>
 801b1da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b1de:	f000 b975 	b.w	801b4cc <__swbuf_r>
 801b1e2:	6813      	ldr	r3, [r2, #0]
 801b1e4:	1c58      	adds	r0, r3, #1
 801b1e6:	6010      	str	r0, [r2, #0]
 801b1e8:	7019      	strb	r1, [r3, #0]
 801b1ea:	4608      	mov	r0, r1
 801b1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b1f0:	4770      	bx	lr

0801b1f2 <__sfputs_r>:
 801b1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1f4:	4606      	mov	r6, r0
 801b1f6:	460f      	mov	r7, r1
 801b1f8:	4614      	mov	r4, r2
 801b1fa:	18d5      	adds	r5, r2, r3
 801b1fc:	42ac      	cmp	r4, r5
 801b1fe:	d101      	bne.n	801b204 <__sfputs_r+0x12>
 801b200:	2000      	movs	r0, #0
 801b202:	e007      	b.n	801b214 <__sfputs_r+0x22>
 801b204:	463a      	mov	r2, r7
 801b206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b20a:	4630      	mov	r0, r6
 801b20c:	f7ff ffda 	bl	801b1c4 <__sfputc_r>
 801b210:	1c43      	adds	r3, r0, #1
 801b212:	d1f3      	bne.n	801b1fc <__sfputs_r+0xa>
 801b214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b218 <_vfiprintf_r>:
 801b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b21c:	460c      	mov	r4, r1
 801b21e:	b09d      	sub	sp, #116	; 0x74
 801b220:	4617      	mov	r7, r2
 801b222:	461d      	mov	r5, r3
 801b224:	4606      	mov	r6, r0
 801b226:	b118      	cbz	r0, 801b230 <_vfiprintf_r+0x18>
 801b228:	6983      	ldr	r3, [r0, #24]
 801b22a:	b90b      	cbnz	r3, 801b230 <_vfiprintf_r+0x18>
 801b22c:	f7ff faf4 	bl	801a818 <__sinit>
 801b230:	4b7c      	ldr	r3, [pc, #496]	; (801b424 <_vfiprintf_r+0x20c>)
 801b232:	429c      	cmp	r4, r3
 801b234:	d158      	bne.n	801b2e8 <_vfiprintf_r+0xd0>
 801b236:	6874      	ldr	r4, [r6, #4]
 801b238:	89a3      	ldrh	r3, [r4, #12]
 801b23a:	0718      	lsls	r0, r3, #28
 801b23c:	d55e      	bpl.n	801b2fc <_vfiprintf_r+0xe4>
 801b23e:	6923      	ldr	r3, [r4, #16]
 801b240:	2b00      	cmp	r3, #0
 801b242:	d05b      	beq.n	801b2fc <_vfiprintf_r+0xe4>
 801b244:	2300      	movs	r3, #0
 801b246:	9309      	str	r3, [sp, #36]	; 0x24
 801b248:	2320      	movs	r3, #32
 801b24a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b24e:	2330      	movs	r3, #48	; 0x30
 801b250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b254:	9503      	str	r5, [sp, #12]
 801b256:	f04f 0b01 	mov.w	fp, #1
 801b25a:	46b8      	mov	r8, r7
 801b25c:	4645      	mov	r5, r8
 801b25e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b262:	b10b      	cbz	r3, 801b268 <_vfiprintf_r+0x50>
 801b264:	2b25      	cmp	r3, #37	; 0x25
 801b266:	d154      	bne.n	801b312 <_vfiprintf_r+0xfa>
 801b268:	ebb8 0a07 	subs.w	sl, r8, r7
 801b26c:	d00b      	beq.n	801b286 <_vfiprintf_r+0x6e>
 801b26e:	4653      	mov	r3, sl
 801b270:	463a      	mov	r2, r7
 801b272:	4621      	mov	r1, r4
 801b274:	4630      	mov	r0, r6
 801b276:	f7ff ffbc 	bl	801b1f2 <__sfputs_r>
 801b27a:	3001      	adds	r0, #1
 801b27c:	f000 80c2 	beq.w	801b404 <_vfiprintf_r+0x1ec>
 801b280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b282:	4453      	add	r3, sl
 801b284:	9309      	str	r3, [sp, #36]	; 0x24
 801b286:	f898 3000 	ldrb.w	r3, [r8]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	f000 80ba 	beq.w	801b404 <_vfiprintf_r+0x1ec>
 801b290:	2300      	movs	r3, #0
 801b292:	f04f 32ff 	mov.w	r2, #4294967295
 801b296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b29a:	9304      	str	r3, [sp, #16]
 801b29c:	9307      	str	r3, [sp, #28]
 801b29e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b2a2:	931a      	str	r3, [sp, #104]	; 0x68
 801b2a4:	46a8      	mov	r8, r5
 801b2a6:	2205      	movs	r2, #5
 801b2a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 801b2ac:	485e      	ldr	r0, [pc, #376]	; (801b428 <_vfiprintf_r+0x210>)
 801b2ae:	f7e4 ff97 	bl	80001e0 <memchr>
 801b2b2:	9b04      	ldr	r3, [sp, #16]
 801b2b4:	bb78      	cbnz	r0, 801b316 <_vfiprintf_r+0xfe>
 801b2b6:	06d9      	lsls	r1, r3, #27
 801b2b8:	bf44      	itt	mi
 801b2ba:	2220      	movmi	r2, #32
 801b2bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b2c0:	071a      	lsls	r2, r3, #28
 801b2c2:	bf44      	itt	mi
 801b2c4:	222b      	movmi	r2, #43	; 0x2b
 801b2c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b2ca:	782a      	ldrb	r2, [r5, #0]
 801b2cc:	2a2a      	cmp	r2, #42	; 0x2a
 801b2ce:	d02a      	beq.n	801b326 <_vfiprintf_r+0x10e>
 801b2d0:	9a07      	ldr	r2, [sp, #28]
 801b2d2:	46a8      	mov	r8, r5
 801b2d4:	2000      	movs	r0, #0
 801b2d6:	250a      	movs	r5, #10
 801b2d8:	4641      	mov	r1, r8
 801b2da:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b2de:	3b30      	subs	r3, #48	; 0x30
 801b2e0:	2b09      	cmp	r3, #9
 801b2e2:	d969      	bls.n	801b3b8 <_vfiprintf_r+0x1a0>
 801b2e4:	b360      	cbz	r0, 801b340 <_vfiprintf_r+0x128>
 801b2e6:	e024      	b.n	801b332 <_vfiprintf_r+0x11a>
 801b2e8:	4b50      	ldr	r3, [pc, #320]	; (801b42c <_vfiprintf_r+0x214>)
 801b2ea:	429c      	cmp	r4, r3
 801b2ec:	d101      	bne.n	801b2f2 <_vfiprintf_r+0xda>
 801b2ee:	68b4      	ldr	r4, [r6, #8]
 801b2f0:	e7a2      	b.n	801b238 <_vfiprintf_r+0x20>
 801b2f2:	4b4f      	ldr	r3, [pc, #316]	; (801b430 <_vfiprintf_r+0x218>)
 801b2f4:	429c      	cmp	r4, r3
 801b2f6:	bf08      	it	eq
 801b2f8:	68f4      	ldreq	r4, [r6, #12]
 801b2fa:	e79d      	b.n	801b238 <_vfiprintf_r+0x20>
 801b2fc:	4621      	mov	r1, r4
 801b2fe:	4630      	mov	r0, r6
 801b300:	f000 f948 	bl	801b594 <__swsetup_r>
 801b304:	2800      	cmp	r0, #0
 801b306:	d09d      	beq.n	801b244 <_vfiprintf_r+0x2c>
 801b308:	f04f 30ff 	mov.w	r0, #4294967295
 801b30c:	b01d      	add	sp, #116	; 0x74
 801b30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b312:	46a8      	mov	r8, r5
 801b314:	e7a2      	b.n	801b25c <_vfiprintf_r+0x44>
 801b316:	4a44      	ldr	r2, [pc, #272]	; (801b428 <_vfiprintf_r+0x210>)
 801b318:	1a80      	subs	r0, r0, r2
 801b31a:	fa0b f000 	lsl.w	r0, fp, r0
 801b31e:	4318      	orrs	r0, r3
 801b320:	9004      	str	r0, [sp, #16]
 801b322:	4645      	mov	r5, r8
 801b324:	e7be      	b.n	801b2a4 <_vfiprintf_r+0x8c>
 801b326:	9a03      	ldr	r2, [sp, #12]
 801b328:	1d11      	adds	r1, r2, #4
 801b32a:	6812      	ldr	r2, [r2, #0]
 801b32c:	9103      	str	r1, [sp, #12]
 801b32e:	2a00      	cmp	r2, #0
 801b330:	db01      	blt.n	801b336 <_vfiprintf_r+0x11e>
 801b332:	9207      	str	r2, [sp, #28]
 801b334:	e004      	b.n	801b340 <_vfiprintf_r+0x128>
 801b336:	4252      	negs	r2, r2
 801b338:	f043 0302 	orr.w	r3, r3, #2
 801b33c:	9207      	str	r2, [sp, #28]
 801b33e:	9304      	str	r3, [sp, #16]
 801b340:	f898 3000 	ldrb.w	r3, [r8]
 801b344:	2b2e      	cmp	r3, #46	; 0x2e
 801b346:	d10e      	bne.n	801b366 <_vfiprintf_r+0x14e>
 801b348:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b34c:	2b2a      	cmp	r3, #42	; 0x2a
 801b34e:	d138      	bne.n	801b3c2 <_vfiprintf_r+0x1aa>
 801b350:	9b03      	ldr	r3, [sp, #12]
 801b352:	1d1a      	adds	r2, r3, #4
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	9203      	str	r2, [sp, #12]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	bfb8      	it	lt
 801b35c:	f04f 33ff 	movlt.w	r3, #4294967295
 801b360:	f108 0802 	add.w	r8, r8, #2
 801b364:	9305      	str	r3, [sp, #20]
 801b366:	4d33      	ldr	r5, [pc, #204]	; (801b434 <_vfiprintf_r+0x21c>)
 801b368:	f898 1000 	ldrb.w	r1, [r8]
 801b36c:	2203      	movs	r2, #3
 801b36e:	4628      	mov	r0, r5
 801b370:	f7e4 ff36 	bl	80001e0 <memchr>
 801b374:	b140      	cbz	r0, 801b388 <_vfiprintf_r+0x170>
 801b376:	2340      	movs	r3, #64	; 0x40
 801b378:	1b40      	subs	r0, r0, r5
 801b37a:	fa03 f000 	lsl.w	r0, r3, r0
 801b37e:	9b04      	ldr	r3, [sp, #16]
 801b380:	4303      	orrs	r3, r0
 801b382:	f108 0801 	add.w	r8, r8, #1
 801b386:	9304      	str	r3, [sp, #16]
 801b388:	f898 1000 	ldrb.w	r1, [r8]
 801b38c:	482a      	ldr	r0, [pc, #168]	; (801b438 <_vfiprintf_r+0x220>)
 801b38e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b392:	2206      	movs	r2, #6
 801b394:	f108 0701 	add.w	r7, r8, #1
 801b398:	f7e4 ff22 	bl	80001e0 <memchr>
 801b39c:	2800      	cmp	r0, #0
 801b39e:	d037      	beq.n	801b410 <_vfiprintf_r+0x1f8>
 801b3a0:	4b26      	ldr	r3, [pc, #152]	; (801b43c <_vfiprintf_r+0x224>)
 801b3a2:	bb1b      	cbnz	r3, 801b3ec <_vfiprintf_r+0x1d4>
 801b3a4:	9b03      	ldr	r3, [sp, #12]
 801b3a6:	3307      	adds	r3, #7
 801b3a8:	f023 0307 	bic.w	r3, r3, #7
 801b3ac:	3308      	adds	r3, #8
 801b3ae:	9303      	str	r3, [sp, #12]
 801b3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3b2:	444b      	add	r3, r9
 801b3b4:	9309      	str	r3, [sp, #36]	; 0x24
 801b3b6:	e750      	b.n	801b25a <_vfiprintf_r+0x42>
 801b3b8:	fb05 3202 	mla	r2, r5, r2, r3
 801b3bc:	2001      	movs	r0, #1
 801b3be:	4688      	mov	r8, r1
 801b3c0:	e78a      	b.n	801b2d8 <_vfiprintf_r+0xc0>
 801b3c2:	2300      	movs	r3, #0
 801b3c4:	f108 0801 	add.w	r8, r8, #1
 801b3c8:	9305      	str	r3, [sp, #20]
 801b3ca:	4619      	mov	r1, r3
 801b3cc:	250a      	movs	r5, #10
 801b3ce:	4640      	mov	r0, r8
 801b3d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b3d4:	3a30      	subs	r2, #48	; 0x30
 801b3d6:	2a09      	cmp	r2, #9
 801b3d8:	d903      	bls.n	801b3e2 <_vfiprintf_r+0x1ca>
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d0c3      	beq.n	801b366 <_vfiprintf_r+0x14e>
 801b3de:	9105      	str	r1, [sp, #20]
 801b3e0:	e7c1      	b.n	801b366 <_vfiprintf_r+0x14e>
 801b3e2:	fb05 2101 	mla	r1, r5, r1, r2
 801b3e6:	2301      	movs	r3, #1
 801b3e8:	4680      	mov	r8, r0
 801b3ea:	e7f0      	b.n	801b3ce <_vfiprintf_r+0x1b6>
 801b3ec:	ab03      	add	r3, sp, #12
 801b3ee:	9300      	str	r3, [sp, #0]
 801b3f0:	4622      	mov	r2, r4
 801b3f2:	4b13      	ldr	r3, [pc, #76]	; (801b440 <_vfiprintf_r+0x228>)
 801b3f4:	a904      	add	r1, sp, #16
 801b3f6:	4630      	mov	r0, r6
 801b3f8:	f7fd ff38 	bl	801926c <_printf_float>
 801b3fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b400:	4681      	mov	r9, r0
 801b402:	d1d5      	bne.n	801b3b0 <_vfiprintf_r+0x198>
 801b404:	89a3      	ldrh	r3, [r4, #12]
 801b406:	065b      	lsls	r3, r3, #25
 801b408:	f53f af7e 	bmi.w	801b308 <_vfiprintf_r+0xf0>
 801b40c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b40e:	e77d      	b.n	801b30c <_vfiprintf_r+0xf4>
 801b410:	ab03      	add	r3, sp, #12
 801b412:	9300      	str	r3, [sp, #0]
 801b414:	4622      	mov	r2, r4
 801b416:	4b0a      	ldr	r3, [pc, #40]	; (801b440 <_vfiprintf_r+0x228>)
 801b418:	a904      	add	r1, sp, #16
 801b41a:	4630      	mov	r0, r6
 801b41c:	f7fe f9dc 	bl	80197d8 <_printf_i>
 801b420:	e7ec      	b.n	801b3fc <_vfiprintf_r+0x1e4>
 801b422:	bf00      	nop
 801b424:	080211c0 	.word	0x080211c0
 801b428:	080212fc 	.word	0x080212fc
 801b42c:	080211e0 	.word	0x080211e0
 801b430:	080211a0 	.word	0x080211a0
 801b434:	08021302 	.word	0x08021302
 801b438:	08021306 	.word	0x08021306
 801b43c:	0801926d 	.word	0x0801926d
 801b440:	0801b1f3 	.word	0x0801b1f3

0801b444 <__sread>:
 801b444:	b510      	push	{r4, lr}
 801b446:	460c      	mov	r4, r1
 801b448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b44c:	f000 fa6c 	bl	801b928 <_read_r>
 801b450:	2800      	cmp	r0, #0
 801b452:	bfab      	itete	ge
 801b454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b456:	89a3      	ldrhlt	r3, [r4, #12]
 801b458:	181b      	addge	r3, r3, r0
 801b45a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b45e:	bfac      	ite	ge
 801b460:	6563      	strge	r3, [r4, #84]	; 0x54
 801b462:	81a3      	strhlt	r3, [r4, #12]
 801b464:	bd10      	pop	{r4, pc}

0801b466 <__swrite>:
 801b466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b46a:	461f      	mov	r7, r3
 801b46c:	898b      	ldrh	r3, [r1, #12]
 801b46e:	05db      	lsls	r3, r3, #23
 801b470:	4605      	mov	r5, r0
 801b472:	460c      	mov	r4, r1
 801b474:	4616      	mov	r6, r2
 801b476:	d505      	bpl.n	801b484 <__swrite+0x1e>
 801b478:	2302      	movs	r3, #2
 801b47a:	2200      	movs	r2, #0
 801b47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b480:	f000 f9b6 	bl	801b7f0 <_lseek_r>
 801b484:	89a3      	ldrh	r3, [r4, #12]
 801b486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b48a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b48e:	81a3      	strh	r3, [r4, #12]
 801b490:	4632      	mov	r2, r6
 801b492:	463b      	mov	r3, r7
 801b494:	4628      	mov	r0, r5
 801b496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b49a:	f000 b869 	b.w	801b570 <_write_r>

0801b49e <__sseek>:
 801b49e:	b510      	push	{r4, lr}
 801b4a0:	460c      	mov	r4, r1
 801b4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4a6:	f000 f9a3 	bl	801b7f0 <_lseek_r>
 801b4aa:	1c43      	adds	r3, r0, #1
 801b4ac:	89a3      	ldrh	r3, [r4, #12]
 801b4ae:	bf15      	itete	ne
 801b4b0:	6560      	strne	r0, [r4, #84]	; 0x54
 801b4b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b4b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b4ba:	81a3      	strheq	r3, [r4, #12]
 801b4bc:	bf18      	it	ne
 801b4be:	81a3      	strhne	r3, [r4, #12]
 801b4c0:	bd10      	pop	{r4, pc}

0801b4c2 <__sclose>:
 801b4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4c6:	f000 b8d3 	b.w	801b670 <_close_r>
	...

0801b4cc <__swbuf_r>:
 801b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4ce:	460e      	mov	r6, r1
 801b4d0:	4614      	mov	r4, r2
 801b4d2:	4605      	mov	r5, r0
 801b4d4:	b118      	cbz	r0, 801b4de <__swbuf_r+0x12>
 801b4d6:	6983      	ldr	r3, [r0, #24]
 801b4d8:	b90b      	cbnz	r3, 801b4de <__swbuf_r+0x12>
 801b4da:	f7ff f99d 	bl	801a818 <__sinit>
 801b4de:	4b21      	ldr	r3, [pc, #132]	; (801b564 <__swbuf_r+0x98>)
 801b4e0:	429c      	cmp	r4, r3
 801b4e2:	d12a      	bne.n	801b53a <__swbuf_r+0x6e>
 801b4e4:	686c      	ldr	r4, [r5, #4]
 801b4e6:	69a3      	ldr	r3, [r4, #24]
 801b4e8:	60a3      	str	r3, [r4, #8]
 801b4ea:	89a3      	ldrh	r3, [r4, #12]
 801b4ec:	071a      	lsls	r2, r3, #28
 801b4ee:	d52e      	bpl.n	801b54e <__swbuf_r+0x82>
 801b4f0:	6923      	ldr	r3, [r4, #16]
 801b4f2:	b363      	cbz	r3, 801b54e <__swbuf_r+0x82>
 801b4f4:	6923      	ldr	r3, [r4, #16]
 801b4f6:	6820      	ldr	r0, [r4, #0]
 801b4f8:	1ac0      	subs	r0, r0, r3
 801b4fa:	6963      	ldr	r3, [r4, #20]
 801b4fc:	b2f6      	uxtb	r6, r6
 801b4fe:	4283      	cmp	r3, r0
 801b500:	4637      	mov	r7, r6
 801b502:	dc04      	bgt.n	801b50e <__swbuf_r+0x42>
 801b504:	4621      	mov	r1, r4
 801b506:	4628      	mov	r0, r5
 801b508:	f000 f948 	bl	801b79c <_fflush_r>
 801b50c:	bb28      	cbnz	r0, 801b55a <__swbuf_r+0x8e>
 801b50e:	68a3      	ldr	r3, [r4, #8]
 801b510:	3b01      	subs	r3, #1
 801b512:	60a3      	str	r3, [r4, #8]
 801b514:	6823      	ldr	r3, [r4, #0]
 801b516:	1c5a      	adds	r2, r3, #1
 801b518:	6022      	str	r2, [r4, #0]
 801b51a:	701e      	strb	r6, [r3, #0]
 801b51c:	6963      	ldr	r3, [r4, #20]
 801b51e:	3001      	adds	r0, #1
 801b520:	4283      	cmp	r3, r0
 801b522:	d004      	beq.n	801b52e <__swbuf_r+0x62>
 801b524:	89a3      	ldrh	r3, [r4, #12]
 801b526:	07db      	lsls	r3, r3, #31
 801b528:	d519      	bpl.n	801b55e <__swbuf_r+0x92>
 801b52a:	2e0a      	cmp	r6, #10
 801b52c:	d117      	bne.n	801b55e <__swbuf_r+0x92>
 801b52e:	4621      	mov	r1, r4
 801b530:	4628      	mov	r0, r5
 801b532:	f000 f933 	bl	801b79c <_fflush_r>
 801b536:	b190      	cbz	r0, 801b55e <__swbuf_r+0x92>
 801b538:	e00f      	b.n	801b55a <__swbuf_r+0x8e>
 801b53a:	4b0b      	ldr	r3, [pc, #44]	; (801b568 <__swbuf_r+0x9c>)
 801b53c:	429c      	cmp	r4, r3
 801b53e:	d101      	bne.n	801b544 <__swbuf_r+0x78>
 801b540:	68ac      	ldr	r4, [r5, #8]
 801b542:	e7d0      	b.n	801b4e6 <__swbuf_r+0x1a>
 801b544:	4b09      	ldr	r3, [pc, #36]	; (801b56c <__swbuf_r+0xa0>)
 801b546:	429c      	cmp	r4, r3
 801b548:	bf08      	it	eq
 801b54a:	68ec      	ldreq	r4, [r5, #12]
 801b54c:	e7cb      	b.n	801b4e6 <__swbuf_r+0x1a>
 801b54e:	4621      	mov	r1, r4
 801b550:	4628      	mov	r0, r5
 801b552:	f000 f81f 	bl	801b594 <__swsetup_r>
 801b556:	2800      	cmp	r0, #0
 801b558:	d0cc      	beq.n	801b4f4 <__swbuf_r+0x28>
 801b55a:	f04f 37ff 	mov.w	r7, #4294967295
 801b55e:	4638      	mov	r0, r7
 801b560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b562:	bf00      	nop
 801b564:	080211c0 	.word	0x080211c0
 801b568:	080211e0 	.word	0x080211e0
 801b56c:	080211a0 	.word	0x080211a0

0801b570 <_write_r>:
 801b570:	b538      	push	{r3, r4, r5, lr}
 801b572:	4c07      	ldr	r4, [pc, #28]	; (801b590 <_write_r+0x20>)
 801b574:	4605      	mov	r5, r0
 801b576:	4608      	mov	r0, r1
 801b578:	4611      	mov	r1, r2
 801b57a:	2200      	movs	r2, #0
 801b57c:	6022      	str	r2, [r4, #0]
 801b57e:	461a      	mov	r2, r3
 801b580:	f7e8 fe65 	bl	800424e <_write>
 801b584:	1c43      	adds	r3, r0, #1
 801b586:	d102      	bne.n	801b58e <_write_r+0x1e>
 801b588:	6823      	ldr	r3, [r4, #0]
 801b58a:	b103      	cbz	r3, 801b58e <_write_r+0x1e>
 801b58c:	602b      	str	r3, [r5, #0]
 801b58e:	bd38      	pop	{r3, r4, r5, pc}
 801b590:	2000b504 	.word	0x2000b504

0801b594 <__swsetup_r>:
 801b594:	4b32      	ldr	r3, [pc, #200]	; (801b660 <__swsetup_r+0xcc>)
 801b596:	b570      	push	{r4, r5, r6, lr}
 801b598:	681d      	ldr	r5, [r3, #0]
 801b59a:	4606      	mov	r6, r0
 801b59c:	460c      	mov	r4, r1
 801b59e:	b125      	cbz	r5, 801b5aa <__swsetup_r+0x16>
 801b5a0:	69ab      	ldr	r3, [r5, #24]
 801b5a2:	b913      	cbnz	r3, 801b5aa <__swsetup_r+0x16>
 801b5a4:	4628      	mov	r0, r5
 801b5a6:	f7ff f937 	bl	801a818 <__sinit>
 801b5aa:	4b2e      	ldr	r3, [pc, #184]	; (801b664 <__swsetup_r+0xd0>)
 801b5ac:	429c      	cmp	r4, r3
 801b5ae:	d10f      	bne.n	801b5d0 <__swsetup_r+0x3c>
 801b5b0:	686c      	ldr	r4, [r5, #4]
 801b5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b5b6:	b29a      	uxth	r2, r3
 801b5b8:	0715      	lsls	r5, r2, #28
 801b5ba:	d42c      	bmi.n	801b616 <__swsetup_r+0x82>
 801b5bc:	06d0      	lsls	r0, r2, #27
 801b5be:	d411      	bmi.n	801b5e4 <__swsetup_r+0x50>
 801b5c0:	2209      	movs	r2, #9
 801b5c2:	6032      	str	r2, [r6, #0]
 801b5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5c8:	81a3      	strh	r3, [r4, #12]
 801b5ca:	f04f 30ff 	mov.w	r0, #4294967295
 801b5ce:	e03e      	b.n	801b64e <__swsetup_r+0xba>
 801b5d0:	4b25      	ldr	r3, [pc, #148]	; (801b668 <__swsetup_r+0xd4>)
 801b5d2:	429c      	cmp	r4, r3
 801b5d4:	d101      	bne.n	801b5da <__swsetup_r+0x46>
 801b5d6:	68ac      	ldr	r4, [r5, #8]
 801b5d8:	e7eb      	b.n	801b5b2 <__swsetup_r+0x1e>
 801b5da:	4b24      	ldr	r3, [pc, #144]	; (801b66c <__swsetup_r+0xd8>)
 801b5dc:	429c      	cmp	r4, r3
 801b5de:	bf08      	it	eq
 801b5e0:	68ec      	ldreq	r4, [r5, #12]
 801b5e2:	e7e6      	b.n	801b5b2 <__swsetup_r+0x1e>
 801b5e4:	0751      	lsls	r1, r2, #29
 801b5e6:	d512      	bpl.n	801b60e <__swsetup_r+0x7a>
 801b5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b5ea:	b141      	cbz	r1, 801b5fe <__swsetup_r+0x6a>
 801b5ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b5f0:	4299      	cmp	r1, r3
 801b5f2:	d002      	beq.n	801b5fa <__swsetup_r+0x66>
 801b5f4:	4630      	mov	r0, r6
 801b5f6:	f7fd fcfd 	bl	8018ff4 <_free_r>
 801b5fa:	2300      	movs	r3, #0
 801b5fc:	6363      	str	r3, [r4, #52]	; 0x34
 801b5fe:	89a3      	ldrh	r3, [r4, #12]
 801b600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b604:	81a3      	strh	r3, [r4, #12]
 801b606:	2300      	movs	r3, #0
 801b608:	6063      	str	r3, [r4, #4]
 801b60a:	6923      	ldr	r3, [r4, #16]
 801b60c:	6023      	str	r3, [r4, #0]
 801b60e:	89a3      	ldrh	r3, [r4, #12]
 801b610:	f043 0308 	orr.w	r3, r3, #8
 801b614:	81a3      	strh	r3, [r4, #12]
 801b616:	6923      	ldr	r3, [r4, #16]
 801b618:	b94b      	cbnz	r3, 801b62e <__swsetup_r+0x9a>
 801b61a:	89a3      	ldrh	r3, [r4, #12]
 801b61c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b624:	d003      	beq.n	801b62e <__swsetup_r+0x9a>
 801b626:	4621      	mov	r1, r4
 801b628:	4630      	mov	r0, r6
 801b62a:	f000 f917 	bl	801b85c <__smakebuf_r>
 801b62e:	89a2      	ldrh	r2, [r4, #12]
 801b630:	f012 0301 	ands.w	r3, r2, #1
 801b634:	d00c      	beq.n	801b650 <__swsetup_r+0xbc>
 801b636:	2300      	movs	r3, #0
 801b638:	60a3      	str	r3, [r4, #8]
 801b63a:	6963      	ldr	r3, [r4, #20]
 801b63c:	425b      	negs	r3, r3
 801b63e:	61a3      	str	r3, [r4, #24]
 801b640:	6923      	ldr	r3, [r4, #16]
 801b642:	b953      	cbnz	r3, 801b65a <__swsetup_r+0xc6>
 801b644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b648:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b64c:	d1ba      	bne.n	801b5c4 <__swsetup_r+0x30>
 801b64e:	bd70      	pop	{r4, r5, r6, pc}
 801b650:	0792      	lsls	r2, r2, #30
 801b652:	bf58      	it	pl
 801b654:	6963      	ldrpl	r3, [r4, #20]
 801b656:	60a3      	str	r3, [r4, #8]
 801b658:	e7f2      	b.n	801b640 <__swsetup_r+0xac>
 801b65a:	2000      	movs	r0, #0
 801b65c:	e7f7      	b.n	801b64e <__swsetup_r+0xba>
 801b65e:	bf00      	nop
 801b660:	200000c0 	.word	0x200000c0
 801b664:	080211c0 	.word	0x080211c0
 801b668:	080211e0 	.word	0x080211e0
 801b66c:	080211a0 	.word	0x080211a0

0801b670 <_close_r>:
 801b670:	b538      	push	{r3, r4, r5, lr}
 801b672:	4c06      	ldr	r4, [pc, #24]	; (801b68c <_close_r+0x1c>)
 801b674:	2300      	movs	r3, #0
 801b676:	4605      	mov	r5, r0
 801b678:	4608      	mov	r0, r1
 801b67a:	6023      	str	r3, [r4, #0]
 801b67c:	f7e8 fe03 	bl	8004286 <_close>
 801b680:	1c43      	adds	r3, r0, #1
 801b682:	d102      	bne.n	801b68a <_close_r+0x1a>
 801b684:	6823      	ldr	r3, [r4, #0]
 801b686:	b103      	cbz	r3, 801b68a <_close_r+0x1a>
 801b688:	602b      	str	r3, [r5, #0]
 801b68a:	bd38      	pop	{r3, r4, r5, pc}
 801b68c:	2000b504 	.word	0x2000b504

0801b690 <__sflush_r>:
 801b690:	898a      	ldrh	r2, [r1, #12]
 801b692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b696:	4605      	mov	r5, r0
 801b698:	0710      	lsls	r0, r2, #28
 801b69a:	460c      	mov	r4, r1
 801b69c:	d458      	bmi.n	801b750 <__sflush_r+0xc0>
 801b69e:	684b      	ldr	r3, [r1, #4]
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	dc05      	bgt.n	801b6b0 <__sflush_r+0x20>
 801b6a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	dc02      	bgt.n	801b6b0 <__sflush_r+0x20>
 801b6aa:	2000      	movs	r0, #0
 801b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b6b2:	2e00      	cmp	r6, #0
 801b6b4:	d0f9      	beq.n	801b6aa <__sflush_r+0x1a>
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b6bc:	682f      	ldr	r7, [r5, #0]
 801b6be:	6a21      	ldr	r1, [r4, #32]
 801b6c0:	602b      	str	r3, [r5, #0]
 801b6c2:	d032      	beq.n	801b72a <__sflush_r+0x9a>
 801b6c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b6c6:	89a3      	ldrh	r3, [r4, #12]
 801b6c8:	075a      	lsls	r2, r3, #29
 801b6ca:	d505      	bpl.n	801b6d8 <__sflush_r+0x48>
 801b6cc:	6863      	ldr	r3, [r4, #4]
 801b6ce:	1ac0      	subs	r0, r0, r3
 801b6d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b6d2:	b10b      	cbz	r3, 801b6d8 <__sflush_r+0x48>
 801b6d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b6d6:	1ac0      	subs	r0, r0, r3
 801b6d8:	2300      	movs	r3, #0
 801b6da:	4602      	mov	r2, r0
 801b6dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b6de:	6a21      	ldr	r1, [r4, #32]
 801b6e0:	4628      	mov	r0, r5
 801b6e2:	47b0      	blx	r6
 801b6e4:	1c43      	adds	r3, r0, #1
 801b6e6:	89a3      	ldrh	r3, [r4, #12]
 801b6e8:	d106      	bne.n	801b6f8 <__sflush_r+0x68>
 801b6ea:	6829      	ldr	r1, [r5, #0]
 801b6ec:	291d      	cmp	r1, #29
 801b6ee:	d848      	bhi.n	801b782 <__sflush_r+0xf2>
 801b6f0:	4a29      	ldr	r2, [pc, #164]	; (801b798 <__sflush_r+0x108>)
 801b6f2:	40ca      	lsrs	r2, r1
 801b6f4:	07d6      	lsls	r6, r2, #31
 801b6f6:	d544      	bpl.n	801b782 <__sflush_r+0xf2>
 801b6f8:	2200      	movs	r2, #0
 801b6fa:	6062      	str	r2, [r4, #4]
 801b6fc:	04d9      	lsls	r1, r3, #19
 801b6fe:	6922      	ldr	r2, [r4, #16]
 801b700:	6022      	str	r2, [r4, #0]
 801b702:	d504      	bpl.n	801b70e <__sflush_r+0x7e>
 801b704:	1c42      	adds	r2, r0, #1
 801b706:	d101      	bne.n	801b70c <__sflush_r+0x7c>
 801b708:	682b      	ldr	r3, [r5, #0]
 801b70a:	b903      	cbnz	r3, 801b70e <__sflush_r+0x7e>
 801b70c:	6560      	str	r0, [r4, #84]	; 0x54
 801b70e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b710:	602f      	str	r7, [r5, #0]
 801b712:	2900      	cmp	r1, #0
 801b714:	d0c9      	beq.n	801b6aa <__sflush_r+0x1a>
 801b716:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b71a:	4299      	cmp	r1, r3
 801b71c:	d002      	beq.n	801b724 <__sflush_r+0x94>
 801b71e:	4628      	mov	r0, r5
 801b720:	f7fd fc68 	bl	8018ff4 <_free_r>
 801b724:	2000      	movs	r0, #0
 801b726:	6360      	str	r0, [r4, #52]	; 0x34
 801b728:	e7c0      	b.n	801b6ac <__sflush_r+0x1c>
 801b72a:	2301      	movs	r3, #1
 801b72c:	4628      	mov	r0, r5
 801b72e:	47b0      	blx	r6
 801b730:	1c41      	adds	r1, r0, #1
 801b732:	d1c8      	bne.n	801b6c6 <__sflush_r+0x36>
 801b734:	682b      	ldr	r3, [r5, #0]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d0c5      	beq.n	801b6c6 <__sflush_r+0x36>
 801b73a:	2b1d      	cmp	r3, #29
 801b73c:	d001      	beq.n	801b742 <__sflush_r+0xb2>
 801b73e:	2b16      	cmp	r3, #22
 801b740:	d101      	bne.n	801b746 <__sflush_r+0xb6>
 801b742:	602f      	str	r7, [r5, #0]
 801b744:	e7b1      	b.n	801b6aa <__sflush_r+0x1a>
 801b746:	89a3      	ldrh	r3, [r4, #12]
 801b748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b74c:	81a3      	strh	r3, [r4, #12]
 801b74e:	e7ad      	b.n	801b6ac <__sflush_r+0x1c>
 801b750:	690f      	ldr	r7, [r1, #16]
 801b752:	2f00      	cmp	r7, #0
 801b754:	d0a9      	beq.n	801b6aa <__sflush_r+0x1a>
 801b756:	0793      	lsls	r3, r2, #30
 801b758:	680e      	ldr	r6, [r1, #0]
 801b75a:	bf08      	it	eq
 801b75c:	694b      	ldreq	r3, [r1, #20]
 801b75e:	600f      	str	r7, [r1, #0]
 801b760:	bf18      	it	ne
 801b762:	2300      	movne	r3, #0
 801b764:	eba6 0807 	sub.w	r8, r6, r7
 801b768:	608b      	str	r3, [r1, #8]
 801b76a:	f1b8 0f00 	cmp.w	r8, #0
 801b76e:	dd9c      	ble.n	801b6aa <__sflush_r+0x1a>
 801b770:	4643      	mov	r3, r8
 801b772:	463a      	mov	r2, r7
 801b774:	6a21      	ldr	r1, [r4, #32]
 801b776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b778:	4628      	mov	r0, r5
 801b77a:	47b0      	blx	r6
 801b77c:	2800      	cmp	r0, #0
 801b77e:	dc06      	bgt.n	801b78e <__sflush_r+0xfe>
 801b780:	89a3      	ldrh	r3, [r4, #12]
 801b782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b786:	81a3      	strh	r3, [r4, #12]
 801b788:	f04f 30ff 	mov.w	r0, #4294967295
 801b78c:	e78e      	b.n	801b6ac <__sflush_r+0x1c>
 801b78e:	4407      	add	r7, r0
 801b790:	eba8 0800 	sub.w	r8, r8, r0
 801b794:	e7e9      	b.n	801b76a <__sflush_r+0xda>
 801b796:	bf00      	nop
 801b798:	20400001 	.word	0x20400001

0801b79c <_fflush_r>:
 801b79c:	b538      	push	{r3, r4, r5, lr}
 801b79e:	690b      	ldr	r3, [r1, #16]
 801b7a0:	4605      	mov	r5, r0
 801b7a2:	460c      	mov	r4, r1
 801b7a4:	b1db      	cbz	r3, 801b7de <_fflush_r+0x42>
 801b7a6:	b118      	cbz	r0, 801b7b0 <_fflush_r+0x14>
 801b7a8:	6983      	ldr	r3, [r0, #24]
 801b7aa:	b90b      	cbnz	r3, 801b7b0 <_fflush_r+0x14>
 801b7ac:	f7ff f834 	bl	801a818 <__sinit>
 801b7b0:	4b0c      	ldr	r3, [pc, #48]	; (801b7e4 <_fflush_r+0x48>)
 801b7b2:	429c      	cmp	r4, r3
 801b7b4:	d109      	bne.n	801b7ca <_fflush_r+0x2e>
 801b7b6:	686c      	ldr	r4, [r5, #4]
 801b7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b7bc:	b17b      	cbz	r3, 801b7de <_fflush_r+0x42>
 801b7be:	4621      	mov	r1, r4
 801b7c0:	4628      	mov	r0, r5
 801b7c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b7c6:	f7ff bf63 	b.w	801b690 <__sflush_r>
 801b7ca:	4b07      	ldr	r3, [pc, #28]	; (801b7e8 <_fflush_r+0x4c>)
 801b7cc:	429c      	cmp	r4, r3
 801b7ce:	d101      	bne.n	801b7d4 <_fflush_r+0x38>
 801b7d0:	68ac      	ldr	r4, [r5, #8]
 801b7d2:	e7f1      	b.n	801b7b8 <_fflush_r+0x1c>
 801b7d4:	4b05      	ldr	r3, [pc, #20]	; (801b7ec <_fflush_r+0x50>)
 801b7d6:	429c      	cmp	r4, r3
 801b7d8:	bf08      	it	eq
 801b7da:	68ec      	ldreq	r4, [r5, #12]
 801b7dc:	e7ec      	b.n	801b7b8 <_fflush_r+0x1c>
 801b7de:	2000      	movs	r0, #0
 801b7e0:	bd38      	pop	{r3, r4, r5, pc}
 801b7e2:	bf00      	nop
 801b7e4:	080211c0 	.word	0x080211c0
 801b7e8:	080211e0 	.word	0x080211e0
 801b7ec:	080211a0 	.word	0x080211a0

0801b7f0 <_lseek_r>:
 801b7f0:	b538      	push	{r3, r4, r5, lr}
 801b7f2:	4c07      	ldr	r4, [pc, #28]	; (801b810 <_lseek_r+0x20>)
 801b7f4:	4605      	mov	r5, r0
 801b7f6:	4608      	mov	r0, r1
 801b7f8:	4611      	mov	r1, r2
 801b7fa:	2200      	movs	r2, #0
 801b7fc:	6022      	str	r2, [r4, #0]
 801b7fe:	461a      	mov	r2, r3
 801b800:	f7e8 fd68 	bl	80042d4 <_lseek>
 801b804:	1c43      	adds	r3, r0, #1
 801b806:	d102      	bne.n	801b80e <_lseek_r+0x1e>
 801b808:	6823      	ldr	r3, [r4, #0]
 801b80a:	b103      	cbz	r3, 801b80e <_lseek_r+0x1e>
 801b80c:	602b      	str	r3, [r5, #0]
 801b80e:	bd38      	pop	{r3, r4, r5, pc}
 801b810:	2000b504 	.word	0x2000b504

0801b814 <__swhatbuf_r>:
 801b814:	b570      	push	{r4, r5, r6, lr}
 801b816:	460e      	mov	r6, r1
 801b818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b81c:	2900      	cmp	r1, #0
 801b81e:	b096      	sub	sp, #88	; 0x58
 801b820:	4614      	mov	r4, r2
 801b822:	461d      	mov	r5, r3
 801b824:	da07      	bge.n	801b836 <__swhatbuf_r+0x22>
 801b826:	2300      	movs	r3, #0
 801b828:	602b      	str	r3, [r5, #0]
 801b82a:	89b3      	ldrh	r3, [r6, #12]
 801b82c:	061a      	lsls	r2, r3, #24
 801b82e:	d410      	bmi.n	801b852 <__swhatbuf_r+0x3e>
 801b830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b834:	e00e      	b.n	801b854 <__swhatbuf_r+0x40>
 801b836:	466a      	mov	r2, sp
 801b838:	f000 f888 	bl	801b94c <_fstat_r>
 801b83c:	2800      	cmp	r0, #0
 801b83e:	dbf2      	blt.n	801b826 <__swhatbuf_r+0x12>
 801b840:	9a01      	ldr	r2, [sp, #4]
 801b842:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b846:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b84a:	425a      	negs	r2, r3
 801b84c:	415a      	adcs	r2, r3
 801b84e:	602a      	str	r2, [r5, #0]
 801b850:	e7ee      	b.n	801b830 <__swhatbuf_r+0x1c>
 801b852:	2340      	movs	r3, #64	; 0x40
 801b854:	2000      	movs	r0, #0
 801b856:	6023      	str	r3, [r4, #0]
 801b858:	b016      	add	sp, #88	; 0x58
 801b85a:	bd70      	pop	{r4, r5, r6, pc}

0801b85c <__smakebuf_r>:
 801b85c:	898b      	ldrh	r3, [r1, #12]
 801b85e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b860:	079d      	lsls	r5, r3, #30
 801b862:	4606      	mov	r6, r0
 801b864:	460c      	mov	r4, r1
 801b866:	d507      	bpl.n	801b878 <__smakebuf_r+0x1c>
 801b868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b86c:	6023      	str	r3, [r4, #0]
 801b86e:	6123      	str	r3, [r4, #16]
 801b870:	2301      	movs	r3, #1
 801b872:	6163      	str	r3, [r4, #20]
 801b874:	b002      	add	sp, #8
 801b876:	bd70      	pop	{r4, r5, r6, pc}
 801b878:	ab01      	add	r3, sp, #4
 801b87a:	466a      	mov	r2, sp
 801b87c:	f7ff ffca 	bl	801b814 <__swhatbuf_r>
 801b880:	9900      	ldr	r1, [sp, #0]
 801b882:	4605      	mov	r5, r0
 801b884:	4630      	mov	r0, r6
 801b886:	f7fd fc03 	bl	8019090 <_malloc_r>
 801b88a:	b948      	cbnz	r0, 801b8a0 <__smakebuf_r+0x44>
 801b88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b890:	059a      	lsls	r2, r3, #22
 801b892:	d4ef      	bmi.n	801b874 <__smakebuf_r+0x18>
 801b894:	f023 0303 	bic.w	r3, r3, #3
 801b898:	f043 0302 	orr.w	r3, r3, #2
 801b89c:	81a3      	strh	r3, [r4, #12]
 801b89e:	e7e3      	b.n	801b868 <__smakebuf_r+0xc>
 801b8a0:	4b0d      	ldr	r3, [pc, #52]	; (801b8d8 <__smakebuf_r+0x7c>)
 801b8a2:	62b3      	str	r3, [r6, #40]	; 0x28
 801b8a4:	89a3      	ldrh	r3, [r4, #12]
 801b8a6:	6020      	str	r0, [r4, #0]
 801b8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b8ac:	81a3      	strh	r3, [r4, #12]
 801b8ae:	9b00      	ldr	r3, [sp, #0]
 801b8b0:	6163      	str	r3, [r4, #20]
 801b8b2:	9b01      	ldr	r3, [sp, #4]
 801b8b4:	6120      	str	r0, [r4, #16]
 801b8b6:	b15b      	cbz	r3, 801b8d0 <__smakebuf_r+0x74>
 801b8b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b8bc:	4630      	mov	r0, r6
 801b8be:	f000 f857 	bl	801b970 <_isatty_r>
 801b8c2:	b128      	cbz	r0, 801b8d0 <__smakebuf_r+0x74>
 801b8c4:	89a3      	ldrh	r3, [r4, #12]
 801b8c6:	f023 0303 	bic.w	r3, r3, #3
 801b8ca:	f043 0301 	orr.w	r3, r3, #1
 801b8ce:	81a3      	strh	r3, [r4, #12]
 801b8d0:	89a3      	ldrh	r3, [r4, #12]
 801b8d2:	431d      	orrs	r5, r3
 801b8d4:	81a5      	strh	r5, [r4, #12]
 801b8d6:	e7cd      	b.n	801b874 <__smakebuf_r+0x18>
 801b8d8:	0801a7e1 	.word	0x0801a7e1

0801b8dc <_realloc_r>:
 801b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8de:	4607      	mov	r7, r0
 801b8e0:	4614      	mov	r4, r2
 801b8e2:	460e      	mov	r6, r1
 801b8e4:	b921      	cbnz	r1, 801b8f0 <_realloc_r+0x14>
 801b8e6:	4611      	mov	r1, r2
 801b8e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b8ec:	f7fd bbd0 	b.w	8019090 <_malloc_r>
 801b8f0:	b922      	cbnz	r2, 801b8fc <_realloc_r+0x20>
 801b8f2:	f7fd fb7f 	bl	8018ff4 <_free_r>
 801b8f6:	4625      	mov	r5, r4
 801b8f8:	4628      	mov	r0, r5
 801b8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b8fc:	f000 f848 	bl	801b990 <_malloc_usable_size_r>
 801b900:	42a0      	cmp	r0, r4
 801b902:	d20f      	bcs.n	801b924 <_realloc_r+0x48>
 801b904:	4621      	mov	r1, r4
 801b906:	4638      	mov	r0, r7
 801b908:	f7fd fbc2 	bl	8019090 <_malloc_r>
 801b90c:	4605      	mov	r5, r0
 801b90e:	2800      	cmp	r0, #0
 801b910:	d0f2      	beq.n	801b8f8 <_realloc_r+0x1c>
 801b912:	4631      	mov	r1, r6
 801b914:	4622      	mov	r2, r4
 801b916:	f7fd fb40 	bl	8018f9a <memcpy>
 801b91a:	4631      	mov	r1, r6
 801b91c:	4638      	mov	r0, r7
 801b91e:	f7fd fb69 	bl	8018ff4 <_free_r>
 801b922:	e7e9      	b.n	801b8f8 <_realloc_r+0x1c>
 801b924:	4635      	mov	r5, r6
 801b926:	e7e7      	b.n	801b8f8 <_realloc_r+0x1c>

0801b928 <_read_r>:
 801b928:	b538      	push	{r3, r4, r5, lr}
 801b92a:	4c07      	ldr	r4, [pc, #28]	; (801b948 <_read_r+0x20>)
 801b92c:	4605      	mov	r5, r0
 801b92e:	4608      	mov	r0, r1
 801b930:	4611      	mov	r1, r2
 801b932:	2200      	movs	r2, #0
 801b934:	6022      	str	r2, [r4, #0]
 801b936:	461a      	mov	r2, r3
 801b938:	f7e8 fc6c 	bl	8004214 <_read>
 801b93c:	1c43      	adds	r3, r0, #1
 801b93e:	d102      	bne.n	801b946 <_read_r+0x1e>
 801b940:	6823      	ldr	r3, [r4, #0]
 801b942:	b103      	cbz	r3, 801b946 <_read_r+0x1e>
 801b944:	602b      	str	r3, [r5, #0]
 801b946:	bd38      	pop	{r3, r4, r5, pc}
 801b948:	2000b504 	.word	0x2000b504

0801b94c <_fstat_r>:
 801b94c:	b538      	push	{r3, r4, r5, lr}
 801b94e:	4c07      	ldr	r4, [pc, #28]	; (801b96c <_fstat_r+0x20>)
 801b950:	2300      	movs	r3, #0
 801b952:	4605      	mov	r5, r0
 801b954:	4608      	mov	r0, r1
 801b956:	4611      	mov	r1, r2
 801b958:	6023      	str	r3, [r4, #0]
 801b95a:	f7e8 fca0 	bl	800429e <_fstat>
 801b95e:	1c43      	adds	r3, r0, #1
 801b960:	d102      	bne.n	801b968 <_fstat_r+0x1c>
 801b962:	6823      	ldr	r3, [r4, #0]
 801b964:	b103      	cbz	r3, 801b968 <_fstat_r+0x1c>
 801b966:	602b      	str	r3, [r5, #0]
 801b968:	bd38      	pop	{r3, r4, r5, pc}
 801b96a:	bf00      	nop
 801b96c:	2000b504 	.word	0x2000b504

0801b970 <_isatty_r>:
 801b970:	b538      	push	{r3, r4, r5, lr}
 801b972:	4c06      	ldr	r4, [pc, #24]	; (801b98c <_isatty_r+0x1c>)
 801b974:	2300      	movs	r3, #0
 801b976:	4605      	mov	r5, r0
 801b978:	4608      	mov	r0, r1
 801b97a:	6023      	str	r3, [r4, #0]
 801b97c:	f7e8 fc9f 	bl	80042be <_isatty>
 801b980:	1c43      	adds	r3, r0, #1
 801b982:	d102      	bne.n	801b98a <_isatty_r+0x1a>
 801b984:	6823      	ldr	r3, [r4, #0]
 801b986:	b103      	cbz	r3, 801b98a <_isatty_r+0x1a>
 801b988:	602b      	str	r3, [r5, #0]
 801b98a:	bd38      	pop	{r3, r4, r5, pc}
 801b98c:	2000b504 	.word	0x2000b504

0801b990 <_malloc_usable_size_r>:
 801b990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b994:	1f18      	subs	r0, r3, #4
 801b996:	2b00      	cmp	r3, #0
 801b998:	bfbc      	itt	lt
 801b99a:	580b      	ldrlt	r3, [r1, r0]
 801b99c:	18c0      	addlt	r0, r0, r3
 801b99e:	4770      	bx	lr

0801b9a0 <atan>:
 801b9a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9a4:	ec55 4b10 	vmov	r4, r5, d0
 801b9a8:	4bc3      	ldr	r3, [pc, #780]	; (801bcb8 <atan+0x318>)
 801b9aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b9ae:	429e      	cmp	r6, r3
 801b9b0:	46ab      	mov	fp, r5
 801b9b2:	dd18      	ble.n	801b9e6 <atan+0x46>
 801b9b4:	4bc1      	ldr	r3, [pc, #772]	; (801bcbc <atan+0x31c>)
 801b9b6:	429e      	cmp	r6, r3
 801b9b8:	dc01      	bgt.n	801b9be <atan+0x1e>
 801b9ba:	d109      	bne.n	801b9d0 <atan+0x30>
 801b9bc:	b144      	cbz	r4, 801b9d0 <atan+0x30>
 801b9be:	4622      	mov	r2, r4
 801b9c0:	462b      	mov	r3, r5
 801b9c2:	4620      	mov	r0, r4
 801b9c4:	4629      	mov	r1, r5
 801b9c6:	f7e4 fc61 	bl	800028c <__adddf3>
 801b9ca:	4604      	mov	r4, r0
 801b9cc:	460d      	mov	r5, r1
 801b9ce:	e006      	b.n	801b9de <atan+0x3e>
 801b9d0:	f1bb 0f00 	cmp.w	fp, #0
 801b9d4:	f340 8131 	ble.w	801bc3a <atan+0x29a>
 801b9d8:	a59b      	add	r5, pc, #620	; (adr r5, 801bc48 <atan+0x2a8>)
 801b9da:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b9de:	ec45 4b10 	vmov	d0, r4, r5
 801b9e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9e6:	4bb6      	ldr	r3, [pc, #728]	; (801bcc0 <atan+0x320>)
 801b9e8:	429e      	cmp	r6, r3
 801b9ea:	dc14      	bgt.n	801ba16 <atan+0x76>
 801b9ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801b9f0:	429e      	cmp	r6, r3
 801b9f2:	dc0d      	bgt.n	801ba10 <atan+0x70>
 801b9f4:	a396      	add	r3, pc, #600	; (adr r3, 801bc50 <atan+0x2b0>)
 801b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9fa:	ee10 0a10 	vmov	r0, s0
 801b9fe:	4629      	mov	r1, r5
 801ba00:	f7e4 fc44 	bl	800028c <__adddf3>
 801ba04:	2200      	movs	r2, #0
 801ba06:	4baf      	ldr	r3, [pc, #700]	; (801bcc4 <atan+0x324>)
 801ba08:	f7e5 f886 	bl	8000b18 <__aeabi_dcmpgt>
 801ba0c:	2800      	cmp	r0, #0
 801ba0e:	d1e6      	bne.n	801b9de <atan+0x3e>
 801ba10:	f04f 3aff 	mov.w	sl, #4294967295
 801ba14:	e02b      	b.n	801ba6e <atan+0xce>
 801ba16:	f000 f963 	bl	801bce0 <fabs>
 801ba1a:	4bab      	ldr	r3, [pc, #684]	; (801bcc8 <atan+0x328>)
 801ba1c:	429e      	cmp	r6, r3
 801ba1e:	ec55 4b10 	vmov	r4, r5, d0
 801ba22:	f300 80bf 	bgt.w	801bba4 <atan+0x204>
 801ba26:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ba2a:	429e      	cmp	r6, r3
 801ba2c:	f300 80a0 	bgt.w	801bb70 <atan+0x1d0>
 801ba30:	ee10 2a10 	vmov	r2, s0
 801ba34:	ee10 0a10 	vmov	r0, s0
 801ba38:	462b      	mov	r3, r5
 801ba3a:	4629      	mov	r1, r5
 801ba3c:	f7e4 fc26 	bl	800028c <__adddf3>
 801ba40:	2200      	movs	r2, #0
 801ba42:	4ba0      	ldr	r3, [pc, #640]	; (801bcc4 <atan+0x324>)
 801ba44:	f7e4 fc20 	bl	8000288 <__aeabi_dsub>
 801ba48:	2200      	movs	r2, #0
 801ba4a:	4606      	mov	r6, r0
 801ba4c:	460f      	mov	r7, r1
 801ba4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ba52:	4620      	mov	r0, r4
 801ba54:	4629      	mov	r1, r5
 801ba56:	f7e4 fc19 	bl	800028c <__adddf3>
 801ba5a:	4602      	mov	r2, r0
 801ba5c:	460b      	mov	r3, r1
 801ba5e:	4630      	mov	r0, r6
 801ba60:	4639      	mov	r1, r7
 801ba62:	f7e4 fef3 	bl	800084c <__aeabi_ddiv>
 801ba66:	f04f 0a00 	mov.w	sl, #0
 801ba6a:	4604      	mov	r4, r0
 801ba6c:	460d      	mov	r5, r1
 801ba6e:	4622      	mov	r2, r4
 801ba70:	462b      	mov	r3, r5
 801ba72:	4620      	mov	r0, r4
 801ba74:	4629      	mov	r1, r5
 801ba76:	f7e4 fdbf 	bl	80005f8 <__aeabi_dmul>
 801ba7a:	4602      	mov	r2, r0
 801ba7c:	460b      	mov	r3, r1
 801ba7e:	4680      	mov	r8, r0
 801ba80:	4689      	mov	r9, r1
 801ba82:	f7e4 fdb9 	bl	80005f8 <__aeabi_dmul>
 801ba86:	a374      	add	r3, pc, #464	; (adr r3, 801bc58 <atan+0x2b8>)
 801ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba8c:	4606      	mov	r6, r0
 801ba8e:	460f      	mov	r7, r1
 801ba90:	f7e4 fdb2 	bl	80005f8 <__aeabi_dmul>
 801ba94:	a372      	add	r3, pc, #456	; (adr r3, 801bc60 <atan+0x2c0>)
 801ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba9a:	f7e4 fbf7 	bl	800028c <__adddf3>
 801ba9e:	4632      	mov	r2, r6
 801baa0:	463b      	mov	r3, r7
 801baa2:	f7e4 fda9 	bl	80005f8 <__aeabi_dmul>
 801baa6:	a370      	add	r3, pc, #448	; (adr r3, 801bc68 <atan+0x2c8>)
 801baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baac:	f7e4 fbee 	bl	800028c <__adddf3>
 801bab0:	4632      	mov	r2, r6
 801bab2:	463b      	mov	r3, r7
 801bab4:	f7e4 fda0 	bl	80005f8 <__aeabi_dmul>
 801bab8:	a36d      	add	r3, pc, #436	; (adr r3, 801bc70 <atan+0x2d0>)
 801baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801babe:	f7e4 fbe5 	bl	800028c <__adddf3>
 801bac2:	4632      	mov	r2, r6
 801bac4:	463b      	mov	r3, r7
 801bac6:	f7e4 fd97 	bl	80005f8 <__aeabi_dmul>
 801baca:	a36b      	add	r3, pc, #428	; (adr r3, 801bc78 <atan+0x2d8>)
 801bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bad0:	f7e4 fbdc 	bl	800028c <__adddf3>
 801bad4:	4632      	mov	r2, r6
 801bad6:	463b      	mov	r3, r7
 801bad8:	f7e4 fd8e 	bl	80005f8 <__aeabi_dmul>
 801badc:	a368      	add	r3, pc, #416	; (adr r3, 801bc80 <atan+0x2e0>)
 801bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bae2:	f7e4 fbd3 	bl	800028c <__adddf3>
 801bae6:	4642      	mov	r2, r8
 801bae8:	464b      	mov	r3, r9
 801baea:	f7e4 fd85 	bl	80005f8 <__aeabi_dmul>
 801baee:	a366      	add	r3, pc, #408	; (adr r3, 801bc88 <atan+0x2e8>)
 801baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baf4:	4680      	mov	r8, r0
 801baf6:	4689      	mov	r9, r1
 801baf8:	4630      	mov	r0, r6
 801bafa:	4639      	mov	r1, r7
 801bafc:	f7e4 fd7c 	bl	80005f8 <__aeabi_dmul>
 801bb00:	a363      	add	r3, pc, #396	; (adr r3, 801bc90 <atan+0x2f0>)
 801bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb06:	f7e4 fbbf 	bl	8000288 <__aeabi_dsub>
 801bb0a:	4632      	mov	r2, r6
 801bb0c:	463b      	mov	r3, r7
 801bb0e:	f7e4 fd73 	bl	80005f8 <__aeabi_dmul>
 801bb12:	a361      	add	r3, pc, #388	; (adr r3, 801bc98 <atan+0x2f8>)
 801bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb18:	f7e4 fbb6 	bl	8000288 <__aeabi_dsub>
 801bb1c:	4632      	mov	r2, r6
 801bb1e:	463b      	mov	r3, r7
 801bb20:	f7e4 fd6a 	bl	80005f8 <__aeabi_dmul>
 801bb24:	a35e      	add	r3, pc, #376	; (adr r3, 801bca0 <atan+0x300>)
 801bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb2a:	f7e4 fbad 	bl	8000288 <__aeabi_dsub>
 801bb2e:	4632      	mov	r2, r6
 801bb30:	463b      	mov	r3, r7
 801bb32:	f7e4 fd61 	bl	80005f8 <__aeabi_dmul>
 801bb36:	a35c      	add	r3, pc, #368	; (adr r3, 801bca8 <atan+0x308>)
 801bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb3c:	f7e4 fba4 	bl	8000288 <__aeabi_dsub>
 801bb40:	4632      	mov	r2, r6
 801bb42:	463b      	mov	r3, r7
 801bb44:	f7e4 fd58 	bl	80005f8 <__aeabi_dmul>
 801bb48:	4602      	mov	r2, r0
 801bb4a:	460b      	mov	r3, r1
 801bb4c:	4640      	mov	r0, r8
 801bb4e:	4649      	mov	r1, r9
 801bb50:	f7e4 fb9c 	bl	800028c <__adddf3>
 801bb54:	4622      	mov	r2, r4
 801bb56:	462b      	mov	r3, r5
 801bb58:	f7e4 fd4e 	bl	80005f8 <__aeabi_dmul>
 801bb5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801bb60:	4602      	mov	r2, r0
 801bb62:	460b      	mov	r3, r1
 801bb64:	d14b      	bne.n	801bbfe <atan+0x25e>
 801bb66:	4620      	mov	r0, r4
 801bb68:	4629      	mov	r1, r5
 801bb6a:	f7e4 fb8d 	bl	8000288 <__aeabi_dsub>
 801bb6e:	e72c      	b.n	801b9ca <atan+0x2a>
 801bb70:	ee10 0a10 	vmov	r0, s0
 801bb74:	2200      	movs	r2, #0
 801bb76:	4b53      	ldr	r3, [pc, #332]	; (801bcc4 <atan+0x324>)
 801bb78:	4629      	mov	r1, r5
 801bb7a:	f7e4 fb85 	bl	8000288 <__aeabi_dsub>
 801bb7e:	2200      	movs	r2, #0
 801bb80:	4606      	mov	r6, r0
 801bb82:	460f      	mov	r7, r1
 801bb84:	4b4f      	ldr	r3, [pc, #316]	; (801bcc4 <atan+0x324>)
 801bb86:	4620      	mov	r0, r4
 801bb88:	4629      	mov	r1, r5
 801bb8a:	f7e4 fb7f 	bl	800028c <__adddf3>
 801bb8e:	4602      	mov	r2, r0
 801bb90:	460b      	mov	r3, r1
 801bb92:	4630      	mov	r0, r6
 801bb94:	4639      	mov	r1, r7
 801bb96:	f7e4 fe59 	bl	800084c <__aeabi_ddiv>
 801bb9a:	f04f 0a01 	mov.w	sl, #1
 801bb9e:	4604      	mov	r4, r0
 801bba0:	460d      	mov	r5, r1
 801bba2:	e764      	b.n	801ba6e <atan+0xce>
 801bba4:	4b49      	ldr	r3, [pc, #292]	; (801bccc <atan+0x32c>)
 801bba6:	429e      	cmp	r6, r3
 801bba8:	dc1d      	bgt.n	801bbe6 <atan+0x246>
 801bbaa:	ee10 0a10 	vmov	r0, s0
 801bbae:	2200      	movs	r2, #0
 801bbb0:	4b47      	ldr	r3, [pc, #284]	; (801bcd0 <atan+0x330>)
 801bbb2:	4629      	mov	r1, r5
 801bbb4:	f7e4 fb68 	bl	8000288 <__aeabi_dsub>
 801bbb8:	2200      	movs	r2, #0
 801bbba:	4606      	mov	r6, r0
 801bbbc:	460f      	mov	r7, r1
 801bbbe:	4b44      	ldr	r3, [pc, #272]	; (801bcd0 <atan+0x330>)
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	4629      	mov	r1, r5
 801bbc4:	f7e4 fd18 	bl	80005f8 <__aeabi_dmul>
 801bbc8:	2200      	movs	r2, #0
 801bbca:	4b3e      	ldr	r3, [pc, #248]	; (801bcc4 <atan+0x324>)
 801bbcc:	f7e4 fb5e 	bl	800028c <__adddf3>
 801bbd0:	4602      	mov	r2, r0
 801bbd2:	460b      	mov	r3, r1
 801bbd4:	4630      	mov	r0, r6
 801bbd6:	4639      	mov	r1, r7
 801bbd8:	f7e4 fe38 	bl	800084c <__aeabi_ddiv>
 801bbdc:	f04f 0a02 	mov.w	sl, #2
 801bbe0:	4604      	mov	r4, r0
 801bbe2:	460d      	mov	r5, r1
 801bbe4:	e743      	b.n	801ba6e <atan+0xce>
 801bbe6:	462b      	mov	r3, r5
 801bbe8:	ee10 2a10 	vmov	r2, s0
 801bbec:	2000      	movs	r0, #0
 801bbee:	4939      	ldr	r1, [pc, #228]	; (801bcd4 <atan+0x334>)
 801bbf0:	f7e4 fe2c 	bl	800084c <__aeabi_ddiv>
 801bbf4:	f04f 0a03 	mov.w	sl, #3
 801bbf8:	4604      	mov	r4, r0
 801bbfa:	460d      	mov	r5, r1
 801bbfc:	e737      	b.n	801ba6e <atan+0xce>
 801bbfe:	4b36      	ldr	r3, [pc, #216]	; (801bcd8 <atan+0x338>)
 801bc00:	4e36      	ldr	r6, [pc, #216]	; (801bcdc <atan+0x33c>)
 801bc02:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801bc06:	4456      	add	r6, sl
 801bc08:	449a      	add	sl, r3
 801bc0a:	e9da 2300 	ldrd	r2, r3, [sl]
 801bc0e:	f7e4 fb3b 	bl	8000288 <__aeabi_dsub>
 801bc12:	4622      	mov	r2, r4
 801bc14:	462b      	mov	r3, r5
 801bc16:	f7e4 fb37 	bl	8000288 <__aeabi_dsub>
 801bc1a:	4602      	mov	r2, r0
 801bc1c:	460b      	mov	r3, r1
 801bc1e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801bc22:	f7e4 fb31 	bl	8000288 <__aeabi_dsub>
 801bc26:	f1bb 0f00 	cmp.w	fp, #0
 801bc2a:	4604      	mov	r4, r0
 801bc2c:	460d      	mov	r5, r1
 801bc2e:	f6bf aed6 	bge.w	801b9de <atan+0x3e>
 801bc32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc36:	461d      	mov	r5, r3
 801bc38:	e6d1      	b.n	801b9de <atan+0x3e>
 801bc3a:	a51d      	add	r5, pc, #116	; (adr r5, 801bcb0 <atan+0x310>)
 801bc3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bc40:	e6cd      	b.n	801b9de <atan+0x3e>
 801bc42:	bf00      	nop
 801bc44:	f3af 8000 	nop.w
 801bc48:	54442d18 	.word	0x54442d18
 801bc4c:	3ff921fb 	.word	0x3ff921fb
 801bc50:	8800759c 	.word	0x8800759c
 801bc54:	7e37e43c 	.word	0x7e37e43c
 801bc58:	e322da11 	.word	0xe322da11
 801bc5c:	3f90ad3a 	.word	0x3f90ad3a
 801bc60:	24760deb 	.word	0x24760deb
 801bc64:	3fa97b4b 	.word	0x3fa97b4b
 801bc68:	a0d03d51 	.word	0xa0d03d51
 801bc6c:	3fb10d66 	.word	0x3fb10d66
 801bc70:	c54c206e 	.word	0xc54c206e
 801bc74:	3fb745cd 	.word	0x3fb745cd
 801bc78:	920083ff 	.word	0x920083ff
 801bc7c:	3fc24924 	.word	0x3fc24924
 801bc80:	5555550d 	.word	0x5555550d
 801bc84:	3fd55555 	.word	0x3fd55555
 801bc88:	2c6a6c2f 	.word	0x2c6a6c2f
 801bc8c:	bfa2b444 	.word	0xbfa2b444
 801bc90:	52defd9a 	.word	0x52defd9a
 801bc94:	3fadde2d 	.word	0x3fadde2d
 801bc98:	af749a6d 	.word	0xaf749a6d
 801bc9c:	3fb3b0f2 	.word	0x3fb3b0f2
 801bca0:	fe231671 	.word	0xfe231671
 801bca4:	3fbc71c6 	.word	0x3fbc71c6
 801bca8:	9998ebc4 	.word	0x9998ebc4
 801bcac:	3fc99999 	.word	0x3fc99999
 801bcb0:	54442d18 	.word	0x54442d18
 801bcb4:	bff921fb 	.word	0xbff921fb
 801bcb8:	440fffff 	.word	0x440fffff
 801bcbc:	7ff00000 	.word	0x7ff00000
 801bcc0:	3fdbffff 	.word	0x3fdbffff
 801bcc4:	3ff00000 	.word	0x3ff00000
 801bcc8:	3ff2ffff 	.word	0x3ff2ffff
 801bccc:	40037fff 	.word	0x40037fff
 801bcd0:	3ff80000 	.word	0x3ff80000
 801bcd4:	bff00000 	.word	0xbff00000
 801bcd8:	08021330 	.word	0x08021330
 801bcdc:	08021310 	.word	0x08021310

0801bce0 <fabs>:
 801bce0:	ec51 0b10 	vmov	r0, r1, d0
 801bce4:	ee10 2a10 	vmov	r2, s0
 801bce8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bcec:	ec43 2b10 	vmov	d0, r2, r3
 801bcf0:	4770      	bx	lr

0801bcf2 <atan2>:
 801bcf2:	f000 b9cd 	b.w	801c090 <__ieee754_atan2>
	...

0801bcf8 <pow>:
 801bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcfc:	ed2d 8b04 	vpush	{d8-d9}
 801bd00:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801bfd4 <pow+0x2dc>
 801bd04:	b08d      	sub	sp, #52	; 0x34
 801bd06:	ec57 6b10 	vmov	r6, r7, d0
 801bd0a:	ec55 4b11 	vmov	r4, r5, d1
 801bd0e:	f000 fa9f 	bl	801c250 <__ieee754_pow>
 801bd12:	f999 3000 	ldrsb.w	r3, [r9]
 801bd16:	9300      	str	r3, [sp, #0]
 801bd18:	3301      	adds	r3, #1
 801bd1a:	eeb0 8a40 	vmov.f32	s16, s0
 801bd1e:	eef0 8a60 	vmov.f32	s17, s1
 801bd22:	46c8      	mov	r8, r9
 801bd24:	d05f      	beq.n	801bde6 <pow+0xee>
 801bd26:	4622      	mov	r2, r4
 801bd28:	462b      	mov	r3, r5
 801bd2a:	4620      	mov	r0, r4
 801bd2c:	4629      	mov	r1, r5
 801bd2e:	f7e4 fefd 	bl	8000b2c <__aeabi_dcmpun>
 801bd32:	4683      	mov	fp, r0
 801bd34:	2800      	cmp	r0, #0
 801bd36:	d156      	bne.n	801bde6 <pow+0xee>
 801bd38:	4632      	mov	r2, r6
 801bd3a:	463b      	mov	r3, r7
 801bd3c:	4630      	mov	r0, r6
 801bd3e:	4639      	mov	r1, r7
 801bd40:	f7e4 fef4 	bl	8000b2c <__aeabi_dcmpun>
 801bd44:	9001      	str	r0, [sp, #4]
 801bd46:	b1e8      	cbz	r0, 801bd84 <pow+0x8c>
 801bd48:	2200      	movs	r2, #0
 801bd4a:	2300      	movs	r3, #0
 801bd4c:	4620      	mov	r0, r4
 801bd4e:	4629      	mov	r1, r5
 801bd50:	f7e4 feba 	bl	8000ac8 <__aeabi_dcmpeq>
 801bd54:	2800      	cmp	r0, #0
 801bd56:	d046      	beq.n	801bde6 <pow+0xee>
 801bd58:	2301      	movs	r3, #1
 801bd5a:	9302      	str	r3, [sp, #8]
 801bd5c:	4b96      	ldr	r3, [pc, #600]	; (801bfb8 <pow+0x2c0>)
 801bd5e:	9303      	str	r3, [sp, #12]
 801bd60:	4b96      	ldr	r3, [pc, #600]	; (801bfbc <pow+0x2c4>)
 801bd62:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801bd66:	2200      	movs	r2, #0
 801bd68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bd6c:	9b00      	ldr	r3, [sp, #0]
 801bd6e:	2b02      	cmp	r3, #2
 801bd70:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801bd74:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801bd78:	d033      	beq.n	801bde2 <pow+0xea>
 801bd7a:	a802      	add	r0, sp, #8
 801bd7c:	f001 f82e 	bl	801cddc <matherr>
 801bd80:	bb48      	cbnz	r0, 801bdd6 <pow+0xde>
 801bd82:	e05d      	b.n	801be40 <pow+0x148>
 801bd84:	f04f 0a00 	mov.w	sl, #0
 801bd88:	f04f 0b00 	mov.w	fp, #0
 801bd8c:	4652      	mov	r2, sl
 801bd8e:	465b      	mov	r3, fp
 801bd90:	4630      	mov	r0, r6
 801bd92:	4639      	mov	r1, r7
 801bd94:	f7e4 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 801bd98:	ec4b ab19 	vmov	d9, sl, fp
 801bd9c:	2800      	cmp	r0, #0
 801bd9e:	d054      	beq.n	801be4a <pow+0x152>
 801bda0:	4652      	mov	r2, sl
 801bda2:	465b      	mov	r3, fp
 801bda4:	4620      	mov	r0, r4
 801bda6:	4629      	mov	r1, r5
 801bda8:	f7e4 fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 801bdac:	4680      	mov	r8, r0
 801bdae:	b318      	cbz	r0, 801bdf8 <pow+0x100>
 801bdb0:	2301      	movs	r3, #1
 801bdb2:	9302      	str	r3, [sp, #8]
 801bdb4:	4b80      	ldr	r3, [pc, #512]	; (801bfb8 <pow+0x2c0>)
 801bdb6:	9303      	str	r3, [sp, #12]
 801bdb8:	9b01      	ldr	r3, [sp, #4]
 801bdba:	930a      	str	r3, [sp, #40]	; 0x28
 801bdbc:	9b00      	ldr	r3, [sp, #0]
 801bdbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801bdc2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801bdc6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d0d5      	beq.n	801bd7a <pow+0x82>
 801bdce:	4b7b      	ldr	r3, [pc, #492]	; (801bfbc <pow+0x2c4>)
 801bdd0:	2200      	movs	r2, #0
 801bdd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdd8:	b11b      	cbz	r3, 801bde2 <pow+0xea>
 801bdda:	f001 f913 	bl	801d004 <__errno>
 801bdde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bde0:	6003      	str	r3, [r0, #0]
 801bde2:	ed9d 8b08 	vldr	d8, [sp, #32]
 801bde6:	eeb0 0a48 	vmov.f32	s0, s16
 801bdea:	eef0 0a68 	vmov.f32	s1, s17
 801bdee:	b00d      	add	sp, #52	; 0x34
 801bdf0:	ecbd 8b04 	vpop	{d8-d9}
 801bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdf8:	ec45 4b10 	vmov	d0, r4, r5
 801bdfc:	f000 ffe6 	bl	801cdcc <finite>
 801be00:	2800      	cmp	r0, #0
 801be02:	d0f0      	beq.n	801bde6 <pow+0xee>
 801be04:	4652      	mov	r2, sl
 801be06:	465b      	mov	r3, fp
 801be08:	4620      	mov	r0, r4
 801be0a:	4629      	mov	r1, r5
 801be0c:	f7e4 fe66 	bl	8000adc <__aeabi_dcmplt>
 801be10:	2800      	cmp	r0, #0
 801be12:	d0e8      	beq.n	801bde6 <pow+0xee>
 801be14:	2301      	movs	r3, #1
 801be16:	9302      	str	r3, [sp, #8]
 801be18:	4b67      	ldr	r3, [pc, #412]	; (801bfb8 <pow+0x2c0>)
 801be1a:	9303      	str	r3, [sp, #12]
 801be1c:	f999 3000 	ldrsb.w	r3, [r9]
 801be20:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801be24:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801be28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801be2c:	b913      	cbnz	r3, 801be34 <pow+0x13c>
 801be2e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801be32:	e7a2      	b.n	801bd7a <pow+0x82>
 801be34:	4962      	ldr	r1, [pc, #392]	; (801bfc0 <pow+0x2c8>)
 801be36:	2000      	movs	r0, #0
 801be38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801be3c:	2b02      	cmp	r3, #2
 801be3e:	d19c      	bne.n	801bd7a <pow+0x82>
 801be40:	f001 f8e0 	bl	801d004 <__errno>
 801be44:	2321      	movs	r3, #33	; 0x21
 801be46:	6003      	str	r3, [r0, #0]
 801be48:	e7c5      	b.n	801bdd6 <pow+0xde>
 801be4a:	eeb0 0a48 	vmov.f32	s0, s16
 801be4e:	eef0 0a68 	vmov.f32	s1, s17
 801be52:	f000 ffbb 	bl	801cdcc <finite>
 801be56:	9000      	str	r0, [sp, #0]
 801be58:	2800      	cmp	r0, #0
 801be5a:	f040 8081 	bne.w	801bf60 <pow+0x268>
 801be5e:	ec47 6b10 	vmov	d0, r6, r7
 801be62:	f000 ffb3 	bl	801cdcc <finite>
 801be66:	2800      	cmp	r0, #0
 801be68:	d07a      	beq.n	801bf60 <pow+0x268>
 801be6a:	ec45 4b10 	vmov	d0, r4, r5
 801be6e:	f000 ffad 	bl	801cdcc <finite>
 801be72:	2800      	cmp	r0, #0
 801be74:	d074      	beq.n	801bf60 <pow+0x268>
 801be76:	ec53 2b18 	vmov	r2, r3, d8
 801be7a:	ee18 0a10 	vmov	r0, s16
 801be7e:	4619      	mov	r1, r3
 801be80:	f7e4 fe54 	bl	8000b2c <__aeabi_dcmpun>
 801be84:	f999 9000 	ldrsb.w	r9, [r9]
 801be88:	4b4b      	ldr	r3, [pc, #300]	; (801bfb8 <pow+0x2c0>)
 801be8a:	b1b0      	cbz	r0, 801beba <pow+0x1c2>
 801be8c:	2201      	movs	r2, #1
 801be8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801be92:	9b00      	ldr	r3, [sp, #0]
 801be94:	930a      	str	r3, [sp, #40]	; 0x28
 801be96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801be9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801be9e:	f1b9 0f00 	cmp.w	r9, #0
 801bea2:	d0c4      	beq.n	801be2e <pow+0x136>
 801bea4:	4652      	mov	r2, sl
 801bea6:	465b      	mov	r3, fp
 801bea8:	4650      	mov	r0, sl
 801beaa:	4659      	mov	r1, fp
 801beac:	f7e4 fcce 	bl	800084c <__aeabi_ddiv>
 801beb0:	f1b9 0f02 	cmp.w	r9, #2
 801beb4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801beb8:	e7c1      	b.n	801be3e <pow+0x146>
 801beba:	2203      	movs	r2, #3
 801bebc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bec0:	900a      	str	r0, [sp, #40]	; 0x28
 801bec2:	4629      	mov	r1, r5
 801bec4:	4620      	mov	r0, r4
 801bec6:	2200      	movs	r2, #0
 801bec8:	4b3e      	ldr	r3, [pc, #248]	; (801bfc4 <pow+0x2cc>)
 801beca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801bece:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801bed2:	f7e4 fb91 	bl	80005f8 <__aeabi_dmul>
 801bed6:	4604      	mov	r4, r0
 801bed8:	460d      	mov	r5, r1
 801beda:	f1b9 0f00 	cmp.w	r9, #0
 801bede:	d124      	bne.n	801bf2a <pow+0x232>
 801bee0:	4b39      	ldr	r3, [pc, #228]	; (801bfc8 <pow+0x2d0>)
 801bee2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801bee6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801beea:	4630      	mov	r0, r6
 801beec:	4652      	mov	r2, sl
 801beee:	465b      	mov	r3, fp
 801bef0:	4639      	mov	r1, r7
 801bef2:	f7e4 fdf3 	bl	8000adc <__aeabi_dcmplt>
 801bef6:	2800      	cmp	r0, #0
 801bef8:	d056      	beq.n	801bfa8 <pow+0x2b0>
 801befa:	ec45 4b10 	vmov	d0, r4, r5
 801befe:	f000 ff77 	bl	801cdf0 <rint>
 801bf02:	4622      	mov	r2, r4
 801bf04:	462b      	mov	r3, r5
 801bf06:	ec51 0b10 	vmov	r0, r1, d0
 801bf0a:	f7e4 fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 801bf0e:	b920      	cbnz	r0, 801bf1a <pow+0x222>
 801bf10:	4b2e      	ldr	r3, [pc, #184]	; (801bfcc <pow+0x2d4>)
 801bf12:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801bf16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bf1a:	f998 3000 	ldrsb.w	r3, [r8]
 801bf1e:	2b02      	cmp	r3, #2
 801bf20:	d142      	bne.n	801bfa8 <pow+0x2b0>
 801bf22:	f001 f86f 	bl	801d004 <__errno>
 801bf26:	2322      	movs	r3, #34	; 0x22
 801bf28:	e78d      	b.n	801be46 <pow+0x14e>
 801bf2a:	4b29      	ldr	r3, [pc, #164]	; (801bfd0 <pow+0x2d8>)
 801bf2c:	2200      	movs	r2, #0
 801bf2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bf32:	4630      	mov	r0, r6
 801bf34:	4652      	mov	r2, sl
 801bf36:	465b      	mov	r3, fp
 801bf38:	4639      	mov	r1, r7
 801bf3a:	f7e4 fdcf 	bl	8000adc <__aeabi_dcmplt>
 801bf3e:	2800      	cmp	r0, #0
 801bf40:	d0eb      	beq.n	801bf1a <pow+0x222>
 801bf42:	ec45 4b10 	vmov	d0, r4, r5
 801bf46:	f000 ff53 	bl	801cdf0 <rint>
 801bf4a:	4622      	mov	r2, r4
 801bf4c:	462b      	mov	r3, r5
 801bf4e:	ec51 0b10 	vmov	r0, r1, d0
 801bf52:	f7e4 fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 801bf56:	2800      	cmp	r0, #0
 801bf58:	d1df      	bne.n	801bf1a <pow+0x222>
 801bf5a:	2200      	movs	r2, #0
 801bf5c:	4b18      	ldr	r3, [pc, #96]	; (801bfc0 <pow+0x2c8>)
 801bf5e:	e7da      	b.n	801bf16 <pow+0x21e>
 801bf60:	2200      	movs	r2, #0
 801bf62:	2300      	movs	r3, #0
 801bf64:	ec51 0b18 	vmov	r0, r1, d8
 801bf68:	f7e4 fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 801bf6c:	2800      	cmp	r0, #0
 801bf6e:	f43f af3a 	beq.w	801bde6 <pow+0xee>
 801bf72:	ec47 6b10 	vmov	d0, r6, r7
 801bf76:	f000 ff29 	bl	801cdcc <finite>
 801bf7a:	2800      	cmp	r0, #0
 801bf7c:	f43f af33 	beq.w	801bde6 <pow+0xee>
 801bf80:	ec45 4b10 	vmov	d0, r4, r5
 801bf84:	f000 ff22 	bl	801cdcc <finite>
 801bf88:	2800      	cmp	r0, #0
 801bf8a:	f43f af2c 	beq.w	801bde6 <pow+0xee>
 801bf8e:	2304      	movs	r3, #4
 801bf90:	9302      	str	r3, [sp, #8]
 801bf92:	4b09      	ldr	r3, [pc, #36]	; (801bfb8 <pow+0x2c0>)
 801bf94:	9303      	str	r3, [sp, #12]
 801bf96:	2300      	movs	r3, #0
 801bf98:	930a      	str	r3, [sp, #40]	; 0x28
 801bf9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801bf9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801bfa2:	ed8d 9b08 	vstr	d9, [sp, #32]
 801bfa6:	e7b8      	b.n	801bf1a <pow+0x222>
 801bfa8:	a802      	add	r0, sp, #8
 801bfaa:	f000 ff17 	bl	801cddc <matherr>
 801bfae:	2800      	cmp	r0, #0
 801bfb0:	f47f af11 	bne.w	801bdd6 <pow+0xde>
 801bfb4:	e7b5      	b.n	801bf22 <pow+0x22a>
 801bfb6:	bf00      	nop
 801bfb8:	08021350 	.word	0x08021350
 801bfbc:	3ff00000 	.word	0x3ff00000
 801bfc0:	fff00000 	.word	0xfff00000
 801bfc4:	3fe00000 	.word	0x3fe00000
 801bfc8:	47efffff 	.word	0x47efffff
 801bfcc:	c7efffff 	.word	0xc7efffff
 801bfd0:	7ff00000 	.word	0x7ff00000
 801bfd4:	20000290 	.word	0x20000290

0801bfd8 <sqrt>:
 801bfd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bfdc:	ed2d 8b02 	vpush	{d8}
 801bfe0:	b08b      	sub	sp, #44	; 0x2c
 801bfe2:	ec55 4b10 	vmov	r4, r5, d0
 801bfe6:	f000 fe41 	bl	801cc6c <__ieee754_sqrt>
 801bfea:	4b26      	ldr	r3, [pc, #152]	; (801c084 <sqrt+0xac>)
 801bfec:	eeb0 8a40 	vmov.f32	s16, s0
 801bff0:	eef0 8a60 	vmov.f32	s17, s1
 801bff4:	f993 6000 	ldrsb.w	r6, [r3]
 801bff8:	1c73      	adds	r3, r6, #1
 801bffa:	d02a      	beq.n	801c052 <sqrt+0x7a>
 801bffc:	4622      	mov	r2, r4
 801bffe:	462b      	mov	r3, r5
 801c000:	4620      	mov	r0, r4
 801c002:	4629      	mov	r1, r5
 801c004:	f7e4 fd92 	bl	8000b2c <__aeabi_dcmpun>
 801c008:	4607      	mov	r7, r0
 801c00a:	bb10      	cbnz	r0, 801c052 <sqrt+0x7a>
 801c00c:	f04f 0800 	mov.w	r8, #0
 801c010:	f04f 0900 	mov.w	r9, #0
 801c014:	4642      	mov	r2, r8
 801c016:	464b      	mov	r3, r9
 801c018:	4620      	mov	r0, r4
 801c01a:	4629      	mov	r1, r5
 801c01c:	f7e4 fd5e 	bl	8000adc <__aeabi_dcmplt>
 801c020:	b1b8      	cbz	r0, 801c052 <sqrt+0x7a>
 801c022:	2301      	movs	r3, #1
 801c024:	9300      	str	r3, [sp, #0]
 801c026:	4b18      	ldr	r3, [pc, #96]	; (801c088 <sqrt+0xb0>)
 801c028:	9301      	str	r3, [sp, #4]
 801c02a:	9708      	str	r7, [sp, #32]
 801c02c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801c030:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c034:	b9b6      	cbnz	r6, 801c064 <sqrt+0x8c>
 801c036:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801c03a:	4668      	mov	r0, sp
 801c03c:	f000 fece 	bl	801cddc <matherr>
 801c040:	b1d0      	cbz	r0, 801c078 <sqrt+0xa0>
 801c042:	9b08      	ldr	r3, [sp, #32]
 801c044:	b11b      	cbz	r3, 801c04e <sqrt+0x76>
 801c046:	f000 ffdd 	bl	801d004 <__errno>
 801c04a:	9b08      	ldr	r3, [sp, #32]
 801c04c:	6003      	str	r3, [r0, #0]
 801c04e:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c052:	eeb0 0a48 	vmov.f32	s0, s16
 801c056:	eef0 0a68 	vmov.f32	s1, s17
 801c05a:	b00b      	add	sp, #44	; 0x2c
 801c05c:	ecbd 8b02 	vpop	{d8}
 801c060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c064:	4642      	mov	r2, r8
 801c066:	464b      	mov	r3, r9
 801c068:	4640      	mov	r0, r8
 801c06a:	4649      	mov	r1, r9
 801c06c:	f7e4 fbee 	bl	800084c <__aeabi_ddiv>
 801c070:	2e02      	cmp	r6, #2
 801c072:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c076:	d1e0      	bne.n	801c03a <sqrt+0x62>
 801c078:	f000 ffc4 	bl	801d004 <__errno>
 801c07c:	2321      	movs	r3, #33	; 0x21
 801c07e:	6003      	str	r3, [r0, #0]
 801c080:	e7df      	b.n	801c042 <sqrt+0x6a>
 801c082:	bf00      	nop
 801c084:	20000290 	.word	0x20000290
 801c088:	08021354 	.word	0x08021354
 801c08c:	00000000 	.word	0x00000000

0801c090 <__ieee754_atan2>:
 801c090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c094:	ec57 6b11 	vmov	r6, r7, d1
 801c098:	4273      	negs	r3, r6
 801c09a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801c09e:	4333      	orrs	r3, r6
 801c0a0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801c248 <__ieee754_atan2+0x1b8>
 801c0a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801c0a8:	4573      	cmp	r3, lr
 801c0aa:	ec51 0b10 	vmov	r0, r1, d0
 801c0ae:	ee11 8a10 	vmov	r8, s2
 801c0b2:	d80a      	bhi.n	801c0ca <__ieee754_atan2+0x3a>
 801c0b4:	4244      	negs	r4, r0
 801c0b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c0ba:	4304      	orrs	r4, r0
 801c0bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801c0c0:	4574      	cmp	r4, lr
 801c0c2:	468c      	mov	ip, r1
 801c0c4:	ee10 9a10 	vmov	r9, s0
 801c0c8:	d907      	bls.n	801c0da <__ieee754_atan2+0x4a>
 801c0ca:	4632      	mov	r2, r6
 801c0cc:	463b      	mov	r3, r7
 801c0ce:	f7e4 f8dd 	bl	800028c <__adddf3>
 801c0d2:	ec41 0b10 	vmov	d0, r0, r1
 801c0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c0da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801c0de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c0e2:	4334      	orrs	r4, r6
 801c0e4:	d103      	bne.n	801c0ee <__ieee754_atan2+0x5e>
 801c0e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0ea:	f7ff bc59 	b.w	801b9a0 <atan>
 801c0ee:	17bc      	asrs	r4, r7, #30
 801c0f0:	f004 0402 	and.w	r4, r4, #2
 801c0f4:	ea53 0909 	orrs.w	r9, r3, r9
 801c0f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801c0fc:	d107      	bne.n	801c10e <__ieee754_atan2+0x7e>
 801c0fe:	2c02      	cmp	r4, #2
 801c100:	d073      	beq.n	801c1ea <__ieee754_atan2+0x15a>
 801c102:	2c03      	cmp	r4, #3
 801c104:	d1e5      	bne.n	801c0d2 <__ieee754_atan2+0x42>
 801c106:	a13e      	add	r1, pc, #248	; (adr r1, 801c200 <__ieee754_atan2+0x170>)
 801c108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c10c:	e7e1      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c10e:	ea52 0808 	orrs.w	r8, r2, r8
 801c112:	d106      	bne.n	801c122 <__ieee754_atan2+0x92>
 801c114:	f1bc 0f00 	cmp.w	ip, #0
 801c118:	da6b      	bge.n	801c1f2 <__ieee754_atan2+0x162>
 801c11a:	a13b      	add	r1, pc, #236	; (adr r1, 801c208 <__ieee754_atan2+0x178>)
 801c11c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c120:	e7d7      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c122:	4572      	cmp	r2, lr
 801c124:	d120      	bne.n	801c168 <__ieee754_atan2+0xd8>
 801c126:	4293      	cmp	r3, r2
 801c128:	d111      	bne.n	801c14e <__ieee754_atan2+0xbe>
 801c12a:	2c02      	cmp	r4, #2
 801c12c:	d007      	beq.n	801c13e <__ieee754_atan2+0xae>
 801c12e:	2c03      	cmp	r4, #3
 801c130:	d009      	beq.n	801c146 <__ieee754_atan2+0xb6>
 801c132:	2c01      	cmp	r4, #1
 801c134:	d155      	bne.n	801c1e2 <__ieee754_atan2+0x152>
 801c136:	a136      	add	r1, pc, #216	; (adr r1, 801c210 <__ieee754_atan2+0x180>)
 801c138:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c13c:	e7c9      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c13e:	a136      	add	r1, pc, #216	; (adr r1, 801c218 <__ieee754_atan2+0x188>)
 801c140:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c144:	e7c5      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c146:	a136      	add	r1, pc, #216	; (adr r1, 801c220 <__ieee754_atan2+0x190>)
 801c148:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c14c:	e7c1      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c14e:	2c02      	cmp	r4, #2
 801c150:	d04b      	beq.n	801c1ea <__ieee754_atan2+0x15a>
 801c152:	2c03      	cmp	r4, #3
 801c154:	d0d7      	beq.n	801c106 <__ieee754_atan2+0x76>
 801c156:	2c01      	cmp	r4, #1
 801c158:	f04f 0000 	mov.w	r0, #0
 801c15c:	d102      	bne.n	801c164 <__ieee754_atan2+0xd4>
 801c15e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801c162:	e7b6      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c164:	2100      	movs	r1, #0
 801c166:	e7b4      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c168:	4573      	cmp	r3, lr
 801c16a:	d0d3      	beq.n	801c114 <__ieee754_atan2+0x84>
 801c16c:	1a9b      	subs	r3, r3, r2
 801c16e:	151b      	asrs	r3, r3, #20
 801c170:	2b3c      	cmp	r3, #60	; 0x3c
 801c172:	dc1e      	bgt.n	801c1b2 <__ieee754_atan2+0x122>
 801c174:	2f00      	cmp	r7, #0
 801c176:	da01      	bge.n	801c17c <__ieee754_atan2+0xec>
 801c178:	333c      	adds	r3, #60	; 0x3c
 801c17a:	db1e      	blt.n	801c1ba <__ieee754_atan2+0x12a>
 801c17c:	4632      	mov	r2, r6
 801c17e:	463b      	mov	r3, r7
 801c180:	f7e4 fb64 	bl	800084c <__aeabi_ddiv>
 801c184:	ec41 0b10 	vmov	d0, r0, r1
 801c188:	f7ff fdaa 	bl	801bce0 <fabs>
 801c18c:	f7ff fc08 	bl	801b9a0 <atan>
 801c190:	ec51 0b10 	vmov	r0, r1, d0
 801c194:	2c01      	cmp	r4, #1
 801c196:	d013      	beq.n	801c1c0 <__ieee754_atan2+0x130>
 801c198:	2c02      	cmp	r4, #2
 801c19a:	d015      	beq.n	801c1c8 <__ieee754_atan2+0x138>
 801c19c:	2c00      	cmp	r4, #0
 801c19e:	d098      	beq.n	801c0d2 <__ieee754_atan2+0x42>
 801c1a0:	a321      	add	r3, pc, #132	; (adr r3, 801c228 <__ieee754_atan2+0x198>)
 801c1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1a6:	f7e4 f86f 	bl	8000288 <__aeabi_dsub>
 801c1aa:	a321      	add	r3, pc, #132	; (adr r3, 801c230 <__ieee754_atan2+0x1a0>)
 801c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1b0:	e014      	b.n	801c1dc <__ieee754_atan2+0x14c>
 801c1b2:	a121      	add	r1, pc, #132	; (adr r1, 801c238 <__ieee754_atan2+0x1a8>)
 801c1b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c1b8:	e7ec      	b.n	801c194 <__ieee754_atan2+0x104>
 801c1ba:	2000      	movs	r0, #0
 801c1bc:	2100      	movs	r1, #0
 801c1be:	e7e9      	b.n	801c194 <__ieee754_atan2+0x104>
 801c1c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c1c4:	4619      	mov	r1, r3
 801c1c6:	e784      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c1c8:	a317      	add	r3, pc, #92	; (adr r3, 801c228 <__ieee754_atan2+0x198>)
 801c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ce:	f7e4 f85b 	bl	8000288 <__aeabi_dsub>
 801c1d2:	4602      	mov	r2, r0
 801c1d4:	460b      	mov	r3, r1
 801c1d6:	a116      	add	r1, pc, #88	; (adr r1, 801c230 <__ieee754_atan2+0x1a0>)
 801c1d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c1dc:	f7e4 f854 	bl	8000288 <__aeabi_dsub>
 801c1e0:	e777      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c1e2:	a117      	add	r1, pc, #92	; (adr r1, 801c240 <__ieee754_atan2+0x1b0>)
 801c1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c1e8:	e773      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c1ea:	a111      	add	r1, pc, #68	; (adr r1, 801c230 <__ieee754_atan2+0x1a0>)
 801c1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c1f0:	e76f      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c1f2:	a111      	add	r1, pc, #68	; (adr r1, 801c238 <__ieee754_atan2+0x1a8>)
 801c1f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c1f8:	e76b      	b.n	801c0d2 <__ieee754_atan2+0x42>
 801c1fa:	bf00      	nop
 801c1fc:	f3af 8000 	nop.w
 801c200:	54442d18 	.word	0x54442d18
 801c204:	c00921fb 	.word	0xc00921fb
 801c208:	54442d18 	.word	0x54442d18
 801c20c:	bff921fb 	.word	0xbff921fb
 801c210:	54442d18 	.word	0x54442d18
 801c214:	bfe921fb 	.word	0xbfe921fb
 801c218:	7f3321d2 	.word	0x7f3321d2
 801c21c:	4002d97c 	.word	0x4002d97c
 801c220:	7f3321d2 	.word	0x7f3321d2
 801c224:	c002d97c 	.word	0xc002d97c
 801c228:	33145c07 	.word	0x33145c07
 801c22c:	3ca1a626 	.word	0x3ca1a626
 801c230:	54442d18 	.word	0x54442d18
 801c234:	400921fb 	.word	0x400921fb
 801c238:	54442d18 	.word	0x54442d18
 801c23c:	3ff921fb 	.word	0x3ff921fb
 801c240:	54442d18 	.word	0x54442d18
 801c244:	3fe921fb 	.word	0x3fe921fb
 801c248:	7ff00000 	.word	0x7ff00000
 801c24c:	00000000 	.word	0x00000000

0801c250 <__ieee754_pow>:
 801c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c254:	b091      	sub	sp, #68	; 0x44
 801c256:	ed8d 1b00 	vstr	d1, [sp]
 801c25a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801c25e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801c262:	ea58 0302 	orrs.w	r3, r8, r2
 801c266:	ec57 6b10 	vmov	r6, r7, d0
 801c26a:	f000 84be 	beq.w	801cbea <__ieee754_pow+0x99a>
 801c26e:	4b7a      	ldr	r3, [pc, #488]	; (801c458 <__ieee754_pow+0x208>)
 801c270:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801c274:	429c      	cmp	r4, r3
 801c276:	463d      	mov	r5, r7
 801c278:	ee10 aa10 	vmov	sl, s0
 801c27c:	dc09      	bgt.n	801c292 <__ieee754_pow+0x42>
 801c27e:	d103      	bne.n	801c288 <__ieee754_pow+0x38>
 801c280:	b93e      	cbnz	r6, 801c292 <__ieee754_pow+0x42>
 801c282:	45a0      	cmp	r8, r4
 801c284:	dc0d      	bgt.n	801c2a2 <__ieee754_pow+0x52>
 801c286:	e001      	b.n	801c28c <__ieee754_pow+0x3c>
 801c288:	4598      	cmp	r8, r3
 801c28a:	dc02      	bgt.n	801c292 <__ieee754_pow+0x42>
 801c28c:	4598      	cmp	r8, r3
 801c28e:	d10e      	bne.n	801c2ae <__ieee754_pow+0x5e>
 801c290:	b16a      	cbz	r2, 801c2ae <__ieee754_pow+0x5e>
 801c292:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c296:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c29a:	ea54 030a 	orrs.w	r3, r4, sl
 801c29e:	f000 84a4 	beq.w	801cbea <__ieee754_pow+0x99a>
 801c2a2:	486e      	ldr	r0, [pc, #440]	; (801c45c <__ieee754_pow+0x20c>)
 801c2a4:	b011      	add	sp, #68	; 0x44
 801c2a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2aa:	f000 bd99 	b.w	801cde0 <nan>
 801c2ae:	2d00      	cmp	r5, #0
 801c2b0:	da53      	bge.n	801c35a <__ieee754_pow+0x10a>
 801c2b2:	4b6b      	ldr	r3, [pc, #428]	; (801c460 <__ieee754_pow+0x210>)
 801c2b4:	4598      	cmp	r8, r3
 801c2b6:	dc4d      	bgt.n	801c354 <__ieee754_pow+0x104>
 801c2b8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801c2bc:	4598      	cmp	r8, r3
 801c2be:	dd4c      	ble.n	801c35a <__ieee754_pow+0x10a>
 801c2c0:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c2c4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c2c8:	2b14      	cmp	r3, #20
 801c2ca:	dd26      	ble.n	801c31a <__ieee754_pow+0xca>
 801c2cc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c2d0:	fa22 f103 	lsr.w	r1, r2, r3
 801c2d4:	fa01 f303 	lsl.w	r3, r1, r3
 801c2d8:	4293      	cmp	r3, r2
 801c2da:	d13e      	bne.n	801c35a <__ieee754_pow+0x10a>
 801c2dc:	f001 0101 	and.w	r1, r1, #1
 801c2e0:	f1c1 0b02 	rsb	fp, r1, #2
 801c2e4:	2a00      	cmp	r2, #0
 801c2e6:	d15b      	bne.n	801c3a0 <__ieee754_pow+0x150>
 801c2e8:	4b5b      	ldr	r3, [pc, #364]	; (801c458 <__ieee754_pow+0x208>)
 801c2ea:	4598      	cmp	r8, r3
 801c2ec:	d124      	bne.n	801c338 <__ieee754_pow+0xe8>
 801c2ee:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801c2f2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c2f6:	ea53 030a 	orrs.w	r3, r3, sl
 801c2fa:	f000 8476 	beq.w	801cbea <__ieee754_pow+0x99a>
 801c2fe:	4b59      	ldr	r3, [pc, #356]	; (801c464 <__ieee754_pow+0x214>)
 801c300:	429c      	cmp	r4, r3
 801c302:	dd2d      	ble.n	801c360 <__ieee754_pow+0x110>
 801c304:	f1b9 0f00 	cmp.w	r9, #0
 801c308:	f280 8473 	bge.w	801cbf2 <__ieee754_pow+0x9a2>
 801c30c:	2000      	movs	r0, #0
 801c30e:	2100      	movs	r1, #0
 801c310:	ec41 0b10 	vmov	d0, r0, r1
 801c314:	b011      	add	sp, #68	; 0x44
 801c316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c31a:	2a00      	cmp	r2, #0
 801c31c:	d13e      	bne.n	801c39c <__ieee754_pow+0x14c>
 801c31e:	f1c3 0314 	rsb	r3, r3, #20
 801c322:	fa48 f103 	asr.w	r1, r8, r3
 801c326:	fa01 f303 	lsl.w	r3, r1, r3
 801c32a:	4543      	cmp	r3, r8
 801c32c:	f040 8469 	bne.w	801cc02 <__ieee754_pow+0x9b2>
 801c330:	f001 0101 	and.w	r1, r1, #1
 801c334:	f1c1 0b02 	rsb	fp, r1, #2
 801c338:	4b4b      	ldr	r3, [pc, #300]	; (801c468 <__ieee754_pow+0x218>)
 801c33a:	4598      	cmp	r8, r3
 801c33c:	d118      	bne.n	801c370 <__ieee754_pow+0x120>
 801c33e:	f1b9 0f00 	cmp.w	r9, #0
 801c342:	f280 845a 	bge.w	801cbfa <__ieee754_pow+0x9aa>
 801c346:	4948      	ldr	r1, [pc, #288]	; (801c468 <__ieee754_pow+0x218>)
 801c348:	4632      	mov	r2, r6
 801c34a:	463b      	mov	r3, r7
 801c34c:	2000      	movs	r0, #0
 801c34e:	f7e4 fa7d 	bl	800084c <__aeabi_ddiv>
 801c352:	e7dd      	b.n	801c310 <__ieee754_pow+0xc0>
 801c354:	f04f 0b02 	mov.w	fp, #2
 801c358:	e7c4      	b.n	801c2e4 <__ieee754_pow+0x94>
 801c35a:	f04f 0b00 	mov.w	fp, #0
 801c35e:	e7c1      	b.n	801c2e4 <__ieee754_pow+0x94>
 801c360:	f1b9 0f00 	cmp.w	r9, #0
 801c364:	dad2      	bge.n	801c30c <__ieee754_pow+0xbc>
 801c366:	e9dd 0300 	ldrd	r0, r3, [sp]
 801c36a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c36e:	e7cf      	b.n	801c310 <__ieee754_pow+0xc0>
 801c370:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801c374:	d106      	bne.n	801c384 <__ieee754_pow+0x134>
 801c376:	4632      	mov	r2, r6
 801c378:	463b      	mov	r3, r7
 801c37a:	4610      	mov	r0, r2
 801c37c:	4619      	mov	r1, r3
 801c37e:	f7e4 f93b 	bl	80005f8 <__aeabi_dmul>
 801c382:	e7c5      	b.n	801c310 <__ieee754_pow+0xc0>
 801c384:	4b39      	ldr	r3, [pc, #228]	; (801c46c <__ieee754_pow+0x21c>)
 801c386:	4599      	cmp	r9, r3
 801c388:	d10a      	bne.n	801c3a0 <__ieee754_pow+0x150>
 801c38a:	2d00      	cmp	r5, #0
 801c38c:	db08      	blt.n	801c3a0 <__ieee754_pow+0x150>
 801c38e:	ec47 6b10 	vmov	d0, r6, r7
 801c392:	b011      	add	sp, #68	; 0x44
 801c394:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c398:	f000 bc68 	b.w	801cc6c <__ieee754_sqrt>
 801c39c:	f04f 0b00 	mov.w	fp, #0
 801c3a0:	ec47 6b10 	vmov	d0, r6, r7
 801c3a4:	f7ff fc9c 	bl	801bce0 <fabs>
 801c3a8:	ec51 0b10 	vmov	r0, r1, d0
 801c3ac:	f1ba 0f00 	cmp.w	sl, #0
 801c3b0:	d127      	bne.n	801c402 <__ieee754_pow+0x1b2>
 801c3b2:	b124      	cbz	r4, 801c3be <__ieee754_pow+0x16e>
 801c3b4:	4b2c      	ldr	r3, [pc, #176]	; (801c468 <__ieee754_pow+0x218>)
 801c3b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801c3ba:	429a      	cmp	r2, r3
 801c3bc:	d121      	bne.n	801c402 <__ieee754_pow+0x1b2>
 801c3be:	f1b9 0f00 	cmp.w	r9, #0
 801c3c2:	da05      	bge.n	801c3d0 <__ieee754_pow+0x180>
 801c3c4:	4602      	mov	r2, r0
 801c3c6:	460b      	mov	r3, r1
 801c3c8:	2000      	movs	r0, #0
 801c3ca:	4927      	ldr	r1, [pc, #156]	; (801c468 <__ieee754_pow+0x218>)
 801c3cc:	f7e4 fa3e 	bl	800084c <__aeabi_ddiv>
 801c3d0:	2d00      	cmp	r5, #0
 801c3d2:	da9d      	bge.n	801c310 <__ieee754_pow+0xc0>
 801c3d4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c3d8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c3dc:	ea54 030b 	orrs.w	r3, r4, fp
 801c3e0:	d108      	bne.n	801c3f4 <__ieee754_pow+0x1a4>
 801c3e2:	4602      	mov	r2, r0
 801c3e4:	460b      	mov	r3, r1
 801c3e6:	4610      	mov	r0, r2
 801c3e8:	4619      	mov	r1, r3
 801c3ea:	f7e3 ff4d 	bl	8000288 <__aeabi_dsub>
 801c3ee:	4602      	mov	r2, r0
 801c3f0:	460b      	mov	r3, r1
 801c3f2:	e7ac      	b.n	801c34e <__ieee754_pow+0xfe>
 801c3f4:	f1bb 0f01 	cmp.w	fp, #1
 801c3f8:	d18a      	bne.n	801c310 <__ieee754_pow+0xc0>
 801c3fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c3fe:	4619      	mov	r1, r3
 801c400:	e786      	b.n	801c310 <__ieee754_pow+0xc0>
 801c402:	0fed      	lsrs	r5, r5, #31
 801c404:	1e6b      	subs	r3, r5, #1
 801c406:	930d      	str	r3, [sp, #52]	; 0x34
 801c408:	ea5b 0303 	orrs.w	r3, fp, r3
 801c40c:	d102      	bne.n	801c414 <__ieee754_pow+0x1c4>
 801c40e:	4632      	mov	r2, r6
 801c410:	463b      	mov	r3, r7
 801c412:	e7e8      	b.n	801c3e6 <__ieee754_pow+0x196>
 801c414:	4b16      	ldr	r3, [pc, #88]	; (801c470 <__ieee754_pow+0x220>)
 801c416:	4598      	cmp	r8, r3
 801c418:	f340 80fe 	ble.w	801c618 <__ieee754_pow+0x3c8>
 801c41c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801c420:	4598      	cmp	r8, r3
 801c422:	dd0a      	ble.n	801c43a <__ieee754_pow+0x1ea>
 801c424:	4b0f      	ldr	r3, [pc, #60]	; (801c464 <__ieee754_pow+0x214>)
 801c426:	429c      	cmp	r4, r3
 801c428:	dc0d      	bgt.n	801c446 <__ieee754_pow+0x1f6>
 801c42a:	f1b9 0f00 	cmp.w	r9, #0
 801c42e:	f6bf af6d 	bge.w	801c30c <__ieee754_pow+0xbc>
 801c432:	a307      	add	r3, pc, #28	; (adr r3, 801c450 <__ieee754_pow+0x200>)
 801c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c438:	e79f      	b.n	801c37a <__ieee754_pow+0x12a>
 801c43a:	4b0e      	ldr	r3, [pc, #56]	; (801c474 <__ieee754_pow+0x224>)
 801c43c:	429c      	cmp	r4, r3
 801c43e:	ddf4      	ble.n	801c42a <__ieee754_pow+0x1da>
 801c440:	4b09      	ldr	r3, [pc, #36]	; (801c468 <__ieee754_pow+0x218>)
 801c442:	429c      	cmp	r4, r3
 801c444:	dd18      	ble.n	801c478 <__ieee754_pow+0x228>
 801c446:	f1b9 0f00 	cmp.w	r9, #0
 801c44a:	dcf2      	bgt.n	801c432 <__ieee754_pow+0x1e2>
 801c44c:	e75e      	b.n	801c30c <__ieee754_pow+0xbc>
 801c44e:	bf00      	nop
 801c450:	8800759c 	.word	0x8800759c
 801c454:	7e37e43c 	.word	0x7e37e43c
 801c458:	7ff00000 	.word	0x7ff00000
 801c45c:	08021301 	.word	0x08021301
 801c460:	433fffff 	.word	0x433fffff
 801c464:	3fefffff 	.word	0x3fefffff
 801c468:	3ff00000 	.word	0x3ff00000
 801c46c:	3fe00000 	.word	0x3fe00000
 801c470:	41e00000 	.word	0x41e00000
 801c474:	3feffffe 	.word	0x3feffffe
 801c478:	2200      	movs	r2, #0
 801c47a:	4b63      	ldr	r3, [pc, #396]	; (801c608 <__ieee754_pow+0x3b8>)
 801c47c:	f7e3 ff04 	bl	8000288 <__aeabi_dsub>
 801c480:	a355      	add	r3, pc, #340	; (adr r3, 801c5d8 <__ieee754_pow+0x388>)
 801c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c486:	4604      	mov	r4, r0
 801c488:	460d      	mov	r5, r1
 801c48a:	f7e4 f8b5 	bl	80005f8 <__aeabi_dmul>
 801c48e:	a354      	add	r3, pc, #336	; (adr r3, 801c5e0 <__ieee754_pow+0x390>)
 801c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c494:	4606      	mov	r6, r0
 801c496:	460f      	mov	r7, r1
 801c498:	4620      	mov	r0, r4
 801c49a:	4629      	mov	r1, r5
 801c49c:	f7e4 f8ac 	bl	80005f8 <__aeabi_dmul>
 801c4a0:	2200      	movs	r2, #0
 801c4a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c4a6:	4b59      	ldr	r3, [pc, #356]	; (801c60c <__ieee754_pow+0x3bc>)
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	4629      	mov	r1, r5
 801c4ac:	f7e4 f8a4 	bl	80005f8 <__aeabi_dmul>
 801c4b0:	4602      	mov	r2, r0
 801c4b2:	460b      	mov	r3, r1
 801c4b4:	a14c      	add	r1, pc, #304	; (adr r1, 801c5e8 <__ieee754_pow+0x398>)
 801c4b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4ba:	f7e3 fee5 	bl	8000288 <__aeabi_dsub>
 801c4be:	4622      	mov	r2, r4
 801c4c0:	462b      	mov	r3, r5
 801c4c2:	f7e4 f899 	bl	80005f8 <__aeabi_dmul>
 801c4c6:	4602      	mov	r2, r0
 801c4c8:	460b      	mov	r3, r1
 801c4ca:	2000      	movs	r0, #0
 801c4cc:	4950      	ldr	r1, [pc, #320]	; (801c610 <__ieee754_pow+0x3c0>)
 801c4ce:	f7e3 fedb 	bl	8000288 <__aeabi_dsub>
 801c4d2:	4622      	mov	r2, r4
 801c4d4:	462b      	mov	r3, r5
 801c4d6:	4680      	mov	r8, r0
 801c4d8:	4689      	mov	r9, r1
 801c4da:	4620      	mov	r0, r4
 801c4dc:	4629      	mov	r1, r5
 801c4de:	f7e4 f88b 	bl	80005f8 <__aeabi_dmul>
 801c4e2:	4602      	mov	r2, r0
 801c4e4:	460b      	mov	r3, r1
 801c4e6:	4640      	mov	r0, r8
 801c4e8:	4649      	mov	r1, r9
 801c4ea:	f7e4 f885 	bl	80005f8 <__aeabi_dmul>
 801c4ee:	a340      	add	r3, pc, #256	; (adr r3, 801c5f0 <__ieee754_pow+0x3a0>)
 801c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4f4:	f7e4 f880 	bl	80005f8 <__aeabi_dmul>
 801c4f8:	4602      	mov	r2, r0
 801c4fa:	460b      	mov	r3, r1
 801c4fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c500:	f7e3 fec2 	bl	8000288 <__aeabi_dsub>
 801c504:	4602      	mov	r2, r0
 801c506:	460b      	mov	r3, r1
 801c508:	4604      	mov	r4, r0
 801c50a:	460d      	mov	r5, r1
 801c50c:	4630      	mov	r0, r6
 801c50e:	4639      	mov	r1, r7
 801c510:	f7e3 febc 	bl	800028c <__adddf3>
 801c514:	2000      	movs	r0, #0
 801c516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c51a:	4632      	mov	r2, r6
 801c51c:	463b      	mov	r3, r7
 801c51e:	f7e3 feb3 	bl	8000288 <__aeabi_dsub>
 801c522:	4602      	mov	r2, r0
 801c524:	460b      	mov	r3, r1
 801c526:	4620      	mov	r0, r4
 801c528:	4629      	mov	r1, r5
 801c52a:	f7e3 fead 	bl	8000288 <__aeabi_dsub>
 801c52e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c530:	f10b 33ff 	add.w	r3, fp, #4294967295
 801c534:	4313      	orrs	r3, r2
 801c536:	4606      	mov	r6, r0
 801c538:	460f      	mov	r7, r1
 801c53a:	f040 81eb 	bne.w	801c914 <__ieee754_pow+0x6c4>
 801c53e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801c5f8 <__ieee754_pow+0x3a8>
 801c542:	e9dd 4500 	ldrd	r4, r5, [sp]
 801c546:	2400      	movs	r4, #0
 801c548:	4622      	mov	r2, r4
 801c54a:	462b      	mov	r3, r5
 801c54c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c550:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c554:	f7e3 fe98 	bl	8000288 <__aeabi_dsub>
 801c558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c55c:	f7e4 f84c 	bl	80005f8 <__aeabi_dmul>
 801c560:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c564:	4680      	mov	r8, r0
 801c566:	4689      	mov	r9, r1
 801c568:	4630      	mov	r0, r6
 801c56a:	4639      	mov	r1, r7
 801c56c:	f7e4 f844 	bl	80005f8 <__aeabi_dmul>
 801c570:	4602      	mov	r2, r0
 801c572:	460b      	mov	r3, r1
 801c574:	4640      	mov	r0, r8
 801c576:	4649      	mov	r1, r9
 801c578:	f7e3 fe88 	bl	800028c <__adddf3>
 801c57c:	4622      	mov	r2, r4
 801c57e:	462b      	mov	r3, r5
 801c580:	4680      	mov	r8, r0
 801c582:	4689      	mov	r9, r1
 801c584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c588:	f7e4 f836 	bl	80005f8 <__aeabi_dmul>
 801c58c:	460b      	mov	r3, r1
 801c58e:	4604      	mov	r4, r0
 801c590:	460d      	mov	r5, r1
 801c592:	4602      	mov	r2, r0
 801c594:	4649      	mov	r1, r9
 801c596:	4640      	mov	r0, r8
 801c598:	e9cd 4500 	strd	r4, r5, [sp]
 801c59c:	f7e3 fe76 	bl	800028c <__adddf3>
 801c5a0:	4b1c      	ldr	r3, [pc, #112]	; (801c614 <__ieee754_pow+0x3c4>)
 801c5a2:	4299      	cmp	r1, r3
 801c5a4:	4606      	mov	r6, r0
 801c5a6:	460f      	mov	r7, r1
 801c5a8:	468b      	mov	fp, r1
 801c5aa:	f340 82f7 	ble.w	801cb9c <__ieee754_pow+0x94c>
 801c5ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801c5b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801c5b6:	4303      	orrs	r3, r0
 801c5b8:	f000 81ea 	beq.w	801c990 <__ieee754_pow+0x740>
 801c5bc:	a310      	add	r3, pc, #64	; (adr r3, 801c600 <__ieee754_pow+0x3b0>)
 801c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c5c6:	f7e4 f817 	bl	80005f8 <__aeabi_dmul>
 801c5ca:	a30d      	add	r3, pc, #52	; (adr r3, 801c600 <__ieee754_pow+0x3b0>)
 801c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5d0:	e6d5      	b.n	801c37e <__ieee754_pow+0x12e>
 801c5d2:	bf00      	nop
 801c5d4:	f3af 8000 	nop.w
 801c5d8:	60000000 	.word	0x60000000
 801c5dc:	3ff71547 	.word	0x3ff71547
 801c5e0:	f85ddf44 	.word	0xf85ddf44
 801c5e4:	3e54ae0b 	.word	0x3e54ae0b
 801c5e8:	55555555 	.word	0x55555555
 801c5ec:	3fd55555 	.word	0x3fd55555
 801c5f0:	652b82fe 	.word	0x652b82fe
 801c5f4:	3ff71547 	.word	0x3ff71547
 801c5f8:	00000000 	.word	0x00000000
 801c5fc:	bff00000 	.word	0xbff00000
 801c600:	8800759c 	.word	0x8800759c
 801c604:	7e37e43c 	.word	0x7e37e43c
 801c608:	3ff00000 	.word	0x3ff00000
 801c60c:	3fd00000 	.word	0x3fd00000
 801c610:	3fe00000 	.word	0x3fe00000
 801c614:	408fffff 	.word	0x408fffff
 801c618:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801c61c:	f04f 0200 	mov.w	r2, #0
 801c620:	da05      	bge.n	801c62e <__ieee754_pow+0x3de>
 801c622:	4bd3      	ldr	r3, [pc, #844]	; (801c970 <__ieee754_pow+0x720>)
 801c624:	f7e3 ffe8 	bl	80005f8 <__aeabi_dmul>
 801c628:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801c62c:	460c      	mov	r4, r1
 801c62e:	1523      	asrs	r3, r4, #20
 801c630:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c634:	4413      	add	r3, r2
 801c636:	9309      	str	r3, [sp, #36]	; 0x24
 801c638:	4bce      	ldr	r3, [pc, #824]	; (801c974 <__ieee754_pow+0x724>)
 801c63a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c63e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801c642:	429c      	cmp	r4, r3
 801c644:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c648:	dd08      	ble.n	801c65c <__ieee754_pow+0x40c>
 801c64a:	4bcb      	ldr	r3, [pc, #812]	; (801c978 <__ieee754_pow+0x728>)
 801c64c:	429c      	cmp	r4, r3
 801c64e:	f340 815e 	ble.w	801c90e <__ieee754_pow+0x6be>
 801c652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c654:	3301      	adds	r3, #1
 801c656:	9309      	str	r3, [sp, #36]	; 0x24
 801c658:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801c65c:	f04f 0a00 	mov.w	sl, #0
 801c660:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801c664:	930c      	str	r3, [sp, #48]	; 0x30
 801c666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c668:	4bc4      	ldr	r3, [pc, #784]	; (801c97c <__ieee754_pow+0x72c>)
 801c66a:	4413      	add	r3, r2
 801c66c:	ed93 7b00 	vldr	d7, [r3]
 801c670:	4629      	mov	r1, r5
 801c672:	ec53 2b17 	vmov	r2, r3, d7
 801c676:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c67a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c67e:	f7e3 fe03 	bl	8000288 <__aeabi_dsub>
 801c682:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c686:	4606      	mov	r6, r0
 801c688:	460f      	mov	r7, r1
 801c68a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c68e:	f7e3 fdfd 	bl	800028c <__adddf3>
 801c692:	4602      	mov	r2, r0
 801c694:	460b      	mov	r3, r1
 801c696:	2000      	movs	r0, #0
 801c698:	49b9      	ldr	r1, [pc, #740]	; (801c980 <__ieee754_pow+0x730>)
 801c69a:	f7e4 f8d7 	bl	800084c <__aeabi_ddiv>
 801c69e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801c6a2:	4602      	mov	r2, r0
 801c6a4:	460b      	mov	r3, r1
 801c6a6:	4630      	mov	r0, r6
 801c6a8:	4639      	mov	r1, r7
 801c6aa:	f7e3 ffa5 	bl	80005f8 <__aeabi_dmul>
 801c6ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c6b2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801c6b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801c6ba:	2300      	movs	r3, #0
 801c6bc:	9302      	str	r3, [sp, #8]
 801c6be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c6c2:	106d      	asrs	r5, r5, #1
 801c6c4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801c6c8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801c6cc:	2200      	movs	r2, #0
 801c6ce:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801c6d2:	4640      	mov	r0, r8
 801c6d4:	4649      	mov	r1, r9
 801c6d6:	4614      	mov	r4, r2
 801c6d8:	461d      	mov	r5, r3
 801c6da:	f7e3 ff8d 	bl	80005f8 <__aeabi_dmul>
 801c6de:	4602      	mov	r2, r0
 801c6e0:	460b      	mov	r3, r1
 801c6e2:	4630      	mov	r0, r6
 801c6e4:	4639      	mov	r1, r7
 801c6e6:	f7e3 fdcf 	bl	8000288 <__aeabi_dsub>
 801c6ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c6ee:	4606      	mov	r6, r0
 801c6f0:	460f      	mov	r7, r1
 801c6f2:	4620      	mov	r0, r4
 801c6f4:	4629      	mov	r1, r5
 801c6f6:	f7e3 fdc7 	bl	8000288 <__aeabi_dsub>
 801c6fa:	4602      	mov	r2, r0
 801c6fc:	460b      	mov	r3, r1
 801c6fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c702:	f7e3 fdc1 	bl	8000288 <__aeabi_dsub>
 801c706:	4642      	mov	r2, r8
 801c708:	464b      	mov	r3, r9
 801c70a:	f7e3 ff75 	bl	80005f8 <__aeabi_dmul>
 801c70e:	4602      	mov	r2, r0
 801c710:	460b      	mov	r3, r1
 801c712:	4630      	mov	r0, r6
 801c714:	4639      	mov	r1, r7
 801c716:	f7e3 fdb7 	bl	8000288 <__aeabi_dsub>
 801c71a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801c71e:	f7e3 ff6b 	bl	80005f8 <__aeabi_dmul>
 801c722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c726:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c72a:	4610      	mov	r0, r2
 801c72c:	4619      	mov	r1, r3
 801c72e:	f7e3 ff63 	bl	80005f8 <__aeabi_dmul>
 801c732:	a37b      	add	r3, pc, #492	; (adr r3, 801c920 <__ieee754_pow+0x6d0>)
 801c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c738:	4604      	mov	r4, r0
 801c73a:	460d      	mov	r5, r1
 801c73c:	f7e3 ff5c 	bl	80005f8 <__aeabi_dmul>
 801c740:	a379      	add	r3, pc, #484	; (adr r3, 801c928 <__ieee754_pow+0x6d8>)
 801c742:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c746:	f7e3 fda1 	bl	800028c <__adddf3>
 801c74a:	4622      	mov	r2, r4
 801c74c:	462b      	mov	r3, r5
 801c74e:	f7e3 ff53 	bl	80005f8 <__aeabi_dmul>
 801c752:	a377      	add	r3, pc, #476	; (adr r3, 801c930 <__ieee754_pow+0x6e0>)
 801c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c758:	f7e3 fd98 	bl	800028c <__adddf3>
 801c75c:	4622      	mov	r2, r4
 801c75e:	462b      	mov	r3, r5
 801c760:	f7e3 ff4a 	bl	80005f8 <__aeabi_dmul>
 801c764:	a374      	add	r3, pc, #464	; (adr r3, 801c938 <__ieee754_pow+0x6e8>)
 801c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c76a:	f7e3 fd8f 	bl	800028c <__adddf3>
 801c76e:	4622      	mov	r2, r4
 801c770:	462b      	mov	r3, r5
 801c772:	f7e3 ff41 	bl	80005f8 <__aeabi_dmul>
 801c776:	a372      	add	r3, pc, #456	; (adr r3, 801c940 <__ieee754_pow+0x6f0>)
 801c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c77c:	f7e3 fd86 	bl	800028c <__adddf3>
 801c780:	4622      	mov	r2, r4
 801c782:	462b      	mov	r3, r5
 801c784:	f7e3 ff38 	bl	80005f8 <__aeabi_dmul>
 801c788:	a36f      	add	r3, pc, #444	; (adr r3, 801c948 <__ieee754_pow+0x6f8>)
 801c78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c78e:	f7e3 fd7d 	bl	800028c <__adddf3>
 801c792:	4622      	mov	r2, r4
 801c794:	4606      	mov	r6, r0
 801c796:	460f      	mov	r7, r1
 801c798:	462b      	mov	r3, r5
 801c79a:	4620      	mov	r0, r4
 801c79c:	4629      	mov	r1, r5
 801c79e:	f7e3 ff2b 	bl	80005f8 <__aeabi_dmul>
 801c7a2:	4602      	mov	r2, r0
 801c7a4:	460b      	mov	r3, r1
 801c7a6:	4630      	mov	r0, r6
 801c7a8:	4639      	mov	r1, r7
 801c7aa:	f7e3 ff25 	bl	80005f8 <__aeabi_dmul>
 801c7ae:	4642      	mov	r2, r8
 801c7b0:	4604      	mov	r4, r0
 801c7b2:	460d      	mov	r5, r1
 801c7b4:	464b      	mov	r3, r9
 801c7b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c7ba:	f7e3 fd67 	bl	800028c <__adddf3>
 801c7be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c7c2:	f7e3 ff19 	bl	80005f8 <__aeabi_dmul>
 801c7c6:	4622      	mov	r2, r4
 801c7c8:	462b      	mov	r3, r5
 801c7ca:	f7e3 fd5f 	bl	800028c <__adddf3>
 801c7ce:	4642      	mov	r2, r8
 801c7d0:	4606      	mov	r6, r0
 801c7d2:	460f      	mov	r7, r1
 801c7d4:	464b      	mov	r3, r9
 801c7d6:	4640      	mov	r0, r8
 801c7d8:	4649      	mov	r1, r9
 801c7da:	f7e3 ff0d 	bl	80005f8 <__aeabi_dmul>
 801c7de:	2200      	movs	r2, #0
 801c7e0:	4b68      	ldr	r3, [pc, #416]	; (801c984 <__ieee754_pow+0x734>)
 801c7e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c7e6:	f7e3 fd51 	bl	800028c <__adddf3>
 801c7ea:	4632      	mov	r2, r6
 801c7ec:	463b      	mov	r3, r7
 801c7ee:	f7e3 fd4d 	bl	800028c <__adddf3>
 801c7f2:	9802      	ldr	r0, [sp, #8]
 801c7f4:	460d      	mov	r5, r1
 801c7f6:	4604      	mov	r4, r0
 801c7f8:	4602      	mov	r2, r0
 801c7fa:	460b      	mov	r3, r1
 801c7fc:	4640      	mov	r0, r8
 801c7fe:	4649      	mov	r1, r9
 801c800:	f7e3 fefa 	bl	80005f8 <__aeabi_dmul>
 801c804:	2200      	movs	r2, #0
 801c806:	4680      	mov	r8, r0
 801c808:	4689      	mov	r9, r1
 801c80a:	4b5e      	ldr	r3, [pc, #376]	; (801c984 <__ieee754_pow+0x734>)
 801c80c:	4620      	mov	r0, r4
 801c80e:	4629      	mov	r1, r5
 801c810:	f7e3 fd3a 	bl	8000288 <__aeabi_dsub>
 801c814:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c818:	f7e3 fd36 	bl	8000288 <__aeabi_dsub>
 801c81c:	4602      	mov	r2, r0
 801c81e:	460b      	mov	r3, r1
 801c820:	4630      	mov	r0, r6
 801c822:	4639      	mov	r1, r7
 801c824:	f7e3 fd30 	bl	8000288 <__aeabi_dsub>
 801c828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c82c:	f7e3 fee4 	bl	80005f8 <__aeabi_dmul>
 801c830:	4622      	mov	r2, r4
 801c832:	4606      	mov	r6, r0
 801c834:	460f      	mov	r7, r1
 801c836:	462b      	mov	r3, r5
 801c838:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c83c:	f7e3 fedc 	bl	80005f8 <__aeabi_dmul>
 801c840:	4602      	mov	r2, r0
 801c842:	460b      	mov	r3, r1
 801c844:	4630      	mov	r0, r6
 801c846:	4639      	mov	r1, r7
 801c848:	f7e3 fd20 	bl	800028c <__adddf3>
 801c84c:	4606      	mov	r6, r0
 801c84e:	460f      	mov	r7, r1
 801c850:	4602      	mov	r2, r0
 801c852:	460b      	mov	r3, r1
 801c854:	4640      	mov	r0, r8
 801c856:	4649      	mov	r1, r9
 801c858:	f7e3 fd18 	bl	800028c <__adddf3>
 801c85c:	9802      	ldr	r0, [sp, #8]
 801c85e:	a33c      	add	r3, pc, #240	; (adr r3, 801c950 <__ieee754_pow+0x700>)
 801c860:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c864:	4604      	mov	r4, r0
 801c866:	460d      	mov	r5, r1
 801c868:	f7e3 fec6 	bl	80005f8 <__aeabi_dmul>
 801c86c:	4642      	mov	r2, r8
 801c86e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c872:	464b      	mov	r3, r9
 801c874:	4620      	mov	r0, r4
 801c876:	4629      	mov	r1, r5
 801c878:	f7e3 fd06 	bl	8000288 <__aeabi_dsub>
 801c87c:	4602      	mov	r2, r0
 801c87e:	460b      	mov	r3, r1
 801c880:	4630      	mov	r0, r6
 801c882:	4639      	mov	r1, r7
 801c884:	f7e3 fd00 	bl	8000288 <__aeabi_dsub>
 801c888:	a333      	add	r3, pc, #204	; (adr r3, 801c958 <__ieee754_pow+0x708>)
 801c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c88e:	f7e3 feb3 	bl	80005f8 <__aeabi_dmul>
 801c892:	a333      	add	r3, pc, #204	; (adr r3, 801c960 <__ieee754_pow+0x710>)
 801c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c898:	4606      	mov	r6, r0
 801c89a:	460f      	mov	r7, r1
 801c89c:	4620      	mov	r0, r4
 801c89e:	4629      	mov	r1, r5
 801c8a0:	f7e3 feaa 	bl	80005f8 <__aeabi_dmul>
 801c8a4:	4602      	mov	r2, r0
 801c8a6:	460b      	mov	r3, r1
 801c8a8:	4630      	mov	r0, r6
 801c8aa:	4639      	mov	r1, r7
 801c8ac:	f7e3 fcee 	bl	800028c <__adddf3>
 801c8b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c8b2:	4b35      	ldr	r3, [pc, #212]	; (801c988 <__ieee754_pow+0x738>)
 801c8b4:	4413      	add	r3, r2
 801c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ba:	f7e3 fce7 	bl	800028c <__adddf3>
 801c8be:	4604      	mov	r4, r0
 801c8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c8c2:	460d      	mov	r5, r1
 801c8c4:	f7e3 fe2e 	bl	8000524 <__aeabi_i2d>
 801c8c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c8ca:	4b30      	ldr	r3, [pc, #192]	; (801c98c <__ieee754_pow+0x73c>)
 801c8cc:	4413      	add	r3, r2
 801c8ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c8d2:	4606      	mov	r6, r0
 801c8d4:	460f      	mov	r7, r1
 801c8d6:	4622      	mov	r2, r4
 801c8d8:	462b      	mov	r3, r5
 801c8da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c8de:	f7e3 fcd5 	bl	800028c <__adddf3>
 801c8e2:	4642      	mov	r2, r8
 801c8e4:	464b      	mov	r3, r9
 801c8e6:	f7e3 fcd1 	bl	800028c <__adddf3>
 801c8ea:	4632      	mov	r2, r6
 801c8ec:	463b      	mov	r3, r7
 801c8ee:	f7e3 fccd 	bl	800028c <__adddf3>
 801c8f2:	9802      	ldr	r0, [sp, #8]
 801c8f4:	4632      	mov	r2, r6
 801c8f6:	463b      	mov	r3, r7
 801c8f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c8fc:	f7e3 fcc4 	bl	8000288 <__aeabi_dsub>
 801c900:	4642      	mov	r2, r8
 801c902:	464b      	mov	r3, r9
 801c904:	f7e3 fcc0 	bl	8000288 <__aeabi_dsub>
 801c908:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c90c:	e607      	b.n	801c51e <__ieee754_pow+0x2ce>
 801c90e:	f04f 0a01 	mov.w	sl, #1
 801c912:	e6a5      	b.n	801c660 <__ieee754_pow+0x410>
 801c914:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801c968 <__ieee754_pow+0x718>
 801c918:	e613      	b.n	801c542 <__ieee754_pow+0x2f2>
 801c91a:	bf00      	nop
 801c91c:	f3af 8000 	nop.w
 801c920:	4a454eef 	.word	0x4a454eef
 801c924:	3fca7e28 	.word	0x3fca7e28
 801c928:	93c9db65 	.word	0x93c9db65
 801c92c:	3fcd864a 	.word	0x3fcd864a
 801c930:	a91d4101 	.word	0xa91d4101
 801c934:	3fd17460 	.word	0x3fd17460
 801c938:	518f264d 	.word	0x518f264d
 801c93c:	3fd55555 	.word	0x3fd55555
 801c940:	db6fabff 	.word	0xdb6fabff
 801c944:	3fdb6db6 	.word	0x3fdb6db6
 801c948:	33333303 	.word	0x33333303
 801c94c:	3fe33333 	.word	0x3fe33333
 801c950:	e0000000 	.word	0xe0000000
 801c954:	3feec709 	.word	0x3feec709
 801c958:	dc3a03fd 	.word	0xdc3a03fd
 801c95c:	3feec709 	.word	0x3feec709
 801c960:	145b01f5 	.word	0x145b01f5
 801c964:	be3e2fe0 	.word	0xbe3e2fe0
 801c968:	00000000 	.word	0x00000000
 801c96c:	3ff00000 	.word	0x3ff00000
 801c970:	43400000 	.word	0x43400000
 801c974:	0003988e 	.word	0x0003988e
 801c978:	000bb679 	.word	0x000bb679
 801c97c:	08021360 	.word	0x08021360
 801c980:	3ff00000 	.word	0x3ff00000
 801c984:	40080000 	.word	0x40080000
 801c988:	08021380 	.word	0x08021380
 801c98c:	08021370 	.word	0x08021370
 801c990:	a3b4      	add	r3, pc, #720	; (adr r3, 801cc64 <__ieee754_pow+0xa14>)
 801c992:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c996:	4640      	mov	r0, r8
 801c998:	4649      	mov	r1, r9
 801c99a:	f7e3 fc77 	bl	800028c <__adddf3>
 801c99e:	4622      	mov	r2, r4
 801c9a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c9a4:	462b      	mov	r3, r5
 801c9a6:	4630      	mov	r0, r6
 801c9a8:	4639      	mov	r1, r7
 801c9aa:	f7e3 fc6d 	bl	8000288 <__aeabi_dsub>
 801c9ae:	4602      	mov	r2, r0
 801c9b0:	460b      	mov	r3, r1
 801c9b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c9b6:	f7e4 f8af 	bl	8000b18 <__aeabi_dcmpgt>
 801c9ba:	2800      	cmp	r0, #0
 801c9bc:	f47f adfe 	bne.w	801c5bc <__ieee754_pow+0x36c>
 801c9c0:	4aa3      	ldr	r2, [pc, #652]	; (801cc50 <__ieee754_pow+0xa00>)
 801c9c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c9c6:	4293      	cmp	r3, r2
 801c9c8:	f340 810a 	ble.w	801cbe0 <__ieee754_pow+0x990>
 801c9cc:	151b      	asrs	r3, r3, #20
 801c9ce:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801c9d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c9d6:	fa4a f303 	asr.w	r3, sl, r3
 801c9da:	445b      	add	r3, fp
 801c9dc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801c9e0:	4e9c      	ldr	r6, [pc, #624]	; (801cc54 <__ieee754_pow+0xa04>)
 801c9e2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801c9e6:	4116      	asrs	r6, r2
 801c9e8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801c9ec:	2000      	movs	r0, #0
 801c9ee:	ea23 0106 	bic.w	r1, r3, r6
 801c9f2:	f1c2 0214 	rsb	r2, r2, #20
 801c9f6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c9fa:	fa4a fa02 	asr.w	sl, sl, r2
 801c9fe:	f1bb 0f00 	cmp.w	fp, #0
 801ca02:	4602      	mov	r2, r0
 801ca04:	460b      	mov	r3, r1
 801ca06:	4620      	mov	r0, r4
 801ca08:	4629      	mov	r1, r5
 801ca0a:	bfb8      	it	lt
 801ca0c:	f1ca 0a00 	rsblt	sl, sl, #0
 801ca10:	f7e3 fc3a 	bl	8000288 <__aeabi_dsub>
 801ca14:	e9cd 0100 	strd	r0, r1, [sp]
 801ca18:	4642      	mov	r2, r8
 801ca1a:	464b      	mov	r3, r9
 801ca1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ca20:	f7e3 fc34 	bl	800028c <__adddf3>
 801ca24:	2000      	movs	r0, #0
 801ca26:	a378      	add	r3, pc, #480	; (adr r3, 801cc08 <__ieee754_pow+0x9b8>)
 801ca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca2c:	4604      	mov	r4, r0
 801ca2e:	460d      	mov	r5, r1
 801ca30:	f7e3 fde2 	bl	80005f8 <__aeabi_dmul>
 801ca34:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ca38:	4606      	mov	r6, r0
 801ca3a:	460f      	mov	r7, r1
 801ca3c:	4620      	mov	r0, r4
 801ca3e:	4629      	mov	r1, r5
 801ca40:	f7e3 fc22 	bl	8000288 <__aeabi_dsub>
 801ca44:	4602      	mov	r2, r0
 801ca46:	460b      	mov	r3, r1
 801ca48:	4640      	mov	r0, r8
 801ca4a:	4649      	mov	r1, r9
 801ca4c:	f7e3 fc1c 	bl	8000288 <__aeabi_dsub>
 801ca50:	a36f      	add	r3, pc, #444	; (adr r3, 801cc10 <__ieee754_pow+0x9c0>)
 801ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca56:	f7e3 fdcf 	bl	80005f8 <__aeabi_dmul>
 801ca5a:	a36f      	add	r3, pc, #444	; (adr r3, 801cc18 <__ieee754_pow+0x9c8>)
 801ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca60:	4680      	mov	r8, r0
 801ca62:	4689      	mov	r9, r1
 801ca64:	4620      	mov	r0, r4
 801ca66:	4629      	mov	r1, r5
 801ca68:	f7e3 fdc6 	bl	80005f8 <__aeabi_dmul>
 801ca6c:	4602      	mov	r2, r0
 801ca6e:	460b      	mov	r3, r1
 801ca70:	4640      	mov	r0, r8
 801ca72:	4649      	mov	r1, r9
 801ca74:	f7e3 fc0a 	bl	800028c <__adddf3>
 801ca78:	4604      	mov	r4, r0
 801ca7a:	460d      	mov	r5, r1
 801ca7c:	4602      	mov	r2, r0
 801ca7e:	460b      	mov	r3, r1
 801ca80:	4630      	mov	r0, r6
 801ca82:	4639      	mov	r1, r7
 801ca84:	f7e3 fc02 	bl	800028c <__adddf3>
 801ca88:	4632      	mov	r2, r6
 801ca8a:	463b      	mov	r3, r7
 801ca8c:	4680      	mov	r8, r0
 801ca8e:	4689      	mov	r9, r1
 801ca90:	f7e3 fbfa 	bl	8000288 <__aeabi_dsub>
 801ca94:	4602      	mov	r2, r0
 801ca96:	460b      	mov	r3, r1
 801ca98:	4620      	mov	r0, r4
 801ca9a:	4629      	mov	r1, r5
 801ca9c:	f7e3 fbf4 	bl	8000288 <__aeabi_dsub>
 801caa0:	4642      	mov	r2, r8
 801caa2:	4606      	mov	r6, r0
 801caa4:	460f      	mov	r7, r1
 801caa6:	464b      	mov	r3, r9
 801caa8:	4640      	mov	r0, r8
 801caaa:	4649      	mov	r1, r9
 801caac:	f7e3 fda4 	bl	80005f8 <__aeabi_dmul>
 801cab0:	a35b      	add	r3, pc, #364	; (adr r3, 801cc20 <__ieee754_pow+0x9d0>)
 801cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cab6:	4604      	mov	r4, r0
 801cab8:	460d      	mov	r5, r1
 801caba:	f7e3 fd9d 	bl	80005f8 <__aeabi_dmul>
 801cabe:	a35a      	add	r3, pc, #360	; (adr r3, 801cc28 <__ieee754_pow+0x9d8>)
 801cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cac4:	f7e3 fbe0 	bl	8000288 <__aeabi_dsub>
 801cac8:	4622      	mov	r2, r4
 801caca:	462b      	mov	r3, r5
 801cacc:	f7e3 fd94 	bl	80005f8 <__aeabi_dmul>
 801cad0:	a357      	add	r3, pc, #348	; (adr r3, 801cc30 <__ieee754_pow+0x9e0>)
 801cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad6:	f7e3 fbd9 	bl	800028c <__adddf3>
 801cada:	4622      	mov	r2, r4
 801cadc:	462b      	mov	r3, r5
 801cade:	f7e3 fd8b 	bl	80005f8 <__aeabi_dmul>
 801cae2:	a355      	add	r3, pc, #340	; (adr r3, 801cc38 <__ieee754_pow+0x9e8>)
 801cae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cae8:	f7e3 fbce 	bl	8000288 <__aeabi_dsub>
 801caec:	4622      	mov	r2, r4
 801caee:	462b      	mov	r3, r5
 801caf0:	f7e3 fd82 	bl	80005f8 <__aeabi_dmul>
 801caf4:	a352      	add	r3, pc, #328	; (adr r3, 801cc40 <__ieee754_pow+0x9f0>)
 801caf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cafa:	f7e3 fbc7 	bl	800028c <__adddf3>
 801cafe:	4622      	mov	r2, r4
 801cb00:	462b      	mov	r3, r5
 801cb02:	f7e3 fd79 	bl	80005f8 <__aeabi_dmul>
 801cb06:	4602      	mov	r2, r0
 801cb08:	460b      	mov	r3, r1
 801cb0a:	4640      	mov	r0, r8
 801cb0c:	4649      	mov	r1, r9
 801cb0e:	f7e3 fbbb 	bl	8000288 <__aeabi_dsub>
 801cb12:	4604      	mov	r4, r0
 801cb14:	460d      	mov	r5, r1
 801cb16:	4602      	mov	r2, r0
 801cb18:	460b      	mov	r3, r1
 801cb1a:	4640      	mov	r0, r8
 801cb1c:	4649      	mov	r1, r9
 801cb1e:	f7e3 fd6b 	bl	80005f8 <__aeabi_dmul>
 801cb22:	2200      	movs	r2, #0
 801cb24:	e9cd 0100 	strd	r0, r1, [sp]
 801cb28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cb2c:	4620      	mov	r0, r4
 801cb2e:	4629      	mov	r1, r5
 801cb30:	f7e3 fbaa 	bl	8000288 <__aeabi_dsub>
 801cb34:	4602      	mov	r2, r0
 801cb36:	460b      	mov	r3, r1
 801cb38:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cb3c:	f7e3 fe86 	bl	800084c <__aeabi_ddiv>
 801cb40:	4632      	mov	r2, r6
 801cb42:	4604      	mov	r4, r0
 801cb44:	460d      	mov	r5, r1
 801cb46:	463b      	mov	r3, r7
 801cb48:	4640      	mov	r0, r8
 801cb4a:	4649      	mov	r1, r9
 801cb4c:	f7e3 fd54 	bl	80005f8 <__aeabi_dmul>
 801cb50:	4632      	mov	r2, r6
 801cb52:	463b      	mov	r3, r7
 801cb54:	f7e3 fb9a 	bl	800028c <__adddf3>
 801cb58:	4602      	mov	r2, r0
 801cb5a:	460b      	mov	r3, r1
 801cb5c:	4620      	mov	r0, r4
 801cb5e:	4629      	mov	r1, r5
 801cb60:	f7e3 fb92 	bl	8000288 <__aeabi_dsub>
 801cb64:	4642      	mov	r2, r8
 801cb66:	464b      	mov	r3, r9
 801cb68:	f7e3 fb8e 	bl	8000288 <__aeabi_dsub>
 801cb6c:	4602      	mov	r2, r0
 801cb6e:	460b      	mov	r3, r1
 801cb70:	2000      	movs	r0, #0
 801cb72:	4939      	ldr	r1, [pc, #228]	; (801cc58 <__ieee754_pow+0xa08>)
 801cb74:	f7e3 fb88 	bl	8000288 <__aeabi_dsub>
 801cb78:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801cb7c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801cb80:	4602      	mov	r2, r0
 801cb82:	460b      	mov	r3, r1
 801cb84:	da2f      	bge.n	801cbe6 <__ieee754_pow+0x996>
 801cb86:	4650      	mov	r0, sl
 801cb88:	ec43 2b10 	vmov	d0, r2, r3
 801cb8c:	f000 f9b4 	bl	801cef8 <scalbn>
 801cb90:	ec51 0b10 	vmov	r0, r1, d0
 801cb94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cb98:	f7ff bbf1 	b.w	801c37e <__ieee754_pow+0x12e>
 801cb9c:	4b2f      	ldr	r3, [pc, #188]	; (801cc5c <__ieee754_pow+0xa0c>)
 801cb9e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801cba2:	429e      	cmp	r6, r3
 801cba4:	f77f af0c 	ble.w	801c9c0 <__ieee754_pow+0x770>
 801cba8:	4b2d      	ldr	r3, [pc, #180]	; (801cc60 <__ieee754_pow+0xa10>)
 801cbaa:	440b      	add	r3, r1
 801cbac:	4303      	orrs	r3, r0
 801cbae:	d00b      	beq.n	801cbc8 <__ieee754_pow+0x978>
 801cbb0:	a325      	add	r3, pc, #148	; (adr r3, 801cc48 <__ieee754_pow+0x9f8>)
 801cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cbba:	f7e3 fd1d 	bl	80005f8 <__aeabi_dmul>
 801cbbe:	a322      	add	r3, pc, #136	; (adr r3, 801cc48 <__ieee754_pow+0x9f8>)
 801cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbc4:	f7ff bbdb 	b.w	801c37e <__ieee754_pow+0x12e>
 801cbc8:	4622      	mov	r2, r4
 801cbca:	462b      	mov	r3, r5
 801cbcc:	f7e3 fb5c 	bl	8000288 <__aeabi_dsub>
 801cbd0:	4642      	mov	r2, r8
 801cbd2:	464b      	mov	r3, r9
 801cbd4:	f7e3 ff96 	bl	8000b04 <__aeabi_dcmpge>
 801cbd8:	2800      	cmp	r0, #0
 801cbda:	f43f aef1 	beq.w	801c9c0 <__ieee754_pow+0x770>
 801cbde:	e7e7      	b.n	801cbb0 <__ieee754_pow+0x960>
 801cbe0:	f04f 0a00 	mov.w	sl, #0
 801cbe4:	e718      	b.n	801ca18 <__ieee754_pow+0x7c8>
 801cbe6:	4621      	mov	r1, r4
 801cbe8:	e7d4      	b.n	801cb94 <__ieee754_pow+0x944>
 801cbea:	2000      	movs	r0, #0
 801cbec:	491a      	ldr	r1, [pc, #104]	; (801cc58 <__ieee754_pow+0xa08>)
 801cbee:	f7ff bb8f 	b.w	801c310 <__ieee754_pow+0xc0>
 801cbf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cbf6:	f7ff bb8b 	b.w	801c310 <__ieee754_pow+0xc0>
 801cbfa:	4630      	mov	r0, r6
 801cbfc:	4639      	mov	r1, r7
 801cbfe:	f7ff bb87 	b.w	801c310 <__ieee754_pow+0xc0>
 801cc02:	4693      	mov	fp, r2
 801cc04:	f7ff bb98 	b.w	801c338 <__ieee754_pow+0xe8>
 801cc08:	00000000 	.word	0x00000000
 801cc0c:	3fe62e43 	.word	0x3fe62e43
 801cc10:	fefa39ef 	.word	0xfefa39ef
 801cc14:	3fe62e42 	.word	0x3fe62e42
 801cc18:	0ca86c39 	.word	0x0ca86c39
 801cc1c:	be205c61 	.word	0xbe205c61
 801cc20:	72bea4d0 	.word	0x72bea4d0
 801cc24:	3e663769 	.word	0x3e663769
 801cc28:	c5d26bf1 	.word	0xc5d26bf1
 801cc2c:	3ebbbd41 	.word	0x3ebbbd41
 801cc30:	af25de2c 	.word	0xaf25de2c
 801cc34:	3f11566a 	.word	0x3f11566a
 801cc38:	16bebd93 	.word	0x16bebd93
 801cc3c:	3f66c16c 	.word	0x3f66c16c
 801cc40:	5555553e 	.word	0x5555553e
 801cc44:	3fc55555 	.word	0x3fc55555
 801cc48:	c2f8f359 	.word	0xc2f8f359
 801cc4c:	01a56e1f 	.word	0x01a56e1f
 801cc50:	3fe00000 	.word	0x3fe00000
 801cc54:	000fffff 	.word	0x000fffff
 801cc58:	3ff00000 	.word	0x3ff00000
 801cc5c:	4090cbff 	.word	0x4090cbff
 801cc60:	3f6f3400 	.word	0x3f6f3400
 801cc64:	652b82fe 	.word	0x652b82fe
 801cc68:	3c971547 	.word	0x3c971547

0801cc6c <__ieee754_sqrt>:
 801cc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc70:	4955      	ldr	r1, [pc, #340]	; (801cdc8 <__ieee754_sqrt+0x15c>)
 801cc72:	ec55 4b10 	vmov	r4, r5, d0
 801cc76:	43a9      	bics	r1, r5
 801cc78:	462b      	mov	r3, r5
 801cc7a:	462a      	mov	r2, r5
 801cc7c:	d112      	bne.n	801cca4 <__ieee754_sqrt+0x38>
 801cc7e:	ee10 2a10 	vmov	r2, s0
 801cc82:	ee10 0a10 	vmov	r0, s0
 801cc86:	4629      	mov	r1, r5
 801cc88:	f7e3 fcb6 	bl	80005f8 <__aeabi_dmul>
 801cc8c:	4602      	mov	r2, r0
 801cc8e:	460b      	mov	r3, r1
 801cc90:	4620      	mov	r0, r4
 801cc92:	4629      	mov	r1, r5
 801cc94:	f7e3 fafa 	bl	800028c <__adddf3>
 801cc98:	4604      	mov	r4, r0
 801cc9a:	460d      	mov	r5, r1
 801cc9c:	ec45 4b10 	vmov	d0, r4, r5
 801cca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cca4:	2d00      	cmp	r5, #0
 801cca6:	ee10 0a10 	vmov	r0, s0
 801ccaa:	4621      	mov	r1, r4
 801ccac:	dc0f      	bgt.n	801ccce <__ieee754_sqrt+0x62>
 801ccae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ccb2:	4330      	orrs	r0, r6
 801ccb4:	d0f2      	beq.n	801cc9c <__ieee754_sqrt+0x30>
 801ccb6:	b155      	cbz	r5, 801ccce <__ieee754_sqrt+0x62>
 801ccb8:	ee10 2a10 	vmov	r2, s0
 801ccbc:	4620      	mov	r0, r4
 801ccbe:	4629      	mov	r1, r5
 801ccc0:	f7e3 fae2 	bl	8000288 <__aeabi_dsub>
 801ccc4:	4602      	mov	r2, r0
 801ccc6:	460b      	mov	r3, r1
 801ccc8:	f7e3 fdc0 	bl	800084c <__aeabi_ddiv>
 801cccc:	e7e4      	b.n	801cc98 <__ieee754_sqrt+0x2c>
 801ccce:	151b      	asrs	r3, r3, #20
 801ccd0:	d073      	beq.n	801cdba <__ieee754_sqrt+0x14e>
 801ccd2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ccd6:	07dd      	lsls	r5, r3, #31
 801ccd8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ccdc:	bf48      	it	mi
 801ccde:	0fc8      	lsrmi	r0, r1, #31
 801cce0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801cce4:	bf44      	itt	mi
 801cce6:	0049      	lslmi	r1, r1, #1
 801cce8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801ccec:	2500      	movs	r5, #0
 801ccee:	1058      	asrs	r0, r3, #1
 801ccf0:	0fcb      	lsrs	r3, r1, #31
 801ccf2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801ccf6:	0049      	lsls	r1, r1, #1
 801ccf8:	2316      	movs	r3, #22
 801ccfa:	462c      	mov	r4, r5
 801ccfc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801cd00:	19a7      	adds	r7, r4, r6
 801cd02:	4297      	cmp	r7, r2
 801cd04:	bfde      	ittt	le
 801cd06:	19bc      	addle	r4, r7, r6
 801cd08:	1bd2      	suble	r2, r2, r7
 801cd0a:	19ad      	addle	r5, r5, r6
 801cd0c:	0fcf      	lsrs	r7, r1, #31
 801cd0e:	3b01      	subs	r3, #1
 801cd10:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801cd14:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801cd18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801cd1c:	d1f0      	bne.n	801cd00 <__ieee754_sqrt+0x94>
 801cd1e:	f04f 0c20 	mov.w	ip, #32
 801cd22:	469e      	mov	lr, r3
 801cd24:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801cd28:	42a2      	cmp	r2, r4
 801cd2a:	eb06 070e 	add.w	r7, r6, lr
 801cd2e:	dc02      	bgt.n	801cd36 <__ieee754_sqrt+0xca>
 801cd30:	d112      	bne.n	801cd58 <__ieee754_sqrt+0xec>
 801cd32:	428f      	cmp	r7, r1
 801cd34:	d810      	bhi.n	801cd58 <__ieee754_sqrt+0xec>
 801cd36:	2f00      	cmp	r7, #0
 801cd38:	eb07 0e06 	add.w	lr, r7, r6
 801cd3c:	da42      	bge.n	801cdc4 <__ieee754_sqrt+0x158>
 801cd3e:	f1be 0f00 	cmp.w	lr, #0
 801cd42:	db3f      	blt.n	801cdc4 <__ieee754_sqrt+0x158>
 801cd44:	f104 0801 	add.w	r8, r4, #1
 801cd48:	1b12      	subs	r2, r2, r4
 801cd4a:	428f      	cmp	r7, r1
 801cd4c:	bf88      	it	hi
 801cd4e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cd52:	1bc9      	subs	r1, r1, r7
 801cd54:	4433      	add	r3, r6
 801cd56:	4644      	mov	r4, r8
 801cd58:	0052      	lsls	r2, r2, #1
 801cd5a:	f1bc 0c01 	subs.w	ip, ip, #1
 801cd5e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801cd62:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801cd66:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801cd6a:	d1dd      	bne.n	801cd28 <__ieee754_sqrt+0xbc>
 801cd6c:	430a      	orrs	r2, r1
 801cd6e:	d006      	beq.n	801cd7e <__ieee754_sqrt+0x112>
 801cd70:	1c5c      	adds	r4, r3, #1
 801cd72:	bf13      	iteet	ne
 801cd74:	3301      	addne	r3, #1
 801cd76:	3501      	addeq	r5, #1
 801cd78:	4663      	moveq	r3, ip
 801cd7a:	f023 0301 	bicne.w	r3, r3, #1
 801cd7e:	106a      	asrs	r2, r5, #1
 801cd80:	085b      	lsrs	r3, r3, #1
 801cd82:	07e9      	lsls	r1, r5, #31
 801cd84:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801cd88:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801cd8c:	bf48      	it	mi
 801cd8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801cd92:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801cd96:	461c      	mov	r4, r3
 801cd98:	e780      	b.n	801cc9c <__ieee754_sqrt+0x30>
 801cd9a:	0aca      	lsrs	r2, r1, #11
 801cd9c:	3815      	subs	r0, #21
 801cd9e:	0549      	lsls	r1, r1, #21
 801cda0:	2a00      	cmp	r2, #0
 801cda2:	d0fa      	beq.n	801cd9a <__ieee754_sqrt+0x12e>
 801cda4:	02d6      	lsls	r6, r2, #11
 801cda6:	d50a      	bpl.n	801cdbe <__ieee754_sqrt+0x152>
 801cda8:	f1c3 0420 	rsb	r4, r3, #32
 801cdac:	fa21 f404 	lsr.w	r4, r1, r4
 801cdb0:	1e5d      	subs	r5, r3, #1
 801cdb2:	4099      	lsls	r1, r3
 801cdb4:	4322      	orrs	r2, r4
 801cdb6:	1b43      	subs	r3, r0, r5
 801cdb8:	e78b      	b.n	801ccd2 <__ieee754_sqrt+0x66>
 801cdba:	4618      	mov	r0, r3
 801cdbc:	e7f0      	b.n	801cda0 <__ieee754_sqrt+0x134>
 801cdbe:	0052      	lsls	r2, r2, #1
 801cdc0:	3301      	adds	r3, #1
 801cdc2:	e7ef      	b.n	801cda4 <__ieee754_sqrt+0x138>
 801cdc4:	46a0      	mov	r8, r4
 801cdc6:	e7bf      	b.n	801cd48 <__ieee754_sqrt+0xdc>
 801cdc8:	7ff00000 	.word	0x7ff00000

0801cdcc <finite>:
 801cdcc:	ee10 3a90 	vmov	r3, s1
 801cdd0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801cdd4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801cdd8:	0fc0      	lsrs	r0, r0, #31
 801cdda:	4770      	bx	lr

0801cddc <matherr>:
 801cddc:	2000      	movs	r0, #0
 801cdde:	4770      	bx	lr

0801cde0 <nan>:
 801cde0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cde8 <nan+0x8>
 801cde4:	4770      	bx	lr
 801cde6:	bf00      	nop
 801cde8:	00000000 	.word	0x00000000
 801cdec:	7ff80000 	.word	0x7ff80000

0801cdf0 <rint>:
 801cdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cdf2:	ec51 0b10 	vmov	r0, r1, d0
 801cdf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801cdfa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801cdfe:	2e13      	cmp	r6, #19
 801ce00:	460b      	mov	r3, r1
 801ce02:	ee10 4a10 	vmov	r4, s0
 801ce06:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801ce0a:	dc56      	bgt.n	801ceba <rint+0xca>
 801ce0c:	2e00      	cmp	r6, #0
 801ce0e:	da2b      	bge.n	801ce68 <rint+0x78>
 801ce10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801ce14:	4302      	orrs	r2, r0
 801ce16:	d023      	beq.n	801ce60 <rint+0x70>
 801ce18:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801ce1c:	4302      	orrs	r2, r0
 801ce1e:	4254      	negs	r4, r2
 801ce20:	4314      	orrs	r4, r2
 801ce22:	0c4b      	lsrs	r3, r1, #17
 801ce24:	0b24      	lsrs	r4, r4, #12
 801ce26:	045b      	lsls	r3, r3, #17
 801ce28:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801ce2c:	ea44 0103 	orr.w	r1, r4, r3
 801ce30:	460b      	mov	r3, r1
 801ce32:	492f      	ldr	r1, [pc, #188]	; (801cef0 <rint+0x100>)
 801ce34:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801ce38:	e9d1 6700 	ldrd	r6, r7, [r1]
 801ce3c:	4602      	mov	r2, r0
 801ce3e:	4639      	mov	r1, r7
 801ce40:	4630      	mov	r0, r6
 801ce42:	f7e3 fa23 	bl	800028c <__adddf3>
 801ce46:	e9cd 0100 	strd	r0, r1, [sp]
 801ce4a:	463b      	mov	r3, r7
 801ce4c:	4632      	mov	r2, r6
 801ce4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ce52:	f7e3 fa19 	bl	8000288 <__aeabi_dsub>
 801ce56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ce5a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801ce5e:	4639      	mov	r1, r7
 801ce60:	ec41 0b10 	vmov	d0, r0, r1
 801ce64:	b003      	add	sp, #12
 801ce66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce68:	4a22      	ldr	r2, [pc, #136]	; (801cef4 <rint+0x104>)
 801ce6a:	4132      	asrs	r2, r6
 801ce6c:	ea01 0702 	and.w	r7, r1, r2
 801ce70:	4307      	orrs	r7, r0
 801ce72:	d0f5      	beq.n	801ce60 <rint+0x70>
 801ce74:	0852      	lsrs	r2, r2, #1
 801ce76:	4011      	ands	r1, r2
 801ce78:	430c      	orrs	r4, r1
 801ce7a:	d00b      	beq.n	801ce94 <rint+0xa4>
 801ce7c:	ea23 0202 	bic.w	r2, r3, r2
 801ce80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801ce84:	2e13      	cmp	r6, #19
 801ce86:	fa43 f306 	asr.w	r3, r3, r6
 801ce8a:	bf0c      	ite	eq
 801ce8c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801ce90:	2400      	movne	r4, #0
 801ce92:	4313      	orrs	r3, r2
 801ce94:	4916      	ldr	r1, [pc, #88]	; (801cef0 <rint+0x100>)
 801ce96:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801ce9a:	4622      	mov	r2, r4
 801ce9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801cea0:	4620      	mov	r0, r4
 801cea2:	4629      	mov	r1, r5
 801cea4:	f7e3 f9f2 	bl	800028c <__adddf3>
 801cea8:	e9cd 0100 	strd	r0, r1, [sp]
 801ceac:	4622      	mov	r2, r4
 801ceae:	462b      	mov	r3, r5
 801ceb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ceb4:	f7e3 f9e8 	bl	8000288 <__aeabi_dsub>
 801ceb8:	e7d2      	b.n	801ce60 <rint+0x70>
 801ceba:	2e33      	cmp	r6, #51	; 0x33
 801cebc:	dd07      	ble.n	801cece <rint+0xde>
 801cebe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801cec2:	d1cd      	bne.n	801ce60 <rint+0x70>
 801cec4:	ee10 2a10 	vmov	r2, s0
 801cec8:	f7e3 f9e0 	bl	800028c <__adddf3>
 801cecc:	e7c8      	b.n	801ce60 <rint+0x70>
 801cece:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801ced2:	f04f 32ff 	mov.w	r2, #4294967295
 801ced6:	40f2      	lsrs	r2, r6
 801ced8:	4210      	tst	r0, r2
 801ceda:	d0c1      	beq.n	801ce60 <rint+0x70>
 801cedc:	0852      	lsrs	r2, r2, #1
 801cede:	4210      	tst	r0, r2
 801cee0:	bf1f      	itttt	ne
 801cee2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801cee6:	ea20 0202 	bicne.w	r2, r0, r2
 801ceea:	4134      	asrne	r4, r6
 801ceec:	4314      	orrne	r4, r2
 801ceee:	e7d1      	b.n	801ce94 <rint+0xa4>
 801cef0:	08021390 	.word	0x08021390
 801cef4:	000fffff 	.word	0x000fffff

0801cef8 <scalbn>:
 801cef8:	b570      	push	{r4, r5, r6, lr}
 801cefa:	ec55 4b10 	vmov	r4, r5, d0
 801cefe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801cf02:	4606      	mov	r6, r0
 801cf04:	462b      	mov	r3, r5
 801cf06:	b9aa      	cbnz	r2, 801cf34 <scalbn+0x3c>
 801cf08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801cf0c:	4323      	orrs	r3, r4
 801cf0e:	d03b      	beq.n	801cf88 <scalbn+0x90>
 801cf10:	4b31      	ldr	r3, [pc, #196]	; (801cfd8 <scalbn+0xe0>)
 801cf12:	4629      	mov	r1, r5
 801cf14:	2200      	movs	r2, #0
 801cf16:	ee10 0a10 	vmov	r0, s0
 801cf1a:	f7e3 fb6d 	bl	80005f8 <__aeabi_dmul>
 801cf1e:	4b2f      	ldr	r3, [pc, #188]	; (801cfdc <scalbn+0xe4>)
 801cf20:	429e      	cmp	r6, r3
 801cf22:	4604      	mov	r4, r0
 801cf24:	460d      	mov	r5, r1
 801cf26:	da12      	bge.n	801cf4e <scalbn+0x56>
 801cf28:	a327      	add	r3, pc, #156	; (adr r3, 801cfc8 <scalbn+0xd0>)
 801cf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf2e:	f7e3 fb63 	bl	80005f8 <__aeabi_dmul>
 801cf32:	e009      	b.n	801cf48 <scalbn+0x50>
 801cf34:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801cf38:	428a      	cmp	r2, r1
 801cf3a:	d10c      	bne.n	801cf56 <scalbn+0x5e>
 801cf3c:	ee10 2a10 	vmov	r2, s0
 801cf40:	4620      	mov	r0, r4
 801cf42:	4629      	mov	r1, r5
 801cf44:	f7e3 f9a2 	bl	800028c <__adddf3>
 801cf48:	4604      	mov	r4, r0
 801cf4a:	460d      	mov	r5, r1
 801cf4c:	e01c      	b.n	801cf88 <scalbn+0x90>
 801cf4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801cf52:	460b      	mov	r3, r1
 801cf54:	3a36      	subs	r2, #54	; 0x36
 801cf56:	4432      	add	r2, r6
 801cf58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801cf5c:	428a      	cmp	r2, r1
 801cf5e:	dd0b      	ble.n	801cf78 <scalbn+0x80>
 801cf60:	ec45 4b11 	vmov	d1, r4, r5
 801cf64:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801cfd0 <scalbn+0xd8>
 801cf68:	f000 f83c 	bl	801cfe4 <copysign>
 801cf6c:	a318      	add	r3, pc, #96	; (adr r3, 801cfd0 <scalbn+0xd8>)
 801cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf72:	ec51 0b10 	vmov	r0, r1, d0
 801cf76:	e7da      	b.n	801cf2e <scalbn+0x36>
 801cf78:	2a00      	cmp	r2, #0
 801cf7a:	dd08      	ble.n	801cf8e <scalbn+0x96>
 801cf7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cf80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cf84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cf88:	ec45 4b10 	vmov	d0, r4, r5
 801cf8c:	bd70      	pop	{r4, r5, r6, pc}
 801cf8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801cf92:	da0d      	bge.n	801cfb0 <scalbn+0xb8>
 801cf94:	f24c 3350 	movw	r3, #50000	; 0xc350
 801cf98:	429e      	cmp	r6, r3
 801cf9a:	ec45 4b11 	vmov	d1, r4, r5
 801cf9e:	dce1      	bgt.n	801cf64 <scalbn+0x6c>
 801cfa0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801cfc8 <scalbn+0xd0>
 801cfa4:	f000 f81e 	bl	801cfe4 <copysign>
 801cfa8:	a307      	add	r3, pc, #28	; (adr r3, 801cfc8 <scalbn+0xd0>)
 801cfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfae:	e7e0      	b.n	801cf72 <scalbn+0x7a>
 801cfb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cfb4:	3236      	adds	r2, #54	; 0x36
 801cfb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cfba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cfbe:	4620      	mov	r0, r4
 801cfc0:	4629      	mov	r1, r5
 801cfc2:	2200      	movs	r2, #0
 801cfc4:	4b06      	ldr	r3, [pc, #24]	; (801cfe0 <scalbn+0xe8>)
 801cfc6:	e7b2      	b.n	801cf2e <scalbn+0x36>
 801cfc8:	c2f8f359 	.word	0xc2f8f359
 801cfcc:	01a56e1f 	.word	0x01a56e1f
 801cfd0:	8800759c 	.word	0x8800759c
 801cfd4:	7e37e43c 	.word	0x7e37e43c
 801cfd8:	43500000 	.word	0x43500000
 801cfdc:	ffff3cb0 	.word	0xffff3cb0
 801cfe0:	3c900000 	.word	0x3c900000

0801cfe4 <copysign>:
 801cfe4:	ec51 0b10 	vmov	r0, r1, d0
 801cfe8:	ee11 0a90 	vmov	r0, s3
 801cfec:	ee10 2a10 	vmov	r2, s0
 801cff0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801cff4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801cff8:	ea41 0300 	orr.w	r3, r1, r0
 801cffc:	ec43 2b10 	vmov	d0, r2, r3
 801d000:	4770      	bx	lr
	...

0801d004 <__errno>:
 801d004:	4b01      	ldr	r3, [pc, #4]	; (801d00c <__errno+0x8>)
 801d006:	6818      	ldr	r0, [r3, #0]
 801d008:	4770      	bx	lr
 801d00a:	bf00      	nop
 801d00c:	200000c0 	.word	0x200000c0

0801d010 <_init>:
 801d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d012:	bf00      	nop
 801d014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d016:	bc08      	pop	{r3}
 801d018:	469e      	mov	lr, r3
 801d01a:	4770      	bx	lr

0801d01c <_fini>:
 801d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d01e:	bf00      	nop
 801d020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d022:	bc08      	pop	{r3}
 801d024:	469e      	mov	lr, r3
 801d026:	4770      	bx	lr
